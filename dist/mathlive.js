(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.MathLive = {}));
}(this, (function (exports) { 'use strict';

  function isArray(x) {
      return Array.isArray(x);
  }

  var METRICS_MAP = {
      'AMS-Regular': {
          '65': [0, 0.68889, 0, 0],
          '66': [0, 0.68889, 0, 0],
          '67': [0, 0.68889, 0, 0],
          '68': [0, 0.68889, 0, 0],
          '69': [0, 0.68889, 0, 0],
          '70': [0, 0.68889, 0, 0],
          '71': [0, 0.68889, 0, 0],
          '72': [0, 0.68889, 0, 0],
          '73': [0, 0.68889, 0, 0],
          '74': [0.16667, 0.68889, 0, 0],
          '75': [0, 0.68889, 0, 0],
          '76': [0, 0.68889, 0, 0],
          '77': [0, 0.68889, 0, 0],
          '78': [0, 0.68889, 0, 0],
          '79': [0.16667, 0.68889, 0, 0],
          '80': [0, 0.68889, 0, 0],
          '81': [0.16667, 0.68889, 0, 0],
          '82': [0, 0.68889, 0, 0],
          '83': [0, 0.68889, 0, 0],
          '84': [0, 0.68889, 0, 0],
          '85': [0, 0.68889, 0, 0],
          '86': [0, 0.68889, 0, 0],
          '87': [0, 0.68889, 0, 0],
          '88': [0, 0.68889, 0, 0],
          '89': [0, 0.68889, 0, 0],
          '90': [0, 0.68889, 0, 0],
          '107': [0, 0.68889, 0, 0],
          '165': [0, 0.675, 0.025, 0],
          '174': [0.15559, 0.69224, 0, 0],
          '240': [0, 0.68889, 0, 0],
          '295': [0, 0.68889, 0, 0],
          '710': [0, 0.825, 0, 0],
          '732': [0, 0.9, 0, 0],
          '770': [0, 0.825, 0, 0],
          '771': [0, 0.9, 0, 0],
          '989': [0.08167, 0.58167, 0, 0],
          '1008': [0, 0.43056, 0.04028, 0],
          '8245': [0, 0.54986, 0, 0],
          '8463': [0, 0.68889, 0, 0],
          '8487': [0, 0.68889, 0, 0],
          '8498': [0, 0.68889, 0, 0],
          '8502': [0, 0.68889, 0, 0],
          '8503': [0, 0.68889, 0, 0],
          '8504': [0, 0.68889, 0, 0],
          '8513': [0, 0.68889, 0, 0],
          '8592': [-0.03598, 0.46402, 0, 0],
          '8594': [-0.03598, 0.46402, 0, 0],
          '8602': [-0.13313, 0.36687, 0, 0],
          '8603': [-0.13313, 0.36687, 0, 0],
          '8606': [0.01354, 0.52239, 0, 0],
          '8608': [0.01354, 0.52239, 0, 0],
          '8610': [0.01354, 0.52239, 0, 0],
          '8611': [0.01354, 0.52239, 0, 0],
          '8619': [0, 0.54986, 0, 0],
          '8620': [0, 0.54986, 0, 0],
          '8621': [-0.13313, 0.37788, 0, 0],
          '8622': [-0.13313, 0.36687, 0, 0],
          '8624': [0, 0.69224, 0, 0],
          '8625': [0, 0.69224, 0, 0],
          '8630': [0, 0.43056, 0, 0],
          '8631': [0, 0.43056, 0, 0],
          '8634': [0.08198, 0.58198, 0, 0],
          '8635': [0.08198, 0.58198, 0, 0],
          '8638': [0.19444, 0.69224, 0, 0],
          '8639': [0.19444, 0.69224, 0, 0],
          '8642': [0.19444, 0.69224, 0, 0],
          '8643': [0.19444, 0.69224, 0, 0],
          '8644': [0.1808, 0.675, 0, 0],
          '8646': [0.1808, 0.675, 0, 0],
          '8647': [0.1808, 0.675, 0, 0],
          '8648': [0.19444, 0.69224, 0, 0],
          '8649': [0.1808, 0.675, 0, 0],
          '8650': [0.19444, 0.69224, 0, 0],
          '8651': [0.01354, 0.52239, 0, 0],
          '8652': [0.01354, 0.52239, 0, 0],
          '8653': [-0.13313, 0.36687, 0, 0],
          '8654': [-0.13313, 0.36687, 0, 0],
          '8655': [-0.13313, 0.36687, 0, 0],
          '8666': [0.13667, 0.63667, 0, 0],
          '8667': [0.13667, 0.63667, 0, 0],
          '8669': [-0.13313, 0.37788, 0, 0],
          '8672': [-0.064, 0.437, 0, 0],
          '8674': [-0.064, 0.437, 0, 0],
          '8705': [0, 0.825, 0, 0],
          '8708': [0, 0.68889, 0, 0],
          '8709': [0.08167, 0.58167, 0, 0],
          '8717': [0, 0.43056, 0, 0],
          '8722': [-0.03598, 0.46402, 0, 0],
          '8724': [0.08198, 0.69224, 0, 0],
          '8726': [0.08167, 0.58167, 0, 0],
          '8733': [0, 0.69224, 0, 0],
          '8736': [0, 0.69224, 0, 0],
          '8737': [0, 0.69224, 0, 0],
          '8738': [0.03517, 0.52239, 0, 0],
          '8739': [0.08167, 0.58167, 0, 0],
          '8740': [0.25142, 0.74111, 0, 0],
          '8741': [0.08167, 0.58167, 0, 0],
          '8742': [0.25142, 0.74111, 0, 0],
          '8756': [0, 0.69224, 0, 0],
          '8757': [0, 0.69224, 0, 0],
          '8764': [-0.13313, 0.36687, 0, 0],
          '8765': [-0.13313, 0.37788, 0, 0],
          '8769': [-0.13313, 0.36687, 0, 0],
          '8770': [-0.03625, 0.46375, 0, 0],
          '8774': [0.30274, 0.79383, 0, 0],
          '8776': [-0.01688, 0.48312, 0, 0],
          '8778': [0.08167, 0.58167, 0, 0],
          '8782': [0.06062, 0.54986, 0, 0],
          '8783': [0.06062, 0.54986, 0, 0],
          '8785': [0.08198, 0.58198, 0, 0],
          '8786': [0.08198, 0.58198, 0, 0],
          '8787': [0.08198, 0.58198, 0, 0],
          '8790': [0, 0.69224, 0, 0],
          '8791': [0.22958, 0.72958, 0, 0],
          '8796': [0.08198, 0.91667, 0, 0],
          '8806': [0.25583, 0.75583, 0, 0],
          '8807': [0.25583, 0.75583, 0, 0],
          '8808': [0.25142, 0.75726, 0, 0],
          '8809': [0.25142, 0.75726, 0, 0],
          '8812': [0.25583, 0.75583, 0, 0],
          '8814': [0.20576, 0.70576, 0, 0],
          '8815': [0.20576, 0.70576, 0, 0],
          '8816': [0.30274, 0.79383, 0, 0],
          '8817': [0.30274, 0.79383, 0, 0],
          '8818': [0.22958, 0.72958, 0, 0],
          '8819': [0.22958, 0.72958, 0, 0],
          '8822': [0.1808, 0.675, 0, 0],
          '8823': [0.1808, 0.675, 0, 0],
          '8828': [0.13667, 0.63667, 0, 0],
          '8829': [0.13667, 0.63667, 0, 0],
          '8830': [0.22958, 0.72958, 0, 0],
          '8831': [0.22958, 0.72958, 0, 0],
          '8832': [0.20576, 0.70576, 0, 0],
          '8833': [0.20576, 0.70576, 0, 0],
          '8840': [0.30274, 0.79383, 0, 0],
          '8841': [0.30274, 0.79383, 0, 0],
          '8842': [0.13597, 0.63597, 0, 0],
          '8843': [0.13597, 0.63597, 0, 0],
          '8847': [0.03517, 0.54986, 0, 0],
          '8848': [0.03517, 0.54986, 0, 0],
          '8858': [0.08198, 0.58198, 0, 0],
          '8859': [0.08198, 0.58198, 0, 0],
          '8861': [0.08198, 0.58198, 0, 0],
          '8862': [0, 0.675, 0, 0],
          '8863': [0, 0.675, 0, 0],
          '8864': [0, 0.675, 0, 0],
          '8865': [0, 0.675, 0, 0],
          '8872': [0, 0.69224, 0, 0],
          '8873': [0, 0.69224, 0, 0],
          '8874': [0, 0.69224, 0, 0],
          '8876': [0, 0.68889, 0, 0],
          '8877': [0, 0.68889, 0, 0],
          '8878': [0, 0.68889, 0, 0],
          '8879': [0, 0.68889, 0, 0],
          '8882': [0.03517, 0.54986, 0, 0],
          '8883': [0.03517, 0.54986, 0, 0],
          '8884': [0.13667, 0.63667, 0, 0],
          '8885': [0.13667, 0.63667, 0, 0],
          '8888': [0, 0.54986, 0, 0],
          '8890': [0.19444, 0.43056, 0, 0],
          '8891': [0.19444, 0.69224, 0, 0],
          '8892': [0.19444, 0.69224, 0, 0],
          '8901': [0, 0.54986, 0, 0],
          '8903': [0.08167, 0.58167, 0, 0],
          '8905': [0.08167, 0.58167, 0, 0],
          '8906': [0.08167, 0.58167, 0, 0],
          '8907': [0, 0.69224, 0, 0],
          '8908': [0, 0.69224, 0, 0],
          '8909': [-0.03598, 0.46402, 0, 0],
          '8910': [0, 0.54986, 0, 0],
          '8911': [0, 0.54986, 0, 0],
          '8912': [0.03517, 0.54986, 0, 0],
          '8913': [0.03517, 0.54986, 0, 0],
          '8914': [0, 0.54986, 0, 0],
          '8915': [0, 0.54986, 0, 0],
          '8916': [0, 0.69224, 0, 0],
          '8918': [0.0391, 0.5391, 0, 0],
          '8919': [0.0391, 0.5391, 0, 0],
          '8920': [0.03517, 0.54986, 0, 0],
          '8921': [0.03517, 0.54986, 0, 0],
          '8922': [0.38569, 0.88569, 0, 0],
          '8923': [0.38569, 0.88569, 0, 0],
          '8926': [0.13667, 0.63667, 0, 0],
          '8927': [0.13667, 0.63667, 0, 0],
          '8928': [0.30274, 0.79383, 0, 0],
          '8929': [0.30274, 0.79383, 0, 0],
          '8934': [0.23222, 0.74111, 0, 0],
          '8935': [0.23222, 0.74111, 0, 0],
          '8936': [0.23222, 0.74111, 0, 0],
          '8937': [0.23222, 0.74111, 0, 0],
          '8938': [0.20576, 0.70576, 0, 0],
          '8939': [0.20576, 0.70576, 0, 0],
          '8940': [0.30274, 0.79383, 0, 0],
          '8941': [0.30274, 0.79383, 0, 0],
          '8994': [0.19444, 0.69224, 0, 0],
          '8995': [0.19444, 0.69224, 0, 0],
          '9416': [0.15559, 0.69224, 0, 0],
          '9484': [0, 0.69224, 0, 0],
          '9488': [0, 0.69224, 0, 0],
          '9492': [0, 0.37788, 0, 0],
          '9496': [0, 0.37788, 0, 0],
          '9585': [0.19444, 0.68889, 0, 0],
          '9586': [0.19444, 0.74111, 0, 0],
          '9632': [0, 0.675, 0, 0],
          '9633': [0, 0.675, 0, 0],
          '9650': [0, 0.54986, 0, 0],
          '9651': [0, 0.54986, 0, 0],
          '9654': [0.03517, 0.54986, 0, 0],
          '9660': [0, 0.54986, 0, 0],
          '9661': [0, 0.54986, 0, 0],
          '9664': [0.03517, 0.54986, 0, 0],
          '9674': [0.11111, 0.69224, 0, 0],
          '9733': [0.19444, 0.69224, 0, 0],
          '10003': [0, 0.69224, 0, 0],
          '10016': [0, 0.69224, 0, 0],
          '10731': [0.11111, 0.69224, 0, 0],
          '10846': [0.19444, 0.75583, 0, 0],
          '10877': [0.13667, 0.63667, 0, 0],
          '10878': [0.13667, 0.63667, 0, 0],
          '10885': [0.25583, 0.75583, 0, 0],
          '10886': [0.25583, 0.75583, 0, 0],
          '10887': [0.13597, 0.63597, 0, 0],
          '10888': [0.13597, 0.63597, 0, 0],
          '10889': [0.26167, 0.75726, 0, 0],
          '10890': [0.26167, 0.75726, 0, 0],
          '10891': [0.48256, 0.98256, 0, 0],
          '10892': [0.48256, 0.98256, 0, 0],
          '10901': [0.13667, 0.63667, 0, 0],
          '10902': [0.13667, 0.63667, 0, 0],
          '10933': [0.25142, 0.75726, 0, 0],
          '10934': [0.25142, 0.75726, 0, 0],
          '10935': [0.26167, 0.75726, 0, 0],
          '10936': [0.26167, 0.75726, 0, 0],
          '10937': [0.26167, 0.75726, 0, 0],
          '10938': [0.26167, 0.75726, 0, 0],
          '10949': [0.25583, 0.75583, 0, 0],
          '10950': [0.25583, 0.75583, 0, 0],
          '10955': [0.28481, 0.79383, 0, 0],
          '10956': [0.28481, 0.79383, 0, 0],
          '57350': [0.08167, 0.58167, 0, 0],
          '57351': [0.08167, 0.58167, 0, 0],
          '57352': [0.08167, 0.58167, 0, 0],
          '57353': [0, 0.43056, 0.04028, 0],
          '57356': [0.25142, 0.75726, 0, 0],
          '57357': [0.25142, 0.75726, 0, 0],
          '57358': [0.41951, 0.91951, 0, 0],
          '57359': [0.30274, 0.79383, 0, 0],
          '57360': [0.30274, 0.79383, 0, 0],
          '57361': [0.41951, 0.91951, 0, 0],
          '57366': [0.25142, 0.75726, 0, 0],
          '57367': [0.25142, 0.75726, 0, 0],
          '57368': [0.25142, 0.75726, 0, 0],
          '57369': [0.25142, 0.75726, 0, 0],
          '57370': [0.13597, 0.63597, 0, 0],
          '57371': [0.13597, 0.63597, 0, 0],
      },
      'Caligraphic-Regular': {
          '48': [0, 0.43056, 0, 0],
          '49': [0, 0.43056, 0, 0],
          '50': [0, 0.43056, 0, 0],
          '51': [0.19444, 0.43056, 0, 0],
          '52': [0.19444, 0.43056, 0, 0],
          '53': [0.19444, 0.43056, 0, 0],
          '54': [0, 0.64444, 0, 0],
          '55': [0.19444, 0.43056, 0, 0],
          '56': [0, 0.64444, 0, 0],
          '57': [0.19444, 0.43056, 0, 0],
          '65': [0, 0.68333, 0, 0.19445],
          '66': [0, 0.68333, 0.03041, 0.13889],
          '67': [0, 0.68333, 0.05834, 0.13889],
          '68': [0, 0.68333, 0.02778, 0.08334],
          '69': [0, 0.68333, 0.08944, 0.11111],
          '70': [0, 0.68333, 0.09931, 0.11111],
          '71': [0.09722, 0.68333, 0.0593, 0.11111],
          '72': [0, 0.68333, 0.00965, 0.11111],
          '73': [0, 0.68333, 0.07382, 0],
          '74': [0.09722, 0.68333, 0.18472, 0.16667],
          '75': [0, 0.68333, 0.01445, 0.05556],
          '76': [0, 0.68333, 0, 0.13889],
          '77': [0, 0.68333, 0, 0.13889],
          '78': [0, 0.68333, 0.14736, 0.08334],
          '79': [0, 0.68333, 0.02778, 0.11111],
          '80': [0, 0.68333, 0.08222, 0.08334],
          '81': [0.09722, 0.68333, 0, 0.11111],
          '82': [0, 0.68333, 0, 0.08334],
          '83': [0, 0.68333, 0.075, 0.13889],
          '84': [0, 0.68333, 0.25417, 0],
          '85': [0, 0.68333, 0.09931, 0.08334],
          '86': [0, 0.68333, 0.08222, 0],
          '87': [0, 0.68333, 0.08222, 0.08334],
          '88': [0, 0.68333, 0.14643, 0.13889],
          '89': [0.09722, 0.68333, 0.08222, 0.08334],
          '90': [0, 0.68333, 0.07944, 0.13889],
      },
      'Fraktur-Regular': {
          '33': [0, 0.69141, 0, 0],
          '34': [0, 0.69141, 0, 0],
          '38': [0, 0.69141, 0, 0],
          '39': [0, 0.69141, 0, 0],
          '40': [0.24982, 0.74947, 0, 0],
          '41': [0.24982, 0.74947, 0, 0],
          '42': [0, 0.62119, 0, 0],
          '43': [0.08319, 0.58283, 0, 0],
          '44': [0, 0.10803, 0, 0],
          '45': [0.08319, 0.58283, 0, 0],
          '46': [0, 0.10803, 0, 0],
          '47': [0.24982, 0.74947, 0, 0],
          '48': [0, 0.47534, 0, 0],
          '49': [0, 0.47534, 0, 0],
          '50': [0, 0.47534, 0, 0],
          '51': [0.18906, 0.47534, 0, 0],
          '52': [0.18906, 0.47534, 0, 0],
          '53': [0.18906, 0.47534, 0, 0],
          '54': [0, 0.69141, 0, 0],
          '55': [0.18906, 0.47534, 0, 0],
          '56': [0, 0.69141, 0, 0],
          '57': [0.18906, 0.47534, 0, 0],
          '58': [0, 0.47534, 0, 0],
          '59': [0.12604, 0.47534, 0, 0],
          '61': [-0.13099, 0.36866, 0, 0],
          '63': [0, 0.69141, 0, 0],
          '65': [0, 0.69141, 0, 0],
          '66': [0, 0.69141, 0, 0],
          '67': [0, 0.69141, 0, 0],
          '68': [0, 0.69141, 0, 0],
          '69': [0, 0.69141, 0, 0],
          '70': [0.12604, 0.69141, 0, 0],
          '71': [0, 0.69141, 0, 0],
          '72': [0.06302, 0.69141, 0, 0],
          '73': [0, 0.69141, 0, 0],
          '74': [0.12604, 0.69141, 0, 0],
          '75': [0, 0.69141, 0, 0],
          '76': [0, 0.69141, 0, 0],
          '77': [0, 0.69141, 0, 0],
          '78': [0, 0.69141, 0, 0],
          '79': [0, 0.69141, 0, 0],
          '80': [0.18906, 0.69141, 0, 0],
          '81': [0.03781, 0.69141, 0, 0],
          '82': [0, 0.69141, 0, 0],
          '83': [0, 0.69141, 0, 0],
          '84': [0, 0.69141, 0, 0],
          '85': [0, 0.69141, 0, 0],
          '86': [0, 0.69141, 0, 0],
          '87': [0, 0.69141, 0, 0],
          '88': [0, 0.69141, 0, 0],
          '89': [0.18906, 0.69141, 0, 0],
          '90': [0.12604, 0.69141, 0, 0],
          '91': [0.24982, 0.74947, 0, 0],
          '93': [0.24982, 0.74947, 0, 0],
          '94': [0, 0.69141, 0, 0],
          '97': [0, 0.47534, 0, 0],
          '98': [0, 0.69141, 0, 0],
          '99': [0, 0.47534, 0, 0],
          '100': [0, 0.62119, 0, 0],
          '101': [0, 0.47534, 0, 0],
          '102': [0.18906, 0.69141, 0, 0],
          '103': [0.18906, 0.47534, 0, 0],
          '104': [0.18906, 0.69141, 0, 0],
          '105': [0, 0.69141, 0, 0],
          '106': [0, 0.69141, 0, 0],
          '107': [0, 0.69141, 0, 0],
          '108': [0, 0.69141, 0, 0],
          '109': [0, 0.47534, 0, 0],
          '110': [0, 0.47534, 0, 0],
          '111': [0, 0.47534, 0, 0],
          '112': [0.18906, 0.52396, 0, 0],
          '113': [0.18906, 0.47534, 0, 0],
          '114': [0, 0.47534, 0, 0],
          '115': [0, 0.47534, 0, 0],
          '116': [0, 0.62119, 0, 0],
          '117': [0, 0.47534, 0, 0],
          '118': [0, 0.52396, 0, 0],
          '119': [0, 0.52396, 0, 0],
          '120': [0.18906, 0.47534, 0, 0],
          '121': [0.18906, 0.47534, 0, 0],
          '122': [0.18906, 0.47534, 0, 0],
          '8216': [0, 0.69141, 0, 0],
          '8217': [0, 0.69141, 0, 0],
          '58112': [0, 0.62119, 0, 0],
          '58113': [0, 0.62119, 0, 0],
          '58114': [0.18906, 0.69141, 0, 0],
          '58115': [0.18906, 0.69141, 0, 0],
          '58116': [0.18906, 0.47534, 0, 0],
          '58117': [0, 0.69141, 0, 0],
          '58118': [0, 0.62119, 0, 0],
          '58119': [0, 0.47534, 0, 0],
      },
      'Main-Bold': {
          '33': [0, 0.69444, 0, 0],
          '34': [0, 0.69444, 0, 0],
          '35': [0.19444, 0.69444, 0, 0],
          '36': [0.05556, 0.75, 0, 0],
          '37': [0.05556, 0.75, 0, 0],
          '38': [0, 0.69444, 0, 0],
          '39': [0, 0.69444, 0, 0],
          '40': [0.25, 0.75, 0, 0],
          '41': [0.25, 0.75, 0, 0],
          '42': [0, 0.75, 0, 0],
          '43': [0.13333, 0.63333, 0, 0],
          '44': [0.19444, 0.15556, 0, 0],
          '45': [0, 0.44444, 0, 0],
          '46': [0, 0.15556, 0, 0],
          '47': [0.25, 0.75, 0, 0],
          '48': [0, 0.64444, 0, 0],
          '49': [0, 0.64444, 0, 0],
          '50': [0, 0.64444, 0, 0],
          '51': [0, 0.64444, 0, 0],
          '52': [0, 0.64444, 0, 0],
          '53': [0, 0.64444, 0, 0],
          '54': [0, 0.64444, 0, 0],
          '55': [0, 0.64444, 0, 0],
          '56': [0, 0.64444, 0, 0],
          '57': [0, 0.64444, 0, 0],
          '58': [0, 0.44444, 0, 0],
          '59': [0.19444, 0.44444, 0, 0],
          '60': [0.08556, 0.58556, 0, 0],
          '61': [-0.10889, 0.39111, 0, 0],
          '62': [0.08556, 0.58556, 0, 0],
          '63': [0, 0.69444, 0, 0],
          '64': [0, 0.69444, 0, 0],
          '65': [0, 0.68611, 0, 0],
          '66': [0, 0.68611, 0, 0],
          '67': [0, 0.68611, 0, 0],
          '68': [0, 0.68611, 0, 0],
          '69': [0, 0.68611, 0, 0],
          '70': [0, 0.68611, 0, 0],
          '71': [0, 0.68611, 0, 0],
          '72': [0, 0.68611, 0, 0],
          '73': [0, 0.68611, 0, 0],
          '74': [0, 0.68611, 0, 0],
          '75': [0, 0.68611, 0, 0],
          '76': [0, 0.68611, 0, 0],
          '77': [0, 0.68611, 0, 0],
          '78': [0, 0.68611, 0, 0],
          '79': [0, 0.68611, 0, 0],
          '80': [0, 0.68611, 0, 0],
          '81': [0.19444, 0.68611, 0, 0],
          '82': [0, 0.68611, 0, 0],
          '83': [0, 0.68611, 0, 0],
          '84': [0, 0.68611, 0, 0],
          '85': [0, 0.68611, 0, 0],
          '86': [0, 0.68611, 0.01597, 0],
          '87': [0, 0.68611, 0.01597, 0],
          '88': [0, 0.68611, 0, 0],
          '89': [0, 0.68611, 0.02875, 0],
          '90': [0, 0.68611, 0, 0],
          '91': [0.25, 0.75, 0, 0],
          '92': [0.25, 0.75, 0, 0],
          '93': [0.25, 0.75, 0, 0],
          '94': [0, 0.69444, 0, 0],
          '95': [0.31, 0.13444, 0.03194, 0],
          '97': [0, 0.44444, 0, 0],
          '98': [0, 0.69444, 0, 0],
          '99': [0, 0.44444, 0, 0],
          '100': [0, 0.69444, 0, 0],
          '101': [0, 0.44444, 0, 0],
          '102': [0, 0.69444, 0.10903, 0],
          '103': [0.19444, 0.44444, 0.01597, 0],
          '104': [0, 0.69444, 0, 0],
          '105': [0, 0.69444, 0, 0],
          '106': [0.19444, 0.69444, 0, 0],
          '107': [0, 0.69444, 0, 0],
          '108': [0, 0.69444, 0, 0],
          '109': [0, 0.44444, 0, 0],
          '110': [0, 0.44444, 0, 0],
          '111': [0, 0.44444, 0, 0],
          '112': [0.19444, 0.44444, 0, 0],
          '113': [0.19444, 0.44444, 0, 0],
          '114': [0, 0.44444, 0, 0],
          '115': [0, 0.44444, 0, 0],
          '116': [0, 0.63492, 0, 0],
          '117': [0, 0.44444, 0, 0],
          '118': [0, 0.44444, 0.01597, 0],
          '119': [0, 0.44444, 0.01597, 0],
          '120': [0, 0.44444, 0, 0],
          '121': [0.19444, 0.44444, 0.01597, 0],
          '122': [0, 0.44444, 0, 0],
          '123': [0.25, 0.75, 0, 0],
          '124': [0.25, 0.75, 0, 0],
          '125': [0.25, 0.75, 0, 0],
          '126': [0.35, 0.34444, 0, 0],
          '168': [0, 0.69444, 0, 0],
          '172': [0, 0.44444, 0, 0],
          '176': [0, 0.69444, 0, 0],
          '177': [0.13333, 0.63333, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '198': [0, 0.68611, 0, 0],
          '215': [0.13333, 0.63333, 0, 0],
          '216': [0.04861, 0.73472, 0, 0],
          '223': [0, 0.69444, 0, 0],
          '230': [0, 0.44444, 0, 0],
          '247': [0.13333, 0.63333, 0, 0],
          '248': [0.09722, 0.54167, 0, 0],
          '305': [0, 0.44444, 0, 0],
          '338': [0, 0.68611, 0, 0],
          '339': [0, 0.44444, 0, 0],
          '567': [0.19444, 0.44444, 0, 0],
          '710': [0, 0.69444, 0, 0],
          '711': [0, 0.63194, 0, 0],
          '713': [0, 0.59611, 0, 0],
          '714': [0, 0.69444, 0, 0],
          '715': [0, 0.69444, 0, 0],
          '728': [0, 0.69444, 0, 0],
          '729': [0, 0.69444, 0, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.69444, 0, 0],
          '733': [0, 0.69444, 0, 0],
          '915': [0, 0.68611, 0, 0],
          '916': [0, 0.68611, 0, 0],
          '920': [0, 0.68611, 0, 0],
          '923': [0, 0.68611, 0, 0],
          '926': [0, 0.68611, 0, 0],
          '928': [0, 0.68611, 0, 0],
          '931': [0, 0.68611, 0, 0],
          '933': [0, 0.68611, 0, 0],
          '934': [0, 0.68611, 0, 0],
          '936': [0, 0.68611, 0, 0],
          '937': [0, 0.68611, 0, 0],
          '8211': [0, 0.44444, 0.03194, 0],
          '8212': [0, 0.44444, 0.03194, 0],
          '8216': [0, 0.69444, 0, 0],
          '8217': [0, 0.69444, 0, 0],
          '8220': [0, 0.69444, 0, 0],
          '8221': [0, 0.69444, 0, 0],
          '8224': [0.19444, 0.69444, 0, 0],
          '8225': [0.19444, 0.69444, 0, 0],
          '8242': [0, 0.55556, 0, 0],
          '8407': [0, 0.72444, 0.15486, 0],
          '8463': [0, 0.69444, 0, 0],
          '8465': [0, 0.69444, 0, 0],
          '8467': [0, 0.69444, 0, 0],
          '8472': [0.19444, 0.44444, 0, 0],
          '8476': [0, 0.69444, 0, 0],
          '8501': [0, 0.69444, 0, 0],
          '8592': [-0.10889, 0.39111, 0, 0],
          '8593': [0.19444, 0.69444, 0, 0],
          '8594': [-0.10889, 0.39111, 0, 0],
          '8595': [0.19444, 0.69444, 0, 0],
          '8596': [-0.10889, 0.39111, 0, 0],
          '8597': [0.25, 0.75, 0, 0],
          '8598': [0.19444, 0.69444, 0, 0],
          '8599': [0.19444, 0.69444, 0, 0],
          '8600': [0.19444, 0.69444, 0, 0],
          '8601': [0.19444, 0.69444, 0, 0],
          '8636': [-0.10889, 0.39111, 0, 0],
          '8637': [-0.10889, 0.39111, 0, 0],
          '8640': [-0.10889, 0.39111, 0, 0],
          '8641': [-0.10889, 0.39111, 0, 0],
          '8656': [-0.10889, 0.39111, 0, 0],
          '8657': [0.19444, 0.69444, 0, 0],
          '8658': [-0.10889, 0.39111, 0, 0],
          '8659': [0.19444, 0.69444, 0, 0],
          '8660': [-0.10889, 0.39111, 0, 0],
          '8661': [0.25, 0.75, 0, 0],
          '8704': [0, 0.69444, 0, 0],
          '8706': [0, 0.69444, 0.06389, 0],
          '8707': [0, 0.69444, 0, 0],
          '8709': [0.05556, 0.75, 0, 0],
          '8711': [0, 0.68611, 0, 0],
          '8712': [0.08556, 0.58556, 0, 0],
          '8715': [0.08556, 0.58556, 0, 0],
          '8722': [0.13333, 0.63333, 0, 0],
          '8723': [0.13333, 0.63333, 0, 0],
          '8725': [0.25, 0.75, 0, 0],
          '8726': [0.25, 0.75, 0, 0],
          '8727': [-0.02778, 0.47222, 0, 0],
          '8728': [-0.02639, 0.47361, 0, 0],
          '8729': [-0.02639, 0.47361, 0, 0],
          '8730': [0.18, 0.82, 0, 0],
          '8733': [0, 0.44444, 0, 0],
          '8734': [0, 0.44444, 0, 0],
          '8736': [0, 0.69224, 0, 0],
          '8739': [0.25, 0.75, 0, 0],
          '8741': [0.25, 0.75, 0, 0],
          '8743': [0, 0.55556, 0, 0],
          '8744': [0, 0.55556, 0, 0],
          '8745': [0, 0.55556, 0, 0],
          '8746': [0, 0.55556, 0, 0],
          '8747': [0.19444, 0.69444, 0.12778, 0],
          '8764': [-0.10889, 0.39111, 0, 0],
          '8768': [0.19444, 0.69444, 0, 0],
          '8771': [0.00222, 0.50222, 0, 0],
          '8776': [0.02444, 0.52444, 0, 0],
          '8781': [0.00222, 0.50222, 0, 0],
          '8801': [0.00222, 0.50222, 0, 0],
          '8804': [0.19667, 0.69667, 0, 0],
          '8805': [0.19667, 0.69667, 0, 0],
          '8810': [0.08556, 0.58556, 0, 0],
          '8811': [0.08556, 0.58556, 0, 0],
          '8826': [0.08556, 0.58556, 0, 0],
          '8827': [0.08556, 0.58556, 0, 0],
          '8834': [0.08556, 0.58556, 0, 0],
          '8835': [0.08556, 0.58556, 0, 0],
          '8838': [0.19667, 0.69667, 0, 0],
          '8839': [0.19667, 0.69667, 0, 0],
          '8846': [0, 0.55556, 0, 0],
          '8849': [0.19667, 0.69667, 0, 0],
          '8850': [0.19667, 0.69667, 0, 0],
          '8851': [0, 0.55556, 0, 0],
          '8852': [0, 0.55556, 0, 0],
          '8853': [0.13333, 0.63333, 0, 0],
          '8854': [0.13333, 0.63333, 0, 0],
          '8855': [0.13333, 0.63333, 0, 0],
          '8856': [0.13333, 0.63333, 0, 0],
          '8857': [0.13333, 0.63333, 0, 0],
          '8866': [0, 0.69444, 0, 0],
          '8867': [0, 0.69444, 0, 0],
          '8868': [0, 0.69444, 0, 0],
          '8869': [0, 0.69444, 0, 0],
          '8900': [-0.02639, 0.47361, 0, 0],
          '8901': [-0.02639, 0.47361, 0, 0],
          '8902': [-0.02778, 0.47222, 0, 0],
          '8968': [0.25, 0.75, 0, 0],
          '8969': [0.25, 0.75, 0, 0],
          '8970': [0.25, 0.75, 0, 0],
          '8971': [0.25, 0.75, 0, 0],
          '8994': [-0.13889, 0.36111, 0, 0],
          '8995': [-0.13889, 0.36111, 0, 0],
          '9651': [0.19444, 0.69444, 0, 0],
          '9657': [-0.02778, 0.47222, 0, 0],
          '9661': [0.19444, 0.69444, 0, 0],
          '9667': [-0.02778, 0.47222, 0, 0],
          '9711': [0.19444, 0.69444, 0, 0],
          '9824': [0.12963, 0.69444, 0, 0],
          '9825': [0.12963, 0.69444, 0, 0],
          '9826': [0.12963, 0.69444, 0, 0],
          '9827': [0.12963, 0.69444, 0, 0],
          '9837': [0, 0.75, 0, 0],
          '9838': [0.19444, 0.69444, 0, 0],
          '9839': [0.19444, 0.69444, 0, 0],
          '10216': [0.25, 0.75, 0, 0],
          '10217': [0.25, 0.75, 0, 0],
          '10815': [0, 0.68611, 0, 0],
          '10927': [0.19667, 0.69667, 0, 0],
          '10928': [0.19667, 0.69667, 0, 0],
          '57376': [0.19444, 0.69444, 0, 0],
      },
      'Main-BoldItalic': {
          '33': [0, 0.69444, 0.11417, 0],
          '34': [0, 0.69444, 0.07939, 0],
          '35': [0.19444, 0.69444, 0.06833, 0],
          '37': [0.05556, 0.75, 0.12861, 0],
          '38': [0, 0.69444, 0.08528, 0],
          '39': [0, 0.69444, 0.12945, 0],
          '40': [0.25, 0.75, 0.15806, 0],
          '41': [0.25, 0.75, 0.03306, 0],
          '42': [0, 0.75, 0.14333, 0],
          '43': [0.10333, 0.60333, 0.03306, 0],
          '44': [0.19444, 0.14722, 0, 0],
          '45': [0, 0.44444, 0.02611, 0],
          '46': [0, 0.14722, 0, 0],
          '47': [0.25, 0.75, 0.15806, 0],
          '48': [0, 0.64444, 0.13167, 0],
          '49': [0, 0.64444, 0.13167, 0],
          '50': [0, 0.64444, 0.13167, 0],
          '51': [0, 0.64444, 0.13167, 0],
          '52': [0.19444, 0.64444, 0.13167, 0],
          '53': [0, 0.64444, 0.13167, 0],
          '54': [0, 0.64444, 0.13167, 0],
          '55': [0.19444, 0.64444, 0.13167, 0],
          '56': [0, 0.64444, 0.13167, 0],
          '57': [0, 0.64444, 0.13167, 0],
          '58': [0, 0.44444, 0.06695, 0],
          '59': [0.19444, 0.44444, 0.06695, 0],
          '61': [-0.10889, 0.39111, 0.06833, 0],
          '63': [0, 0.69444, 0.11472, 0],
          '64': [0, 0.69444, 0.09208, 0],
          '65': [0, 0.68611, 0, 0],
          '66': [0, 0.68611, 0.0992, 0],
          '67': [0, 0.68611, 0.14208, 0],
          '68': [0, 0.68611, 0.09062, 0],
          '69': [0, 0.68611, 0.11431, 0],
          '70': [0, 0.68611, 0.12903, 0],
          '71': [0, 0.68611, 0.07347, 0],
          '72': [0, 0.68611, 0.17208, 0],
          '73': [0, 0.68611, 0.15681, 0],
          '74': [0, 0.68611, 0.145, 0],
          '75': [0, 0.68611, 0.14208, 0],
          '76': [0, 0.68611, 0, 0],
          '77': [0, 0.68611, 0.17208, 0],
          '78': [0, 0.68611, 0.17208, 0],
          '79': [0, 0.68611, 0.09062, 0],
          '80': [0, 0.68611, 0.0992, 0],
          '81': [0.19444, 0.68611, 0.09062, 0],
          '82': [0, 0.68611, 0.02559, 0],
          '83': [0, 0.68611, 0.11264, 0],
          '84': [0, 0.68611, 0.12903, 0],
          '85': [0, 0.68611, 0.17208, 0],
          '86': [0, 0.68611, 0.18625, 0],
          '87': [0, 0.68611, 0.18625, 0],
          '88': [0, 0.68611, 0.15681, 0],
          '89': [0, 0.68611, 0.19803, 0],
          '90': [0, 0.68611, 0.14208, 0],
          '91': [0.25, 0.75, 0.1875, 0],
          '93': [0.25, 0.75, 0.09972, 0],
          '94': [0, 0.69444, 0.06709, 0],
          '95': [0.31, 0.13444, 0.09811, 0],
          '97': [0, 0.44444, 0.09426, 0],
          '98': [0, 0.69444, 0.07861, 0],
          '99': [0, 0.44444, 0.05222, 0],
          '100': [0, 0.69444, 0.10861, 0],
          '101': [0, 0.44444, 0.085, 0],
          '102': [0.19444, 0.69444, 0.21778, 0],
          '103': [0.19444, 0.44444, 0.105, 0],
          '104': [0, 0.69444, 0.09426, 0],
          '105': [0, 0.69326, 0.11387, 0],
          '106': [0.19444, 0.69326, 0.1672, 0],
          '107': [0, 0.69444, 0.11111, 0],
          '108': [0, 0.69444, 0.10861, 0],
          '109': [0, 0.44444, 0.09426, 0],
          '110': [0, 0.44444, 0.09426, 0],
          '111': [0, 0.44444, 0.07861, 0],
          '112': [0.19444, 0.44444, 0.07861, 0],
          '113': [0.19444, 0.44444, 0.105, 0],
          '114': [0, 0.44444, 0.11111, 0],
          '115': [0, 0.44444, 0.08167, 0],
          '116': [0, 0.63492, 0.09639, 0],
          '117': [0, 0.44444, 0.09426, 0],
          '118': [0, 0.44444, 0.11111, 0],
          '119': [0, 0.44444, 0.11111, 0],
          '120': [0, 0.44444, 0.12583, 0],
          '121': [0.19444, 0.44444, 0.105, 0],
          '122': [0, 0.44444, 0.13889, 0],
          '126': [0.35, 0.34444, 0.11472, 0],
          '163': [0, 0.69444, 0, 0],
          '168': [0, 0.69444, 0.11473, 0],
          '176': [0, 0.69444, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '198': [0, 0.68611, 0.11431, 0],
          '216': [0.04861, 0.73472, 0.09062, 0],
          '223': [0.19444, 0.69444, 0.09736, 0],
          '230': [0, 0.44444, 0.085, 0],
          '248': [0.09722, 0.54167, 0.09458, 0],
          '305': [0, 0.44444, 0.09426, 0],
          '338': [0, 0.68611, 0.11431, 0],
          '339': [0, 0.44444, 0.085, 0],
          '567': [0.19444, 0.44444, 0.04611, 0],
          '710': [0, 0.69444, 0.06709, 0],
          '711': [0, 0.63194, 0.08271, 0],
          '713': [0, 0.59444, 0.10444, 0],
          '714': [0, 0.69444, 0.08528, 0],
          '715': [0, 0.69444, 0, 0],
          '728': [0, 0.69444, 0.10333, 0],
          '729': [0, 0.69444, 0.12945, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.69444, 0.11472, 0],
          '733': [0, 0.69444, 0.11472, 0],
          '915': [0, 0.68611, 0.12903, 0],
          '916': [0, 0.68611, 0, 0],
          '920': [0, 0.68611, 0.09062, 0],
          '923': [0, 0.68611, 0, 0],
          '926': [0, 0.68611, 0.15092, 0],
          '928': [0, 0.68611, 0.17208, 0],
          '931': [0, 0.68611, 0.11431, 0],
          '933': [0, 0.68611, 0.10778, 0],
          '934': [0, 0.68611, 0.05632, 0],
          '936': [0, 0.68611, 0.10778, 0],
          '937': [0, 0.68611, 0.0992, 0],
          '8211': [0, 0.44444, 0.09811, 0],
          '8212': [0, 0.44444, 0.09811, 0],
          '8216': [0, 0.69444, 0.12945, 0],
          '8217': [0, 0.69444, 0.12945, 0],
          '8220': [0, 0.69444, 0.16772, 0],
          '8221': [0, 0.69444, 0.07939, 0],
      },
      'Main-Italic': {
          '33': [0, 0.69444, 0.12417, 0],
          '34': [0, 0.69444, 0.06961, 0],
          '35': [0.19444, 0.69444, 0.06616, 0],
          '37': [0.05556, 0.75, 0.13639, 0],
          '38': [0, 0.69444, 0.09694, 0],
          '39': [0, 0.69444, 0.12417, 0],
          '40': [0.25, 0.75, 0.16194, 0],
          '41': [0.25, 0.75, 0.03694, 0],
          '42': [0, 0.75, 0.14917, 0],
          '43': [0.05667, 0.56167, 0.03694, 0],
          '44': [0.19444, 0.10556, 0, 0],
          '45': [0, 0.43056, 0.02826, 0],
          '46': [0, 0.10556, 0, 0],
          '47': [0.25, 0.75, 0.16194, 0],
          '48': [0, 0.64444, 0.13556, 0],
          '49': [0, 0.64444, 0.13556, 0],
          '50': [0, 0.64444, 0.13556, 0],
          '51': [0, 0.64444, 0.13556, 0],
          '52': [0.19444, 0.64444, 0.13556, 0],
          '53': [0, 0.64444, 0.13556, 0],
          '54': [0, 0.64444, 0.13556, 0],
          '55': [0.19444, 0.64444, 0.13556, 0],
          '56': [0, 0.64444, 0.13556, 0],
          '57': [0, 0.64444, 0.13556, 0],
          '58': [0, 0.43056, 0.0582, 0],
          '59': [0.19444, 0.43056, 0.0582, 0],
          '61': [-0.13313, 0.36687, 0.06616, 0],
          '63': [0, 0.69444, 0.1225, 0],
          '64': [0, 0.69444, 0.09597, 0],
          '65': [0, 0.68333, 0, 0],
          '66': [0, 0.68333, 0.10257, 0],
          '67': [0, 0.68333, 0.14528, 0],
          '68': [0, 0.68333, 0.09403, 0],
          '69': [0, 0.68333, 0.12028, 0],
          '70': [0, 0.68333, 0.13305, 0],
          '71': [0, 0.68333, 0.08722, 0],
          '72': [0, 0.68333, 0.16389, 0],
          '73': [0, 0.68333, 0.15806, 0],
          '74': [0, 0.68333, 0.14028, 0],
          '75': [0, 0.68333, 0.14528, 0],
          '76': [0, 0.68333, 0, 0],
          '77': [0, 0.68333, 0.16389, 0],
          '78': [0, 0.68333, 0.16389, 0],
          '79': [0, 0.68333, 0.09403, 0],
          '80': [0, 0.68333, 0.10257, 0],
          '81': [0.19444, 0.68333, 0.09403, 0],
          '82': [0, 0.68333, 0.03868, 0],
          '83': [0, 0.68333, 0.11972, 0],
          '84': [0, 0.68333, 0.13305, 0],
          '85': [0, 0.68333, 0.16389, 0],
          '86': [0, 0.68333, 0.18361, 0],
          '87': [0, 0.68333, 0.18361, 0],
          '88': [0, 0.68333, 0.15806, 0],
          '89': [0, 0.68333, 0.19383, 0],
          '90': [0, 0.68333, 0.14528, 0],
          '91': [0.25, 0.75, 0.1875, 0],
          '93': [0.25, 0.75, 0.10528, 0],
          '94': [0, 0.69444, 0.06646, 0],
          '95': [0.31, 0.12056, 0.09208, 0],
          '97': [0, 0.43056, 0.07671, 0],
          '98': [0, 0.69444, 0.06312, 0],
          '99': [0, 0.43056, 0.05653, 0],
          '100': [0, 0.69444, 0.10333, 0],
          '101': [0, 0.43056, 0.07514, 0],
          '102': [0.19444, 0.69444, 0.21194, 0],
          '103': [0.19444, 0.43056, 0.08847, 0],
          '104': [0, 0.69444, 0.07671, 0],
          '105': [0, 0.65536, 0.1019, 0],
          '106': [0.19444, 0.65536, 0.14467, 0],
          '107': [0, 0.69444, 0.10764, 0],
          '108': [0, 0.69444, 0.10333, 0],
          '109': [0, 0.43056, 0.07671, 0],
          '110': [0, 0.43056, 0.07671, 0],
          '111': [0, 0.43056, 0.06312, 0],
          '112': [0.19444, 0.43056, 0.06312, 0],
          '113': [0.19444, 0.43056, 0.08847, 0],
          '114': [0, 0.43056, 0.10764, 0],
          '115': [0, 0.43056, 0.08208, 0],
          '116': [0, 0.61508, 0.09486, 0],
          '117': [0, 0.43056, 0.07671, 0],
          '118': [0, 0.43056, 0.10764, 0],
          '119': [0, 0.43056, 0.10764, 0],
          '120': [0, 0.43056, 0.12042, 0],
          '121': [0.19444, 0.43056, 0.08847, 0],
          '122': [0, 0.43056, 0.12292, 0],
          '126': [0.35, 0.31786, 0.11585, 0],
          '163': [0, 0.69444, 0, 0],
          '168': [0, 0.66786, 0.10474, 0],
          '176': [0, 0.69444, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '198': [0, 0.68333, 0.12028, 0],
          '216': [0.04861, 0.73194, 0.09403, 0],
          '223': [0.19444, 0.69444, 0.10514, 0],
          '230': [0, 0.43056, 0.07514, 0],
          '248': [0.09722, 0.52778, 0.09194, 0],
          '305': [0, 0.43056, 0, 0.02778],
          '338': [0, 0.68333, 0.12028, 0],
          '339': [0, 0.43056, 0.07514, 0],
          '567': [0.19444, 0.43056, 0, 0.08334],
          '710': [0, 0.69444, 0.06646, 0],
          '711': [0, 0.62847, 0.08295, 0],
          '713': [0, 0.56167, 0.10333, 0],
          '714': [0, 0.69444, 0.09694, 0],
          '715': [0, 0.69444, 0, 0],
          '728': [0, 0.69444, 0.10806, 0],
          '729': [0, 0.66786, 0.11752, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.66786, 0.11585, 0],
          '733': [0, 0.69444, 0.1225, 0],
          '915': [0, 0.68333, 0.13305, 0],
          '916': [0, 0.68333, 0, 0],
          '920': [0, 0.68333, 0.09403, 0],
          '923': [0, 0.68333, 0, 0],
          '926': [0, 0.68333, 0.15294, 0],
          '928': [0, 0.68333, 0.16389, 0],
          '931': [0, 0.68333, 0.12028, 0],
          '933': [0, 0.68333, 0.11111, 0],
          '934': [0, 0.68333, 0.05986, 0],
          '936': [0, 0.68333, 0.11111, 0],
          '937': [0, 0.68333, 0.10257, 0],
          '8211': [0, 0.43056, 0.09208, 0],
          '8212': [0, 0.43056, 0.09208, 0],
          '8216': [0, 0.69444, 0.12417, 0],
          '8217': [0, 0.69444, 0.12417, 0],
          '8220': [0, 0.69444, 0.1685, 0],
          '8221': [0, 0.69444, 0.06961, 0],
          '8463': [0, 0.68889, 0, 0],
      },
      'Main-Regular': {
          '32': [0, 0, 0, 0],
          '33': [0, 0.69444, 0, 0],
          '34': [0, 0.69444, 0, 0],
          '35': [0.19444, 0.69444, 0, 0],
          '36': [0.05556, 0.75, 0, 0],
          '37': [0.05556, 0.75, 0, 0],
          '38': [0, 0.69444, 0, 0],
          '39': [0, 0.69444, 0, 0],
          '40': [0.25, 0.75, 0, 0],
          '41': [0.25, 0.75, 0, 0],
          '42': [0, 0.75, 0, 0],
          '43': [0.08333, 0.58333, 0, 0],
          '44': [0.19444, 0.10556, 0, 0],
          '45': [0, 0.43056, 0, 0],
          '46': [0, 0.10556, 0, 0],
          '47': [0.25, 0.75, 0, 0],
          '48': [0, 0.64444, 0, 0],
          '49': [0, 0.64444, 0, 0],
          '50': [0, 0.64444, 0, 0],
          '51': [0, 0.64444, 0, 0],
          '52': [0, 0.64444, 0, 0],
          '53': [0, 0.64444, 0, 0],
          '54': [0, 0.64444, 0, 0],
          '55': [0, 0.64444, 0, 0],
          '56': [0, 0.64444, 0, 0],
          '57': [0, 0.64444, 0, 0],
          '58': [0, 0.43056, 0, 0],
          '59': [0.19444, 0.43056, 0, 0],
          '60': [0.0391, 0.5391, 0, 0],
          '61': [-0.13313, 0.36687, 0, 0],
          '62': [0.0391, 0.5391, 0, 0],
          '63': [0, 0.69444, 0, 0],
          '64': [0, 0.69444, 0, 0],
          '65': [0, 0.68333, 0, 0],
          '66': [0, 0.68333, 0, 0],
          '67': [0, 0.68333, 0, 0],
          '68': [0, 0.68333, 0, 0],
          '69': [0, 0.68333, 0, 0],
          '70': [0, 0.68333, 0, 0],
          '71': [0, 0.68333, 0, 0],
          '72': [0, 0.68333, 0, 0],
          '73': [0, 0.68333, 0, 0],
          '74': [0, 0.68333, 0, 0],
          '75': [0, 0.68333, 0, 0],
          '76': [0, 0.68333, 0, 0],
          '77': [0, 0.68333, 0, 0],
          '78': [0, 0.68333, 0, 0],
          '79': [0, 0.68333, 0, 0],
          '80': [0, 0.68333, 0, 0],
          '81': [0.19444, 0.68333, 0, 0],
          '82': [0, 0.68333, 0, 0],
          '83': [0, 0.68333, 0, 0],
          '84': [0, 0.68333, 0, 0],
          '85': [0, 0.68333, 0, 0],
          '86': [0, 0.68333, 0.01389, 0],
          '87': [0, 0.68333, 0.01389, 0],
          '88': [0, 0.68333, 0, 0],
          '89': [0, 0.68333, 0.025, 0],
          '90': [0, 0.68333, 0, 0],
          '91': [0.25, 0.75, 0, 0],
          '92': [0.25, 0.75, 0, 0],
          '93': [0.25, 0.75, 0, 0],
          '94': [0, 0.69444, 0, 0],
          '95': [0.31, 0.12056, 0.02778, 0],
          '97': [0, 0.43056, 0, 0],
          '98': [0, 0.69444, 0, 0],
          '99': [0, 0.43056, 0, 0],
          '100': [0, 0.69444, 0, 0],
          '101': [0, 0.43056, 0, 0],
          '102': [0, 0.69444, 0.07778, 0],
          '103': [0.19444, 0.43056, 0.01389, 0],
          '104': [0, 0.69444, 0, 0],
          '105': [0, 0.66786, 0, 0],
          '106': [0.19444, 0.66786, 0, 0],
          '107': [0, 0.69444, 0, 0],
          '108': [0, 0.69444, 0, 0],
          '109': [0, 0.43056, 0, 0],
          '110': [0, 0.43056, 0, 0],
          '111': [0, 0.43056, 0, 0],
          '112': [0.19444, 0.43056, 0, 0],
          '113': [0.19444, 0.43056, 0, 0],
          '114': [0, 0.43056, 0, 0],
          '115': [0, 0.43056, 0, 0],
          '116': [0, 0.61508, 0, 0],
          '117': [0, 0.43056, 0, 0],
          '118': [0, 0.43056, 0.01389, 0],
          '119': [0, 0.43056, 0.01389, 0],
          '120': [0, 0.43056, 0, 0],
          '121': [0.19444, 0.43056, 0.01389, 0],
          '122': [0, 0.43056, 0, 0],
          '123': [0.25, 0.75, 0, 0],
          '124': [0.25, 0.75, 0, 0],
          '125': [0.25, 0.75, 0, 0],
          '126': [0.35, 0.31786, 0, 0],
          '160': [0, 0, 0, 0],
          '167': [0.19444, 0.69444, 0, 0],
          '168': [0, 0.66786, 0, 0],
          '172': [0, 0.43056, 0, 0],
          '176': [0, 0.69444, 0, 0],
          '177': [0.08333, 0.58333, 0, 0],
          '182': [0.19444, 0.69444, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '198': [0, 0.68333, 0, 0],
          '215': [0.08333, 0.58333, 0, 0],
          '216': [0.04861, 0.73194, 0, 0],
          '223': [0, 0.69444, 0, 0],
          '230': [0, 0.43056, 0, 0],
          '247': [0.08333, 0.58333, 0, 0],
          '248': [0.09722, 0.52778, 0, 0],
          '305': [0, 0.43056, 0, 0],
          '338': [0, 0.68333, 0, 0],
          '339': [0, 0.43056, 0, 0],
          '567': [0.19444, 0.43056, 0, 0],
          '710': [0, 0.69444, 0, 0],
          '711': [0, 0.62847, 0, 0],
          '713': [0, 0.56778, 0, 0],
          '714': [0, 0.69444, 0, 0],
          '715': [0, 0.69444, 0, 0],
          '728': [0, 0.69444, 0, 0],
          '729': [0, 0.66786, 0, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.66786, 0, 0],
          '733': [0, 0.69444, 0, 0],
          '915': [0, 0.68333, 0, 0],
          '916': [0, 0.68333, 0, 0],
          '920': [0, 0.68333, 0, 0],
          '923': [0, 0.68333, 0, 0],
          '926': [0, 0.68333, 0, 0],
          '928': [0, 0.68333, 0, 0],
          '931': [0, 0.68333, 0, 0],
          '933': [0, 0.68333, 0, 0],
          '934': [0, 0.68333, 0, 0],
          '936': [0, 0.68333, 0, 0],
          '937': [0, 0.68333, 0, 0],
          '8211': [0, 0.43056, 0.02778, 0],
          '8212': [0, 0.43056, 0.02778, 0],
          '8216': [0, 0.69444, 0, 0],
          '8217': [0, 0.69444, 0, 0],
          '8220': [0, 0.69444, 0, 0],
          '8221': [0, 0.69444, 0, 0],
          '8224': [0.19444, 0.69444, 0, 0],
          '8225': [0.19444, 0.69444, 0, 0],
          '8230': [0, 0.12, 0, 0],
          '8242': [0, 0.55556, 0, 0],
          '8407': [0, 0.71444, 0.15382, 0],
          '8463': [0, 0.68889, 0, 0],
          '8465': [0, 0.69444, 0, 0],
          '8467': [0, 0.69444, 0, 0.11111],
          '8472': [0.19444, 0.43056, 0, 0.11111],
          '8476': [0, 0.69444, 0, 0],
          '8501': [0, 0.69444, 0, 0],
          '8592': [-0.13313, 0.36687, 0, 0],
          '8593': [0.19444, 0.69444, 0, 0],
          '8594': [-0.13313, 0.36687, 0, 0],
          '8595': [0.19444, 0.69444, 0, 0],
          '8596': [-0.13313, 0.36687, 0, 0],
          '8597': [0.25, 0.75, 0, 0],
          '8598': [0.19444, 0.69444, 0, 0],
          '8599': [0.19444, 0.69444, 0, 0],
          '8600': [0.19444, 0.69444, 0, 0],
          '8601': [0.19444, 0.69444, 0, 0],
          '8614': [0.011, 0.511, 0, 0],
          '8617': [0.011, 0.511, 0, 0],
          '8618': [0.011, 0.511, 0, 0],
          '8636': [-0.13313, 0.36687, 0, 0],
          '8637': [-0.13313, 0.36687, 0, 0],
          '8640': [-0.13313, 0.36687, 0, 0],
          '8641': [-0.13313, 0.36687, 0, 0],
          '8652': [0.011, 0.671, 0, 0],
          '8656': [-0.13313, 0.36687, 0, 0],
          '8657': [0.19444, 0.69444, 0, 0],
          '8658': [-0.13313, 0.36687, 0, 0],
          '8659': [0.19444, 0.69444, 0, 0],
          '8660': [-0.13313, 0.36687, 0, 0],
          '8661': [0.25, 0.75, 0, 0],
          '8704': [0, 0.69444, 0, 0],
          '8706': [0, 0.69444, 0.05556, 0.08334],
          '8707': [0, 0.69444, 0, 0],
          '8709': [0.05556, 0.75, 0, 0],
          '8711': [0, 0.68333, 0, 0],
          '8712': [0.0391, 0.5391, 0, 0],
          '8715': [0.0391, 0.5391, 0, 0],
          '8722': [0.08333, 0.58333, 0, 0],
          '8723': [0.08333, 0.58333, 0, 0],
          '8725': [0.25, 0.75, 0, 0],
          '8726': [0.25, 0.75, 0, 0],
          '8727': [-0.03472, 0.46528, 0, 0],
          '8728': [-0.05555, 0.44445, 0, 0],
          '8729': [-0.05555, 0.44445, 0, 0],
          '8730': [0.2, 0.8, 0, 0],
          '8733': [0, 0.43056, 0, 0],
          '8734': [0, 0.43056, 0, 0],
          '8736': [0, 0.69224, 0, 0],
          '8739': [0.25, 0.75, 0, 0],
          '8741': [0.25, 0.75, 0, 0],
          '8743': [0, 0.55556, 0, 0],
          '8744': [0, 0.55556, 0, 0],
          '8745': [0, 0.55556, 0, 0],
          '8746': [0, 0.55556, 0, 0],
          '8747': [0.19444, 0.69444, 0.11111, 0],
          '8764': [-0.13313, 0.36687, 0, 0],
          '8768': [0.19444, 0.69444, 0, 0],
          '8771': [-0.03625, 0.46375, 0, 0],
          '8773': [-0.022, 0.589, 0, 0],
          '8776': [-0.01688, 0.48312, 0, 0],
          '8781': [-0.03625, 0.46375, 0, 0],
          '8784': [-0.133, 0.67, 0, 0],
          '8801': [-0.03625, 0.46375, 0, 0],
          '8804': [0.13597, 0.63597, 0, 0],
          '8805': [0.13597, 0.63597, 0, 0],
          '8810': [0.0391, 0.5391, 0, 0],
          '8811': [0.0391, 0.5391, 0, 0],
          '8826': [0.0391, 0.5391, 0, 0],
          '8827': [0.0391, 0.5391, 0, 0],
          '8834': [0.0391, 0.5391, 0, 0],
          '8835': [0.0391, 0.5391, 0, 0],
          '8838': [0.13597, 0.63597, 0, 0],
          '8839': [0.13597, 0.63597, 0, 0],
          '8846': [0, 0.55556, 0, 0],
          '8849': [0.13597, 0.63597, 0, 0],
          '8850': [0.13597, 0.63597, 0, 0],
          '8851': [0, 0.55556, 0, 0],
          '8852': [0, 0.55556, 0, 0],
          '8853': [0.08333, 0.58333, 0, 0],
          '8854': [0.08333, 0.58333, 0, 0],
          '8855': [0.08333, 0.58333, 0, 0],
          '8856': [0.08333, 0.58333, 0, 0],
          '8857': [0.08333, 0.58333, 0, 0],
          '8866': [0, 0.69444, 0, 0],
          '8867': [0, 0.69444, 0, 0],
          '8868': [0, 0.69444, 0, 0],
          '8869': [0, 0.69444, 0, 0],
          '8872': [0.249, 0.75, 0, 0],
          '8900': [-0.05555, 0.44445, 0, 0],
          '8901': [-0.05555, 0.44445, 0, 0],
          '8902': [-0.03472, 0.46528, 0, 0],
          '8904': [0.005, 0.505, 0, 0],
          '8942': [0.03, 0.9, 0, 0],
          '8943': [-0.19, 0.31, 0, 0],
          '8945': [-0.1, 0.82, 0, 0],
          '8968': [0.25, 0.75, 0, 0],
          '8969': [0.25, 0.75, 0, 0],
          '8970': [0.25, 0.75, 0, 0],
          '8971': [0.25, 0.75, 0, 0],
          '8994': [-0.14236, 0.35764, 0, 0],
          '8995': [-0.14236, 0.35764, 0, 0],
          '9136': [0.244, 0.744, 0, 0],
          '9137': [0.244, 0.744, 0, 0],
          '9651': [0.19444, 0.69444, 0, 0],
          '9657': [-0.03472, 0.46528, 0, 0],
          '9661': [0.19444, 0.69444, 0, 0],
          '9667': [-0.03472, 0.46528, 0, 0],
          '9711': [0.19444, 0.69444, 0, 0],
          '9824': [0.12963, 0.69444, 0, 0],
          '9825': [0.12963, 0.69444, 0, 0],
          '9826': [0.12963, 0.69444, 0, 0],
          '9827': [0.12963, 0.69444, 0, 0],
          '9837': [0, 0.75, 0, 0],
          '9838': [0.19444, 0.69444, 0, 0],
          '9839': [0.19444, 0.69444, 0, 0],
          '10216': [0.25, 0.75, 0, 0],
          '10217': [0.25, 0.75, 0, 0],
          '10222': [0.244, 0.744, 0, 0],
          '10223': [0.244, 0.744, 0, 0],
          '10229': [0.011, 0.511, 0, 0],
          '10230': [0.011, 0.511, 0, 0],
          '10231': [0.011, 0.511, 0, 0],
          '10232': [0.024, 0.525, 0, 0],
          '10233': [0.024, 0.525, 0, 0],
          '10234': [0.024, 0.525, 0, 0],
          '10236': [0.011, 0.511, 0, 0],
          '10815': [0, 0.68333, 0, 0],
          '10927': [0.13597, 0.63597, 0, 0],
          '10928': [0.13597, 0.63597, 0, 0],
          '57376': [0.19444, 0.69444, 0, 0],
      },
      'Math-BoldItalic': {
          '65': [0, 0.68611, 0, 0],
          '66': [0, 0.68611, 0.04835, 0],
          '67': [0, 0.68611, 0.06979, 0],
          '68': [0, 0.68611, 0.03194, 0],
          '69': [0, 0.68611, 0.05451, 0],
          '70': [0, 0.68611, 0.15972, 0],
          '71': [0, 0.68611, 0, 0],
          '72': [0, 0.68611, 0.08229, 0],
          '73': [0, 0.68611, 0.07778, 0],
          '74': [0, 0.68611, 0.10069, 0],
          '75': [0, 0.68611, 0.06979, 0],
          '76': [0, 0.68611, 0, 0],
          '77': [0, 0.68611, 0.11424, 0],
          '78': [0, 0.68611, 0.11424, 0],
          '79': [0, 0.68611, 0.03194, 0],
          '80': [0, 0.68611, 0.15972, 0],
          '81': [0.19444, 0.68611, 0, 0],
          '82': [0, 0.68611, 0.00421, 0],
          '83': [0, 0.68611, 0.05382, 0],
          '84': [0, 0.68611, 0.15972, 0],
          '85': [0, 0.68611, 0.11424, 0],
          '86': [0, 0.68611, 0.25555, 0],
          '87': [0, 0.68611, 0.15972, 0],
          '88': [0, 0.68611, 0.07778, 0],
          '89': [0, 0.68611, 0.25555, 0],
          '90': [0, 0.68611, 0.06979, 0],
          '97': [0, 0.44444, 0, 0],
          '98': [0, 0.69444, 0, 0],
          '99': [0, 0.44444, 0, 0],
          '100': [0, 0.69444, 0, 0],
          '101': [0, 0.44444, 0, 0],
          '102': [0.19444, 0.69444, 0.11042, 0],
          '103': [0.19444, 0.44444, 0.03704, 0],
          '104': [0, 0.69444, 0, 0],
          '105': [0, 0.69326, 0, 0],
          '106': [0.19444, 0.69326, 0.0622, 0],
          '107': [0, 0.69444, 0.01852, 0],
          '108': [0, 0.69444, 0.0088, 0],
          '109': [0, 0.44444, 0, 0],
          '110': [0, 0.44444, 0, 0],
          '111': [0, 0.44444, 0, 0],
          '112': [0.19444, 0.44444, 0, 0],
          '113': [0.19444, 0.44444, 0.03704, 0],
          '114': [0, 0.44444, 0.03194, 0],
          '115': [0, 0.44444, 0, 0],
          '116': [0, 0.63492, 0, 0],
          '117': [0, 0.44444, 0, 0],
          '118': [0, 0.44444, 0.03704, 0],
          '119': [0, 0.44444, 0.02778, 0],
          '120': [0, 0.44444, 0, 0],
          '121': [0.19444, 0.44444, 0.03704, 0],
          '122': [0, 0.44444, 0.04213, 0],
          '915': [0, 0.68611, 0.15972, 0],
          '916': [0, 0.68611, 0, 0],
          '920': [0, 0.68611, 0.03194, 0],
          '923': [0, 0.68611, 0, 0],
          '926': [0, 0.68611, 0.07458, 0],
          '928': [0, 0.68611, 0.08229, 0],
          '931': [0, 0.68611, 0.05451, 0],
          '933': [0, 0.68611, 0.15972, 0],
          '934': [0, 0.68611, 0, 0],
          '936': [0, 0.68611, 0.11653, 0],
          '937': [0, 0.68611, 0.04835, 0],
          '945': [0, 0.44444, 0, 0],
          '946': [0.19444, 0.69444, 0.03403, 0],
          '947': [0.19444, 0.44444, 0.06389, 0],
          '948': [0, 0.69444, 0.03819, 0],
          '949': [0, 0.44444, 0, 0],
          '950': [0.19444, 0.69444, 0.06215, 0],
          '951': [0.19444, 0.44444, 0.03704, 0],
          '952': [0, 0.69444, 0.03194, 0],
          '953': [0, 0.44444, 0, 0],
          '954': [0, 0.44444, 0, 0],
          '955': [0, 0.69444, 0, 0],
          '956': [0.19444, 0.44444, 0, 0],
          '957': [0, 0.44444, 0.06898, 0],
          '958': [0.19444, 0.69444, 0.03021, 0],
          '959': [0, 0.44444, 0, 0],
          '960': [0, 0.44444, 0.03704, 0],
          '961': [0.19444, 0.44444, 0, 0],
          '962': [0.09722, 0.44444, 0.07917, 0],
          '963': [0, 0.44444, 0.03704, 0],
          '964': [0, 0.44444, 0.13472, 0],
          '965': [0, 0.44444, 0.03704, 0],
          '966': [0.19444, 0.44444, 0, 0],
          '967': [0.19444, 0.44444, 0, 0],
          '968': [0.19444, 0.69444, 0.03704, 0],
          '969': [0, 0.44444, 0.03704, 0],
          '977': [0, 0.69444, 0, 0],
          '981': [0.19444, 0.69444, 0, 0],
          '982': [0, 0.44444, 0.03194, 0],
          '1009': [0.19444, 0.44444, 0, 0],
          '1013': [0, 0.44444, 0, 0],
      },
      'Math-Italic': {
          '65': [0, 0.68333, 0, 0.13889],
          '66': [0, 0.68333, 0.05017, 0.08334],
          '67': [0, 0.68333, 0.07153, 0.08334],
          '68': [0, 0.68333, 0.02778, 0.05556],
          '69': [0, 0.68333, 0.05764, 0.08334],
          '70': [0, 0.68333, 0.13889, 0.08334],
          '71': [0, 0.68333, 0, 0.08334],
          '72': [0, 0.68333, 0.08125, 0.05556],
          '73': [0, 0.68333, 0.07847, 0.11111],
          '74': [0, 0.68333, 0.09618, 0.16667],
          '75': [0, 0.68333, 0.07153, 0.05556],
          '76': [0, 0.68333, 0, 0.02778],
          '77': [0, 0.68333, 0.10903, 0.08334],
          '78': [0, 0.68333, 0.10903, 0.08334],
          '79': [0, 0.68333, 0.02778, 0.08334],
          '80': [0, 0.68333, 0.13889, 0.08334],
          '81': [0.19444, 0.68333, 0, 0.08334],
          '82': [0, 0.68333, 0.00773, 0.08334],
          '83': [0, 0.68333, 0.05764, 0.08334],
          '84': [0, 0.68333, 0.13889, 0.08334],
          '85': [0, 0.68333, 0.10903, 0.02778],
          '86': [0, 0.68333, 0.22222, 0],
          '87': [0, 0.68333, 0.13889, 0],
          '88': [0, 0.68333, 0.07847, 0.08334],
          '89': [0, 0.68333, 0.22222, 0],
          '90': [0, 0.68333, 0.07153, 0.08334],
          '97': [0, 0.43056, 0, 0],
          '98': [0, 0.69444, 0, 0],
          '99': [0, 0.43056, 0, 0.05556],
          '100': [0, 0.69444, 0, 0.16667],
          '101': [0, 0.43056, 0, 0.05556],
          '102': [0.19444, 0.69444, 0.10764, 0.16667],
          '103': [0.19444, 0.43056, 0.03588, 0.02778],
          '104': [0, 0.69444, 0, 0],
          '105': [0, 0.65952, 0, 0],
          '106': [0.19444, 0.65952, 0.05724, 0],
          '107': [0, 0.69444, 0.03148, 0],
          '108': [0, 0.69444, 0.01968, 0.08334],
          '109': [0, 0.43056, 0, 0],
          '110': [0, 0.43056, 0, 0],
          '111': [0, 0.43056, 0, 0.05556],
          '112': [0.19444, 0.43056, 0, 0.08334],
          '113': [0.19444, 0.43056, 0.03588, 0.08334],
          '114': [0, 0.43056, 0.02778, 0.05556],
          '115': [0, 0.43056, 0, 0.05556],
          '116': [0, 0.61508, 0, 0.08334],
          '117': [0, 0.43056, 0, 0.02778],
          '118': [0, 0.43056, 0.03588, 0.02778],
          '119': [0, 0.43056, 0.02691, 0.08334],
          '120': [0, 0.43056, 0, 0.02778],
          '121': [0.19444, 0.43056, 0.03588, 0.05556],
          '122': [0, 0.43056, 0.04398, 0.05556],
          '915': [0, 0.68333, 0.13889, 0.08334],
          '916': [0, 0.68333, 0, 0.16667],
          '920': [0, 0.68333, 0.02778, 0.08334],
          '923': [0, 0.68333, 0, 0.16667],
          '926': [0, 0.68333, 0.07569, 0.08334],
          '928': [0, 0.68333, 0.08125, 0.05556],
          '931': [0, 0.68333, 0.05764, 0.08334],
          '933': [0, 0.68333, 0.13889, 0.05556],
          '934': [0, 0.68333, 0, 0.08334],
          '936': [0, 0.68333, 0.11, 0.05556],
          '937': [0, 0.68333, 0.05017, 0.08334],
          '945': [0, 0.43056, 0.0037, 0.02778],
          '946': [0.19444, 0.69444, 0.05278, 0.08334],
          '947': [0.19444, 0.43056, 0.05556, 0],
          '948': [0, 0.69444, 0.03785, 0.05556],
          '949': [0, 0.43056, 0, 0.08334],
          '950': [0.19444, 0.69444, 0.07378, 0.08334],
          '951': [0.19444, 0.43056, 0.03588, 0.05556],
          '952': [0, 0.69444, 0.02778, 0.08334],
          '953': [0, 0.43056, 0, 0.05556],
          '954': [0, 0.43056, 0, 0],
          '955': [0, 0.69444, 0, 0],
          '956': [0.19444, 0.43056, 0, 0.02778],
          '957': [0, 0.43056, 0.06366, 0.02778],
          '958': [0.19444, 0.69444, 0.04601, 0.11111],
          '959': [0, 0.43056, 0, 0.05556],
          '960': [0, 0.43056, 0.03588, 0],
          '961': [0.19444, 0.43056, 0, 0.08334],
          '962': [0.09722, 0.43056, 0.07986, 0.08334],
          '963': [0, 0.43056, 0.03588, 0],
          '964': [0, 0.43056, 0.1132, 0.02778],
          '965': [0, 0.43056, 0.03588, 0.02778],
          '966': [0.19444, 0.43056, 0, 0.08334],
          '967': [0.19444, 0.43056, 0, 0.05556],
          '968': [0.19444, 0.69444, 0.03588, 0.11111],
          '969': [0, 0.43056, 0.03588, 0],
          '977': [0, 0.69444, 0, 0.08334],
          '981': [0.19444, 0.69444, 0, 0.08334],
          '982': [0, 0.43056, 0.02778, 0],
          '1009': [0.19444, 0.43056, 0, 0.08334],
          '1013': [0, 0.43056, 0, 0.05556],
      },
      'SansSerif-Bold': {
          '33': [0, 0.69444, 0, 0],
          '34': [0, 0.69444, 0, 0],
          '35': [0.19444, 0.69444, 0, 0],
          '36': [0.05556, 0.75, 0, 0],
          '37': [0.05556, 0.75, 0, 0],
          '38': [0, 0.69444, 0, 0],
          '39': [0, 0.69444, 0, 0],
          '40': [0.25, 0.75, 0, 0],
          '41': [0.25, 0.75, 0, 0],
          '42': [0, 0.75, 0, 0],
          '43': [0.11667, 0.61667, 0, 0],
          '44': [0.10556, 0.13056, 0, 0],
          '45': [0, 0.45833, 0, 0],
          '46': [0, 0.13056, 0, 0],
          '47': [0.25, 0.75, 0, 0],
          '48': [0, 0.69444, 0, 0],
          '49': [0, 0.69444, 0, 0],
          '50': [0, 0.69444, 0, 0],
          '51': [0, 0.69444, 0, 0],
          '52': [0, 0.69444, 0, 0],
          '53': [0, 0.69444, 0, 0],
          '54': [0, 0.69444, 0, 0],
          '55': [0, 0.69444, 0, 0],
          '56': [0, 0.69444, 0, 0],
          '57': [0, 0.69444, 0, 0],
          '58': [0, 0.45833, 0, 0],
          '59': [0.10556, 0.45833, 0, 0],
          '61': [-0.09375, 0.40625, 0, 0],
          '63': [0, 0.69444, 0, 0],
          '64': [0, 0.69444, 0, 0],
          '65': [0, 0.69444, 0, 0],
          '66': [0, 0.69444, 0, 0],
          '67': [0, 0.69444, 0, 0],
          '68': [0, 0.69444, 0, 0],
          '69': [0, 0.69444, 0, 0],
          '70': [0, 0.69444, 0, 0],
          '71': [0, 0.69444, 0, 0],
          '72': [0, 0.69444, 0, 0],
          '73': [0, 0.69444, 0, 0],
          '74': [0, 0.69444, 0, 0],
          '75': [0, 0.69444, 0, 0],
          '76': [0, 0.69444, 0, 0],
          '77': [0, 0.69444, 0, 0],
          '78': [0, 0.69444, 0, 0],
          '79': [0, 0.69444, 0, 0],
          '80': [0, 0.69444, 0, 0],
          '81': [0.10556, 0.69444, 0, 0],
          '82': [0, 0.69444, 0, 0],
          '83': [0, 0.69444, 0, 0],
          '84': [0, 0.69444, 0, 0],
          '85': [0, 0.69444, 0, 0],
          '86': [0, 0.69444, 0.01528, 0],
          '87': [0, 0.69444, 0.01528, 0],
          '88': [0, 0.69444, 0, 0],
          '89': [0, 0.69444, 0.0275, 0],
          '90': [0, 0.69444, 0, 0],
          '91': [0.25, 0.75, 0, 0],
          '93': [0.25, 0.75, 0, 0],
          '94': [0, 0.69444, 0, 0],
          '95': [0.35, 0.10833, 0.03056, 0],
          '97': [0, 0.45833, 0, 0],
          '98': [0, 0.69444, 0, 0],
          '99': [0, 0.45833, 0, 0],
          '100': [0, 0.69444, 0, 0],
          '101': [0, 0.45833, 0, 0],
          '102': [0, 0.69444, 0.07639, 0],
          '103': [0.19444, 0.45833, 0.01528, 0],
          '104': [0, 0.69444, 0, 0],
          '105': [0, 0.69444, 0, 0],
          '106': [0.19444, 0.69444, 0, 0],
          '107': [0, 0.69444, 0, 0],
          '108': [0, 0.69444, 0, 0],
          '109': [0, 0.45833, 0, 0],
          '110': [0, 0.45833, 0, 0],
          '111': [0, 0.45833, 0, 0],
          '112': [0.19444, 0.45833, 0, 0],
          '113': [0.19444, 0.45833, 0, 0],
          '114': [0, 0.45833, 0.01528, 0],
          '115': [0, 0.45833, 0, 0],
          '116': [0, 0.58929, 0, 0],
          '117': [0, 0.45833, 0, 0],
          '118': [0, 0.45833, 0.01528, 0],
          '119': [0, 0.45833, 0.01528, 0],
          '120': [0, 0.45833, 0, 0],
          '121': [0.19444, 0.45833, 0.01528, 0],
          '122': [0, 0.45833, 0, 0],
          '126': [0.35, 0.34444, 0, 0],
          '168': [0, 0.69444, 0, 0],
          '176': [0, 0.69444, 0, 0],
          '180': [0, 0.69444, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '305': [0, 0.45833, 0, 0],
          '567': [0.19444, 0.45833, 0, 0],
          '710': [0, 0.69444, 0, 0],
          '711': [0, 0.63542, 0, 0],
          '713': [0, 0.63778, 0, 0],
          '728': [0, 0.69444, 0, 0],
          '729': [0, 0.69444, 0, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.69444, 0, 0],
          '733': [0, 0.69444, 0, 0],
          '915': [0, 0.69444, 0, 0],
          '916': [0, 0.69444, 0, 0],
          '920': [0, 0.69444, 0, 0],
          '923': [0, 0.69444, 0, 0],
          '926': [0, 0.69444, 0, 0],
          '928': [0, 0.69444, 0, 0],
          '931': [0, 0.69444, 0, 0],
          '933': [0, 0.69444, 0, 0],
          '934': [0, 0.69444, 0, 0],
          '936': [0, 0.69444, 0, 0],
          '937': [0, 0.69444, 0, 0],
          '8211': [0, 0.45833, 0.03056, 0],
          '8212': [0, 0.45833, 0.03056, 0],
          '8216': [0, 0.69444, 0, 0],
          '8217': [0, 0.69444, 0, 0],
          '8220': [0, 0.69444, 0, 0],
          '8221': [0, 0.69444, 0, 0],
      },
      'SansSerif-Italic': {
          '33': [0, 0.69444, 0.05733, 0],
          '34': [0, 0.69444, 0.00316, 0],
          '35': [0.19444, 0.69444, 0.05087, 0],
          '36': [0.05556, 0.75, 0.11156, 0],
          '37': [0.05556, 0.75, 0.03126, 0],
          '38': [0, 0.69444, 0.03058, 0],
          '39': [0, 0.69444, 0.07816, 0],
          '40': [0.25, 0.75, 0.13164, 0],
          '41': [0.25, 0.75, 0.02536, 0],
          '42': [0, 0.75, 0.11775, 0],
          '43': [0.08333, 0.58333, 0.02536, 0],
          '44': [0.125, 0.08333, 0, 0],
          '45': [0, 0.44444, 0.01946, 0],
          '46': [0, 0.08333, 0, 0],
          '47': [0.25, 0.75, 0.13164, 0],
          '48': [0, 0.65556, 0.11156, 0],
          '49': [0, 0.65556, 0.11156, 0],
          '50': [0, 0.65556, 0.11156, 0],
          '51': [0, 0.65556, 0.11156, 0],
          '52': [0, 0.65556, 0.11156, 0],
          '53': [0, 0.65556, 0.11156, 0],
          '54': [0, 0.65556, 0.11156, 0],
          '55': [0, 0.65556, 0.11156, 0],
          '56': [0, 0.65556, 0.11156, 0],
          '57': [0, 0.65556, 0.11156, 0],
          '58': [0, 0.44444, 0.02502, 0],
          '59': [0.125, 0.44444, 0.02502, 0],
          '61': [-0.13, 0.37, 0.05087, 0],
          '63': [0, 0.69444, 0.11809, 0],
          '64': [0, 0.69444, 0.07555, 0],
          '65': [0, 0.69444, 0, 0],
          '66': [0, 0.69444, 0.08293, 0],
          '67': [0, 0.69444, 0.11983, 0],
          '68': [0, 0.69444, 0.07555, 0],
          '69': [0, 0.69444, 0.11983, 0],
          '70': [0, 0.69444, 0.13372, 0],
          '71': [0, 0.69444, 0.11983, 0],
          '72': [0, 0.69444, 0.08094, 0],
          '73': [0, 0.69444, 0.13372, 0],
          '74': [0, 0.69444, 0.08094, 0],
          '75': [0, 0.69444, 0.11983, 0],
          '76': [0, 0.69444, 0, 0],
          '77': [0, 0.69444, 0.08094, 0],
          '78': [0, 0.69444, 0.08094, 0],
          '79': [0, 0.69444, 0.07555, 0],
          '80': [0, 0.69444, 0.08293, 0],
          '81': [0.125, 0.69444, 0.07555, 0],
          '82': [0, 0.69444, 0.08293, 0],
          '83': [0, 0.69444, 0.09205, 0],
          '84': [0, 0.69444, 0.13372, 0],
          '85': [0, 0.69444, 0.08094, 0],
          '86': [0, 0.69444, 0.1615, 0],
          '87': [0, 0.69444, 0.1615, 0],
          '88': [0, 0.69444, 0.13372, 0],
          '89': [0, 0.69444, 0.17261, 0],
          '90': [0, 0.69444, 0.11983, 0],
          '91': [0.25, 0.75, 0.15942, 0],
          '93': [0.25, 0.75, 0.08719, 0],
          '94': [0, 0.69444, 0.0799, 0],
          '95': [0.35, 0.09444, 0.08616, 0],
          '97': [0, 0.44444, 0.00981, 0],
          '98': [0, 0.69444, 0.03057, 0],
          '99': [0, 0.44444, 0.08336, 0],
          '100': [0, 0.69444, 0.09483, 0],
          '101': [0, 0.44444, 0.06778, 0],
          '102': [0, 0.69444, 0.21705, 0],
          '103': [0.19444, 0.44444, 0.10836, 0],
          '104': [0, 0.69444, 0.01778, 0],
          '105': [0, 0.67937, 0.09718, 0],
          '106': [0.19444, 0.67937, 0.09162, 0],
          '107': [0, 0.69444, 0.08336, 0],
          '108': [0, 0.69444, 0.09483, 0],
          '109': [0, 0.44444, 0.01778, 0],
          '110': [0, 0.44444, 0.01778, 0],
          '111': [0, 0.44444, 0.06613, 0],
          '112': [0.19444, 0.44444, 0.0389, 0],
          '113': [0.19444, 0.44444, 0.04169, 0],
          '114': [0, 0.44444, 0.10836, 0],
          '115': [0, 0.44444, 0.0778, 0],
          '116': [0, 0.57143, 0.07225, 0],
          '117': [0, 0.44444, 0.04169, 0],
          '118': [0, 0.44444, 0.10836, 0],
          '119': [0, 0.44444, 0.10836, 0],
          '120': [0, 0.44444, 0.09169, 0],
          '121': [0.19444, 0.44444, 0.10836, 0],
          '122': [0, 0.44444, 0.08752, 0],
          '126': [0.35, 0.32659, 0.08826, 0],
          '168': [0, 0.67937, 0.06385, 0],
          '176': [0, 0.69444, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '305': [0, 0.44444, 0.04169, 0],
          '567': [0.19444, 0.44444, 0.04169, 0],
          '710': [0, 0.69444, 0.0799, 0],
          '711': [0, 0.63194, 0.08432, 0],
          '713': [0, 0.60889, 0.08776, 0],
          '714': [0, 0.69444, 0.09205, 0],
          '715': [0, 0.69444, 0, 0],
          '728': [0, 0.69444, 0.09483, 0],
          '729': [0, 0.67937, 0.07774, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.67659, 0.08826, 0],
          '733': [0, 0.69444, 0.09205, 0],
          '915': [0, 0.69444, 0.13372, 0],
          '916': [0, 0.69444, 0, 0],
          '920': [0, 0.69444, 0.07555, 0],
          '923': [0, 0.69444, 0, 0],
          '926': [0, 0.69444, 0.12816, 0],
          '928': [0, 0.69444, 0.08094, 0],
          '931': [0, 0.69444, 0.11983, 0],
          '933': [0, 0.69444, 0.09031, 0],
          '934': [0, 0.69444, 0.04603, 0],
          '936': [0, 0.69444, 0.09031, 0],
          '937': [0, 0.69444, 0.08293, 0],
          '8211': [0, 0.44444, 0.08616, 0],
          '8212': [0, 0.44444, 0.08616, 0],
          '8216': [0, 0.69444, 0.07816, 0],
          '8217': [0, 0.69444, 0.07816, 0],
          '8220': [0, 0.69444, 0.14205, 0],
          '8221': [0, 0.69444, 0.00316, 0],
      },
      'SansSerif-Regular': {
          '33': [0, 0.69444, 0, 0],
          '34': [0, 0.69444, 0, 0],
          '35': [0.19444, 0.69444, 0, 0],
          '36': [0.05556, 0.75, 0, 0],
          '37': [0.05556, 0.75, 0, 0],
          '38': [0, 0.69444, 0, 0],
          '39': [0, 0.69444, 0, 0],
          '40': [0.25, 0.75, 0, 0],
          '41': [0.25, 0.75, 0, 0],
          '42': [0, 0.75, 0, 0],
          '43': [0.08333, 0.58333, 0, 0],
          '44': [0.125, 0.08333, 0, 0],
          '45': [0, 0.44444, 0, 0],
          '46': [0, 0.08333, 0, 0],
          '47': [0.25, 0.75, 0, 0],
          '48': [0, 0.65556, 0, 0],
          '49': [0, 0.65556, 0, 0],
          '50': [0, 0.65556, 0, 0],
          '51': [0, 0.65556, 0, 0],
          '52': [0, 0.65556, 0, 0],
          '53': [0, 0.65556, 0, 0],
          '54': [0, 0.65556, 0, 0],
          '55': [0, 0.65556, 0, 0],
          '56': [0, 0.65556, 0, 0],
          '57': [0, 0.65556, 0, 0],
          '58': [0, 0.44444, 0, 0],
          '59': [0.125, 0.44444, 0, 0],
          '61': [-0.13, 0.37, 0, 0],
          '63': [0, 0.69444, 0, 0],
          '64': [0, 0.69444, 0, 0],
          '65': [0, 0.69444, 0, 0],
          '66': [0, 0.69444, 0, 0],
          '67': [0, 0.69444, 0, 0],
          '68': [0, 0.69444, 0, 0],
          '69': [0, 0.69444, 0, 0],
          '70': [0, 0.69444, 0, 0],
          '71': [0, 0.69444, 0, 0],
          '72': [0, 0.69444, 0, 0],
          '73': [0, 0.69444, 0, 0],
          '74': [0, 0.69444, 0, 0],
          '75': [0, 0.69444, 0, 0],
          '76': [0, 0.69444, 0, 0],
          '77': [0, 0.69444, 0, 0],
          '78': [0, 0.69444, 0, 0],
          '79': [0, 0.69444, 0, 0],
          '80': [0, 0.69444, 0, 0],
          '81': [0.125, 0.69444, 0, 0],
          '82': [0, 0.69444, 0, 0],
          '83': [0, 0.69444, 0, 0],
          '84': [0, 0.69444, 0, 0],
          '85': [0, 0.69444, 0, 0],
          '86': [0, 0.69444, 0.01389, 0],
          '87': [0, 0.69444, 0.01389, 0],
          '88': [0, 0.69444, 0, 0],
          '89': [0, 0.69444, 0.025, 0],
          '90': [0, 0.69444, 0, 0],
          '91': [0.25, 0.75, 0, 0],
          '93': [0.25, 0.75, 0, 0],
          '94': [0, 0.69444, 0, 0],
          '95': [0.35, 0.09444, 0.02778, 0],
          '97': [0, 0.44444, 0, 0],
          '98': [0, 0.69444, 0, 0],
          '99': [0, 0.44444, 0, 0],
          '100': [0, 0.69444, 0, 0],
          '101': [0, 0.44444, 0, 0],
          '102': [0, 0.69444, 0.06944, 0],
          '103': [0.19444, 0.44444, 0.01389, 0],
          '104': [0, 0.69444, 0, 0],
          '105': [0, 0.67937, 0, 0],
          '106': [0.19444, 0.67937, 0, 0],
          '107': [0, 0.69444, 0, 0],
          '108': [0, 0.69444, 0, 0],
          '109': [0, 0.44444, 0, 0],
          '110': [0, 0.44444, 0, 0],
          '111': [0, 0.44444, 0, 0],
          '112': [0.19444, 0.44444, 0, 0],
          '113': [0.19444, 0.44444, 0, 0],
          '114': [0, 0.44444, 0.01389, 0],
          '115': [0, 0.44444, 0, 0],
          '116': [0, 0.57143, 0, 0],
          '117': [0, 0.44444, 0, 0],
          '118': [0, 0.44444, 0.01389, 0],
          '119': [0, 0.44444, 0.01389, 0],
          '120': [0, 0.44444, 0, 0],
          '121': [0.19444, 0.44444, 0.01389, 0],
          '122': [0, 0.44444, 0, 0],
          '126': [0.35, 0.32659, 0, 0],
          '168': [0, 0.67937, 0, 0],
          '176': [0, 0.69444, 0, 0],
          '184': [0.17014, 0, 0, 0],
          '305': [0, 0.44444, 0, 0],
          '567': [0.19444, 0.44444, 0, 0],
          '710': [0, 0.69444, 0, 0],
          '711': [0, 0.63194, 0, 0],
          '713': [0, 0.60889, 0, 0],
          '714': [0, 0.69444, 0, 0],
          '715': [0, 0.69444, 0, 0],
          '728': [0, 0.69444, 0, 0],
          '729': [0, 0.67937, 0, 0],
          '730': [0, 0.69444, 0, 0],
          '732': [0, 0.67659, 0, 0],
          '733': [0, 0.69444, 0, 0],
          '915': [0, 0.69444, 0, 0],
          '916': [0, 0.69444, 0, 0],
          '920': [0, 0.69444, 0, 0],
          '923': [0, 0.69444, 0, 0],
          '926': [0, 0.69444, 0, 0],
          '928': [0, 0.69444, 0, 0],
          '931': [0, 0.69444, 0, 0],
          '933': [0, 0.69444, 0, 0],
          '934': [0, 0.69444, 0, 0],
          '936': [0, 0.69444, 0, 0],
          '937': [0, 0.69444, 0, 0],
          '8211': [0, 0.44444, 0.02778, 0],
          '8212': [0, 0.44444, 0.02778, 0],
          '8216': [0, 0.69444, 0, 0],
          '8217': [0, 0.69444, 0, 0],
          '8220': [0, 0.69444, 0, 0],
          '8221': [0, 0.69444, 0, 0],
      },
      'Script-Regular': {
          '65': [0, 0.7, 0.22925, 0],
          '66': [0, 0.7, 0.04087, 0],
          '67': [0, 0.7, 0.1689, 0],
          '68': [0, 0.7, 0.09371, 0],
          '69': [0, 0.7, 0.18583, 0],
          '70': [0, 0.7, 0.13634, 0],
          '71': [0, 0.7, 0.17322, 0],
          '72': [0, 0.7, 0.29694, 0],
          '73': [0, 0.7, 0.19189, 0],
          '74': [0.27778, 0.7, 0.19189, 0],
          '75': [0, 0.7, 0.31259, 0],
          '76': [0, 0.7, 0.19189, 0],
          '77': [0, 0.7, 0.15981, 0],
          '78': [0, 0.7, 0.3525, 0],
          '79': [0, 0.7, 0.08078, 0],
          '80': [0, 0.7, 0.08078, 0],
          '81': [0, 0.7, 0.03305, 0],
          '82': [0, 0.7, 0.06259, 0],
          '83': [0, 0.7, 0.19189, 0],
          '84': [0, 0.7, 0.29087, 0],
          '85': [0, 0.7, 0.25815, 0],
          '86': [0, 0.7, 0.27523, 0],
          '87': [0, 0.7, 0.27523, 0],
          '88': [0, 0.7, 0.26006, 0],
          '89': [0, 0.7, 0.2939, 0],
          '90': [0, 0.7, 0.24037, 0],
      },
      'Size1-Regular': {
          '40': [0.35001, 0.85, 0, 0],
          '41': [0.35001, 0.85, 0, 0],
          '47': [0.35001, 0.85, 0, 0],
          '91': [0.35001, 0.85, 0, 0],
          '92': [0.35001, 0.85, 0, 0],
          '93': [0.35001, 0.85, 0, 0],
          '123': [0.35001, 0.85, 0, 0],
          '125': [0.35001, 0.85, 0, 0],
          '710': [0, 0.72222, 0, 0],
          '732': [0, 0.72222, 0, 0],
          '770': [0, 0.72222, 0, 0],
          '771': [0, 0.72222, 0, 0],
          '8214': [-0.00099, 0.601, 0, 0],
          '8593': [1e-5, 0.6, 0, 0],
          '8595': [1e-5, 0.6, 0, 0],
          '8657': [1e-5, 0.6, 0, 0],
          '8659': [1e-5, 0.6, 0, 0],
          '8719': [0.25001, 0.75, 0, 0],
          '8720': [0.25001, 0.75, 0, 0],
          '8721': [0.25001, 0.75, 0, 0],
          '8730': [0.35001, 0.85, 0, 0],
          '8739': [-0.00599, 0.606, 0, 0],
          '8741': [-0.00599, 0.606, 0, 0],
          '8747': [0.30612, 0.805, 0.19445, 0],
          '8748': [0.306, 0.805, 0.19445, 0],
          '8749': [0.306, 0.805, 0.19445, 0],
          '8750': [0.30612, 0.805, 0.19445, 0],
          '8896': [0.25001, 0.75, 0, 0],
          '8897': [0.25001, 0.75, 0, 0],
          '8898': [0.25001, 0.75, 0, 0],
          '8899': [0.25001, 0.75, 0, 0],
          '8968': [0.35001, 0.85, 0, 0],
          '8969': [0.35001, 0.85, 0, 0],
          '8970': [0.35001, 0.85, 0, 0],
          '8971': [0.35001, 0.85, 0, 0],
          '9168': [-0.00099, 0.601, 0, 0],
          '10216': [0.35001, 0.85, 0, 0],
          '10217': [0.35001, 0.85, 0, 0],
          '10752': [0.25001, 0.75, 0, 0],
          '10753': [0.25001, 0.75, 0, 0],
          '10754': [0.25001, 0.75, 0, 0],
          '10756': [0.25001, 0.75, 0, 0],
          '10758': [0.25001, 0.75, 0, 0],
      },
      'Size2-Regular': {
          '40': [0.65002, 1.15, 0, 0],
          '41': [0.65002, 1.15, 0, 0],
          '47': [0.65002, 1.15, 0, 0],
          '91': [0.65002, 1.15, 0, 0],
          '92': [0.65002, 1.15, 0, 0],
          '93': [0.65002, 1.15, 0, 0],
          '123': [0.65002, 1.15, 0, 0],
          '125': [0.65002, 1.15, 0, 0],
          '710': [0, 0.75, 0, 0],
          '732': [0, 0.75, 0, 0],
          '770': [0, 0.75, 0, 0],
          '771': [0, 0.75, 0, 0],
          '8719': [0.55001, 1.05, 0, 0],
          '8720': [0.55001, 1.05, 0, 0],
          '8721': [0.55001, 1.05, 0, 0],
          '8730': [0.65002, 1.15, 0, 0],
          '8747': [0.86225, 1.36, 0.44445, 0],
          '8748': [0.862, 1.36, 0.44445, 0],
          '8749': [0.862, 1.36, 0.44445, 0],
          '8750': [0.86225, 1.36, 0.44445, 0],
          '8896': [0.55001, 1.05, 0, 0],
          '8897': [0.55001, 1.05, 0, 0],
          '8898': [0.55001, 1.05, 0, 0],
          '8899': [0.55001, 1.05, 0, 0],
          '8968': [0.65002, 1.15, 0, 0],
          '8969': [0.65002, 1.15, 0, 0],
          '8970': [0.65002, 1.15, 0, 0],
          '8971': [0.65002, 1.15, 0, 0],
          '10216': [0.65002, 1.15, 0, 0],
          '10217': [0.65002, 1.15, 0, 0],
          '10752': [0.55001, 1.05, 0, 0],
          '10753': [0.55001, 1.05, 0, 0],
          '10754': [0.55001, 1.05, 0, 0],
          '10756': [0.55001, 1.05, 0, 0],
          '10758': [0.55001, 1.05, 0, 0],
      },
      'Size3-Regular': {
          '40': [0.95003, 1.45, 0, 0],
          '41': [0.95003, 1.45, 0, 0],
          '47': [0.95003, 1.45, 0, 0],
          '91': [0.95003, 1.45, 0, 0],
          '92': [0.95003, 1.45, 0, 0],
          '93': [0.95003, 1.45, 0, 0],
          '123': [0.95003, 1.45, 0, 0],
          '125': [0.95003, 1.45, 0, 0],
          '710': [0, 0.75, 0, 0],
          '732': [0, 0.75, 0, 0],
          '770': [0, 0.75, 0, 0],
          '771': [0, 0.75, 0, 0],
          '8730': [0.95003, 1.45, 0, 0],
          '8968': [0.95003, 1.45, 0, 0],
          '8969': [0.95003, 1.45, 0, 0],
          '8970': [0.95003, 1.45, 0, 0],
          '8971': [0.95003, 1.45, 0, 0],
          '10216': [0.95003, 1.45, 0, 0],
          '10217': [0.95003, 1.45, 0, 0],
      },
      'Size4-Regular': {
          '40': [1.25003, 1.75, 0, 0],
          '41': [1.25003, 1.75, 0, 0],
          '47': [1.25003, 1.75, 0, 0],
          '91': [1.25003, 1.75, 0, 0],
          '92': [1.25003, 1.75, 0, 0],
          '93': [1.25003, 1.75, 0, 0],
          '123': [1.25003, 1.75, 0, 0],
          '125': [1.25003, 1.75, 0, 0],
          '710': [0, 0.825, 0, 0],
          '732': [0, 0.825, 0, 0],
          '770': [0, 0.825, 0, 0],
          '771': [0, 0.825, 0, 0],
          '8730': [1.25003, 1.75, 0, 0],
          '8968': [1.25003, 1.75, 0, 0],
          '8969': [1.25003, 1.75, 0, 0],
          '8970': [1.25003, 1.75, 0, 0],
          '8971': [1.25003, 1.75, 0, 0],
          '9115': [0.64502, 1.155, 0, 0],
          '9116': [1e-5, 0.6, 0, 0],
          '9117': [0.64502, 1.155, 0, 0],
          '9118': [0.64502, 1.155, 0, 0],
          '9119': [1e-5, 0.6, 0, 0],
          '9120': [0.64502, 1.155, 0, 0],
          '9121': [0.64502, 1.155, 0, 0],
          '9122': [-0.00099, 0.601, 0, 0],
          '9123': [0.64502, 1.155, 0, 0],
          '9124': [0.64502, 1.155, 0, 0],
          '9125': [-0.00099, 0.601, 0, 0],
          '9126': [0.64502, 1.155, 0, 0],
          '9127': [1e-5, 0.9, 0, 0],
          '9128': [0.65002, 1.15, 0, 0],
          '9129': [0.90001, 0, 0, 0],
          '9130': [0, 0.3, 0, 0],
          '9131': [1e-5, 0.9, 0, 0],
          '9132': [0.65002, 1.15, 0, 0],
          '9133': [0.90001, 0, 0, 0],
          '9143': [0.88502, 0.915, 0, 0],
          '10216': [1.25003, 1.75, 0, 0],
          '10217': [1.25003, 1.75, 0, 0],
          '57344': [-0.00499, 0.605, 0, 0],
          '57345': [-0.00499, 0.605, 0, 0],
          '57680': [0, 0.12, 0, 0],
          '57681': [0, 0.12, 0, 0],
          '57682': [0, 0.12, 0, 0],
          '57683': [0, 0.12, 0, 0],
      },
      'Typewriter-Regular': {
          '32': [0, 0, 0, 0],
          '33': [0, 0.61111, 0, 0],
          '34': [0, 0.61111, 0, 0],
          '35': [0, 0.61111, 0, 0],
          '36': [0.08333, 0.69444, 0, 0],
          '37': [0.08333, 0.69444, 0, 0],
          '38': [0, 0.61111, 0, 0],
          '39': [0, 0.61111, 0, 0],
          '40': [0.08333, 0.69444, 0, 0],
          '41': [0.08333, 0.69444, 0, 0],
          '42': [0, 0.52083, 0, 0],
          '43': [-0.08056, 0.53055, 0, 0],
          '44': [0.13889, 0.125, 0, 0],
          '45': [-0.08056, 0.53055, 0, 0],
          '46': [0, 0.125, 0, 0],
          '47': [0.08333, 0.69444, 0, 0],
          '48': [0, 0.61111, 0, 0],
          '49': [0, 0.61111, 0, 0],
          '50': [0, 0.61111, 0, 0],
          '51': [0, 0.61111, 0, 0],
          '52': [0, 0.61111, 0, 0],
          '53': [0, 0.61111, 0, 0],
          '54': [0, 0.61111, 0, 0],
          '55': [0, 0.61111, 0, 0],
          '56': [0, 0.61111, 0, 0],
          '57': [0, 0.61111, 0, 0],
          '58': [0, 0.43056, 0, 0],
          '59': [0.13889, 0.43056, 0, 0],
          '60': [-0.05556, 0.55556, 0, 0],
          '61': [-0.19549, 0.41562, 0, 0],
          '62': [-0.05556, 0.55556, 0, 0],
          '63': [0, 0.61111, 0, 0],
          '64': [0, 0.61111, 0, 0],
          '65': [0, 0.61111, 0, 0],
          '66': [0, 0.61111, 0, 0],
          '67': [0, 0.61111, 0, 0],
          '68': [0, 0.61111, 0, 0],
          '69': [0, 0.61111, 0, 0],
          '70': [0, 0.61111, 0, 0],
          '71': [0, 0.61111, 0, 0],
          '72': [0, 0.61111, 0, 0],
          '73': [0, 0.61111, 0, 0],
          '74': [0, 0.61111, 0, 0],
          '75': [0, 0.61111, 0, 0],
          '76': [0, 0.61111, 0, 0],
          '77': [0, 0.61111, 0, 0],
          '78': [0, 0.61111, 0, 0],
          '79': [0, 0.61111, 0, 0],
          '80': [0, 0.61111, 0, 0],
          '81': [0.13889, 0.61111, 0, 0],
          '82': [0, 0.61111, 0, 0],
          '83': [0, 0.61111, 0, 0],
          '84': [0, 0.61111, 0, 0],
          '85': [0, 0.61111, 0, 0],
          '86': [0, 0.61111, 0, 0],
          '87': [0, 0.61111, 0, 0],
          '88': [0, 0.61111, 0, 0],
          '89': [0, 0.61111, 0, 0],
          '90': [0, 0.61111, 0, 0],
          '91': [0.08333, 0.69444, 0, 0],
          '92': [0.08333, 0.69444, 0, 0],
          '93': [0.08333, 0.69444, 0, 0],
          '94': [0, 0.61111, 0, 0],
          '95': [0.09514, 0, 0, 0],
          '96': [0, 0.61111, 0, 0],
          '97': [0, 0.43056, 0, 0],
          '98': [0, 0.61111, 0, 0],
          '99': [0, 0.43056, 0, 0],
          '100': [0, 0.61111, 0, 0],
          '101': [0, 0.43056, 0, 0],
          '102': [0, 0.61111, 0, 0],
          '103': [0.22222, 0.43056, 0, 0],
          '104': [0, 0.61111, 0, 0],
          '105': [0, 0.61111, 0, 0],
          '106': [0.22222, 0.61111, 0, 0],
          '107': [0, 0.61111, 0, 0],
          '108': [0, 0.61111, 0, 0],
          '109': [0, 0.43056, 0, 0],
          '110': [0, 0.43056, 0, 0],
          '111': [0, 0.43056, 0, 0],
          '112': [0.22222, 0.43056, 0, 0],
          '113': [0.22222, 0.43056, 0, 0],
          '114': [0, 0.43056, 0, 0],
          '115': [0, 0.43056, 0, 0],
          '116': [0, 0.55358, 0, 0],
          '117': [0, 0.43056, 0, 0],
          '118': [0, 0.43056, 0, 0],
          '119': [0, 0.43056, 0, 0],
          '120': [0, 0.43056, 0, 0],
          '121': [0.22222, 0.43056, 0, 0],
          '122': [0, 0.43056, 0, 0],
          '123': [0.08333, 0.69444, 0, 0],
          '124': [0.08333, 0.69444, 0, 0],
          '125': [0.08333, 0.69444, 0, 0],
          '126': [0, 0.61111, 0, 0],
          '127': [0, 0.61111, 0, 0],
          '160': [0, 0, 0, 0],
          '176': [0, 0.61111, 0, 0],
          '184': [0.19445, 0, 0, 0],
          '305': [0, 0.43056, 0, 0],
          '567': [0.22222, 0.43056, 0, 0],
          '711': [0, 0.56597, 0, 0],
          '713': [0, 0.56555, 0, 0],
          '714': [0, 0.61111, 0, 0],
          '715': [0, 0.61111, 0, 0],
          '728': [0, 0.61111, 0, 0],
          '730': [0, 0.61111, 0, 0],
          '770': [0, 0.61111, 0, 0],
          '771': [0, 0.61111, 0, 0],
          '776': [0, 0.61111, 0, 0],
          '915': [0, 0.61111, 0, 0],
          '916': [0, 0.61111, 0, 0],
          '920': [0, 0.61111, 0, 0],
          '923': [0, 0.61111, 0, 0],
          '926': [0, 0.61111, 0, 0],
          '928': [0, 0.61111, 0, 0],
          '931': [0, 0.61111, 0, 0],
          '933': [0, 0.61111, 0, 0],
          '934': [0, 0.61111, 0, 0],
          '936': [0, 0.61111, 0, 0],
          '937': [0, 0.61111, 0, 0],
          '8216': [0, 0.61111, 0, 0],
          '8217': [0, 0.61111, 0, 0],
          '8242': [0, 0.61111, 0, 0],
          '9251': [0.11111, 0.21944, 0, 0],
      },
  };

  /**
   * This module contains metrics regarding fonts and individual symbols. The sigma
   * and xi variables, as well as the METRICS_MAP map contain data extracted from
   * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
   * `metrics` variable and the getCharacterMetrics function.
   */
  // Const hangulRegex = /[\uAC00-\uD7AF]/;
  // This regex combines
  // - Hiragana: [\u3040-\u309F]
  // - Katakana: [\u30A0-\u30FF]
  // - CJK ideograms: [\u4E00-\u9FAF]
  // - Hangul syllables: [\uAC00-\uD7AF]
  // Notably missing are half width Katakana and Romaji glyphs.
  const cjkRegex = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/;
  /*
   *
   * In TeX, there are actually three sets of dimensions, one for each of
   * textstyle, scriptstyle, and scriptscriptstyle.  These are provided in the
   * the arrays below, in that order.
   *
   * The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respectively.
   * This was determined by running the following script:
   *``` bash
        latex -interaction=nonstopmode \
        '\documentclass{article}\usepackage{amsmath}\begin{document}' \
        '$a$ \expandafter\show\the\textfont2' \
        '\expandafter\show\the\scriptfont2' \
        '\expandafter\show\the\scriptscriptfont2' \
        '\stop'
    ```
   * The metrics themselves were retrieved using the following commands:
   * ``` bash
        tftopl cmsy10
        tftopl cmsy7
        tftopl cmsy5
      ```
   *
   * The output of each of these commands is quite lengthy.  The only part we
   * care about is the FONTDIMEN section. Each value is measured in EMs.
   * @memberof module:fontMetrics
   */
  const SIGMAS = {
      slant: [0.25, 0.25, 0.25],
      space: [0, 0, 0],
      stretch: [0, 0, 0],
      shrink: [0, 0, 0],
      xHeight: [0.431, 0.431, 0.431],
      quad: [1, 1.171, 1.472],
      extraSpace: [0, 0, 0],
      num1: [0.677, 0.732, 0.925],
      num2: [0.394, 0.384, 0.387],
      num3: [0.444, 0.471, 0.504],
      denom1: [0.686, 0.752, 1.025],
      denom2: [0.345, 0.344, 0.532],
      sup1: [0.413, 0.503, 0.504],
      sup2: [0.363, 0.431, 0.404],
      sup3: [0.289, 0.286, 0.294],
      sub1: [0.15, 0.143, 0.2],
      sub2: [0.247, 0.286, 0.4],
      supDrop: [0.386, 0.353, 0.494],
      subDrop: [0.05, 0.071, 0.1],
      delim1: [2.39, 1.7, 1.98],
      delim2: [1.01, 1.157, 1.42],
      axisHeight: [0.25, 0.25, 0.25],
  };
  // These font metrics are extracted from TeX by using
  // \font\a=cmex10
  // \showthe\fontdimenX\a
  // where X is the corresponding variable number. These correspond to the font
  // parameters of the extension fonts (family 3). See the TeXbook, page 433
  // const xi1 = 0; // Slant per pt
  // const xi2 = 0; // Interword space
  // const xi3 = 0; // Interword stretch
  // const xi4 = 0; // Interword shrink
  // const xi5 = 0.431; // x-height
  // const xi6 = 1; // Quad width
  // const xi7 = 0; // Extra space
  const xi8 = 0.04; // Default rule thickness, TexBook p.390
  const xi9 = 0.111;
  const xi10 = 0.166;
  const xi11 = 0.2;
  const xi12 = 0.6;
  const xi13 = 0.1;
  // Note: xi14: offset from baseline for superscript TexBook p. 179
  // Note: xi16: offset from baseline for subscript
  // This value determines how large a pt is, for metrics which are defined in
  // terms of pts.
  // This value is also used in katex.less; if you change it make sure the values
  // match.
  const ptPerEm = 10;
  /*
   * This is just a mapping from common names to real metrics
   */
  const METRICS = {
      defaultRuleThickness: xi8,
      bigOpSpacing1: xi9,
      bigOpSpacing2: xi10,
      bigOpSpacing3: xi11,
      bigOpSpacing4: xi12,
      bigOpSpacing5: xi13,
      ptPerEm,
      pxPerEm: (ptPerEm * 4) / 3,
      doubleRuleSep: 2 / ptPerEm,
      // article.cls.txt:455
      arraycolsep: 5 / ptPerEm,
      baselineskip: 12 / ptPerEm,
      arrayrulewidth: 0.4 / ptPerEm,
      fboxsep: 3 / ptPerEm,
      fboxrule: 0.4 / ptPerEm,
  };
  // These are very rough approximations.  We default to Times New Roman which
  // should have Latin-1 and Cyrillic characters, but may not depending on the
  // operating system.  The metrics do not account for extra height from the
  // accents.  In the case of Cyrillic characters which have both ascenders and
  // descenders we prefer approximations with ascenders, primarily to prevent
  // the fraction bar or root line from intersecting the glyph.
  // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.
  const extraCharacterMap = {
      '\u00A0': '\u0020',
      '\u200B': '\u0020',
      // Latin-1
      'Å': 'A',
      'Ç': 'C',
      'Ð': 'D',
      'Þ': 'o',
      'å': 'a',
      'ç': 'c',
      'ð': 'd',
      'þ': 'o',
      // Cyrillic
      'А': 'A',
      'Б': 'B',
      'В': 'B',
      'Г': 'F',
      'Д': 'A',
      'Е': 'E',
      'Ж': 'K',
      'З': '3',
      'И': 'N',
      'Й': 'N',
      'К': 'K',
      'Л': 'N',
      'М': 'M',
      'Н': 'H',
      'О': 'O',
      'П': 'N',
      'Р': 'P',
      'С': 'C',
      'Т': 'T',
      'У': 'y',
      'Ф': 'O',
      'Х': 'X',
      'Ц': 'U',
      'Ч': 'h',
      'Ш': 'W',
      'Щ': 'W',
      'Ъ': 'B',
      'Ы': 'X',
      'Ь': 'B',
      'Э': '3',
      'Ю': 'X',
      'Я': 'R',
      'а': 'a',
      'б': 'b',
      'в': 'a',
      'г': 'r',
      'д': 'y',
      'е': 'e',
      'ж': 'm',
      'з': 'e',
      'и': 'n',
      'й': 'n',
      'к': 'n',
      'л': 'n',
      'м': 'm',
      'н': 'n',
      'о': 'o',
      'п': 'n',
      'р': 'p',
      'с': 'c',
      'т': 'o',
      'у': 'y',
      'ф': 'b',
      'х': 'x',
      'ц': 'n',
      'ч': 'n',
      'ш': 'w',
      'щ': 'w',
      'ъ': 'a',
      'ы': 'm',
      'ь': 'a',
      'э': 'e',
      'ю': 'm',
      'я': 'r',
  };
  /**
   * This function is a convenience function for looking up information in the
   * METRICS_MAP table. It takes a character as a string, and a font name.
   *
   * Note: the `width` property may be undefined if fontMetricsData.js wasn't
   * built using `Make extended_metrics`.
   * @param fontName e.g. 'Main-Regular', 'Typewriter-Regular', etc...
   */
  function getCharacterMetrics(character, fontName) {
      // Console.assert(character.length === 1);
      console.assert(METRICS_MAP[fontName], 'Unknown font "' + fontName + '"');
      let ch = character.charCodeAt(0);
      if (character[0] in extraCharacterMap) {
          ch = extraCharacterMap[character[0]].charCodeAt(0);
      }
      else if (cjkRegex.test(character[0])) {
          ch = 77; // 'M'.charCodeAt(0);
          return {
              defaultMetrics: true,
              depth: 0.2,
              height: 0.9,
              italic: 0,
              skew: 0,
          };
      }
      const metrics = METRICS_MAP[fontName][ch];
      if (!metrics) {
          // Console.warn(
          //     'No metrics for ' +
          //     '"' + character + '" (U+' + ('000000' + ch.toString(16)).substr(-6) + ')' +
          //     ' in font "' + fontName + '"');
          // Assume default values.
          // depth + height should be less than 1.0 em
          if (ch === 11034) {
              // Placeholder character
              return {
                  defaultMetrics: true,
                  depth: 0,
                  height: 1,
                  italic: 0,
                  skew: 0,
              };
          }
          return {
              defaultMetrics: true,
              depth: 0.2,
              height: 0.7,
              italic: 0,
              skew: 0,
          };
      }
      return {
          defaultMetrics: false,
          depth: metrics[0],
          height: metrics[1],
          italic: metrics[2],
          skew: metrics[3],
      };
  }
  /**
   *
   * @param value If value is a string, it may be suffixed
   * with a unit, which will override the `unit` paramter
   */
  function convertDimenToEm(value, unit, precision = Number.NaN) {
      if (typeof value === 'string') {
          const m = value.match(/([-+]?[\d.]*)\s*([a-zA-Z]+)/);
          if (!m) {
              value = Number.parseFloat(value);
          }
          else {
              value = Number.parseFloat(m[1]);
              unit = m[2].toLowerCase();
          }
      }
      // If the units are missing, TeX assumes 'pt'
      const f = {
          pt: 1,
          mm: 7227 / 2540,
          cm: 7227 / 254,
          ex: 35271 / 8192,
          px: 3 / 4,
          em: METRICS.ptPerEm,
          bp: 803 / 800,
          dd: 1238 / 1157,
          pc: 12,
          in: 72.27,
          mu: 10 / 18,
      }[unit] || 1;
      if (Number.isFinite(precision)) {
          const factor = 10 ** precision;
          return Math.round((value / METRICS.ptPerEm) * f * factor) / factor;
      }
      return (value / METRICS.ptPerEm) * f;
  }
  function convertDimenToPx(value, unit) {
      return convertDimenToEm(value, unit) * (4 / 3) * METRICS.ptPerEm;
  }

  /**
   * This file contains information and classes for the 'math styles' used by TeX,
   * which are specific layout
   * algorithms for math. They get progressively smaller and tighter:
   * - displaystyle is used for expressions laid out on their own (in a block)
   * - textstyle is for expressions displayed on a line (usually wiht some text
   * around)
   * - scriptstyle is for expressions displayed as a superscript for example
   * - scriptscriptstyle is for expressions displayed as a superscript of a superscript
   * - the 'cramped' variations are used in various places, for examples a subscript
   * is using the 'scriptstyle', but cramped (so it's a bit more tight than a
   * superscript which is just using the 'scriptstyle')
   *
   * See Texbook, p.441:
   *
   * A math list is a sequence of items of the various kinds listed in Chapter 17,
   * and TEX typesets a formula by converting a math list to a horizontal list.
   * When such typesetting begins, TEX has two other pieces of information in
   * addition to the math list itself. (a) The starting style tells what style
   * should be used for the math list, unless another style is specified by a
   * style item. For example, the starting style for a displayed formula is D,
   * but for an equation in the text or an equation number it is T; and for a
   * subformula it can be any one of the eight styles defined in Chapter 17.
   *
   * We shall use C to stand for the current style, and we shall say that the
   * math list is being typeset in style C. (b) The typesetting is done either
   * with or without penalties. Formulas in the text of a paragraph are converted
   * to horizontal lists in which additional penalty items are inserted after
   * binary operations and relations, in order to aid in line breaking. Such
   * penalties are not inserted in other cases, because they would serve no
   * useful function.
   *
   * The eight styles are considered to be D > D′ > T > T′ > S > S′ > SS > SS′,
   * in decreasing order. Thus, C ≤ S means that the current style is S, S , SS,
   * or SS . Style C′ means the current style with a prime added if one isn’t
   * there; for example, we have C =T if and only if C = T or C = T'.
   * Style C↑ is the superscript style for C; this means style S if C is D or T,
   * style S′ if C is D′ or T′, style SS if C is S or SS,
   * and style SS if C is S or SS.
   * Finally, style C↓ is the subscript style, which is (C↑) .
   */
  // IDs of the different MATHSTYLES
  const D = 0; // Displaystyle
  const Dc = 1; // Displaystyle, cramped
  const T = 2; // Textstyle
  const Tc = 3;
  const S = 4; // Scriptstyle
  const Sc = 5;
  const SS = 6; // Scriptscriptstyle
  const SSc = 7;
  /**
   * @property {number} id unique id for the style
   * @property {number} size (which is the same for cramped and uncramped version
   * of a style)
   * @property {number}  multiplier, size multiplier which gives the size difference between
   * a style and textstyle.
   * @property {boolean}  cramped flag
   */
  class Mathstyle {
      constructor(id, size, multiplier, cramped) {
          this.id = id;
          this.size = size;
          this.cramped = cramped;
          this.sizeMultiplier = multiplier;
          this.metrics = Object.keys(SIGMAS).reduce((acc, x) => {
              return { ...acc, [x]: SIGMAS[x][this.size] };
          }, {});
          this.metrics.emPerEx = SIGMAS.xHeight[this.size] / SIGMAS.quad[this.size];
      }
      /**
       * Get the style of a superscript given a base in the current style.
       */
      sup() {
          return MATHSTYLES[[S, Sc, S, Sc, SS, SSc, SS, SSc][this.id]];
      }
      /**
       * Get the style of a subscript given a base in the current style.
       */
      sub() {
          return MATHSTYLES[[Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc][this.id]];
      }
      /**
       * Get the style of a fraction numerator given the fraction in the current
       * style.
       */
      fracNum() {
          return MATHSTYLES[[T, Tc, S, Sc, SS, SSc, SS, SSc][this.id]];
      }
      /**
       * Get the style of a fraction denominator given the fraction in the current
       * style.
       */
      fracDen() {
          return MATHSTYLES[[Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc][this.id]];
      }
      /**
       * Get the cramped version of a style (in particular, cramping a cramped style
       * doesn't change the style).
       */
      cramp() {
          return MATHSTYLES[[Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc][this.id]];
      }
      /**
       * CSS class name, for example `displaystyle cramped`
       */
      cls() {
          return [
              'displaystyle textstyle',
              'textstyle',
              'scriptstyle',
              'scriptscriptstyle',
          ][this.size]; // @revisit: use this.id to include 'cramped' variants
      }
      /**
       * CSS class name to adjust from one style to another, like 'reset-textstyle'
       */
      adjustTo(newStyle) {
          // @revisit the values used here
          let result = [
              [
                  '',
                  '',
                  'reset-textstyle scriptstyle',
                  'reset-textstyle scriptscriptstyle',
              ],
              [
                  'reset-textstyle displaystyle textstyle',
                  '',
                  'reset-textstyle scriptstyle',
                  'reset-textstyle scriptscriptstyle',
              ],
              [
                  'reset-scriptstyle textstyle displaystyle',
                  'reset-scriptstyle textstyle',
                  '',
                  'reset-scriptstyle scriptscriptstyle',
              ],
              [
                  'reset-scriptscriptstyle textstyle displaystyle',
                  'reset-scriptscriptstyle textstyle',
                  'reset-scriptscriptstyle scriptstyle',
                  '',
              ],
          ][this.size][newStyle.size];
          if (result.length > 0)
              result = ' ' + result;
          return result;
      }
      /**
       * Return if this style is tightly spaced (scriptstyle/scriptscriptstyle)
       */
      isTight() {
          return this.size >= 2;
      }
  }
  const MATHSTYLES = {
      0: new Mathstyle(D, 0, 1, false),
      1: new Mathstyle(Dc, 0, 1, true),
      2: new Mathstyle(T, 1, 1, false),
      3: new Mathstyle(Tc, 1, 1, true),
      4: new Mathstyle(S, 2, 0.7, false),
      5: new Mathstyle(Sc, 2, 0.7, true),
      6: new Mathstyle(SS, 3, 0.5, false),
      7: new Mathstyle(SSc, 3, 0.5, true),
  };
  // Aliases
  MATHSTYLES.displaystyle = MATHSTYLES[0];
  MATHSTYLES.textstyle = MATHSTYLES[2];
  MATHSTYLES.scriptstyle = MATHSTYLES[4];
  MATHSTYLES.scriptscriptstyle = MATHSTYLES[6];

  /**
   * This structure contains the rendering context of the current parse level.
   *
   * It also holds information about the parent context to handle scaling
   * adjustments.
   *
   * When a new scope is entered, a clone of the context is created with `.clone()`
   * so that any further changes remain local to the scope.
   *
   * A scope is defined for example by:
   * - an explicit group enclosed in braces `{...}`
   * - a semi-simple group enclosed in `\bgroup...\endgroup`
   * - an environment delimited by `\begin{<envname>}...\end{<envname>}`
   *
   * @property {Mathstyle} mathstyle
   * @property {number} opacity
   * @property {number} size
   * @property {object} atomIdsSettings - If not undefined, unique IDs should be
   * generated for each span so they can be mapped back to an atom.
   * The `seed` field should be a number to generate a specific range of
   * IDs or the string "random" to generate a random number.
   * Optionally, if a `groupNumbers` property is set to true, an additional
   * span will enclose strings of digits. This is used by read aloud to properly
   * pronounce (and highlight) numbers in expressions.
   * @property {Mathstyle} parentMathstyle
   * @property {number} parentSize
   * @property {object} macros A macros dictionary
   * @property {string} color
   */
  class Context {
      // Used by 'msubsup' scaffolding atoms
      constructor(from) {
          var _a, _b, _c, _d, _e, _f;
          this.macros = (_a = from.macros) !== null && _a !== void 0 ? _a : {};
          this.atomIdsSettings = from.atomIdsSettings;
          this.mathstyle = (_b = from.mathstyle) !== null && _b !== void 0 ? _b : MATHSTYLES.displaystyle;
          this.letterShapeStyle = (_c = from.letterShapeStyle) !== null && _c !== void 0 ? _c : 'tex';
          this.size = (_d = from.size) !== null && _d !== void 0 ? _d : 'size5'; // Medium size
          this.parentMathstyle = (_e = from.parentMathstyle) !== null && _e !== void 0 ? _e : this.mathstyle;
          this.parentSize = (_f = from.parentSize) !== null && _f !== void 0 ? _f : this.size;
          this.opacity = from.opacity;
          this.smartFence = from.smartFence;
          this.phantomBase = from.phantomBase;
      }
      /**
       * Returns a new context with the same properties as 'this',
       * except for the ones provided in `override`
       */
      clone(override = {}) {
          const result = new Context(this);
          if (override !== undefined) {
              // `'auto'` (or undefined) to indicate that the mathstyle should in
              // fact not be changed. This is used when specifying the mathstyle
              // for some environments.
              Object.assign(result, override);
              if (!override.mathstyle) {
                  result.mathstyle = this.mathstyle;
              }
              else {
                  result.parentMathstyle = this.mathstyle;
                  result.parentSize = this.size;
                  if (typeof override.mathstyle === 'string') {
                      result.mathstyle = MATHSTYLES[override.mathstyle];
                  }
              }
          }
          return result;
      }
      /**
       * Change the mathstyle of this context
       * @param value - `'auto'` to indicate that the mathstyle should in
       * fact not be changed. This is used when specifying the mathstyle for some
       * environments.
       */
      setMathstyle(value) {
          if (value && value !== 'auto') {
              this.mathstyle = MATHSTYLES[value];
          }
      }
      cramp() {
          return this.clone({ mathstyle: this.mathstyle.cramp() });
      }
      sup() {
          return this.clone({ mathstyle: this.mathstyle.sup() });
      }
      sub() {
          return this.clone({ mathstyle: this.mathstyle.sub() });
      }
  }

  const SVG_BODY = {
      // Adapted from https://github.com/KaTeX/KaTeX/blob/master/src/stretchy.js
      overrightarrow: [['rightarrow'], 0.888, 522, 'xMaxYMin'],
      overleftarrow: [['leftarrow'], 0.888, 522, 'xMinYMin'],
      underrightarrow: [['rightarrow'], 0.888, 522, 'xMaxYMin'],
      underleftarrow: [['leftarrow'], 0.888, 522, 'xMinYMin'],
      xrightarrow: [['rightarrow'], 1.469, 522, 'xMaxYMin'],
      xleftarrow: [['leftarrow'], 1.469, 522, 'xMinYMin'],
      Overrightarrow: [['doublerightarrow'], 0.888, 560, 'xMaxYMin'],
      xRightarrow: [['doublerightarrow'], 1.526, 560, 'xMaxYMin'],
      xLeftarrow: [['doubleleftarrow'], 1.526, 560, 'xMinYMin'],
      overleftharpoon: [['leftharpoon'], 0.888, 522, 'xMinYMin'],
      xleftharpoonup: [['leftharpoon'], 0.888, 522, 'xMinYMin'],
      xleftharpoondown: [['leftharpoondown'], 0.888, 522, 'xMinYMin'],
      overrightharpoon: [['rightharpoon'], 0.888, 522, 'xMaxYMin'],
      xrightharpoonup: [['rightharpoon'], 0.888, 522, 'xMaxYMin'],
      xrightharpoondown: [['rightharpoondown'], 0.888, 522, 'xMaxYMin'],
      xlongequal: [['longequal'], 0.888, 334, 'xMinYMin'],
      xtwoheadleftarrow: [['twoheadleftarrow'], 0.888, 334, 'xMinYMin'],
      xtwoheadrightarrow: [['twoheadrightarrow'], 0.888, 334, 'xMaxYMin'],
      overleftrightarrow: [['leftarrow', 'rightarrow'], 0.888, 522],
      overbrace: [['leftbrace', 'midbrace', 'rightbrace'], 1.6, 548],
      underbrace: [
          ['leftbraceunder', 'midbraceunder', 'rightbraceunder'],
          1.6,
          548,
      ],
      underleftrightarrow: [['leftarrow', 'rightarrow'], 0.888, 522],
      xleftrightarrow: [['leftarrow', 'rightarrow'], 1.75, 522],
      xLeftrightarrow: [['doubleleftarrow', 'doublerightarrow'], 1.75, 560],
      xrightleftharpoons: [['leftharpoondownplus', 'rightharpoonplus'], 1.75, 716],
      xleftrightharpoons: [['leftharpoonplus', 'rightharpoondownplus'], 1.75, 716],
      xhookleftarrow: [['leftarrow', 'righthook'], 1.08, 522],
      xhookrightarrow: [['lefthook', 'rightarrow'], 1.08, 522],
      overlinesegment: [['leftlinesegment', 'rightlinesegment'], 0.888, 522],
      underlinesegment: [['leftlinesegment', 'rightlinesegment'], 0.888, 522],
      overgroup: [['leftgroup', 'rightgroup'], 0.888, 342],
      undergroup: [['leftgroupunder', 'rightgroupunder'], 0.888, 342],
      xmapsto: [['leftmapsto', 'rightarrow'], 1.5, 522],
      xtofrom: [['leftToFrom', 'rightToFrom'], 1.75, 528],
      // The next three arrows are from the mhchem package.
      // In mhchem.sty, min-length is 2.0em. But these arrows might appear in the
      // document as \xrightarrow or \xrightleftharpoons. Those have
      // min-length = 1.75em, so we set min-length on these next three to match.
      xrightleftarrows: [['baraboveleftarrow', 'rightarrowabovebar'], 1.75, 901],
      xrightequilibrium: [
          ['baraboveshortleftharpoon', 'rightharpoonaboveshortbar'],
          1.75,
          716,
      ],
      xleftequilibrium: [
          ['shortbaraboveleftharpoon', 'shortrightharpoonabovebar'],
          1.75,
          716,
      ],
  };
  // While the images above are sliced, "accents" are stretched
  // The variants (xxx1, xxx2, etc...) are used depending on the length
  // (in number of characters) of the base.
  const SVG_ACCENTS = {
      // ViewBoxWidth, viewBoxHeight, height
      widehat1: [1062, 239, 0.24],
      widehat2: [2364, 300, 0.3],
      widehat3: [2364, 360, 0.36],
      widehat4: [2364, 420, 0.42],
      widecheck1: [1062, 239, 0.24],
      widecheck2: [2364, 300, 0.3],
      widecheck3: [2364, 360, 0.36],
      widecheck4: [2364, 420, 0.42],
      widetilde1: [600, 260, 0.26],
      widetilde2: [1033, 286, 0.286],
      widetilde3: [2339, 306, 0.306],
      widetilde4: [2340, 312, 0.34],
  };
  // From https://github.com/KaTeX/KaTeX/blob/master/src/svgGeometry.js
  const PATHS = {
      // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
      doubleleftarrow: `M262 157
l10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3
 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28
 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5
c2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5
 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87
-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7
-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z
m8 0v40h399730v-40zm0 194v40h399730v-40z`,
      // Doublerightarrow is from glyph U+21D2 in font KaTeX Main
      doublerightarrow: `M399738 392l
-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5
 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88
-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68
-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18
-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782
c-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3
-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z`,
      // Leftarrow is from glyph U+2190 in font KaTeX Main
      leftarrow: `M400000 241H110l3-3c68.7-52.7 113.7-120
 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8
-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247
c-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208
 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3
 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202
 l-3-3h399890zM100 241v40h399900v-40z`,
      // Overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
      leftbrace: `M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117
-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7
 5-6 9-10 13-.7 1-7.3 1-20 1H6z`,
      leftbraceunder: `M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13
 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688
 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7
-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z`,
      // Overgroup is from the MnSymbol package (public domain)
      leftgroup: `M400000 80
H435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0
 435 0h399565z`,
      leftgroupunder: `M400000 262
H435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219
 435 219h399565z`,
      // Harpoons are from glyph U+21BD in font KaTeX Main
      leftharpoon: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3
-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5
-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7
-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z`,
      leftharpoonplus: `M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5
 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3
-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7
-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z
m0 0v40h400000v-40z`,
      leftharpoondown: `M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333
 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5
 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667
-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z`,
      leftharpoondownplus: `M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12
 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7
-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0
v40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z`,
      // Hook is from glyph U+21A9 in font KaTeX Main
      lefthook: `M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5
-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3
-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21
 71.5 23h399859zM103 281v-40h399897v40z`,
      leftlinesegment: `M40 281 V428 H0 V94 H40 V241 H400000 v40z
M40 281 V428 H0 V94 H40 V241 H400000 v40z`,
      leftmapsto: `M40 281 V448H0V74H40V241H400000v40z
M40 281 V448H0V74H40V241H400000v40z`,
      // Tofrom is from glyph U+21C4 in font KaTeX AMS Regular
      leftToFrom: `M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23
-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8
c28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3
 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z`,
      longequal: `M0 50 h400000 v40H0z m0 194h40000v40H0z
M0 50 h400000 v40H0z m0 194h40000v40H0z`,
      midbrace: `M200428 334
c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14
-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7
 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11
 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z`,
      midbraceunder: `M199572 214
c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14
 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3
 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0
-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z`,
      oiintSize1: `M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6
-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z
m368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8
60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z`,
      oiintSize2: `M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8
-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z
m502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2
c0 110 84 276 504 276s502.4-166 502.4-276z`,
      oiiintSize1: `M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6
-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z
m525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0
85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z`,
      oiiintSize2: `M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8
-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z
m770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1
c0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z`,
      rightarrow: `M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z`,
      rightbrace: `M400000 542l
-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5
s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1
c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z`,
      rightbraceunder: `M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3
 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237
-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z`,
      rightgroup: `M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0
 3-1 3-3v-38c-76-158-257-219-435-219H0z`,
      rightgroupunder: `M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18
 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z`,
      rightharpoon: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3
-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2
-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58
 69.2 92 94.5zm0 0v40h399900v-40z`,
      rightharpoonplus: `M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11
-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7
 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z
m0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z`,
      rightharpoondown: `M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8
 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5
-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95
-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z`,
      rightharpoondownplus: `M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8
 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3
 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3
-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z
m0-194v40h400000v-40zm0 0v40h400000v-40z`,
      righthook: `M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3
 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0
-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21
 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z`,
      rightlinesegment: `M399960 241 V94 h40 V428 h-40 V281 H0 v-40z
M399960 241 V94 h40 V428 h-40 V281 H0 v-40z`,
      rightToFrom: `M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23
 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32
-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142
-167z M100 147v40h399900v-40zM0 341v40h399900v-40z`,
      // Twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
      twoheadleftarrow: `M0 167c68 40
 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69
-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3
-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19
-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101
 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z`,
      twoheadrightarrow: `M400000 167
c-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3
 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42
 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333
-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70
 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z`,
      // Tilde1 is a modified version of a glyph from the MnSymbol package
      widetilde1: `M200 55.538c-77 0-168 73.953-177 73.953-3 0-7
-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0
 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0
 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128
-68.267.847-113-73.952-191-73.952z`,
      // Ditto tilde2, tilde3, & tilde4
      widetilde2: `M344 55.266c-142 0-300.638 81.316-311.5 86.418
-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9
 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114
c1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751
 181.476 676 181.476c-149 0-189-126.21-332-126.21z`,
      widetilde3: `M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457
-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0
 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697
 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696
 -338 0-409-156.573-744-156.573z`,
      widetilde4: `M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345
-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409
 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9
 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409
 -175.236-744-175.236z`,
      // Vec is from glyph U+20D7 in font KaTeX Main
      vec: `M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z`,
      // Widehat1 is a modified version of a glyph from the MnSymbol package
      widehat1: `M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z`,
      // Ditto widehat2, widehat3, & widehat4
      widehat2: `M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
      widehat3: `M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
      widehat4: `M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10
-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z`,
      // Widecheck paths are all inverted versions of widehat
      widecheck1: `M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,
-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z`,
      widecheck2: `M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
      widecheck3: `M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
      widecheck4: `M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,
-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z`,
      // The next ten paths support reaction arrows from the mhchem package.
      // Arrows for \ce{<-->} are offset from xAxis by 0.22ex, per mhchem in LaTeX
      // baraboveleftarrow is mostly from from glyph U+2190 in font KaTeX Main
      baraboveleftarrow: `M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202
c4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5
c-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130
s-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47
121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6
s2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11
c0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z
M100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z`,
      // Rightarrowabovebar is mostly from glyph U+2192, KaTeX Main
      rightarrowabovebar: `M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32
-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0
13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39
-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5
-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z`,
      // The short left harpoon has 0.5em (i.e. 500 units) kern on the left end.
      // Ref from mhchem.sty: \rlap{\raisebox{-.22ex}{$\kern0.5em
      baraboveshortleftharpoon: `M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17
c2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21
c-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40
c-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z
M0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z`,
      rightharpoonaboveshortbar: `M0,241 l0,40c399126,0,399993,0,399993,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z`,
      shortbaraboveleftharpoon: `M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11
c1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,
1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,
-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z
M93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z`,
      shortrightharpoonabovebar: `M53,241l0,40c398570,0,399437,0,399437,0
c4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,
-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6
c-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z
M500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z`,
  };
  /**
   * Generate the HTML markup to represent a SVG span.
   *
   */
  function svgBodyToMarkup(svgBodyName) {
      if (SVG_ACCENTS[svgBodyName]) {
          const height = SVG_ACCENTS[svgBodyName][2];
          const result = `<span class="stretchy" style="height:${height}em">` +
              `<svg width="100%" height="${height}em"` +
              `viewBox="0 0 ${SVG_ACCENTS[svgBodyName][0]} ${SVG_ACCENTS[svgBodyName][1]}"` +
              `preserveAspectRatio="none">` +
              `<path d="${PATHS[svgBodyName]}"></path>` +
              `</svg></span>`;
          return `<span style="height:${height}em;min-width:0">${result}</span>`;
      }
      const [paths, minWidth, viewBoxHeight, align] = SVG_BODY[svgBodyName];
      let widthClasses;
      let aligns;
      const height = viewBoxHeight / 1000;
      if (paths.length === 3) {
          widthClasses = ['slice-1-of-3', 'slice-2-of-3', 'slice-3-of-3'];
          aligns = ['xMinYMin', 'xMidYMin', 'xMaxYMin'];
      }
      else if (paths.length === 2) {
          widthClasses = ['slice-1-of-2', 'slice-2-of-2'];
          aligns = ['xMinYMin', 'xMaxYMin'];
      }
      else {
          widthClasses = ['slice-1-of-1'];
          aligns = [align];
      }
      const body = paths
          .map((path, i) => `<span class="${widthClasses[i]}" style="height:${height}em">` +
          `<svg width="400em" height="${height}em"` +
          `viewBox="0 0 400000 ${viewBoxHeight}"` +
          `preserveAspectRatio="${aligns[i]} slice">` +
          `<path d="${PATHS[path]}"></path>` +
          `</svg></span>`)
          .join('');
      return `<span style="height:${height}em;min-width:${minWidth}em;display:inline-block;">${body}</span>`;
  }
  function svgBodyHeight(svgBodyName) {
      if (SVG_BODY[svgBodyName]) {
          return SVG_BODY[svgBodyName][2] / 1000;
      }
      return SVG_ACCENTS[svgBodyName][2];
  }

  class Mode {
      constructor(name) {
          Mode._registry[name] = this;
      }
      static createAtom(mode, command, style) {
          return Mode._registry[mode].createAtom(command, style);
      }
      static parseTokens(mode, tokens, onError, options) {
          return Mode._registry[mode].parseTokens(tokens, onError, options);
      }
      // `run` should be a run (sequence) of atoms all with the same
      // mode
      static toLatex(run, options) {
          console.assert(run.length > 0);
          const mode = Mode._registry[run[0].mode];
          return mode.toLatex(run, options);
      }
      static applyStyle(mode, span, style) {
          return Mode._registry[mode].applyStyle(span, style);
      }
      createAtom(_command, _style) {
          return null;
      }
      parseTokens(_tokens, _onError, _options) {
          return null;
      }
      toLatex(_run, _options) {
          return '';
      }
      /*
       * Apply the styling (bold, italic, etc..) as classes to the span, and return
       * the effective font name to be used for metrics
       * ('Main-Regular', 'Caligraphic-Regualr' etc...)
       */
      applyStyle(_span, _style) {
          return '';
      }
  }
  Mode._registry = {};
  /*
   * Return an array of runs with the same mode
   */
  function getModeRuns(atoms) {
      const result = [];
      let run = [];
      let currentMode = 'NONE';
      atoms.forEach((atom) => {
          if (atom.type === 'first')
              return;
          if (atom.mode !== currentMode) {
              if (run.length > 0)
                  result.push(run);
              run = [atom];
              currentMode = atom.mode;
          }
          else {
              run.push(atom);
          }
      });
      // Push whatever is left
      if (run.length > 0)
          result.push(run);
      return result;
  }
  /*
   * Return an array of runs (array of atoms with the same value
   *   for the specified property)
   */
  function getPropertyRuns(atoms, property) {
      const result = [];
      let run = [];
      let currentValue;
      atoms.forEach((atom) => {
          if (atom.type === 'first')
              return;
          let value;
          if (property === 'variant') {
              value = atom.style.variant;
              if (atom.style.variantStyle && atom.style.variantStyle !== 'up') {
                  value += '-' + atom.style.variantStyle;
              }
          }
          else if (property === 'cssClass') {
              if (atom.type === 'group') {
                  value = atom.customClass;
              }
          }
          else {
              value = atom.style[property];
          }
          if (value === currentValue) {
              // Same value, add it to the current run
              run.push(atom);
          }
          else {
              // The value of property for this atom is different from the
              // current value, start a new run
              if (run.length > 0)
                  result.push(run);
              run = [atom];
              currentValue = value;
          }
      });
      // Push whatever is left
      if (run.length > 0)
          result.push(run);
      return result;
  }

  /*
   * See https://tex.stackexchange.com/questions/81752/
   * for a thorough description of the TeXt atom type and their relevance to
   * proper kerning.
   */
  const SPAN_TYPE = [
      '',
      'chem',
      'mord',
      'mbin',
      'mop',
      'mrel',
      'mopen',
      'mclose',
      'mpunct',
      'minner',
      'spacing',
      'first',
      'latex',
      'composition',
      'error',
      'placeholder',
  ]; // The const assertion prevents widening to string[]
  function isSpanType(type) {
      return SPAN_TYPE.includes(type);
  }
  /*
   * See http://www.tug.org/TUGboat/tb30-3/tb96vieth.pdf for
   * typesetting conventions for mathematical physics (units, etc...)
   */
  const INTER_ATOM_SPACING = {
      'mord+mop': 3,
      'mord+mbin': 4,
      'mord+mrel': 5,
      'mord+minner': 3,
      'mop+mord': 3,
      'mop+mop': 3,
      'mop+mbin': 5,
      'mop+minner': 3,
      'mbin+mord': 4,
      'mbin+mop': 4,
      'mbin+mopen': 4,
      'mbin+minner': 4,
      'mrel+mord': 5,
      'mrel+mop': 5,
      'mrel+mopen': 5,
      'mrel+minner': 5,
      'mclose+mop': 3,
      'mclose+mbin': 4,
      'mclose+mrel': 5,
      'mclose+minner': 3,
      'mpunct+mord': 3,
      'mpunct+mop': 3,
      'mpunct+mbin': 4,
      'mpunct+mrel': 5,
      'mpunct+mopen': 3,
      'mpunct+mpunct': 3,
      'mpunct+minner': 3,
  };
  const INTER_ATOM_TIGHT_SPACING = {
      'mord+mop': 3,
      'mop+mord': 3,
      'mop+mop': 3,
      'mclose+mop': 3,
      'minner+mop': 3,
  };
  /**
   * Return a string made up of the concatenated arguments.
   * Each arguments can be either a string, which is unchanged,
   * or a number, which is converted to a string with at most 2 fractional digits.
   *
   */
  function toString(arg) {
      if (typeof arg === 'string') {
          return arg;
      }
      if (typeof arg === 'number') {
          return Number(Math.ceil(1e2 * arg) / 1e2).toString();
      }
      if (arg === undefined) {
          return '';
      }
      if (isArray(arg)) {
          let result = '';
          for (const element of arg) {
              result += toString(element);
          }
          return result;
          // } else if (arg) {
          //     result += (arg as number).toString();
      }
      console.error('Span.toStringUnexpected argument type');
      return '';
  }
  //----------------------------------------------------------------------------
  // SPAN
  //----------------------------------------------------------------------------
  /**
   * A span is the most elementary element that can be rendered.
   * It is composed of an optional body of text and an optional list
   * of children (other spans). Each span can be decorated with
   * CSS classes and style attributes.
   *
   * @param content the items 'contained' by this node
   * @param classes list of classes attributes associated with this node


   * @property  type - For example, `'latex'`, `'mrel'`, etc...
   * @property classes - A string of space separated CSS classes
   * associated with this element
   * @property cssId - A CSS ID assigned to this span (optional)
   * @property htmlData - data fields assigned to this span (optional)
   * @property children - An array, potentially empty, of spans which
   * this span encloses
   * @property body - Content of this span. Can be empty.
   * @property style - A set of key/value pairs specifying CSS properties
   * associated with this element.
   * @property height - The measurement from baseline to top, in em.
   * @property depth - The measurement from baseline to bottom, in em.
   * @property width
   */
  class Span {
      constructor(content, classes = '', type = '') {
          if (isArray(content)) {
              // Check if isArray first, since an array is also an object
              // Flatten it (i.e. [[a1, a2], b1, b2] -> [a1, a2, b1, b2]
              this.children = [].concat(...content).filter((x) => x !== null);
          }
          else if (typeof content === 'string') {
              this.value = content;
          }
          else if (content && typeof content === 'object') {
              this.children = [content];
          }
          this.classes = classes;
          this.type = type;
          this.isSelected = false;
          // STYLE
          // CSS style, as an array of key value pairs.
          // Use this.setStyle() to modify it.
          this.style = null;
          // Calculate the dimensions of this span based on its children
          this.updateDimensions();
      }
      /**
       * Update the dimensions of this node based on its children:
       * - height: distance from bottom to top
       * - depth: distance from bottom to baseline
       * - maxFontSize: a size multiplier (typically set with commands such as \huge)
       */
      updateDimensions() {
          let height = 0;
          let depth = 0;
          let maxFontSize = 1;
          if (this.children) {
              this.children.forEach((x) => {
                  if (x.height > height)
                      height = x.height;
                  if (x.depth > depth)
                      depth = x.depth;
                  if (x.maxFontSize > maxFontSize)
                      maxFontSize = x.maxFontSize;
              });
          }
          else if (typeof this.value === 'string') {
              if (this.type === 'latex') {
                  height = 0.8;
                  depth = 0.2;
              }
              else {
                  height = METRICS.baselineskip;
                  depth = 0;
              }
          }
          this.height = height;
          this.depth = depth;
          this.maxFontSize = maxFontSize;
      }
      selected(isSelected) {
          this.isSelected = isSelected;
          if (this.children) {
              this.children.forEach((x) => x.selected(isSelected));
          }
      }
      applyStyle(mode, style, className) {
          if (!style)
              return;
          if (this.type === 'latex') {
              console.log(METRICS.baselineskip);
          }
          //
          // 1. Apply color
          //
          if (style.color) {
              if (style.color === 'none') {
                  this.setStyle('color', '');
              }
              else {
                  this.setStyle('color', style.color);
              }
          }
          if (style.backgroundColor) {
              if (style.backgroundColor === 'none') {
                  this.setStyle('background-color', '');
              }
              else {
                  this.setStyle('background-color', style.backgroundColor);
              }
          }
          //
          // 2. Add any custom style classes
          //
          if (className) {
              this.classes += ' ' + className;
          }
          // If the body is null (for example for a line), we're done.
          if (!this.value)
              return;
          //
          // 3. Determine the font family (i.e. 'ams', 'mathcal', etc...)
          // and apply styling by adding appropriate classes to the atom
          //
          console.assert(typeof this.value === 'string');
          const fontName = Mode.applyStyle(mode, this, style);
          //
          // 5. Get the metrics information
          //
          if (fontName) {
              this.maxFontSize =
                  {
                      size1: 0.5,
                      size2: 0.7,
                      size3: 0.8,
                      size4: 0.9,
                      size5: 1,
                      size6: 1.2,
                      size7: 1.44,
                      size8: 1.73,
                      size9: 2.07,
                      size10: 2.49,
                  }[style.fontSize] || 1;
              this.height = 0;
              this.depth = 0;
              this.skew = 0;
              this.italic = 0;
              for (let i = 0; i < this.value.length; i++) {
                  const metrics = getCharacterMetrics(this.value.charAt(i), fontName);
                  // If we were able to get metrics info for this character, store it.
                  if (metrics) {
                      this.height = Math.max(this.height, metrics.height);
                      this.depth = Math.max(this.depth, metrics.depth);
                      this.skew = metrics.skew;
                      this.italic = metrics.italic;
                  }
              }
          }
      }
      /**
       * Set the value of a CSS property associated with this span.
       * For example, setStyle('border-right', 5.6, 'em');
       *
       * @param prop the CSS property to set
       * @param value a series of strings and numbers that will be concatenated.
       */
      setStyle(prop, ...value) {
          const v = toString(value);
          if (v.length > 0) {
              if (!this.style)
                  this.style = {};
              this.style[prop] = v;
          }
      }
      setTop(top) {
          if (Number.isFinite(top) && top !== 0) {
              if (!this.style)
                  this.style = {};
              this.style.top = toString(top) + 'em';
              this.height -= top;
              this.depth += top;
          }
      }
      get left() {
          var _a;
          if ((_a = this.style) === null || _a === void 0 ? void 0 : _a['margin-left']) {
              return Number.parseFloat(this.style['margin-left']);
          }
          return 0;
      }
      set left(value) {
          if (!Number.isFinite(value))
              return;
          if (!this.style)
              this.style = {};
          if (value === 0) {
              delete this.style['margin-left'];
          }
          else {
              this.style['margin-left'] = toString(value) + 'em';
          }
      }
      set right(value) {
          if (!Number.isFinite(value))
              return;
          if (!this.style)
              this.style = {};
          if (value === 0) {
              delete this.style['margin-right'];
          }
          else {
              this.style['margin-right'] = toString(value) + 'em';
          }
      }
      set width(value) {
          if (!this.style)
              this.style = {};
          this.style.width = toString(value) + 'em';
      }
      /**
       * Generate the HTML markup to represent this span.
       *
       * @param hskip - Space (in mu, 1/18em) to leave on the left side
       * of the span.
       * This is used to adjust the inter-spacing between spans of different types,
       * e.g. 'bin' and 'rel', according to the TeX rules (TexBook p.170)
       *
       * @param hscale - If a value is provided, the margins are scaled by
       * this factor.
       *
       * @return HTML markup
       */
      toMarkup(options = {
          hskip: 0,
          hscale: 1,
      }) {
          var _a, _b, _c, _d, _e;
          let result = '';
          let body = (_a = this.value) !== null && _a !== void 0 ? _a : '';
          //
          // 1. Calculate the spacing between atoms, based on their type
          // (`mord`, `mbin`, `mrel`, etc...)
          //
          if (this.children) {
              let previousType = 'none';
              for (let i = 0; i < this.children.length; i++) {
                  const child = this.children[i];
                  let spacing = 0;
                  const type = getEffectiveType(this.children, i);
                  const combinedType = previousType + '+' + type;
                  spacing = child.isTight
                      ? (_b = INTER_ATOM_TIGHT_SPACING[combinedType]) !== null && _b !== void 0 ? _b : 0 : (_c = INTER_ATOM_SPACING[combinedType]) !== null && _c !== void 0 ? _c : 0;
                  body += child.toMarkup({
                      hskip: spacing,
                      hscale: options.hscale,
                  });
                  previousType = type;
              }
          }
          if ((body === '\u200B' || (!body && !this.svgBody)) &&
              !this.classes &&
              !this.cssId &&
              !this.htmlData &&
              !this.style &&
              !this.svgOverlay) {
              // 2a. Collapse 'empty' spans
              result = '';
          }
          else {
              // Note: We can't omit the tag, even if it has no class and no style,
              // as some layouts (vlist) depends on the presence of the tag to function
              result = '<span';
              if (this.cssId) {
                  result += ' id="' + this.cssId + '" ';
              }
              if (this.htmlData) {
                  const entries = this.htmlData.split(',');
                  for (const entry of entries) {
                      const matched = entry.match(/([^=]+)=(.+$)/);
                      if (matched) {
                          result += `data-${matched[1]}=${matched[2]} `;
                      }
                  }
              }
              if (this.attributes) {
                  result +=
                      ' ' +
                          Object.keys(this.attributes)
                              .map((x) => `${x}="${this.attributes[x]}"`)
                              .join(' ');
              }
              const classes = this.classes.split(' ');
              // Add the type (mbin, mrel, etc...) if specified
              classes.push((_d = {
                  latex: 'ML__latex',
                  placeholder: 'ML__placeholder',
                  error: 'ML__error',
              }[this.type]) !== null && _d !== void 0 ? _d : '');
              if (this.caret === 'latex') {
                  classes.push('ML__latex-caret');
              }
              // Remove duplicate and empty classes
              let classList = '';
              classList =
                  classes.length > 1
                      ? classes
                          .filter((x, e, a) => {
                          return x.length > 0 && a.indexOf(x) === e;
                      })
                          .join(' ')
                      : classes[0];
              if (classList.length > 0) {
                  result += ` class="${classList}"`;
              }
              // If a `hskip` value was provided, add it to the margin-left
              if (options.hskip) {
                  this.left += options.hskip / 18;
              }
              if (this.style) {
                  const styleString = Object.keys(this.style)
                      .map((x) => {
                      // Render the style property, except the background
                      // of selected spans
                      if (x === 'background-color' && this.isSelected) {
                          return '';
                      }
                      return x + ':' + this.style[x];
                  })
                      .join(';');
                  if (styleString.length > 0) {
                      result += ' style="' + styleString + '"';
                  }
              }
              result += '>';
              // If there is some SVG markup associated with this span,
              // include it now
              if (this.svgBody) {
                  result += svgBodyToMarkup(this.svgBody);
              }
              else if (this.svgOverlay) {
                  result += '<span style="';
                  result += 'display: inline-block;';
                  result += `height:${this.height + this.depth}em;`;
                  result += `vertical-align:${this.depth}em;`;
                  result += '">';
                  result += body;
                  result += '</span>';
                  result += '<svg ';
                  result += 'style="position:absolute;';
                  result += 'overflow:overlay;';
                  result += `height:${this.height + this.depth}em;`;
                  if ((_e = this.style) === null || _e === void 0 ? void 0 : _e.padding) {
                      result += `top:${this.style.padding};`;
                      result += `left:{this.style.padding};`;
                      result += `width:calc(100% - 2 * ${this.style.padding} );`;
                  }
                  else {
                      result += 'top:0;';
                      result += 'left:0;';
                      result += 'width:100%;';
                  }
                  result += 'z-index:2;';
                  result += '"';
                  if (this.svgStyle) {
                      result += ' style="' + this.svgStyle + '"';
                  }
                  result += '>';
                  result += this.svgOverlay;
                  result += '</svg>';
              }
              else {
                  result += body;
              }
              result += '</span>';
          }
          //
          // Add markup for the caret
          //
          if (this.caret === 'text') {
              result += '<span class="ML__text-caret"></span>';
          }
          else if (this.caret === 'math') {
              result += '<span class="ML__caret"></span>';
          }
          return result;
      }
      /**
       * Can this span be coalesced with 'span'?
       * This is used to 'coalesce' (i.e. group together) a series of spans that are
       * identical except for their value, and to avoid generating redundant spans.
       * That is: '12' ->
       *      "<span class='mord mathrm'>12</span>"
       * rather than:
       *      "<span class='mord mathrm'>1</span><span class='mord mathrm'>2</span>"
       */
      tryCoalesceWith(span) {
          // Don't coalesce if the tag or type are different
          if (this.type !== span.type)
              return false;
          // Don't coalesce consecutive errors, placeholders or raw latex
          if (this.type === 'error' ||
              this.type === 'placeholder' ||
              this.type === 'latex') {
              return false;
          }
          // Don't coalesce if some of the content is SVG
          if (this.svgBody || !this.value)
              return false;
          if (span.svgBody || !span.value)
              return false;
          // If this span or the candidate span have children, we can't
          // coalesce them, but we'll try to coalesce their children
          const hasChildren = this.children && this.children.length > 0;
          const spanHasChildren = span.children && span.children.length > 0;
          if (hasChildren || spanHasChildren)
              return false;
          // If they have a different number of styles, can't coalesce
          const thisStyleCount = this.style ? this.style.length : 0;
          const spanStyleCount = span.style ? span.style.length : 0;
          if (thisStyleCount !== spanStyleCount)
              return false;
          // For the purpose of our comparison,
          // any 'empty' classes (whitespace)
          const classes = this.classes.trim().replace(/\s+/g, ' ').split(' ');
          const spanClasses = span.classes.trim().replace(/\s+/g, ' ').split(' ');
          // If they have a different number of classes, can't coalesce
          if (classes.length !== spanClasses.length)
              return false;
          // OK, let's do the more expensive comparison now.
          // If they have different classes, can't coalesce
          classes.sort();
          spanClasses.sort();
          for (const [i, class_] of classes.entries()) {
              // Don't coalesce vertical separators
              // (used in column formating with {l||r} for example
              if (class_ === 'vertical-separator')
                  return false;
              if (class_ !== spanClasses[i])
                  return false;
          }
          // If the styles are different, can't coalesce
          if (this.style && span.style) {
              for (const style in this.style) {
                  if (Object.prototype.hasOwnProperty.call(this.style, style) &&
                      Object.prototype.hasOwnProperty.call(span.style, style)) {
                      if (this.style[style] !== span.style[style])
                          return false;
                  }
              }
          }
          // OK, the attributes of those spans are compatible.
          // Merge span into this
          this.value += span.value;
          this.height = Math.max(this.height, span.height);
          this.depth = Math.max(this.depth, span.depth);
          this.maxFontSize = Math.max(this.maxFontSize, span.maxFontSize);
          // The italic correction for the coalesced spans is the
          // italic correction of the last span.
          this.italic = span.italic;
          return true;
      }
  }
  function getEffectiveType(xs, i) {
      var _a, _b, _c, _d, _e;
      if (i < 0 || i >= xs.length)
          return 'none';
      const previousType = (_b = (_a = xs[i - 1]) === null || _a === void 0 ? void 0 : _a.type) !== null && _b !== void 0 ? _b : 'none';
      const nextType = (_d = (_c = xs[i + 1]) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'none';
      let result = (_e = xs[i].type) !== null && _e !== void 0 ? _e : 'none';
      if (result === 'first')
          return 'none';
      if (result === 'mbin') {
          // If a `mbin` span, i.e. "+" is after or before spans
          // of a certain type, consider it to be a `mord` instead.
          // This is to handle proper spacing of, e.g. "-4" vs "1-4"
          if (/first|none|mrel|mpunct|mopen|mbin|mop/.test(previousType) ||
              /none|mrel|mpunct|mclose/.test(nextType)) {
              result = 'mord';
          }
      }
      return result;
  }
  /**
   * Attempts to coalesce (merge) spans, for example consecutive text spans.
   * Return a new tree with coalesced spans.
   *
   */
  function coalesce(spans) {
      if (!spans || spans.length === 0)
          return [];
      spans[0].children = coalesce(spans[0].children);
      const result = [spans[0]];
      for (let i = 1; i < spans.length; i++) {
          if (!result[result.length - 1].tryCoalesceWith(spans[i])) {
              spans[i].children = coalesce(spans[i].children);
              result.push(spans[i]);
          }
      }
      return result;
  }
  //----------------------------------------------------------------------------
  // UTILITY FUNCTIONS
  //----------------------------------------------------------------------------
  function height(spans) {
      if (!spans)
          return 0;
      if (isArray(spans)) {
          return spans.reduce((acc, x) => Math.max(acc, x.height), 0);
      }
      return spans.height;
  }
  function depth(spans) {
      if (!spans)
          return 0;
      if (isArray(spans)) {
          return spans.reduce((acc, x) => Math.max(acc, x.depth), 0);
      }
      return spans.depth;
  }
  function skew(spans) {
      if (!spans)
          return 0;
      if (isArray(spans)) {
          let result = 0;
          for (const span of spans) {
              result += span.skew || 0;
          }
          return result;
      }
      return spans.skew;
  }
  function italic(spans) {
      if (!spans)
          return 0;
      if (isArray(spans)) {
          return spans[spans.length - 1].italic;
      }
      return spans.italic;
  }
  function makeSymbol(fontFamily, symbol, classes = '', type = '') {
      const result = new Span(symbol, classes, type);
      const metrics = getCharacterMetrics(symbol, fontFamily);
      result.height = metrics.height;
      result.depth = metrics.depth;
      result.skew = metrics.skew;
      result.italic = metrics.italic;
      result.right = metrics.italic;
      return result;
  }
  /**
   * Makes an element placed in each of the vlist elements to ensure that each
   * element has the same max font size. To do this, we create a zero-width space
   * with the correct font size.
  //  * Note: without this, even when fontSize = 0, the fraction bar is no
  //  * longer positioned correctly
   */
  function makeFontSizer(context, fontSize) {
      const fontSizeAdjustment = fontSize
          ? fontSize / context.mathstyle.sizeMultiplier
          : 0;
      const fontSizeInner = new Span('\u200B'); // ZERO WIDTH SPACE
      fontSizeInner.depth = 0;
      fontSizeInner.height = 0;
      if (fontSizeAdjustment !== 1) {
          fontSizeInner.setStyle('font-size', fontSizeAdjustment, fontSizeAdjustment > 0 ? 'em' : '');
          fontSizeInner.attributes = {
              'aria-hidden': 'true',
          };
      }
      if (context.size !== 'size5') {
          return new Span(fontSizeInner, 'fontsize-ensurer reset-' + context.size + ' size5');
      }
      return fontSizeAdjustment !== 0 ? fontSizeInner : null;
  }
  function makeStruts(content, classes = '', type = '') {
      const topStrut = new Span('', 'ML__strut');
      topStrut.setStyle('height', Math.max(0, height(content)), 'em');
      const struts = [topStrut];
      if (depth(content) !== 0) {
          const bottomStrut = new Span('', 'ML__strut--bottom');
          bottomStrut.setStyle('height', height(content) + depth(content), 'em');
          bottomStrut.setStyle('vertical-align', -depth(content), 'em');
          struts.push(bottomStrut);
      }
      struts.push(content);
      return new Span(struts, classes, type);
  }
  function makeStyleWrap(type, children, fromStyle, toStyle, classes) {
      const result = makeHlist(children, classes + ' style-wrap ' + fromStyle.adjustTo(toStyle));
      result.type = type;
      const multiplier = toStyle.sizeMultiplier / fromStyle.sizeMultiplier;
      result.height *= multiplier; // @revisit. Use spanHeight()? is height set at this point?
      result.depth *= multiplier;
      result.maxFontSize = toStyle.sizeMultiplier;
      return result;
  }
  /**
   * Add some SVG markup to be overlaid on top of the span
   */
  function addSVGOverlay(body, svgMarkup, svgStyle) {
      body.svgOverlay = svgMarkup;
      body.svgStyle = svgStyle;
      return body;
  }
  function makeHlist(spans, classes = '', type = '') {
      // Note: do not try to optimize and avoid creating the span below
      // Some layouts, e.g. vlist, depend on that span being there.
      const result = new Span(spans, classes, type);
      let multiplier = 1;
      multiplier =
          spans instanceof Span
              ? spans.maxFontSize
              : result.children.reduce((acc, x) => Math.max(acc, x.maxFontSize), multiplier);
      result.height *= multiplier;
      result.depth *= multiplier;
      return result;
  }
  /**
   * Create a new span of type `vlist`, a set of vertically stacked items
   * @param elements  An array of Span and integer. The integer can be either some kerning information
   * or the value of an individual shift of the preceding child if in 'individualShift' mode
   * @param pos The method that will be used to position the elements in the vlist.
   *
   * One of:
   * - `"individualShift"`: each child must be followed by a number indicating how much to shift it (i.e. moved downwards)
   * - `"top"`: posData specifies the topmost point of the vlist (>0 move up)
   * - `"bottom"`: posData specifies the bottommost point of the vlist (>0 move down)
   * - `"shift"`: the baseline of the vlist will be positioned posData away from the baseline
   * of the first child. (>0 moves down)
   */
  function makeVlist(context, elements, pos = 'shift', posData = 0) {
      var _a, _b;
      let listDepth = 0;
      let currPos = 0;
      // Normalize the elements so that they're all either a number or
      // a single span. If a child is an array of spans,
      // wrap it in a span
      for (let i = 0; i < elements.length; i++) {
          if (isArray(elements[i])) {
              if (elements[i].length === 1) {
                  // If that's an array made up of a single span, use that span
                  elements[i] = elements[i][0];
              }
              else {
                  // Otherwise, wrap it in a span
                  elements[i] = new Span(elements[i]);
              }
          }
      }
      if (pos === 'shift') {
          if (elements[0]) {
              console.assert(elements[0] instanceof Span);
              listDepth = -elements[0].depth - posData;
          }
          else {
              listDepth = -posData;
          }
      }
      else if (pos === 'bottom') {
          listDepth = -posData;
      }
      else if (pos === 'top') {
          let bottom = posData;
          for (const element of elements) {
              if (element instanceof Span) {
                  // It's a Span, use the dimension data
                  bottom -= element.height + element.depth;
              }
              else if (typeof element === 'number') {
                  // It's a kern adjustment
                  bottom -= element;
              }
          }
          listDepth = bottom;
      }
      else if (pos === 'individualShift') {
          // Individual adjustment to each elements.
          // The elements list is made up of a Span followed
          // by a shift adjustment as an integer
          const originalElements = elements;
          elements = [originalElements[0]];
          // Add in kerns to the list of elements to get each element to be
          // shifted to the correct specified shift
          console.assert(originalElements[0] instanceof Span);
          listDepth = -originalElements[1] - originalElements[0].depth;
          currPos = listDepth;
          for (let i = 2; i < originalElements.length; i += 2) {
              console.assert(originalElements[i] instanceof Span);
              const diff = -originalElements[i + 1] -
                  currPos -
                  originalElements[i].depth;
              currPos += diff;
              console.assert(originalElements[i - 2] instanceof Span);
              const kern = diff -
                  (originalElements[i - 2].height +
                      originalElements[i - 2].depth);
              elements.push(kern);
              elements.push(originalElements[i]);
          }
      }
      else {
          console.assert(false, 'makeVList with unknown method: "' + pos + '"');
      }
      // Make the fontSizer
      let maxFontSize = 1;
      for (const element of elements) {
          if (element instanceof Span) {
              maxFontSize = Math.max(maxFontSize, element.maxFontSize);
          }
      }
      const fontSizer = makeFontSizer(context, maxFontSize);
      const newElements = [];
      currPos = listDepth;
      for (const element of elements) {
          if (typeof element === 'number') {
              // It's a kern adjustment
              currPos += element;
          }
          else if (element instanceof Span) {
              const wrap = new Span([fontSizer, element]);
              wrap.setTop(-element.depth - currPos);
              newElements.push(wrap);
              currPos += element.height + element.depth;
          }
      }
      const result = new Span(newElements, 'vlist');
      // Fix the final height and depth, in case there were kerns at the ends
      // since makeSpan won't take that into account.
      result.depth = Math.max(listDepth, (_a = depth(result)) !== null && _a !== void 0 ? _a : 0);
      result.height = Math.max(-currPos, (_b = height(result)) !== null && _b !== void 0 ? _b : 0);
      return result;
  }
  /**
   * Create a span that consist of a (stretchy) SVG element
   *
   * @param classes list of classes attributes associated with this node
   */
  function makeSVGSpan(svgBodyName) {
      const span = new Span(null);
      span.svgBody = svgBodyName;
      span.height = svgBodyHeight(svgBodyName) / 2;
      span.depth = span.height;
      return span;
  }

  function stringToCodepoints(string) {
      const result = [];
      for (let i = 0; i < string.length; i++) {
          let code = string.charCodeAt(i);
          if (code === 0x0d && string.charCodeAt(i + 1) === 0x0a) {
              code = 0x0a;
              i++;
          }
          if (code === 0x0d || code === 0x0c)
              code = 0x0a;
          if (code === 0x00)
              code = 0xfffd;
          // Decode a surrogate pair into an astral codepoint.
          if (code >= 0xd800 && code <= 0xdbff) {
              const nextCode = string.charCodeAt(i + 1);
              if (nextCode >= 0xdc00 && nextCode <= 0xdfff) {
                  const lead = code - 0xd800;
                  const trail = nextCode - 0xdc00;
                  code = 2 ** 16 + lead * 2 ** 10 + trail;
                  // N = ((H - 0xD800) * 0x400) + (L - 0xDC00) + 0x10000;
                  i++;
              }
          }
          result.push(code);
      }
      return result;
  }
  const ZWJ = 0x200d; // Zero-width joiner
  // const ZWSP = 0x200b; // Zero-width space
  /* The following codepoints should combine with the previous ones */
  const EMOJI_COMBINATOR = [
      [ZWJ, 1],
      [0xfe0e, 2],
      [0x1f3fb, 5],
      [0x1f9b0, 4],
      [0xe0020, 96],
  ];
  let emojiCombinator;
  // Regional indicator: a pair of codepoints indicating some flags
  const REGIONAL_INDICATOR = [0x1f1e6, 0x1f1ff];
  function isEmojiCombinator(code) {
      var _a;
      if (emojiCombinator === undefined) {
          emojiCombinator = {};
          EMOJI_COMBINATOR.forEach((x) => {
              for (let i = x[0]; i <= x[0] + x[1] - 1; i++) {
                  emojiCombinator[i] = true;
              }
          });
      }
      return (_a = emojiCombinator[code]) !== null && _a !== void 0 ? _a : false;
  }
  function isRegionalIndicator(code) {
      return code >= REGIONAL_INDICATOR[0] && code <= REGIONAL_INDICATOR[1];
  }
  /**
   * Return a string or an array of graphemes.
   * This includes:
   * - emoji with skin and hair modifiers
   * - emoji combination (for example "female pilot")
   * - text emoji with an emoji presentation style modifier
   *      - U+1F512 U+FE0E 🔒︎
   *      - U+1F512 U+FE0F 🔒️
   * - flags represented as two regional indicator codepoints
   * - flags represented as a flag emoji + zwj + an emoji tag
   * - other combinations (for example, rainbow flag)
   */
  function splitGraphemes(string) {
      // If it's all ASCII, short-circuit the grapheme splitting...
      if (/^[\u0020-\u00FF]*$/.test(string))
          return string;
      const result = [];
      const codePoints = stringToCodepoints(string);
      let index = 0;
      while (index < codePoints.length) {
          const code = codePoints[index++];
          const next = codePoints[index];
          // Combine sequences
          if (next === ZWJ) {
              // Zero-width joiner sequences are:
              // ZWJ_SEQUENCE := (CHAR + ZWJ)+
              const baseIndex = index - 1;
              index += 2;
              while (codePoints[index] === ZWJ) {
                  index += 2;
              }
              result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex + 1)));
          }
          else if (isEmojiCombinator(next)) {
              // Combine emoji sequences
              // See http://unicode.org/reports/tr51/#def_emoji_tag_sequence
              const baseIndex = index - 1; // The previous character is the 'base'
              while (isEmojiCombinator(codePoints[index])) {
                  index += codePoints[index] === ZWJ ? 2 : 1;
              }
              result.push(String.fromCodePoint(...codePoints.slice(baseIndex, index - baseIndex)));
          }
          else if (isRegionalIndicator(code)) {
              // Some (but not all) flags are represented by a sequence of two
              // "regional indicators" codepoints.
              index += 1;
              result.push(String.fromCodePoint(...codePoints.slice(index - 2, 2)));
          }
          else {
              result.push(String.fromCodePoint(code));
          }
      }
      return result;
  }

  /**
   * ## Reference
   * TeX source code:
   * {@link  http://tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web | Tex.web}
   *
   */
  /**
   * Given a LaTeX expression represented as a character string,
   * the Lexer class will scan and return Tokens for the lexical
   * units in the string.
   *
   * @param s A string of LaTeX
   */
  class Tokenizer {
      constructor(s) {
          this.s = splitGraphemes(s);
          this.pos = 0;
          this.obeyspaces = false;
      }
      /**
       * @return True if we reached the end of the stream
       */
      end() {
          return this.pos >= this.s.length;
      }
      /**
       * Return the next char and advance
       */
      get() {
          return this.pos < this.s.length ? this.s[this.pos++] : '';
      }
      /**
       * Return the next char, but do not advance
       */
      peek() {
          return this.s[this.pos];
      }
      /**
       * Return the next substring matching regEx and advance.
       */
      match(regEx) {
          // This.s can either be a string, if it's made up only of ASCII chars
          // or an array of graphemes, if it's more complicated.
          const execResult = typeof this.s === 'string'
              ? regEx.exec(this.s.slice(this.pos))
              : regEx.exec(this.s.slice(this.pos).join(''));
          if (execResult === null || execResult === void 0 ? void 0 : execResult[0]) {
              this.pos += execResult[0].length;
              return execResult[0];
          }
          return null;
      }
      /**
       * Return the next token, or null.
       */
      next() {
          // If we've reached the end, exit
          if (this.end())
              return null;
          // Handle white space
          // In text mode, spaces are significant,
          // however they are coalesced unless \obeyspaces
          if (!this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]+/)) {
              // Note that browsers are inconsistent in their definitions of the
              // `\s` metacharacter, so we use an explicit pattern instead.
              // - IE:          `[ \f\n\r\t\v]`
              // - Chrome:      `[ \f\n\r\t\v\u00A0]`
              // - Firefox:     `[ \f\n\r\t\v\u00A0\u2028\u2029]`
              // - \f \u000C: form feed (FORM FEED)
              // - \n \u000A: linefeed (LINE FEED)
              // - \r \u000D: carriage return
              // - \t \u0009: tab (CHARACTER TABULATION)
              // - \v \u000B: vertical tab (LINE TABULATION)
              // - \u00A0: NON-BREAKING SPACE
              // - \u2028: LINE SEPARATOR
              // - \u2029: PARAGRAPH SEPARATOR
              return '<space>';
          }
          if (this.obeyspaces && this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]/)) {
              // Don't coalesce when this.obeyspaces is true (different regex from above)
              return '<space>';
          }
          const next = this.get();
          // Is it a command?
          if (next === '\\') {
              if (!this.end()) {
                  // A command is either a string of letters and asterisks...
                  let command = this.match(/^[a-zA-Z*]+/);
                  if (command) {
                      // Spaces after a 'control word' are ignored
                      // (but not after a 'control symbol' (single char)
                      this.match(/^[ \f\n\r\t\v\u00A0\u2028\u2029]*/);
                  }
                  else {
                      // ... or a single non-letter character
                      command = this.get();
                      if (command === ' ') {
                          // The `\ ` command is equivalent to a single space
                          return '<space>';
                      }
                  }
                  return '\\' + command;
              }
          }
          else if (next === '{') {
              // This is a group start
              return '<{>';
          }
          else if (next === '}') {
              // This is a group end
              return '<}>';
          }
          else if (next === '^') {
              if (this.peek() === '^') {
                  // It might be a ^^ command (inline hex character)
                  this.get();
                  // There can be zero to six carets with the same number of hex digits
                  const hex = this.match(/^(\^(\^(\^(\^[\da-f])?[\da-f])?[\da-f])?[\da-f])?[\da-f]{2}/);
                  if (hex) {
                      return String.fromCodePoint(Number.parseInt(hex.slice(hex.lastIndexOf('^') + 1), 16));
                  }
              }
              return next;
          }
          else if (next === '#') {
              // This could be either a param token, or a literal # (used for
              // colorspecs, for example). A param token is a '#' followed by
              // - a digit 0-9 followed by a non-alpha, non-digit
              // - or '?' (to indicate a placeholder)
              // - or '@' (to indicate an implicit, optional, argument)
              // Otherwise, it's a literal '#'.
              if (!this.end()) {
                  let isParameter = false;
                  if (/[\d?@]/.test(this.peek())) {
                      // Could be a param
                      isParameter = true;
                      // Need to look ahead to the following char
                      // (to exclude, e.g. '#1c1b2d': it's not a '#' token, it's a color)
                      if (this.pos + 1 < this.s.length) {
                          const after = this.s[this.pos + 1];
                          isParameter = /[^\dA-Za-z]/.test(after);
                      }
                  }
                  if (isParameter) {
                      return '#' + this.get();
                  }
                  return '#';
              }
          }
          else if (next === '$') {
              // Mode switch
              if (this.peek() === '$') {
                  // $$
                  this.get();
                  return '<$$>';
              }
              // $
              return '<$>';
          }
          return next;
      }
  }
  // Some primitive commands need to be handled in the expansion phase
  // (the 'gullet')
  function expand(lex, args) {
      var _a, _b, _c, _d;
      let result = [];
      let token = lex.next();
      if (token) {
          if (token === '\\relax') ;
          else if (token === '\\noexpand') {
              // Do not expand the next token
              token = lex.next();
              if (token) {
                  result.push(token);
              }
          }
          else if (token === '\\obeyspaces') {
              lex.obeyspaces = true;
          }
          else if (token === '\\space' || token === '~') {
              // The `\space` command is equivalent to a single space
              // The ~ is an 'active character' (a single character macro)
              // that maps to <space>
              result.push('<space>');
          }
          else if (token === '\\bgroup') {
              // Begin group, synonym for opening brace
              result.push('<{>');
          }
          else if (token === '\\egroup') {
              // End group, synonym for closing brace
              result.push('<}>');
          }
          else if (token === '\\string') {
              // Turn the next token into a string
              token = lex.next();
              if (token) {
                  if (token.startsWith('\\')) {
                      [...token].forEach((x) => result.push(x === '\\' ? '\\backslash' : x));
                  }
                  else if (token === '<{>') {
                      result.push('\\{');
                  }
                  else if (token === '<space>') {
                      result.push('~');
                  }
                  else if (token === '<}>') {
                      result.push('\\}');
                  }
              }
          }
          else if (token === '\\csname') {
              // Turn the next tokens, until `\endcsname`, into a command
              while (lex.peek() === '<space>') {
                  lex.next();
              }
              let command = '';
              let done = false;
              let tokens = [];
              do {
                  if (tokens.length === 0) {
                      // We're out of tokens to look at, get some more
                      if (/^#[\d?@]$/.test(lex.peek())) {
                          // Expand parameters (but not commands)
                          const parameter = lex.get().slice(1);
                          tokens = tokenize((_b = (_a = args === null || args === void 0 ? void 0 : args[parameter]) !== null && _a !== void 0 ? _a : args === null || args === void 0 ? void 0 : args['?']) !== null && _b !== void 0 ? _b : '\\placeholder{}', args);
                          token = tokens[0];
                      }
                      else {
                          token = lex.next();
                          tokens = token ? [token] : [];
                      }
                  }
                  done = tokens.length === 0;
                  if (!done && token === '\\endcsname') {
                      done = true;
                      tokens.shift();
                  }
                  if (!done) {
                      done =
                          token === '<$>' ||
                              token === '<$$>' ||
                              token === '<{>' ||
                              token === '<}>' ||
                              (token.length > 1 && token.startsWith('\\'));
                  }
                  if (!done) {
                      command += tokens.shift();
                  }
              } while (!done);
              if (command) {
                  result.push('\\' + command);
              }
              result = result.concat(tokens);
          }
          else if (token === '\\endcsname') ;
          else if (token.length > 1 && token.startsWith('#')) {
              // It's a parameter to expand
              const parameter = token.slice(1);
              result = result.concat(tokenize((_d = (_c = args === null || args === void 0 ? void 0 : args[parameter]) !== null && _c !== void 0 ? _c : args === null || args === void 0 ? void 0 : args['?']) !== null && _d !== void 0 ? _d : '\\placeholder{}', args));
          }
          else {
              result.push(token);
          }
      }
      return result;
  }
  /**
   * Create Tokens from a stream of LaTeX
   *
   * @param s - A string of LaTeX. It can include comments (with the `%`
   * marker) and multiple lines.
   */
  function tokenize(s, args) {
      // Merge multiple lines into one, and remove comments
      const lines = s.toString().split(/\r?\n/);
      let stream = '';
      let sep = '';
      for (const line of lines) {
          stream += sep;
          sep = ' ';
          // Remove everything after a % (comment marker)
          // (but \% should be preserved...)
          const m = line.match(/((?:\\%)|[^%])*/);
          if (m !== null)
              stream += m[0];
      }
      const tokenizer = new Tokenizer(stream);
      let result = [];
      do {
          result = result.concat(expand(tokenizer, args));
      } while (!tokenizer.end());
      return result;
  }
  function joinLatex(segments) {
      let sep = '';
      let result = '';
      for (const segment of segments) {
          if (segment) {
              if (/[a-zA-Z*]/.test(segment[0])) {
                  // If the segment begins with a char that *could* be in a command
                  // name... insert a separator (if one was needed for the previous segment)
                  result += sep;
              }
              // If the segment ends in a command...
              sep = /\\[a-zA-Z]+\*?$/.test(segment) ? ' ' : '';
              result += segment;
          }
      }
      return result;
  }
  function tokensToString(tokens) {
      const result = joinLatex(tokens.map((token) => {
          var _a;
          return ((_a = {
              '<space>': ' ',
              '<$$>': '$$',
              '<$>': '$',
              '<{>': '{',
              '<}>': '}',
          }[token]) !== null && _a !== void 0 ? _a : token);
      }));
      return result;
  }

  const MATH_SYMBOLS = {};
  // Map a character to some corresponding Latex
  // This is used for some characters such as ² SUPERSCRIPT TWO.
  // This is also an opportunity to specify the prefered form when
  // a unicode character is encountered that maps to multiple commands,
  // for example ≠ could map either to \ne or \neq
  // The table will also be populated by any registered symbol
  // from MATH_SYMBOLS
  // prettier-ignore
  const REVERSE_MATH_SYMBOLS = {
      '<': '<',
      '>': '>',
      'o': 'o',
      '&': '\\&',
      '{': '\\{',
      '}': '\\}',
      '[': '\\lbrack',
      ']': '\\rbrack',
      ':': '\\colon',
      '\u00A0': '~',
      '\u00AC': '\\neg',
      '\u00B7': '\\cdot',
      '\u00BC': '\\frac{1}{4}',
      '\u00BD': '\\frac{1}{2}',
      '\u00BE': '\\frac{3}{4}',
      '\u2070': '^{0}',
      '\u2071': '^{i}',
      '\u00B9': '^{1}',
      '\u00B2': '^{2}',
      '\u00B3': '^{3}',
      '\u2020': '\\dagger',
      '\u2021': '\\ddagger',
      '\u2026': '\\ldots',
      '\u2074': '^{4}',
      '\u2075': '^{5}',
      '\u2076': '^{6}',
      '\u2077': '^{7}',
      '\u2078': '^{8}',
      '\u2079': '^{9}',
      '\u207A': '^{+}',
      '\u207B': '^{-}',
      '\u207C': '^{=}',
      '\u207F': '^{n}',
      '\u2080': '_{0}',
      '\u2081': '_{1}',
      '\u2082': '_{2}',
      '\u2083': '_{3}',
      '\u2084': '_{4}',
      '\u2085': '_{5}',
      '\u2086': '_{6}',
      '\u2087': '_{7}',
      '\u2088': '_{8}',
      '\u2089': '_{9}',
      '\u208A': '_{+}',
      '\u208B': '_{-}',
      '\u208C': '_{=}',
      '\u2090': '_{a}',
      '\u2091': '_{e}',
      '\u2092': '_{o}',
      '\u2093': '_{x}',
      '\u2032': '\\prime',
      '\'': '\\prime',
      '\u2190': '\\gets',
      '\u2192': '\\to',
      '\u25B3': '\\triangle',
      '\u25BD': '\\triangledown',
      '\u220B': '\\owns',
      '\u2217': '\\ast',
      '\u2223': '\\vert',
      '\u2225': '\\Vert',
      '\u2227': '\\land',
      '\u2228': '\\lor',
      '\u22C5': '\\cdot',
      '\u22C8': '\\bowtie',
      '\u2260': '\\ne',
      '\u2264': '\\le',
      '\u2265': '\\ge',
      '\u22A5': '\\bot',
      '\u27F7': '\\biconditional',
      '\u27F8': '\\impliedby',
      '\u27F9': '\\implies',
      '\u2102': '\\C',
      '\u2115': '\\N',
      '\u2119': '\\P',
      '\u211A': '\\Q',
      '\u211D': '\\R',
      '\u2124': '\\Z',
  };
  const FUNCTIONS = {};
  const ENVIRONMENTS = {};
  const MACROS = {
      iff: '\\;\u27FA\\;',
      nicefrac: '^{#1}\\!\\!/\\!_{#2}',
      // From bracket.sty, Dirac notation
      bra: '\\mathinner{\\langle{#1}|}',
      ket: '\\mathinner{|{#1}\\rangle}',
      braket: '\\mathinner{\\langle{#1}\\rangle}',
      set: '\\mathinner{\\lbrace #1 \\rbrace}',
      Bra: '\\left\\langle #1\\right|',
      Ket: '\\left|#1\\right\\rangle',
      Braket: '\\left\\langle{#1}\\right\\rangle',
      Set: '\\left\\lbrace #1 \\right\\rbrace',
      // Proof Wiki
      rd: '\\mathrm{d}',
      rD: '\\mathrm{D}',
      // From Wolfram Alpha
      doubleStruckCapitalN: '\\mathbb{N}',
      doubleStruckCapitalR: '\\mathbb{R}',
      doubleStruckCapitalQ: '\\mathbb{Q}',
      doubleStruckCapitalZ: '\\mathbb{Z}',
      doubleStruckCapitalP: '\\mathbb{P}',
      scriptCapitalE: '\\mathscr{E}',
      scriptCapitalH: '\\mathscr{H}',
      scriptCapitalL: '\\mathscr{L}',
      gothicCapitalC: '\\mathfrak{C}',
      gothicCapitalH: '\\mathfrak{H}',
      gothicCapitalI: '\\mathfrak{I}',
      gothicCapitalR: '\\mathfrak{R}',
      imaginaryI: '\\mathrm{i}',
      imaginaryJ: '\\mathrm{j}',
      exponentialE: '\\mathrm{e}',
      differentialD: '\\mathrm{d}',
      capitalDifferentialD: '\\mathrm{D}',
  };
  // Body-text symbols
  // See http://ctan.mirrors.hoobly.com/info/symbols/comprehensive/symbols-a4.pdf, p14
  const TEXT_SYMBOLS = {
      ' ': ' ',
      '\\#': '\u0023',
      '\\&': '\u0026',
      '\\$': '$',
      '\\%': '%',
      '\\_': '_',
      '\\euro': '\u20AC',
      '\\maltese': '\u2720',
      '\\{': '{',
      '\\}': '}',
      '\\nobreakspace': '\u00A0',
      '\\ldots': '\u2026',
      '\\textellipsis': '\u2026',
      '\\backslash': '\\',
      '`': '\u2018',
      "'": '\u2019',
      '``': '\u201C',
      "''": '\u201D',
      '\\degree': '\u00B0',
      '\\textasciicircum': '^',
      '\\textasciitilde': '~',
      '\\textasteriskcentered': '*',
      '\\textbackslash': '\\',
      '\\textbraceleft': '{',
      '\\textbraceright': '}',
      '\\textbullet': '•',
      '\\textdollar': '$',
      '\\textsterling': '£',
      '\\textdagger': '\u2020',
      '\\textdaggerdbl': '\u2021',
      '–': '\u2013',
      '—': '\u2014',
      '‘': '\u2018',
      '’': '\u2019',
      '“': '\u201C',
      '”': '\u201D',
      '"': '\u201D',
      '\\ss': '\u00DF',
      '\\ae': '\u00E6',
      '\\oe': '\u0153',
      '\\AE': '\u00C6',
      '\\OE': '\u0152',
      '\\O': '\u00D8',
      '\\i': '\u0131',
      '\\j': '\u0237',
      '\\aa': '\u00E5',
      '\\AA': '\u00C5',
  };
  const COMMAND_MODE_CHARACTERS = /[\w!@*()-=+{}[\]\\';:?/.,~<>`|$%#&^" ]/;
  // Word boundaries for Cyrillic, Polish, French, German, Italian
  // and Spanish. We use \p{L} (Unicode property escapes: "Letter")
  // but Firefox doesn't support it
  // (https://bugzilla.mozilla.org/show_bug.cgi?id=1361876). Booo...
  // See also https://stackoverflow.com/questions/26133593/using-regex-to-match-international-unicode-alphanumeric-characters-in-javascript
  const LETTER = navigator !== undefined && /firefox|edge|trident/i.test(navigator.userAgent)
      ? /[a-zA-ZаАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяĄąĆćĘęŁłŃńÓóŚśŹźŻżàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒößÖẞìíòúÌÍÒÚáñÁÑ]/
      : /* eslint-disable-next-line prefer-regex-literals */
          new RegExp('\\p{Letter}', 'u');
  const LETTER_AND_DIGITS = navigator !== undefined && /firefox|edge|trident/i.test(navigator.userAgent)
      ? /[\da-zA-ZаАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяĄąĆćĘęŁłŃńÓóŚśŹźŻżàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒößÖẞìíòúÌÍÒÚáñÁÑ]/
      : /* eslint-disable-next-line prefer-regex-literals */
          new RegExp('[0-9\\p{Letter}]', 'u');
  /**
   * @param symbol    The LaTeX command for this symbol, for
   * example `\alpha` or `+`
   */
  function defineSymbol(symbol, value, type = 'mord', variant) {
      MATH_SYMBOLS[symbol] = {
          type,
          variant,
          value,
      };
      if (!REVERSE_MATH_SYMBOLS[value] && !variant) {
          REVERSE_MATH_SYMBOLS[value] = symbol;
      }
      // We accept all math symbols in text mode as well
      // which is a bit more permissive than TeX
      TEXT_SYMBOLS[symbol] = value;
  }
  /**
   * Define a set of single-character symbols as 'mord' symbols.
   * @param string a string of single character symbols
   */
  function defineSymbols(string) {
      for (let i = 0; i < string.length; i++) {
          const ch = string.charAt(i);
          defineSymbol(ch, ch);
      }
  }
  /**
   * Define a set of single-character symbols as a range of Unicode codepoints
   * @param from First Unicode codepoint
   * @param to Last Unicode codepoint
   */
  function defineSymbolRange(from, to) {
      for (let i = from; i <= to; i++) {
          const ch = String.fromCodePoint(i);
          defineSymbol(ch, ch);
      }
  }
  /**
   * Given a character, return a LaTeX expression matching its Unicode codepoint.
   * If there is a matching symbol (e.g. \alpha) it is returned.
   */
  function charToLatex(parseMode, s) {
      if (parseMode === 'math') {
          return REVERSE_MATH_SYMBOLS[s] || s;
      }
      if (parseMode === 'text') {
          let textSymbol = Object.keys(TEXT_SYMBOLS).find((x) => TEXT_SYMBOLS[x] === s);
          if (!textSymbol) {
              const hex = s.codePointAt(0).toString(16);
              textSymbol = '^'.repeat(hex.length) + hex;
          }
          return textSymbol;
      }
      return s;
  }
  /* Some symbols in the MATHEMATICAL ALPHANUMERICAL SYMBOLS block had
     been previously defined in other blocks. Remap them */
  const MATH_LETTER_EXCEPTIONS = {
      0x1d455: 0x0210e,
      0x1d49d: 0x0212c,
      0x1d4a0: 0x02130,
      0x1d4a1: 0x02131,
      0x1d4a3: 0x0210b,
      0x1d4a4: 0x02110,
      0x1d4a7: 0x02112,
      0x1d4a8: 0x02133,
      0x1d4ad: 0x0211b,
      0x1d4ba: 0x0212f,
      0x1d4bc: 0x0210a,
      0x1d4c4: 0x02134,
      0x1d506: 0x0212d,
      0x1d50b: 0x0210c,
      0x1d50c: 0x02111,
      0x1d515: 0x0211c,
      0x1d51d: 0x02128,
      0x1d53a: 0x02102,
      0x1d53f: 0x0210d,
      0x1d545: 0x02115,
      0x1d547: 0x02119,
      0x1d548: 0x0211a,
      0x1d549: 0x0211d,
      0x1d551: 0x02124,
  };
  const MATH_UNICODE_BLOCKS = [
      { start: 0x1d400, len: 26, offset: 65, style: 'bold' },
      { start: 0x1d41a, len: 26, offset: 97, style: 'bold' },
      { start: 0x1d434, len: 26, offset: 65, style: 'italic' },
      { start: 0x1d44e, len: 26, offset: 97, style: 'italic' },
      { start: 0x1d468, len: 26, offset: 65, style: 'bolditalic' },
      { start: 0x1d482, len: 26, offset: 97, style: 'bolditalic' },
      { start: 0x1d49c, len: 26, offset: 65, variant: 'script' },
      { start: 0x1d4b6, len: 26, offset: 97, variant: 'script' },
      { start: 0x1d4d0, len: 26, offset: 65, variant: 'script', style: 'bold' },
      { start: 0x1d4ea, len: 26, offset: 97, variant: 'script', style: 'bold' },
      { start: 0x1d504, len: 26, offset: 65, variant: 'fraktur' },
      { start: 0x1d51e, len: 26, offset: 97, variant: 'fraktur' },
      { start: 0x1d56c, len: 26, offset: 65, variant: 'fraktur', style: 'bold' },
      { start: 0x1d586, len: 26, offset: 97, variant: 'fraktur', style: 'bold' },
      { start: 0x1d538, len: 26, offset: 65, variant: 'double-struck' },
      { start: 0x1d552, len: 26, offset: 97, variant: 'double-struck' },
      { start: 0x1d5a0, len: 26, offset: 65, variant: 'sans-serif' },
      { start: 0x1d5ba, len: 26, offset: 97, variant: 'sans-serif' },
      {
          start: 0x1d5d4,
          len: 26,
          offset: 65,
          variant: 'sans-serif',
          style: 'bold',
      },
      {
          start: 0x1d5ee,
          len: 26,
          offset: 97,
          variant: 'sans-serif',
          style: 'bold',
      },
      {
          start: 0x1d608,
          len: 26,
          offset: 65,
          variant: 'sans-serif',
          style: 'italic',
      },
      {
          start: 0x1d622,
          len: 26,
          offset: 97,
          variant: 'sans-serif',
          style: 'italic',
      },
      {
          start: 0x1d63c,
          len: 26,
          offset: 65,
          variant: 'sans-serif',
          style: 'bolditalic',
      },
      {
          start: 0x1d656,
          len: 26,
          offset: 97,
          variant: 'sans-serif',
          style: 'bolditalic',
      },
      { start: 0x1d670, len: 26, offset: 65, variant: 'monospace' },
      { start: 0x1d68a, len: 26, offset: 97, variant: 'monospace' },
      { start: 0x1d6a8, len: 25, offset: 0x391, style: 'bold' },
      { start: 0x1d6c2, len: 25, offset: 0x3b1, style: 'bold' },
      { start: 0x1d6e2, len: 25, offset: 0x391, style: 'italic' },
      { start: 0x1d6fc, len: 25, offset: 0x3b1, style: 'italic' },
      { start: 0x1d71c, len: 25, offset: 0x391, style: 'bolditalic' },
      { start: 0x1d736, len: 25, offset: 0x3b1, style: 'bolditalic' },
      {
          start: 0x1d756,
          len: 25,
          offset: 0x391,
          variant: 'sans-serif',
          style: 'bold',
      },
      {
          start: 0x1d770,
          len: 25,
          offset: 0x3b1,
          variant: 'sans-serif',
          style: 'bold',
      },
      {
          start: 0x1d790,
          len: 25,
          offset: 0x391,
          variant: 'sans-serif',
          style: 'bolditalic',
      },
      {
          start: 0x1d7aa,
          len: 25,
          offset: 0x3b1,
          variant: 'sans-serif',
          style: 'bolditalic',
      },
      { start: 0x1d7ce, len: 10, offset: 48, variant: '', style: 'bold' },
      { start: 0x1d7d8, len: 10, offset: 48, variant: 'double-struck' },
      { start: 0x1d7e3, len: 10, offset: 48, variant: 'sans-serif' },
      {
          start: 0x1d7ec,
          len: 10,
          offset: 48,
          variant: 'sans-serif',
          style: 'bold',
      },
      { start: 0x1d7f6, len: 10, offset: 48, variant: 'monospace' },
  ];
  function unicodeToMathVariant(codepoint) {
      var _a;
      if ((codepoint < 0x1d400 || codepoint > 0x1d7ff) &&
          (codepoint < 0x2100 || codepoint > 0x214f)) {
          return { char: String.fromCodePoint(codepoint) };
      }
      // Handle the 'gap' letters by converting them back into their logical range
      for (const c in MATH_LETTER_EXCEPTIONS) {
          if (Object.prototype.hasOwnProperty.call(MATH_LETTER_EXCEPTIONS, c)) {
              if (MATH_LETTER_EXCEPTIONS[c] === codepoint) {
                  codepoint = (_a = c.codePointAt(0)) !== null && _a !== void 0 ? _a : 0;
                  break;
              }
          }
      }
      for (const MATH_UNICODE_BLOCK of MATH_UNICODE_BLOCKS) {
          if (codepoint >= MATH_UNICODE_BLOCK.start &&
              codepoint < MATH_UNICODE_BLOCK.start + MATH_UNICODE_BLOCK.len) {
              return {
                  char: String.fromCodePoint(codepoint - MATH_UNICODE_BLOCK.start + MATH_UNICODE_BLOCK.offset),
                  variant: MATH_UNICODE_BLOCK.variant,
                  style: MATH_UNICODE_BLOCK.style,
              };
          }
      }
      return { char: String.fromCodePoint(codepoint) };
  }
  /**
   * Given a character and variant ('double-struck', 'fraktur', etc...)
   * return the corresponding unicode character (a string)
   */
  function mathVariantToUnicode(char, variant, style) {
      if (!/[A-Za-z\d]/.test(char))
          return char;
      if (!variant && !style)
          return char;
      const codepoint = char.codePointAt(0);
      for (const MATH_UNICODE_BLOCK of MATH_UNICODE_BLOCKS) {
          if (!variant || MATH_UNICODE_BLOCK.variant === variant) {
              if (!style || MATH_UNICODE_BLOCK.style === style) {
                  if (codepoint >= MATH_UNICODE_BLOCK.offset &&
                      codepoint < MATH_UNICODE_BLOCK.offset + MATH_UNICODE_BLOCK.len) {
                      const result = MATH_UNICODE_BLOCK.start + codepoint - MATH_UNICODE_BLOCK.offset;
                      return String.fromCodePoint(MATH_LETTER_EXCEPTIONS[result] || result);
                  }
              }
          }
      }
      return char;
  }
  function unicodeCharToLatex(parseMode, char) {
      if (parseMode === 'text') {
          return charToLatex(parseMode, char) || char;
      }
      let result;
      // Codepoint shortcuts have priority over variants
      // That is, "\N" vs "\mathbb{N}"
      // if (CODEPOINT_SHORTCUTS[cp]) return CODEPOINT_SHORTCUTS[cp];
      result = charToLatex(parseMode, char);
      if (result)
          return result;
      const cp = char.codePointAt(0);
      const v = unicodeToMathVariant(cp);
      if (!v.style && !v.variant)
          return '';
      result = v.char;
      if (v.variant) {
          result = '\\' + v.variant + '{' + result + '}';
      }
      if (v.style === 'bold') {
          result = '\\mathbf{' + result + '}';
      }
      else if (v.style === 'italic') {
          result = '\\mathit{' + result + '}';
      }
      else if (v.style === 'bolditalic') {
          result = '\\mathbfit{' + result + '}';
      }
      return '\\mathord{' + result + '}';
  }
  function unicodeStringToLatex(parseMode, s) {
      let result = '';
      let needSpace = false;
      for (const c of s) {
          if (needSpace) {
              result += parseMode === 'text' ? '{}' : ' ';
          }
          needSpace = false;
          const latex = unicodeCharToLatex(parseMode, c);
          if (latex) {
              result += latex;
              needSpace = /\\[a-zA-Z\d]+\*?$/.test(latex);
          }
          else {
              result += c;
          }
      }
      return result;
  }
  /**
   * Gets the value of a symbol in math mode
   */
  // export function getSymbolValue(symbol: string): string {
  //     return MATH_SYMBOLS[symbol]?.value ?? symbol;
  // }
  function getEnvironmentDefinition(name) {
      var _a;
      return (_a = ENVIRONMENTS[name]) !== null && _a !== void 0 ? _a : null;
  }
  /**
   * @param symbol    A command (e.g. '\alpha') or a character (e.g. 'a')
   * @param parseMode One of 'math' or 'text'
   * @param macros A macros dictionary
   * @return {object} An info structure about the symbol, or null
   */
  function getInfo(symbol, parseMode, macros) {
      if (!symbol || symbol.length === 0)
          return null;
      let info = null;
      if (symbol.startsWith('\\')) {
          // This could be a function or a symbol
          info = FUNCTIONS[symbol];
          if (info) {
              // We've got a match
              return info;
          }
          // It wasn't a function, maybe it's a symbol?
          if (parseMode === 'math') {
              info = MATH_SYMBOLS[symbol];
          }
          else if (TEXT_SYMBOLS[symbol]) {
              info = { value: TEXT_SYMBOLS[symbol] };
          }
          if (!info) {
              // Maybe it's a macro
              const command = symbol.slice(1);
              if (macros === null || macros === void 0 ? void 0 : macros[command]) {
                  let def = macros[command];
                  if (typeof def === 'object') {
                      def = def.def;
                  }
                  let argCount = 0;
                  // Let's see if there are arguments in the definition.
                  if (/(^|[^\\])#1/.test(def))
                      argCount = 1;
                  if (/(^|[^\\])#2/.test(def))
                      argCount = 2;
                  if (/(^|[^\\])#3/.test(def))
                      argCount = 3;
                  if (/(^|[^\\])#4/.test(def))
                      argCount = 4;
                  if (/(^|[^\\])#5/.test(def))
                      argCount = 5;
                  if (/(^|[^\\])#6/.test(def))
                      argCount = 6;
                  if (/(^|[^\\])#7/.test(def))
                      argCount = 7;
                  if (/(^|[^\\])#8/.test(def))
                      argCount = 8;
                  if (/(^|[^\\])#9/.test(def))
                      argCount = 9;
                  info = {
                      type: 'group',
                      mode: 'math',
                      params: [],
                      infix: false,
                  };
                  while (argCount >= 1) {
                      info.params.push({
                          isOptional: false,
                          type: 'math',
                      });
                      argCount -= 1;
                  }
              }
          }
      }
      else if (parseMode === 'math') {
          info = MATH_SYMBOLS[symbol];
      }
      else if (TEXT_SYMBOLS[symbol]) {
          info = { value: TEXT_SYMBOLS[symbol] };
      }
      else if (parseMode === 'text') {
          info = { value: symbol };
      }
      // Special case `f`, `g` and `h` are recognized as functions.
      if (info &&
          info.type === 'mord' &&
          (info.value === 'f' || info.value === 'g' || info.value === 'h')) {
          info.isFunction = true;
      }
      return info;
  }
  /**
   * Return an array of suggestion for completing string 's'.
   * For example, for 'si', it could return ['sin', 'sinh', 'sim', 'simeq', 'sigma']
   * Infix operators are excluded, since they are deprecated commands.
   */
  function suggest(s) {
      const result = [];
      // Iterate over items in the dictionary
      for (const p in FUNCTIONS) {
          if (Object.prototype.hasOwnProperty.call(FUNCTIONS, p)) {
              if (p.startsWith(s) && !FUNCTIONS[p].infix) {
                  result.push({ match: p, frequency: FUNCTIONS[p].frequency });
              }
          }
      }
      for (const p in MATH_SYMBOLS) {
          if (Object.prototype.hasOwnProperty.call(MATH_SYMBOLS, p)) {
              if (p.startsWith(s)) {
                  result.push({ match: p, frequency: MATH_SYMBOLS[p].frequency });
              }
          }
      }
      result.sort((a, b) => {
          var _a, _b;
          if (a.frequency === b.frequency) {
              if (a.match.length === b.match.length) {
                  return a.match.localeCompare(b.match);
              }
              return a.match.length - b.match.length;
          }
          return ((_a = b.frequency) !== null && _a !== void 0 ? _a : 0) - ((_b = a.frequency) !== null && _b !== void 0 ? _b : 0);
      });
      return result;
  }
  /**
   * An argument template has the following syntax:
   *
   * <placeholder>:<type>
   *
   * where
   * - <placeholder> is a string whose value is displayed when the argument
   *   is missing
   * - <type> is one of 'string', 'color', 'dimen', 'auto', 'text', 'math'
   *
   */
  function parseParameterTemplateArgument(argTemplate) {
      let type = 'auto';
      // Parse the type (:type)
      const r = argTemplate.match(/:([^=]+)/);
      if (r)
          type = r[1].trim();
      return type;
  }
  function parseParameterTemplate(parameterTemplate) {
      if (!parameterTemplate)
          return [];
      let result = [];
      let parameters = parameterTemplate.split(']');
      if (parameters[0].startsWith('[')) {
          // We found at least one optional parameter.
          result.push({
              isOptional: true,
              type: parseParameterTemplateArgument(parameters[0].slice(1)),
          });
          // Parse the rest
          for (let i = 1; i <= parameters.length; i++) {
              result = result.concat(parseParameterTemplate(parameters[i]));
          }
      }
      else {
          parameters = parameterTemplate.split('}');
          if (parameters[0].startsWith('{')) {
              // We found a required parameter
              result.push({
                  isOptional: false,
                  type: parseParameterTemplateArgument(parameters[0].slice(1)),
              });
              // Parse the rest
              for (let i = 1; i <= parameters.length; i++) {
                  result = result.concat(parseParameterTemplate(parameters[i]));
              }
          }
      }
      return result;
  }
  /**
   * If possible, i.e. if they are all simple atoms, return a string made up of
   * their body
   */
  function parseArgAsString(atoms) {
      if (!atoms)
          return '';
      let result = '';
      let success = true;
      atoms.forEach((atom) => {
          if (typeof atom.value === 'string') {
              result += atom.value;
          }
          else {
              success = false;
          }
      });
      return success ? result : '';
  }
  /**
   * Define one or more environments to be used with
   *         \begin{<env-name>}...\end{<env-name>}.
   *
   * @param params The number and type of required and optional parameters.
   */
  function defineEnvironment(names, parameters, parser, isTabular = false) {
      if (typeof names === 'string') {
          names = [names];
      }
      const parsedParameters = parseParameterTemplate(parameters);
      // Set default values of functions
      const data = {
          tabular: isTabular,
          // Params: the parameters for this function, an array of
          // {optional, type}
          params: parsedParameters,
          // Callback to create an atom
          createAtom: parser,
      };
      for (const name of names) {
          ENVIRONMENTS[name] = data;
      }
  }
  /**
   * Like defineEnvironment, but for a tabular environment, i.e.
   * one whose content is in tabular mode, where '&' indicata a new column
   * and '\\' indicate a new row.
   */
  function defineTabularEnvironment(names, parameters, parser) {
      defineEnvironment(names, parameters, parser, true);
  }
  /**
   * Define one of more functions.
   *
   * @param names
   * @param params The number and type of required and optional parameters.
   * For example: '{}' defines a single mandatory parameter
   * '[string]{auto}' defines two params, one optional, one required
   */
  function defineFunction(names, parameters, options) {
      var _a, _b;
      if (typeof names === 'string') {
          names = [names];
      }
      if (!options)
          options = {};
      // Set default values of functions
      const data = {
          // The parameters for this function, an array of
          // {optional, type}
          params: parseParameterTemplate(parameters),
          ifMode: options.ifMode,
          isFunction: (_a = options.isFunction) !== null && _a !== void 0 ? _a : false,
          applyMode: options.applyMode,
          infix: (_b = options.infix) !== null && _b !== void 0 ? _b : false,
          createAtom: options.createAtom,
          applyStyle: options.applyStyle,
      };
      names.forEach((name) => {
          FUNCTIONS['\\' + name] = data;
      });
  }

  /**
   * The order of these branches specify the keyboard navigation order
   */
  const NAMED_BRANCHES = [
      'above',
      'body',
      'below',
      'superscript',
      'subscript',
  ];
  /**
   * A _branch_ is a set of children of an atom.
   *
   * There are two kind of branches:
   * - **colRow** branches are adressed with a column and row number and are
   * used with ArrayAtom
   * - **named branches** used with other kind of atoms. There is a fixed set of
   * possible named branches.
   */
  function isNamedBranch(branch) {
      return typeof branch === 'string' && NAMED_BRANCHES.includes(branch);
  }
  function isColRowBranch(branch) {
      return Array.isArray(branch) && branch.length === 2;
  }
  // A table of size -> font size for the different sizing functions
  const SIZING_MULTIPLIER = {
      size1: 0.5,
      size2: 0.7,
      size3: 0.8,
      size4: 0.9,
      size5: 1,
      size6: 1.2,
      size7: 1.44,
      size8: 1.73,
      size9: 2.07,
      size10: 2.49,
  };
  /**
   * An atom is an object encapsulating an elementary mathematical unit,
   * independent of its graphical representation.
   *
   * It keeps track of the content, while the dimensions, position and style
   * are tracked by Span objects which are created by the `decompose()` functions.
   */
  class Atom {
      constructor(type, options) {
          var _a, _b, _c, _d;
          this.command = options === null || options === void 0 ? void 0 : options.command;
          this.type = type;
          if (typeof (options === null || options === void 0 ? void 0 : options.value) === 'string') {
              this.value = options.value;
          }
          this._isDirty = false;
          this._changeCounter = 0;
          this.mode = (_a = options === null || options === void 0 ? void 0 : options.mode) !== null && _a !== void 0 ? _a : 'math';
          this.isExtensibleSymbol = (_b = options === null || options === void 0 ? void 0 : options.isExtensibleSymbol) !== null && _b !== void 0 ? _b : false;
          this.isFunction = (_c = options === null || options === void 0 ? void 0 : options.isFunction) !== null && _c !== void 0 ? _c : false;
          this.limits = options === null || options === void 0 ? void 0 : options.limits;
          this.style = (_d = options === null || options === void 0 ? void 0 : options.style) !== null && _d !== void 0 ? _d : {};
          this.toLatexOverride = options === null || options === void 0 ? void 0 : options.toLatexOverride;
      }
      get changeCounter() {
          return this._changeCounter;
      }
      get isDirty() {
          return this._isDirty;
      }
      set isDirty(dirty) {
          this._isDirty = dirty;
          this._changeCounter++;
          if (dirty) {
              this.latex = undefined;
              this._children = null;
              this._changeCounter++;
              let { parent } = this;
              while (parent) {
                  parent._isDirty = true;
                  parent._changeCounter++;
                  parent._children = null;
                  parent.latex = undefined;
                  parent = parent.parent;
              }
          }
      }
      /**
       * Return a list of spans equivalent to atoms.
       * A span is the most elementary type possible, for example 'text'
       * or 'vlist', while the input atoms may be more abstract and complex,
       * such as 'genfrac'
       *
       * @param context Font family, variant, size, color, and other info useful
       * to render an expression
       * @param atoms - An array of atoms
       */
      static render(inputContext, atoms) {
          var _a, _b;
          function isDigit(atom) {
              return (atom.type === 'mord' &&
                  Boolean(atom.value) &&
                  /^[\d,.]$/.test(atom.value));
          }
          function isText(atom) {
              return atom.mode === 'text';
          }
          if (!atoms)
              return null;
          if (atoms.length === 0)
              return [];
          // We can be passed either a Context object, or
          // a ContextInterface objectl literal.
          const context = inputContext instanceof Context
              ? inputContext
              : new Context(inputContext);
          // In most cases we want to display selection,
          // except if the `atomIdsSettings.groupNumbers` flag is set which is used for
          // read aloud.
          const displaySelection = !context.atomIdsSettings || !context.atomIdsSettings.groupNumbers;
          let result = [];
          if (atoms.length === 1) {
              result = atoms[0].render(context);
              if (result && displaySelection && atoms[0].isSelected) {
                  result.forEach((x) => x.selected(true));
              }
              console.assert(!result || isArray(result));
          }
          else {
              let selection = [];
              let digitOrTextStringID = '';
              let lastWasDigit = true;
              for (const atom of atoms) {
                  if (((_a = context.atomIdsSettings) === null || _a === void 0 ? void 0 : _a.groupNumbers) &&
                      digitOrTextStringID &&
                      ((lastWasDigit && isDigit(atom)) || (!lastWasDigit && isText(atom)))) {
                      context.atomIdsSettings.overrideID = digitOrTextStringID;
                  }
                  const span = atom.render(context);
                  if (context.atomIdsSettings) {
                      context.atomIdsSettings.overrideID = null;
                  }
                  if (span) {
                      // Flatten the spans (i.e. [[a1, a2], b1, b2] -> [a1, a2, b1, b2]
                      const flat = [].concat(...span);
                      context.phantomBase = flat;
                      // If this is a digit or text run, keep track of it
                      if ((_b = context.atomIdsSettings) === null || _b === void 0 ? void 0 : _b.groupNumbers) {
                          if (isDigit(atom) || isText(atom)) {
                              if (!digitOrTextStringID || lastWasDigit !== isDigit(atom)) {
                                  // Changed from text to digits or vice-versa
                                  lastWasDigit = isDigit(atom);
                                  digitOrTextStringID = atom.id;
                              }
                          }
                          if ((!(isDigit(atom) || isText(atom)) ||
                              !atom.hasEmptyBranch('superscript') ||
                              !atom.hasEmptyBranch('subscript')) &&
                              digitOrTextStringID) {
                              // Done with digits/text
                              digitOrTextStringID = '';
                          }
                      }
                      if (displaySelection && atom.isSelected) {
                          selection = selection.concat(flat);
                          selection.forEach((x) => x.selected(true));
                      }
                      else {
                          if (selection.length > 0) {
                              // There was a selection, but we're out of it now
                              // Append the selection
                              result = [...result, ...selection];
                              selection = [];
                          }
                          result = result.concat(flat);
                      }
                  }
              }
              // Is there a leftover selection?
              if (selection.length > 0) {
                  result = [...result, ...selection];
                  selection = [];
              }
          }
          if (!result || result.length === 0)
              return null;
          // If the mathstyle changed between the parent and the current atom,
          // account for the size difference
          if (context.mathstyle.id !== context.parentMathstyle.id) {
              const factor = context.mathstyle.sizeMultiplier /
                  context.parentMathstyle.sizeMultiplier;
              for (const span of result) {
                  console.assert(!isArray(span));
                  console.assert(typeof span.height === 'number' && Number.isFinite(span.height));
                  span.height *= factor;
                  span.depth *= factor;
              }
          }
          // If the size changed between the parent and the current group,
          // account for the size difference
          if (context.size !== context.parentSize) {
              const factor = SIZING_MULTIPLIER[context.size] / SIZING_MULTIPLIER[context.parentSize];
              for (const span of result) {
                  console.assert(!isArray(span));
                  console.assert(typeof span.height === 'number' && Number.isFinite(span.height));
                  span.height *= factor;
                  span.depth *= factor;
              }
          }
          return result;
      }
      /**
       * Given an atom or an array of atoms, return a LaTeX string representation
       */
      static toLatex(value, options) {
          let result = '';
          if (isArray(value)) {
              if (value.length > 0)
                  result = atomsToLatex(value, options);
          }
          else if (typeof value === 'number' || typeof value === 'boolean') {
              result = value.toString();
          }
          else if (typeof value === 'string') {
              result = value.replace(/\s/g, '~');
          }
          else if (value !== undefined) {
              // If we have some verbatim latex for this atom, use it.
              // This allow non-significant punctuation to be preserved when possible.
              if (!options.expandMacro && typeof value.latex === 'string') {
                  return value.latex;
              }
              if (value.toLatexOverride) {
                  return value.toLatexOverride(value, options);
              }
              result = value.toLatex(options);
          }
          return result;
      }
      /**
       * The common ancestor between two atoms
       */
      static commonAncestor(a, b) {
          if (a === b)
              return a.parent;
          // Short-circuit a common case
          if (a.parent === b.parent)
              return a.parent;
          // Accumulate all the parents of `a`
          const parents = new WeakSet();
          let { parent } = a;
          while (parent) {
              parents.add(parent);
              parent = parent.parent;
          }
          // Walk up the parents of `b`. If a parent of `b` is also a parent of
          // `a`, it's the common ancestor
          parent = b.parent;
          while (parent) {
              if (parents.has(parent))
                  return parent;
              parent = parent.parent;
          }
          console.assert(Boolean(parent)); // Never reached
          return null;
      }
      /**
       * Default Latex emmiter.
       * Avoid calling directly, instead call `Atom.toLatex(atom)`
       * to correctly call per-definition emitters and use the cached verbatim
       * latex when applicable.
       */
      toLatex(options) {
          var _a;
          if (this.body && this.command) {
              // There's a command and body
              return joinLatex([
                  this.command,
                  '{',
                  this.bodyToLatex(options),
                  '}',
                  this.supsubToLatex(options),
              ]);
          }
          if (this.body) {
              // There's a body with no command
              return joinLatex([
                  this.bodyToLatex(options),
                  this.supsubToLatex(options),
              ]);
          }
          if (this.value && this.value !== '\u200B') {
              // There's probably just a value (which is a unicode character)
              return (_a = this.command) !== null && _a !== void 0 ? _a : unicodeCharToLatex(this.mode, this.value);
          }
          return '';
      }
      bodyToLatex(options) {
          return Atom.toLatex(this.body, options);
      }
      aboveToLatex(options) {
          return Atom.toLatex(this.above, options);
      }
      belowToLatex(options) {
          return Atom.toLatex(this.below, options);
      }
      supsubToLatex(options) {
          let result = '';
          if (!this.hasEmptyBranch('superscript')) {
              let sup = Atom.toLatex(this.superscript, options);
              if (sup.length === 1) {
                  if (sup === '\u2032') {
                      sup = '\\prime ';
                  }
                  else if (sup === '\u2033') {
                      sup = '\\doubleprime ';
                  }
                  result += '^' + sup;
              }
              else {
                  result += '^{' + sup + '}';
              }
          }
          if (!this.hasEmptyBranch('subscript')) {
              const sub = Atom.toLatex(this.subscript, options);
              result += sub.length === 1 ? '_' + sub : '_{' + sub + '}';
          }
          return result;
      }
      get treeDepth() {
          let result = 1;
          let atom = this.parent;
          while (atom) {
              atom = atom.parent;
              result += 1;
          }
          return result;
      }
      /**
       * Return the atoms in the branch, if it exists, otherwise null
       */
      branch(name) {
          if (!isNamedBranch(name))
              return null;
          if (!this._branches)
              return null;
          return this._branches[name];
      }
      /**
       * Return all the branches that exist.
       * Some of them may be empty.
       */
      get branches() {
          const result = [];
          if (this._branches) {
              NAMED_BRANCHES.forEach((x) => {
                  if (this._branches[x]) {
                      result.push(x);
                  }
              });
          }
          return result;
      }
      /**
       * Return the atoms in the branch, if it exists, otherwise create it
       */
      createBranch(name) {
          console.assert(isNamedBranch(name));
          if (!isNamedBranch(name))
              return [];
          if (!this._branches) {
              this._branches = {
                  [name]: [this.makeFirstAtom(name)],
              };
          }
          else if (!this._branches[name]) {
              this._branches[name] = [this.makeFirstAtom(name)];
          }
          this.isDirty = true;
          return this._branches[name];
      }
      get row() {
          if (!isColRowBranch(this.treeBranch))
              return -1;
          return this.treeBranch[0];
      }
      get col() {
          if (!isColRowBranch(this.treeBranch))
              return -1;
          return this.treeBranch[1];
      }
      get body() {
          var _a;
          return (_a = this._branches) === null || _a === void 0 ? void 0 : _a.body;
      }
      set body(atoms) {
          this.setChildren(atoms, 'body');
      }
      get superscript() {
          var _a;
          return (_a = this._branches) === null || _a === void 0 ? void 0 : _a.superscript;
      }
      set superscript(atoms) {
          this.setChildren(atoms, 'superscript');
      }
      get subscript() {
          var _a;
          return (_a = this._branches) === null || _a === void 0 ? void 0 : _a.subscript;
      }
      set subscript(atoms) {
          this.setChildren(atoms, 'subscript');
      }
      get above() {
          var _a;
          return (_a = this._branches) === null || _a === void 0 ? void 0 : _a.above;
      }
      set above(atoms) {
          this.setChildren(atoms, 'above');
      }
      get below() {
          var _a;
          return (_a = this._branches) === null || _a === void 0 ? void 0 : _a.below;
      }
      set below(atoms) {
          this.setChildren(atoms, 'below');
      }
      get computedStyle() {
          const style = { ...this.style };
          if (style) {
              // Variant are not included in the computed style (they're not inherited)
              delete style.variant;
              delete style.variantStyle;
          }
          if (!this.parent)
              return style !== null && style !== void 0 ? style : {};
          return { ...this.parent.computedStyle, ...style };
      }
      applyStyle(style) {
          this.isDirty = true;
          this.style = { ...this.style, ...style };
          if (this.style.fontFamily === 'none') {
              delete this.style.fontFamily;
          }
          if (this.style.fontShape === 'auto') {
              delete this.style.fontShape;
          }
          if (this.style.fontSeries === 'auto') {
              delete this.style.fontSeries;
          }
          if (this.style.color === 'none') {
              delete this.style.color;
          }
          if (this.style.backgroundColor === 'none') {
              delete this.style.backgroundColor;
          }
          if (this.style.fontSize === 'auto') {
              delete this.style.fontSize;
          }
      }
      getInitialBaseElement() {
          let result;
          if (!this.hasEmptyBranch('body')) {
              console.assert(this.body[0].type === 'first');
              result = this.body[1].getInitialBaseElement();
          }
          return result !== null && result !== void 0 ? result : this;
      }
      getFinalBaseElement() {
          if (!this.hasEmptyBranch('body')) {
              return this.body[this.body.length - 1].getFinalBaseElement();
          }
          return this;
      }
      isCharacterBox() {
          const base = this.getInitialBaseElement();
          return /minner|mbin|mrel|mpunct|mopen|mclose|textord/.test(base.type);
      }
      hasEmptyBranch(branch) {
          const atoms = this.branch(branch);
          if (!atoms)
              return true;
          console.assert(atoms.length > 0);
          console.assert(atoms[0].type === 'first');
          return atoms.length === 1;
      }
      /*
       * Setting `null` does nothing
       * Setting `[]` adds an empty list (the branch is created)
       * The children should *not* start with a `'first'` atom:
       * the `first` atom will be added if necessary
       */
      setChildren(children, branch) {
          var _a;
          if (!children)
              return;
          console.assert(isNamedBranch(branch));
          if (!isNamedBranch(branch))
              return;
          console.assert(((_a = children[0]) === null || _a === void 0 ? void 0 : _a.type) !== 'first');
          // Update the parent
          if (this._branches) {
              this._branches[branch] = [this.makeFirstAtom(branch), ...children];
          }
          else {
              this._branches = {
                  [branch]: [this.makeFirstAtom(branch), ...children],
              };
          }
          this.isDirty = true;
          // Update the children
          children.forEach((x) => {
              x.parent = this;
              x.treeBranch = branch;
          });
      }
      makeFirstAtom(branch) {
          const result = new Atom('first', { mode: this.mode });
          result.parent = this;
          result.treeBranch = branch;
          return result;
      }
      addChild(child, branch) {
          console.assert(child.type !== 'first');
          this.createBranch(branch).push(child);
          this.isDirty = true;
          // Update the child
          child.parent = this;
          child.treeBranch = branch;
      }
      addChildBefore(child, before) {
          const branch = this.createBranch(before.treeBranch);
          branch.splice(branch.indexOf(before), 0, child);
          this.isDirty = true;
          // Update the child
          child.parent = this;
          child.treeBranch = before.treeBranch;
      }
      addChildAfter(child, after) {
          const branch = this.createBranch(after.treeBranch);
          branch.splice(branch.indexOf(after) + 1, 0, child);
          this.isDirty = true;
          // Update the child
          child.parent = this;
          child.treeBranch = after.treeBranch;
      }
      addChildren(children, branch) {
          children.forEach((x) => this.addChild(x, branch));
      }
      /**
       * Return the last atom that was added
       */
      addChildrenAfter(children, after) {
          console.assert(children.length === 0 || children[0].type !== 'first');
          const branch = this.createBranch(after.treeBranch);
          branch.splice(branch.indexOf(after) + 1, 0, ...children);
          this.isDirty = true;
          // Update the children
          children.forEach((x) => {
              x.parent = this;
              x.treeBranch = after.treeBranch;
          });
          return children[children.length - 1];
      }
      removeBranch(name) {
          const children = this.branch(name);
          if (isNamedBranch(name)) {
              this._branches[name] = null;
          }
          children.forEach((x) => {
              x.parent = null;
              x.treeBranch = undefined;
          });
          // Drop the 'first' element
          console.assert(children[0].type === 'first');
          children.shift();
          this.isDirty = true;
          return children;
      }
      removeChild(child) {
          console.assert(child.parent === this);
          // `first` atom cannot be deleted
          if (child.type === 'first')
              return;
          // Update the parent
          const branch = this.branch(child.treeBranch);
          const index = branch.indexOf(child);
          console.assert(index >= 0);
          branch.splice(index, 1);
          this.isDirty = true;
          // Update the child
          child.parent = null;
          child.treeBranch = undefined;
      }
      get siblings() {
          if (this.type === 'root')
              return [];
          return this.parent.branch(this.treeBranch);
      }
      get firstSibling() {
          return this.siblings[0];
      }
      get lastSibling() {
          const { siblings } = this;
          return siblings[siblings.length - 1];
      }
      get isFirstSibling() {
          return this === this.firstSibling;
      }
      get isLastSibling() {
          return this === this.lastSibling;
      }
      get hasNoSiblings() {
          // There is always at least one sibling, the 'first'
          // atom, but we don't count it.
          return this.siblings.length === 1;
      }
      get leftSibling() {
          const siblings = this.parent.branch(this.treeBranch);
          return siblings[siblings.indexOf(this) - 1];
      }
      get rightSibling() {
          const siblings = this.parent.branch(this.treeBranch);
          return siblings[siblings.indexOf(this) + 1];
      }
      get hasChildren() {
          return this._branches && this.children.length > 0;
      }
      get firstChild() {
          console.assert(this.hasChildren);
          return this.children[0];
      }
      get lastChild() {
          console.assert(this.hasChildren);
          const { children } = this;
          return children[children.length - 1];
      }
      /**
       * All the children of this atom.
       *
       * The order of the atoms is the order in which they
       * are navigated using the keyboard.
       */
      get children() {
          if (this._children)
              return this._children;
          const result = [];
          if (this._branches) {
              NAMED_BRANCHES.forEach((branch) => {
                  if (this._branches[branch]) {
                      this._branches[branch].forEach((x) => {
                          result.push(...x.children);
                          result.push(x);
                      });
                  }
              });
          }
          this._children = result;
          return result;
      }
      /**
       * Render this atom as an array of Spans
       *
       * @param context Font variant, size, color, etc...
       */
      render(context) {
          var _a;
          // Render the body branch if present, even if it's empty (need to
          // render the 'first' atom to render the caret in an empty branch
          let result = this.makeSpan(context, (_a = this.body) !== null && _a !== void 0 ? _a : this.value);
          if (!result)
              return null;
          result.type = isSpanType(this.type) ? this.type : '';
          if (this.containsCaret) {
              result.classes = (result.classes || '') + ' ML__contains-caret';
          }
          // Finally, render any necessary superscript, subscripts
          if (!this.limits && (this.superscript || this.subscript)) {
              // If `limits` is set, the attachment of sup/sub was handled
              // in the atom decomposition (e.g. mop, accent)
              result = this.attachSupsub(context, result, result.type);
          }
          return [result];
      }
      attachSupsub(context, nucleus, type) {
          // If no superscript or subscript, nothing to do.
          if (!this.superscript && !this.subscript) {
              return nucleus;
          }
          // Superscript and subscripts are discussed in the TeXbook
          // on page 445-446, rules 18(a-f).
          // TeX:14859-14945
          const { mathstyle } = context;
          let supmid = null;
          let submid = null;
          if (this._branches.superscript) {
              const sup = Atom.render(context.sup(), this._branches.superscript);
              supmid = new Span(sup, mathstyle.adjustTo(mathstyle.sup()));
          }
          if (this._branches.subscript) {
              const sub = Atom.render(context.sub(), this._branches.subscript);
              submid = new Span(sub, mathstyle.adjustTo(mathstyle.sub()));
          }
          // Rule 18a, p445
          let supShift = 0;
          let subShift = 0;
          if (!this.isCharacterBox()) {
              supShift = height(nucleus) - mathstyle.metrics.supDrop;
              subShift = depth(nucleus) + mathstyle.metrics.subDrop;
          }
          // Rule 18c, p445
          let minSupShift;
          if (mathstyle === MATHSTYLES.displaystyle) {
              minSupShift = mathstyle.metrics.sup1; // Sigma13
          }
          else if (mathstyle.cramped) {
              minSupShift = mathstyle.metrics.sup3; // Sigma15
          }
          else {
              minSupShift = mathstyle.metrics.sup2; // Sigma14
          }
          // Scriptspace is a font-size-independent size, so scale it
          // appropriately @revisit: do we really need to do this scaling? It's in em...
          const multiplier = MATHSTYLES.textstyle.sizeMultiplier * mathstyle.sizeMultiplier;
          const scriptspace = 0.5 / METRICS.ptPerEm / multiplier;
          let supsub = null;
          if (submid && supmid) {
              // Rule 18e
              supShift = Math.max(supShift, minSupShift, supmid.depth + 0.25 * mathstyle.metrics.xHeight);
              subShift = Math.max(subShift, mathstyle.metrics.sub2);
              const ruleWidth = METRICS.defaultRuleThickness;
              if (supShift - depth(supmid) - (height(submid) - subShift) <
                  4 * ruleWidth) {
                  subShift =
                      4 * ruleWidth - (supShift - supmid.depth) + height(submid);
                  const psi = 0.8 * mathstyle.metrics.xHeight - (supShift - depth(supmid));
                  if (psi > 0) {
                      supShift += psi;
                      subShift -= psi;
                  }
              }
              supsub = makeVlist(context, [submid, subShift, supmid, -supShift], 'individualShift');
              // Subscripts shouldn't be shifted by the nucleus' italic correction.
              // Account for that by shifting the subscript back the appropriate
              // amount. Note we only do this when the nucleus is a single symbol.
              if (this.isExtensibleSymbol) {
                  supsub.children[0].left = -italic(nucleus);
              }
          }
          else if (submid && !supmid) {
              // Rule 18b
              subShift = Math.max(subShift, mathstyle.metrics.sub1, height(submid) - 0.8 * mathstyle.metrics.xHeight);
              supsub = makeVlist(context, [submid], 'shift', subShift);
              supsub.children[0].right = scriptspace;
              if (this.isCharacterBox()) {
                  supsub.children[0].left = -italic(nucleus);
              }
          }
          else if (!submid && supmid) {
              // Rule 18c, d
              supShift = Math.max(supShift, minSupShift, supmid.depth + 0.25 * mathstyle.metrics.xHeight);
              supsub = makeVlist(context, [supmid], 'shift', -supShift);
              supsub.children[0].right = scriptspace;
          }
          // Display the caret *following* the superscript and subscript,
          // so attach the caret to the 'msubsup' element.
          const supsubContainer = new Span(supsub, 'msubsup');
          if (this.caret) {
              supsubContainer.caret = this.caret;
              // This.caret = ''; // @revisit: we shouln't clear the **Atom** caret
          }
          return new Span([nucleus, supsubContainer], '', type);
      }
      attachLimits(context, nucleus, nucleusShift, slant) {
          const limitAbove = this.superscript
              ? new Span(Atom.render(context.sup(), this.superscript), context.mathstyle.adjustTo(context.mathstyle.sup()))
              : null;
          const limitBelow = this.subscript
              ? new Span(Atom.render(context.sub(), this.subscript), context.mathstyle.adjustTo(context.mathstyle.sub()))
              : null;
          return makeLimitsStack(context, nucleus, nucleusShift, slant, limitAbove, limitBelow);
      }
      /**
       * Add an ID attribute to both the span and this atom so that the atom
       * can be retrieved from the span later on (e.g. when the span is clicked on)
       */
      bind(context, span) {
          if (this.type !== 'first' && this.value !== '\u200B') {
              this.id = makeID(context);
              if (this.id) {
                  if (!span.attributes)
                      span.attributes = {};
                  span.attributes['data-atom-id'] = this.id;
              }
          }
          return span;
      }
      /**
       * Create a span with the specified body and with a class attribute
       * equal to the type ('mbin', 'inner', 'spacing', etc...)
       *
       */
      makeSpan(context, value) {
          var _a;
          // Ensure that the atom type is a valid Span type, or use ''
          const type = isSpanType(this.type) ? this.type : '';
          const result = new Span(typeof value === 'string' ? value : Atom.render(context, value), '', type);
          // The font family is determined by:
          // - the base font family associated with this atom (optional). For example,
          // some atoms such as some functions ('\sin', '\cos', etc...) or some
          // symbols ('\Z') have an explicit font family. This overrides any
          // other font family
          // - the user-specified font family that has been explicitly applied to
          // this atom
          // - the font family automatically determined in math mode, for example
          // which italicizes some characters, but which can be overridden
          const style = {
              variant: 'normal',
              ...this.style,
              letterShapeStyle: context.letterShapeStyle,
          };
          result.applyStyle(this.mode, style);
          // Apply size correction
          const size = (style === null || style === void 0 ? void 0 : style.fontSize) ? style.fontSize : 'size5';
          if (size !== context.parentSize) {
              result.classes += ' sizing reset-' + context.parentSize;
              result.classes += ' ' + size;
          }
          else if (context.parentSize !== context.size) {
              result.classes += ' sizing reset-' + context.parentSize;
              result.classes += ' ' + context.size;
          }
          result.maxFontSize = Math.max(result.maxFontSize, (_a = context.mathstyle.sizeMultiplier) !== null && _a !== void 0 ? _a : 1);
          // Set other attributes
          if (this.mode === 'text')
              result.classes += ' ML__text';
          if (context.mathstyle.isTight())
              result.isTight = true;
          // The italic correction applies only in math mode
          if (this.mode !== 'math')
              result.italic = 0;
          result.right = result.italic; // Italic correction
          if (typeof context.opacity === 'number') {
              result.setStyle('opacity', context.opacity);
          }
          // To retrieve the atom from a span, for example when the span is clicked
          // on, attach a randomly generated ID to the span and associate it
          // with the atom.
          this.bind(context, result);
          if (this.caret) {
              // If this has a super/subscript, the caret will be attached
              // to the 'msubsup' atom, so no need to have it here.
              if (!this.superscript && !this.subscript) {
                  result.caret = this.caret;
              }
          }
          if (context.mathstyle.isTight())
              result.isTight = true;
          return result;
      }
  }
  function makeID(context) {
      let result;
      if (context.atomIdsSettings) {
          if (typeof context.atomIdsSettings.seed === 'number') {
              result = context.atomIdsSettings.overrideID
                  ? context.atomIdsSettings.overrideID
                  : context.atomIdsSettings.seed.toString(36);
              context.atomIdsSettings.seed += 1;
          }
          else {
              result =
                  Date.now().toString(36).slice(-2) +
                      Math.floor(Math.random() * 0x186a0).toString(36);
          }
      }
      return result;
  }
  /* Combine a nucleus with an atom above and an atom below. Used to form
   * limits.
   *
   * @param context
   * @param nucleus The base over and under which the atoms will
   * be placed.
   * @param nucleusShift The vertical shift of the nucleus from
   * the baseline.
   * @param slant For operators that have a slant, such as \int,
   * indicate by how much to horizontally offset the above and below atoms
   */
  function makeLimitsStack(context, nucleus, nucleusShift, slant, above, below) {
      // If nothing above and nothing below, nothing to do.
      if (!above && !below)
          return nucleus;
      // IE8 clips \int if it is in a display: inline-block. We wrap it
      // in a new span so it is an inline, and works.
      // @todo: revisit
      nucleus = new Span(nucleus);
      let aboveShift = 0;
      let belowShift = 0;
      if (above) {
          aboveShift = Math.max(METRICS.bigOpSpacing1, METRICS.bigOpSpacing3 - depth(above));
      }
      if (below) {
          belowShift = Math.max(METRICS.bigOpSpacing2, METRICS.bigOpSpacing4 - height(below));
      }
      let result = null;
      if (below && above) {
          const bottom = METRICS.bigOpSpacing5 +
              height(below) +
              depth(below) +
              belowShift +
              depth(nucleus) +
              nucleusShift;
          result = makeVlist(context, [
              METRICS.bigOpSpacing5,
              below,
              belowShift,
              nucleus,
              aboveShift,
              above,
              METRICS.bigOpSpacing5,
          ], 'bottom', bottom);
          // Here, we shift the limits by the slant of the symbol. Note
          // that we are supposed to shift the limits by 1/2 of the slant,
          // but since we are centering the limits adding a full slant of
          // margin will shift by 1/2 that.
          result.children[0].left = -slant;
          result.children[2].left = slant;
      }
      else if (below && !above) {
          const top = height(nucleus) - nucleusShift;
          result = makeVlist(context, [METRICS.bigOpSpacing5, below, belowShift, nucleus], 'top', top);
          // See comment above about slants
          result.children[0].left = -slant;
      }
      else if (!below && above) {
          const bottom = depth(nucleus) + nucleusShift;
          result = makeVlist(context, [nucleus, aboveShift, above, METRICS.bigOpSpacing5], 'bottom', bottom);
          // See comment above about slants
          result.children[1].left = slant;
      }
      return new Span(result, 'op-limits', 'mop');
  }
  /**
   *
   * @param atoms the list of atoms to emit as LaTeX
   * @param options.expandMacro true if macros should be expanded
   * @result a LaTeX string
   */
  function atomsToLatex(atoms, options) {
      if (atoms[0].type === 'first') {
          if (atoms.length === 1)
              return '';
          // Remove the 'first' atom, if present
          atoms = atoms.slice(1);
      }
      if (atoms.length === 0)
          return '';
      return joinLatex(getPropertyRuns(atoms, 'cssClass').map((x) => joinLatex(getPropertyRuns(x, 'color').map((x) => joinLatex(getModeRuns(x).map((x) => Mode.toLatex(x, options)))))));
  }

  /**
  /**
   * Return an atom suitable for use as the root of a formula.
   */
  function makeRoot(parseMode, body = []) {
      const root = new Atom('root', { mode: parseMode });
      // If making a new root, make sure the initial body is not already
      // attached to another root. That spells trouble.
      console.assert(body.every((x) => !x.parent));
      root.body = body;
      return root;
  }
  function isAtomArray(arg) {
      return isArray(arg);
  }

  /**
   * This module contains some color dictionaries and algorithms to
   * parse a string into a hex RGB color value.s
   * @summary   Parsing of color strings.
   */
  /*
  {\color{apricot}\blacksquare}{\color{aquamarine}\blacksquare}{\color{bittersweet}\blacksquare}{\color{black}\blacksquare}{\color{blue}\blacksquare}{\color{blueGreen}\blacksquare}{\color{blueviolet}\blacksquare}{\color{brickred}\blacksquare}{\color{brown}\blacksquare}{\color{burntorange}\blacksquare}{\color{cadetblue}\blacksquare}{\color{carnationpink}\blacksquare}{\color{cerulean}\blacksquare}{\color{cornflowerblue}\blacksquare}{\color{cyan}\blacksquare}{\color{dandelion}\blacksquare}{\color{darkorchid}\blacksquare}{\color{emerald}\blacksquare}{\color{forestgreen}\blacksquare}{\color{fuchsia}\blacksquare}{\color{goldenrod}\blacksquare}{\color{gray}\blacksquare}{\color{green}\blacksquare}{\color{greenyellow}\blacksquare}{\color{junglegreen}\blacksquare}{\color{lavender}\blacksquare}{\color{limegreen}\blacksquare}{\color{magenta}\blacksquare}{\color{mahogany}\blacksquare}{\color{maroon}\blacksquare}{\color{melon}\blacksquare}{\color{midnightblue}\blacksquare}{\color{mulberry}\blacksquare}{\color{navyblue}\blacksquare}{\color{olivegreen}\blacksquare}{\color{orange}\blacksquare}{\color{orangered}\blacksquare}{\color{orchid}\blacksquare}{\color{peach}\blacksquare}{\color{periwinkle}\blacksquare}{\color{pinegreen}\blacksquare}{\color{plum}\blacksquare}{\color{processblue}\blacksquare}{\color{purple}\blacksquare}{\color{rawsienna}\blacksquare}{\color{red}\blacksquare}{\color{redorange}\blacksquare}{\color{redviolet}\blacksquare}{\color{rhodamine}\blacksquare}{\color{royalblue}\blacksquare}{\color{royalpurple}\blacksquare}{\color{rubinered}\blacksquare}{\color{salmon}\blacksquare}{\color{seagreen}\blacksquare}{\color{sepia}\blacksquare}{\color{skyblue}\blacksquare}{\color{springgreen}\blacksquare}{\color{tan}\blacksquare}{\color{tealblue}\blacksquare}{\color{thistle}\blacksquare}{\color{turquoise}\blacksquare}{\color{violet}\blacksquare}{\color{violetred}\blacksquare}{\color{white}\blacksquare}{\color{wildstrawberry}\blacksquare}{\color{yellow}\blacksquare}{\color{yellowgreen}\blacksquare}{\color{yelloworange}\blacksquare}
  */
  /**
   * First 10 predefined colors used for plotting by Mathematica.
   *
   * Also known as _indexed color scheme #97_.
   */
  const MATHEMATICA_COLORS = {
      m0: '#3F3D99',
      m1: '#993D71',
      m2: '#998B3D',
      m3: '#3D9956',
      m4: '#3D5A99',
      m5: '#993D90',
      m6: '#996D3D',
      m7: '#43993D',
      m8: '#3D7999',
      m9: '#843D99',
  };
  // ColorData97 (Mathematica standard lines)
  // rgb(0.368417, 0.506779, 0.709798),       #5e81b5
  // rgb(0.880722, 0.611041, 0.142051),
  // rgb(0.560181, 0.691569, 0.194885),
  // rgb(0.922526, 0.385626, 0.209179),
  // rgb(0.528488, 0.470624, 0.701351),
  // rgb(0.772079, 0.431554, 0.102387),
  // rgb(0.363898, 0.618501, 0.782349),
  // rgb(1, 0.75, 0),
  // rgb(0.647624, 0.37816, 0.614037),
  // rgb(0.571589, 0.586483, 0.),
  // rgb(0.915, 0.3325, 0.2125),
  // rgb(0.40082222609352647, 0.5220066643438841, 0.85),
  // rgb(0.9728288904374106, 0.621644452187053, 0.07336199581899142),
  // rgb(0.736782672705901, 0.358, 0.5030266573755369),
  // rgb(0.28026441037696703, 0.715, 0.4292089322474965)
  // MathLab colors
  // '#0072bd' // [0, 0.4470, 0.7410]             blue
  // '#d95319' // [0.8500, 0.3250, 0.0980]        orange
  // '#edb120', // [0.9290, 0.6940, 0.1250]       yellow
  // '#7e2f8e', // [0.4940, 0.1840, 0.5560]       purple
  // '#77ac30', // [0.4660, 0.6740, 0.1880]       green
  // '#4dbeee', // [0.3010, 0.7450, 0.9330]       cyan
  // '#a2142f' // [0.6350, 0.0780, 0.1840]	    dark red
  /* Area colors are most appropriate to color a large area */
  const AREA_COLORS = [
      '#d35d60',
      '#7293cb',
      '#e1974d',
      '#84bb5d',
      '#9066a7',
      '#aD6a58',
      '#f5a4ce',
      '#fff590',
      '#212121',
      '#818787',
      '#d4d5d2',
      '#ffffff',
  ];
  /* Line colors are most appropriate to color as a stroke color */
  const LINE_COLORS = [
      '#cc2428',
      '#3769b1',
      '#da7e30',
      '#409852',
      '#6b4c9a',
      '#922426',
      '#e7298a',
      '#ffe907',
      '#000000',
      '#525055',
      '#adafaa',
      '#ffffff',
  ];
  /**
   * 68 colors (+ white) known to dvips used in LaTeX.
   *
   * The color names are based on the names of the _Crayola Crayon_ box of
   * 64 crayons.
   *
   * See:
   * - {@link http://mirror.jmu.edu/pub/CTAN/systems/knuth/local/lib/colordvi.tex | ColorDVI.tex}
   * - {@link https://en.wikibooks.org/w/index.php?title=LaTeX/Colors | Wikibooks:LaTeX/Colors}
   */
  const NAMED_COLORS = {
      apricot: '#FBB982',
      aquamarine: '#00B5BE',
      bittersweet: '#C04F17',
      black: '#221E1F',
      blue: '#2D2F92',
      bluegreen: '#00B3B8',
      blueviolet: '#473992',
      brickred: '#B6321C',
      brown: '#792500',
      burntorange: '#F7921D',
      cadetblue: '#74729A',
      carnationpink: '#F282B4',
      cerulean: '#00A2E3',
      cornflowerblue: '#41B0E4',
      cyan: '#00AEEF',
      dandelion: '#FDBC42',
      darkorchid: '#A4538A',
      emerald: '#00A99D',
      forestgreen: '#009B55',
      fuchsia: '#8C368C',
      goldenrod: '#FFDF42',
      gray: '#949698',
      green: '#00A64F',
      greenyellow: '#DFE674',
      junglegreen: '#00A99A',
      lavender: '#F49EC4',
      limegreen: '#8DC73E',
      magenta: '#EC008C',
      mahogany: '#A9341F',
      maroon: '#AF3235',
      melon: '#F89E7B',
      midnightblue: '#006795',
      mulberry: '#A93C93',
      navyblue: '#006EB8',
      olivegreen: '#3C8031',
      orange: '#F58137',
      orangered: '#ED135A',
      orchid: '#AF72B0',
      peach: '#F7965A',
      periwinkle: '#7977B8',
      pinegreen: '#008B72',
      plum: '#92268F',
      processblue: '#00B0F0',
      purple: '#99479B',
      rawsienna: '#974006',
      red: '#ED1B23',
      redorange: '#F26035',
      redviolet: '#A1246B',
      rhodamine: '#EF559F',
      royalblue: '#0071BC',
      royalpurple: '#613F99',
      rubinered: '#ED017D',
      salmon: '#F69289',
      seagreen: '#3FBC9D',
      sepia: '#671800',
      skyblue: '#46C5DD',
      springgreen: '#C6DC67',
      tan: '#DA9D76',
      tealblue: '#00AEB3',
      thistle: '#D883B7',
      turquoise: '#00B4CE',
      violet: '#58429B',
      violetred: '#EF58A0',
      white: '#FFFFFF',
      wildstrawberry: '#EE2967',
      yellow: '#FFF200',
      yellowgreen: '#98CC70',
      yelloworange: '#FAA21A',
  };
  // Other color lists: SVG colors, x11 colors
  /*
  aliceblue	rgb(240, 248, 255)
  antiquewhite	rgb(250, 235, 215)
  aqua	rgb( 0, 255, 255)
  aquamarine	rgb(127, 255, 212)
  azure	rgb(240, 255, 255)
  beige	rgb(245, 245, 220)
  bisque	rgb(255, 228, 196)
  black	rgb( 0, 0, 0)
  blanchedalmond	rgb(255, 235, 205)
  blue	rgb( 0, 0, 255)
  blueviolet	rgb(138, 43, 226)
  brown	rgb(165, 42, 42)
  burlywood	rgb(222, 184, 135)
  cadetblue	rgb( 95, 158, 160)
  chartreuse	rgb(127, 255, 0)
  chocolate	rgb(210, 105, 30)
  coral	rgb(255, 127, 80)
  cornflowerblue	rgb(100, 149, 237)
  cornsilk	rgb(255, 248, 220)
  crimson	rgb(220, 20, 60)
  cyan	rgb( 0, 255, 255)
  darkblue	rgb( 0, 0, 139)
  darkcyan	rgb( 0, 139, 139)
  darkgoldenrod	rgb(184, 134, 11)
  darkgray	rgb(169, 169, 169)
  darkgreen	rgb( 0, 100, 0)
  darkgrey	rgb(169, 169, 169)
  darkkhaki	rgb(189, 183, 107)
  darkmagenta	rgb(139, 0, 139)
  darkolivegreen	rgb( 85, 107, 47)
  darkorange	rgb(255, 140, 0)
  darkorchid	rgb(153, 50, 204)
  darkred	rgb(139, 0, 0)
  darksalmon	rgb(233, 150, 122)
  darkseagreen	rgb(143, 188, 143)
  darkslateblue	rgb( 72, 61, 139)
  darkslategray	rgb( 47, 79, 79)
  darkslategrey	rgb( 47, 79, 79)
  darkturquoise	rgb( 0, 206, 209)
  darkviolet	rgb(148, 0, 211)
  deeppink	rgb(255, 20, 147)
  deepskyblue	rgb( 0, 191, 255)
  dimgray	rgb(105, 105, 105)
  dimgrey	rgb(105, 105, 105)
  dodgerblue	rgb( 30, 144, 255)
  firebrick	rgb(178, 34, 34)
  floralwhite	rgb(255, 250, 240)
  forestgreen	rgb( 34, 139, 34)
  fuchsia	rgb(255, 0, 255)
  gainsboro	rgb(220, 220, 220)
  ghostwhite	rgb(248, 248, 255)
  gold	rgb(255, 215, 0)
  goldenrod	rgb(218, 165, 32)
  gray	rgb(128, 128, 128)
  grey	rgb(128, 128, 128)
  green	rgb( 0, 128, 0)
  greenyellow	rgb(173, 255, 47)
  honeydew	rgb(240, 255, 240)
  hotpink	rgb(255, 105, 180)
  indianred	rgb(205, 92, 92)
  indigo	rgb( 75, 0, 130)
  ivory	rgb(255, 255, 240)
  khaki	rgb(240, 230, 140)
  lavender	rgb(230, 230, 250)
  lavenderblush	rgb(255, 240, 245)
  lawngreen	rgb(124, 252, 0)
  lemonchiffon	rgb(255, 250, 205)
  lightblue	rgb(173, 216, 230)
  lightcoral	rgb(240, 128, 128)
  lightcyan	rgb(224, 255, 255)
  lightgoldenrodyellow	rgb(250, 250, 210)
  lightgray	rgb(211, 211, 211)
  lightgreen	rgb(144, 238, 144)
  lightgrey	rgb(211, 211, 211)
  lightpink	rgb(255, 182, 193)
  lightsalmon	rgb(255, 160, 122)
  lightseagreen	rgb( 32, 178, 170)
  lightskyblue	rgb(135, 206, 250)
  lightslategray	rgb(119, 136, 153)
  lightslategrey	rgb(119, 136, 153)
  lightsteelblue	rgb(176, 196, 222)
  lightyellow	rgb(255, 255, 224)
  lime	rgb( 0, 255, 0)
  limegreen	rgb( 50, 205, 50)
  linen	rgb(250, 240, 230)
  magenta	rgb(255, 0, 255)
  maroon	rgb(128, 0, 0)
  mediumaquamarine	rgb(102, 205, 170)
  mediumblue	rgb( 0, 0, 205)
  mediumorchid	rgb(186, 85, 211)
  mediumpurple	rgb(147, 112, 219)
  mediumseagreen	rgb( 60, 179, 113)
  mediumslateblue	rgb(123, 104, 238)
  mediumspringgreen	rgb( 0, 250, 154)
  mediumturquoise	rgb( 72, 209, 204)
  mediumvioletred	rgb(199, 21, 133)
  midnightblue	rgb( 25, 25, 112)
  mintcream	rgb(245, 255, 250)
  mistyrose	rgb(255, 228, 225)
  moccasin	rgb(255, 228, 181)
  navajowhite	rgb(255, 222, 173)
  navy	rgb( 0, 0, 128)
  oldlace	rgb(253, 245, 230)
  olive	rgb(128, 128, 0)
  olivedrab	rgb(107, 142, 35)
  orange	rgb(255, 165, 0)
  orangered	rgb(255, 69, 0)
  orchid	rgb(218, 112, 214)
  palegoldenrod	rgb(238, 232, 170)
  palegreen	rgb(152, 251, 152)
  paleturquoise	rgb(175, 238, 238)
  palevioletred	rgb(219, 112, 147)
  papayawhip	rgb(255, 239, 213)
  peachpuff	rgb(255, 218, 185)
  peru	rgb(205, 133, 63)
  pink	rgb(255, 192, 203)
  plum	rgb(221, 160, 221)
  powderblue	rgb(176, 224, 230)
  purple	rgb(128, 0, 128)
  red	rgb(255, 0, 0)
  rosybrown	rgb(188, 143, 143)
  royalblue	rgb( 65, 105, 225)
  saddlebrown	rgb(139, 69, 19)
  salmon	rgb(250, 128, 114)
  sandybrown	rgb(244, 164, 96)
  seagreen	rgb( 46, 139, 87)
  seashell	rgb(255, 245, 238)
  sienna	rgb(160, 82, 45)
  silver	rgb(192, 192, 192)
  skyblue	rgb(135, 206, 235)
  slateblue	rgb(106, 90, 205)
  slategray	rgb(112, 128, 144)
  slategrey	rgb(112, 128, 144)
  snow	rgb(255, 250, 250)
  springgreen	rgb( 0, 255, 127)
  steelblue	rgb( 70, 130, 180)
  tan	rgb(210, 180, 140)
  teal	rgb( 0, 128, 128)
  thistle	rgb(216, 191, 216)
  tomato	rgb(255, 99, 71)
  turquoise	rgb( 64, 224, 208)
  violet	rgb(238, 130, 238)
  wheat	rgb(245, 222, 179)
  white	rgb(255, 255, 255)
  whitesmoke	rgb(245, 245, 245)
  yellow	rgb(255, 255, 0)
  yellowgreen	rgb(154, 205, 50)
       
  */
  /**
   * Return a CSS color (#rrggbb) from a string.
   *
   * Possible formats include:
   * - named colors from the DVI color set: 'Yellow', 'red'... Case insensitive.
   * - colors from the Mathematica set: 'm1'...'m9'
   * - 3-digit hex: `'#d50'`
   * - 6-digit hex: `'#dd5500'`
   * - RGB functional: `'rgb(240, 20, 10)'`
   *
   * In addition, colors can be mixed using the following syntax:
   * `<mix> = <color>![<value>][!<mix>]`
   * For example:
   * - `'blue!20'`  = 20% blue + 80% white
   * - `'blue!20!black'` = 20% + 80% black
   * - `'blue!20!black!30!green'` = (20% + 80% black) * 30 % + 70% green
   *
   * If the input string is prefixed with a dash, the complementary color
   * of the expression is returned.
   *
   * This creative syntax is defined by the {@link http://mirror.jmu.edu/pub/CTAN/macros/latex/contrib/xcolor/xcolor.pdf | `xcolor` LaTeX package}.
   *
   * @param s - An expression representing a color value
   * @return An RGB color expressed as a hex-triplet preceded by `#`
   */
  function stringToColor(s) {
      var _a, _b;
      const colorSpec = s.toLowerCase().split('!');
      let baseRed;
      let baseGreen;
      let baseBlue;
      let red = 255;
      let green = 255;
      let blue = 255;
      let mix = -1;
      // If the string is prefixed with a '-', use the complementary color
      const complementary = colorSpec.length > 0 && colorSpec[0].startsWith('-');
      if (complementary)
          colorSpec[0] = colorSpec[0].slice(1);
      for (let i = 0; i < colorSpec.length; i++) {
          baseRed = red;
          baseGreen = green;
          baseBlue = blue;
          const colorName = (_a = colorSpec[i].match(/([a-z\d]*)/)) === null || _a === void 0 ? void 0 : _a[1];
          let color = (_b = NAMED_COLORS[colorName]) !== null && _b !== void 0 ? _b : MATHEMATICA_COLORS[colorName];
          if (!color)
              color = colorSpec[i];
          let m = color.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})$/i);
          if ((m === null || m === void 0 ? void 0 : m[1]) && m[2] && m[3]) {
              // It's a six-digit hex number
              red = Math.max(0, Math.min(255, Number.parseInt(m[1], 16)));
              green = Math.max(0, Math.min(255, Number.parseInt(m[2], 16)));
              blue = Math.max(0, Math.min(255, Number.parseInt(m[3], 16)));
          }
          else {
              m = color.match(/^#([\da-f]{3})$/i);
              if (m === null || m === void 0 ? void 0 : m[1]) {
                  // It's a three-digit hex number
                  const r1 = Number.parseInt(m[1][0], 16);
                  const g1 = Number.parseInt(m[1][1], 16);
                  const b1 = Number.parseInt(m[1][2], 16);
                  red = Math.max(0, Math.min(255, r1 * 16 + r1));
                  green = Math.max(0, Math.min(255, g1 * 16 + g1));
                  blue = Math.max(0, Math.min(255, b1 * 16 + b1));
              }
              else {
                  // It's a rgb functional
                  m = color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);
                  if ((m === null || m === void 0 ? void 0 : m[1]) && m[2] && m[3]) {
                      red = Math.max(0, Math.min(255, Number.parseInt(m[1])));
                      green = Math.max(0, Math.min(255, Number.parseInt(m[2])));
                      blue = Math.max(0, Math.min(255, Number.parseInt(m[3])));
                  }
                  else {
                      return null;
                  }
              }
          }
          if (mix >= 0) {
              red = (1 - mix) * red + mix * baseRed;
              green = (1 - mix) * green + mix * baseGreen;
              blue = (1 - mix) * blue + mix * baseBlue;
              mix = -1;
          }
          if (i + 1 < colorSpec.length) {
              mix = Math.max(0, Math.min(100, Number.parseInt(colorSpec[++i]))) / 100;
          }
      }
      if (mix >= 0) {
          red = mix * red + (1 - mix) * baseRed;
          green = mix * green + (1 - mix) * baseGreen;
          blue = mix * blue + (1 - mix) * baseBlue;
      }
      if (complementary) {
          red = 255 - red;
          green = 255 - green;
          blue = 255 - blue;
      }
      return ('#' +
          ('00' + Math.round(red).toString(16)).slice(-2) +
          ('00' + Math.round(green).toString(16)).slice(-2) +
          ('00' + Math.round(blue).toString(16)).slice(-2));
  }
  function colorToString(color) {
      if (!color)
          return '';
      if (!color.startsWith('#'))
          return color;
      let result = color.toUpperCase();
      for (const c in NAMED_COLORS) {
          if (NAMED_COLORS[c] === result) {
              result = c;
              break;
          }
      }
      for (const c in MATHEMATICA_COLORS) {
          if (MATHEMATICA_COLORS[c] === result) {
              result = c;
              break;
          }
      }
      return result;
  }

  class GroupAtom extends Atom {
      constructor(arg, options) {
          var _a;
          super('group', {
              mode: (_a = options === null || options === void 0 ? void 0 : options.mode) !== null && _a !== void 0 ? _a : 'math',
              toLatexOverride: options === null || options === void 0 ? void 0 : options.toLatexOverride,
              style: options === null || options === void 0 ? void 0 : options.style,
          });
          this.body = arg;
          this.mathStyleName = options === null || options === void 0 ? void 0 : options.mathStyleName;
          this.latexOpen = options === null || options === void 0 ? void 0 : options.latexOpen;
          this.latexClose = options === null || options === void 0 ? void 0 : options.latexClose;
          this.cssId = options === null || options === void 0 ? void 0 : options.cssId;
          this.htmlData = options === null || options === void 0 ? void 0 : options.htmlData;
          this.customClass = options === null || options === void 0 ? void 0 : options.customClass;
          this.skipBoundary = true;
      }
      render(context) {
          // The scope of the context is this group, so clone it
          // so that any changes to it will be discarded when finished
          // with this group.
          // Note that the mathstyle property is optional and could be undefined
          // If that's the case, clone() returns a clone of the
          // context with the same mathstyle.
          const localContext = context.clone({
              mathstyle: this.mathStyleName
                  ? MATHSTYLES[this.mathStyleName]
                  : undefined,
          });
          const span = new Span(Atom.render(localContext, this.body), '', 'mord'); // @revisit
          if (this.cssId)
              span.cssId = this.cssId;
          if (this.htmlData)
              span.htmlData = this.htmlData;
          span.applyStyle(this.mode, {
              backgroundColor: this.style.backgroundColor,
          }, this.customClass);
          if (this.caret)
              span.caret = this.caret;
          // Need to bind the group so that the DOM element can be matched
          // and the atom iterated recursively. Otherwise, it behaves
          // as if `captureSelection === true`
          this.bind(context, span);
          return [span];
      }
      toLatex(options) {
          const body = this.bodyToLatex(options);
          if (typeof this.latexOpen === 'string') {
              return this.latexOpen + body + this.latexClose;
          }
          if (this.cssId) {
              return `\\cssId{${this.cssId}}${body}}`;
          }
          if (this.htmlData) {
              return `\\htmlData{${this.htmlData}}${body}}`;
          }
          if (this.customClass) {
              return `\\class{${this.customClass}}${body}}`;
          }
          return body;
      }
  }

  class SpacingAtom extends Atom {
      constructor(command, style, width) {
          super('spacing', { command, style });
          this.width = width;
      }
      render(context) {
          var _a;
          let result;
          // A spacing command (\quad, etc...)
          // @revisit: is value needed? Is it ever set?
          if (this.value === '\u200B') {
              // ZERO-WIDTH SPACE
              result = this.makeSpan(context, '\u200B');
          }
          else if (this.value === '\u00A0') {
              result =
                  this.mode === 'math'
                      ? this.makeSpan(context, ' ')
                      : this.makeSpan(context, '\u00A0');
          }
          else if (Number.isFinite(this.width)) {
              result = new Span('\u200B', 'mspace ');
              result.left = this.width;
          }
          else {
              const spacingCls = (_a = {
                  '\\qquad': 'qquad',
                  '\\quad': 'quad',
                  '\\enspace': 'enspace',
                  '\\;': 'thickspace',
                  '\\:': 'mediumspace',
                  '\\,': 'thinspace',
                  '\\!': 'negativethinspace',
              }[this.command]) !== null && _a !== void 0 ? _a : 'mediumspace';
              result = new Span('\u200B', 'mspace ' + spacingCls);
          }
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
      toLatex(_options) {
          // Three kinds of spacing commands:
          // \hskip and \kern which take one implicit parameter
          // \hspace and hspace* with take one *explicit* parameter
          // \quad, etc... which take no parameters.
          let result = this.command;
          if (this.command === '\\hspace' || this.command === '\\hspace*') {
              result += '{';
              result += Number.isFinite(this.width)
                  ? Number(this.width).toString() + 'em'
                  : '0em';
              result += '}';
          }
          else {
              result += ' ';
              if (Number.isFinite(this.width)) {
                  result += Number(this.width).toString() + 'em ';
              }
          }
          return result;
      }
  }

  /**
   * This module deals with creating delimiters of various sizes. The TeXbook
   * discusses these routines on page 441-442, in the "Another subroutine sets box
   * x to a specified variable delimiter" paragraph.
   *
   * There are three main routines here. `makeSmallDelim` makes a delimiter in the
   * normal font, but in either text, script, or scriptscript style.
   * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
   * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
   * smaller pieces that are stacked on top of one another.
   *
   * The functions take a parameter `center`, which determines if the delimiter
   * should be centered around the axis.
   *
   * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
   * one of the given sizes. This is used for things like `\bigl`.
   * `customSizedDelim` makes a delimiter with a given total height+depth. It is
   * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
   * delimiter which surrounds an expression of a given height an depth. It is
   * used in `\left` and `\right`.
   * @summary   Handling of delimiters surrounds symbols.
   */
  const RIGHT_DELIM = {
      '(': ')',
      '{': '}',
      '[': ']',
      '|': '|',
      '\\lbrace': '\\rbrace',
      '\\{': '\\}',
      '\\langle': '\\rangle',
      '\\lfloor': '\\rfloor',
      '\\lceil': '\\rceil',
      '\\vert': '\\vert',
      '\\lvert': '\\rvert',
      '\\Vert': '\\Vert',
      '\\lVert': '\\rVert',
      '\\lbrack': '\\rbrack',
      '\\ulcorner': '\\urcorner',
      '\\llcorner': '\\lrcorner',
      '\\lgroup': '\\rgroup',
      '\\lmoustache': '\\rmoustache',
  };
  function getSymbolValue(symbol) {
      var _a;
      return ((_a = {
          '[': '[',
          ']': ']',
          '(': '(',
          ')': ')',
          '\\mid': '\u2223',
          '|': '\u2223',
          '\u2223': '\u2223',
          '\u2225': '\u2225',
          '\\|': '\u2223',
          '\\{': '{',
          '\\}': '}',
          '\\lbrace': '{',
          '\\rbrace': '}',
          '\\lbrack': '[',
          '\\rbrack': ']',
          '\\vert': '\u2223',
          '\\lvert': '\u2223',
          '\\mvert': '\u2223',
          '\\rvert': '\u2223',
          '\\Vert': '\u2225',
          '\\lVert': '\u2225',
          '\\mVert': '\u2225',
          '\\rVert': '\u2225',
          '\\parallel': '\u2225',
          '\\shortparallel': '\u2225',
          '\\langle': '\u27E8',
          '\\rangle': '\u27E9',
          '\\lfloor': '\u230A',
          '\\rfloor': '\u230B',
          '\\lceil': '\u2308',
          '\\rceil': '\u2309',
          '\\ulcorner': '\u250C',
          '\\urcorner': '\u2510',
          '\\llcorner': '\u2514',
          '\\lrcorner': '\u2518',
          '\\lgroup': '\u27EE',
          '\\rgroup': '\u27EF',
          '\\lmoustache': '\u23B0',
          '\\rmoustache': '\u23B1',
          '\\surd': '\u221A',
      }[symbol]) !== null && _a !== void 0 ? _a : symbol);
  }
  /**
   * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
   * font, but is restyled to either be in textstyle, scriptstyle, or
   * scriptscriptstyle.
   */
  function makeSmallDelim(type, delim, style, center, context, classes = '') {
      const text = makeSymbol('Main-Regular', getSymbolValue(delim));
      const span = makeStyleWrap(type, text, context.mathstyle, style, classes);
      if (center) {
          span.setTop((1 - context.mathstyle.sizeMultiplier / style.sizeMultiplier) *
              context.mathstyle.metrics.axisHeight);
      }
      span.setStyle('color', context.color);
      if (typeof context.opacity === 'number') {
          span.setStyle('opacity', context.opacity);
      }
      return span;
  }
  /**
   * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
   * Size3, or Size4 fonts. It is always rendered in textstyle.
   */
  function makeLargeDelim(type, delim, size, center, context, classes = '') {
      const result = makeStyleWrap(type, makeSymbol('Size' + size + '-Regular', getSymbolValue(delim), 'delimsizing size' + size), context.mathstyle, MATHSTYLES.textstyle, classes);
      if (center) {
          result.setTop((1 - context.mathstyle.sizeMultiplier) *
              context.mathstyle.metrics.axisHeight);
      }
      result.setStyle('color', context.color);
      if (typeof context.opacity === 'number') {
          result.setStyle('opacity', context.opacity);
      }
      return result;
  }
  /**
   * Make an inner span with the given offset and in the given font. This is used
   * in `makeStackedDelim` to make the stacking pieces for the delimiter.
   */
  function makeInner(symbol, font) {
      let sizeClass = '';
      // Apply the correct CSS class to choose the right font.
      if (font === 'Size1-Regular') {
          sizeClass = ' delim-size1';
      }
      else if (font === 'Size4-Regular') {
          sizeClass = ' delim-size4';
      }
      return makeSymbol(font, getSymbolValue(symbol), 'delimsizinginner' + sizeClass);
  }
  /**
   * Make a stacked delimiter out of a given delimiter, with the total height at
   * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
   */
  function makeStackedDelim(type, delim, heightTotal, center, context, classes = '') {
      // There are four parts, the top, an optional middle, a repeated part, and a
      // bottom.
      let top;
      let middle;
      let repeat;
      let bottom;
      top = repeat = bottom = getSymbolValue(delim);
      middle = null;
      // Also keep track of what font the delimiters are in
      let font = 'Size1-Regular';
      // We set the parts and font based on the symbol. Note that we use
      // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
      // repeats of the arrows
      if (delim === '\\vert' ||
          delim === '\\lvert' ||
          delim === '\\rvert' ||
          delim === '\\mvert' ||
          delim === '\\mid') {
          repeat = top = bottom = '\u2223';
      }
      else if (delim === '\\Vert' ||
          delim === '\\lVert' ||
          delim === '\\rVert' ||
          delim === '\\mVert' ||
          delim === '\\|') {
          repeat = top = bottom = '\u2225';
      }
      else if (delim === '\\uparrow') {
          repeat = bottom = '\u23D0';
      }
      else if (delim === '\\Uparrow') {
          repeat = bottom = '\u2016';
      }
      else if (delim === '\\downarrow') {
          top = repeat = '\u23D0';
      }
      else if (delim === '\\Downarrow') {
          top = repeat = '\u2016';
      }
      else if (delim === '\\updownarrow') {
          top = '\u2191';
          repeat = '\u23D0';
          bottom = '\u2193';
      }
      else if (delim === '\\Updownarrow') {
          top = '\u21D1';
          repeat = '\u2016';
          bottom = '\u21D3';
      }
      else if (delim === '[' || delim === '\\lbrack') {
          top = '\u23A1';
          repeat = '\u23A2';
          bottom = '\u23A3';
          font = 'Size4-Regular';
      }
      else if (delim === ']' || delim === '\\rbrack') {
          top = '\u23A4';
          repeat = '\u23A5';
          bottom = '\u23A6';
          font = 'Size4-Regular';
      }
      else if (delim === '\\lfloor') {
          repeat = top = '\u23A2';
          bottom = '\u23A3';
          font = 'Size4-Regular';
      }
      else if (delim === '\\lceil') {
          top = '\u23A1';
          repeat = bottom = '\u23A2';
          font = 'Size4-Regular';
      }
      else if (delim === '\\rfloor') {
          repeat = top = '\u23A5';
          bottom = '\u23A6';
          font = 'Size4-Regular';
      }
      else if (delim === '\\rceil') {
          top = '\u23A4';
          repeat = bottom = '\u23A5';
          font = 'Size4-Regular';
      }
      else if (delim === '(') {
          top = '\u239B';
          repeat = '\u239C';
          bottom = '\u239D';
          font = 'Size4-Regular';
      }
      else if (delim === ')') {
          top = '\u239E';
          repeat = '\u239F';
          bottom = '\u23A0';
          font = 'Size4-Regular';
      }
      else if (delim === '\\{' || delim === '\\lbrace') {
          top = '\u23A7';
          middle = '\u23A8';
          bottom = '\u23A9';
          repeat = '\u23AA';
          font = 'Size4-Regular';
      }
      else if (delim === '\\}' || delim === '\\rbrace') {
          top = '\u23AB';
          middle = '\u23AC';
          bottom = '\u23AD';
          repeat = '\u23AA';
          font = 'Size4-Regular';
      }
      else if (delim === '\\lgroup') {
          top = '\u23A7';
          bottom = '\u23A9';
          repeat = '\u23AA';
          font = 'Size4-Regular';
      }
      else if (delim === '\\rgroup') {
          top = '\u23AB';
          bottom = '\u23AD';
          repeat = '\u23AA';
          font = 'Size4-Regular';
      }
      else if (delim === '\\lmoustache') {
          top = '\u23A7';
          bottom = '\u23AD';
          repeat = '\u23AA';
          font = 'Size4-Regular';
      }
      else if (delim === '\\rmoustache') {
          top = '\u23AB';
          bottom = '\u23A9';
          repeat = '\u23AA';
          font = 'Size4-Regular';
      }
      else if (delim === '\\surd') {
          top = '\uE001';
          bottom = '\u23B7';
          repeat = '\uE000';
          font = 'Size4-Regular';
      }
      else if (delim === '\\ulcorner') {
          top = '\u250C';
          repeat = bottom = ' ';
      }
      else if (delim === '\\urcorner') {
          top = '\u2510';
          repeat = bottom = ' ';
      }
      else if (delim === '\\llcorner') {
          bottom = '\u2514';
          repeat = top = ' ';
      }
      else if (delim === '\\lrcorner') {
          top = '\u2518';
          repeat = top = ' ';
      }
      // Get the metrics of the four sections
      const topMetrics = getCharacterMetrics(getSymbolValue(top), font);
      const topHeightTotal = topMetrics.height + topMetrics.depth;
      const repeatMetrics = getCharacterMetrics(getSymbolValue(repeat), font);
      const repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
      const bottomMetrics = getCharacterMetrics(getSymbolValue(bottom), font);
      const bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
      let middleHeightTotal = 0;
      let middleFactor = 1;
      if (middle !== null) {
          const middleMetrics = getCharacterMetrics(getSymbolValue(middle), font);
          middleHeightTotal = middleMetrics.height + middleMetrics.depth;
          middleFactor = 2; // Repeat symmetrically above and below middle
      }
      // Calculate the minimal height that the delimiter can have.
      // It is at least the size of the top, bottom, and optional middle combined.
      const minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;
      // Compute the number of copies of the repeat symbol we will need
      const repeatCount = Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal));
      // Compute the total height of the delimiter including all the symbols
      const realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal;
      // The center of the delimiter is placed at the center of the axis. Note
      // that in this context, 'center' means that the delimiter should be
      // centered around the axis in the current style, while normally it is
      // centered around the axis in textstyle.
      let { axisHeight } = context.mathstyle.metrics;
      if (center) {
          axisHeight *= context.mathstyle.sizeMultiplier;
      }
      // Calculate the depth
      const depth = realHeightTotal / 2 - axisHeight;
      // Now, we start building the pieces that will go into the vlist
      // Keep a list of the inner pieces
      const inners = [];
      // Add the bottom symbol
      inners.push(makeInner(bottom, font));
      if (middle === null) {
          // Add that many symbols
          for (let i = 0; i < repeatCount; i++) {
              inners.push(makeInner(repeat, font));
          }
      }
      else {
          // When there is a middle bit, we need the middle part and two repeated
          // sections
          for (let i = 0; i < repeatCount; i++) {
              inners.push(makeInner(repeat, font));
          }
          inners.push(makeInner(middle, font));
          for (let i = 0; i < repeatCount; i++) {
              inners.push(makeInner(repeat, font));
          }
      }
      // Add the top symbol
      inners.push(makeInner(top, font));
      // Finally, build the vlist
      const inner = makeVlist(context, inners, 'bottom', depth);
      inner.setStyle('color', context.color);
      if (typeof context.opacity === 'number') {
          inner.setStyle('opacity', context.opacity);
      }
      return makeStyleWrap(type, new Span(inner, 'delimsizing mult'), context.mathstyle, MATHSTYLES.textstyle, classes);
  }
  // There are three kinds of delimiters, delimiters that stack when they become
  // too large
  const stackLargeDelimiters = new Set([
      '(',
      ')',
      '[',
      '\\lbrack',
      ']',
      '\\rbrack',
      '\\{',
      '\\lbrace',
      '\\}',
      '\\rbrace',
      '\\lfloor',
      '\\rfloor',
      '\\lceil',
      '\\rceil',
      '\\surd',
  ]);
  // Delimiters that always stack
  const stackAlwaysDelimiters = new Set([
      '\\uparrow',
      '\\downarrow',
      '\\updownarrow',
      '\\Uparrow',
      '\\Downarrow',
      '\\Updownarrow',
      '|',
      '\\|',
      '\\vert',
      '\\Vert',
      '\\lvert',
      '\\rvert',
      '\\lVert',
      '\\rVert',
      '\\mvert',
      '\\mid',
      '\\lgroup',
      '\\rgroup',
      '\\lmoustache',
      '\\rmoustache',
  ]);
  // And delimiters that never stack
  const stackNeverDelimiters = new Set([
      '<',
      '>',
      '\\langle',
      '\\rangle',
      '/',
      '\\backslash',
      '\\lt',
      '\\gt',
  ]);
  // Metrics of the different sizes. Found by looking at TeX's output of
  // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
  // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
  const sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3];
  /**
   * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
   */
  function makeSizedDelim(type, delim, size, context, classes = '') {
      if (delim === '.') {
          // Empty delimiters still count as elements, even though they don't
          // show anything.
          return makeNullFence(type, context, classes);
      }
      // < and > turn into \langle and \rangle in delimiters
      if (delim === '<' || delim === '\\lt') {
          delim = '\\langle';
      }
      else if (delim === '>' || delim === '\\gt') {
          delim = '\\rangle';
      }
      // Sized delimiters are never centered.
      if (stackLargeDelimiters.has(delim) || stackNeverDelimiters.has(delim)) {
          return makeLargeDelim(type, delim, size, false, context, classes);
      }
      if (stackAlwaysDelimiters.has(delim)) {
          return makeStackedDelim(type, delim, sizeToMaxHeight[size], false, context, classes);
      }
      console.assert(false, "Unknown delimiter '" + delim + "'");
      return null;
  }
  // Delimiters that never stack try small delimiters and large delimiters only
  const stackNeverDelimiterSequence = [
      { type: 'small', mathstyle: MATHSTYLES.scriptscriptstyle },
      { type: 'small', mathstyle: MATHSTYLES.scriptstyle },
      { type: 'small', mathstyle: MATHSTYLES.textstyle },
      { type: 'large', size: 1 },
      { type: 'large', size: 2 },
      { type: 'large', size: 3 },
      { type: 'large', size: 4 },
  ];
  // Delimiters that always stack try the small delimiters first, then stack
  const stackAlwaysDelimiterSequence = [
      { type: 'small', mathstyle: MATHSTYLES.scriptscriptstyle },
      { type: 'small', mathstyle: MATHSTYLES.scriptstyle },
      { type: 'small', mathstyle: MATHSTYLES.textstyle },
      { type: 'stack' },
  ];
  // Delimiters that stack when large try the small and then large delimiters, and
  // stack afterwards
  const stackLargeDelimiterSequence = [
      { type: 'small', mathstyle: MATHSTYLES.scriptscriptstyle },
      { type: 'small', mathstyle: MATHSTYLES.scriptstyle },
      { type: 'small', mathstyle: MATHSTYLES.textstyle },
      { type: 'large', size: 1 },
      { type: 'large', size: 2 },
      { type: 'large', size: 3 },
      { type: 'large', size: 4 },
      { type: 'stack' },
  ];
  /*
   * Get the font used in a delimiter based on what kind of delimiter it is.
   */
  function delimTypeToFont(info) {
      if (info.type === 'small') {
          return 'Main-Regular';
      }
      if (info.type === 'large') {
          return 'Size' + info.size + '-Regular';
      }
      console.assert(info.type === 'stack');
      return 'Size4-Regular';
  }
  /**
   * Traverse a sequence of types of delimiters to decide what kind of delimiter
   * should be used to create a delimiter of the given height+depth.
   * @param delim - a character value (not a command)
   */
  function traverseSequence(delim, height, sequence, context) {
      // Here, we choose the index we should start at in the sequences. In smaller
      // sizes (which correspond to larger numbers in style.size) we start earlier
      // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
      // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
      const start = Math.min(2, 3 - context.mathstyle.size);
      for (let i = start; i < sequence.length; i++) {
          if (sequence[i].type === 'stack') {
              // This is always the last delimiter, so we just break the loop now.
              break;
          }
          const metrics = getCharacterMetrics(delim, delimTypeToFont(sequence[i]));
          if (metrics.defaultMetrics) {
              // If we don't have metrics info for this character,
              // assume we'll construct as a small delimiter
              return { type: 'small', mathstyle: MATHSTYLES.scriptstyle };
          }
          let heightDepth = metrics.height + metrics.depth;
          // Small delimiters are scaled down versions of the same font, so we
          // account for the style change size.
          if (sequence[i].type === 'small') {
              heightDepth *= sequence[i].mathstyle.sizeMultiplier;
          }
          // Check if the delimiter at this size works for the given height.
          if (heightDepth > height) {
              return sequence[i];
          }
      }
      // If we reached the end of the sequence, return the last sequence element.
      return sequence[sequence.length - 1];
  }
  /**
   * Make a delimiter of a given height+depth, with optional centering. Here, we
   * traverse the sequences, and create a delimiter that the sequence tells us to.
   *
   * @param type - 'mopen' or 'mclose'
   */
  function makeCustomSizedDelim(type, delim, height, center, context, classes = '') {
      if (!delim || delim.length === 0 || delim === '.') {
          return makeNullFence(type, context, type);
      }
      if (delim === '<' || delim === '\\lt') {
          delim = '\\langle';
      }
      else if (delim === '>' || delim === '\\gt') {
          delim = '\\rangle';
      }
      // Decide what sequence to use
      let sequence;
      if (stackNeverDelimiters.has(delim)) {
          sequence = stackNeverDelimiterSequence;
      }
      else if (stackLargeDelimiters.has(delim)) {
          sequence = stackLargeDelimiterSequence;
      }
      else {
          sequence = stackAlwaysDelimiterSequence;
      }
      // Look through the sequence
      const delimType = traverseSequence(getSymbolValue(delim), height, sequence, context);
      // Depending on the sequence element we decided on,
      // call the appropriate function.
      if (delimType.type === 'small') {
          return makeSmallDelim(type, delim, delimType.mathstyle, center, context, 'ML__small-delim ' + classes);
      }
      if (delimType.type === 'large') {
          return makeLargeDelim(type, delim, delimType.size, center, context, classes);
      }
      console.assert(delimType.type === 'stack');
      return makeStackedDelim(type, delim, height, center, context, classes);
  }
  /**
   * Make a delimiter for use with `\left` and `\right`, given a height and depth
   * of an expression that the delimiters surround.
   * See tex.web:14994
   */
  function makeLeftRightDelim(type, delim, height, depth, context, classes = '') {
      // If this is the empty delimiter, return a null fence
      if (delim === '.') {
          return makeNullFence(type, context, classes);
      }
      // We always center \left/\right delimiters, so the axis is always shifted
      const axisHeight = context.mathstyle.metrics.axisHeight * context.mathstyle.sizeMultiplier;
      // Taken from TeX source, tex.web, function make_left_right
      const delimiterFactor = 901; // Plain.tex:327, texboox:152
      const delimiterShortfall = 5 / METRICS.ptPerEm; // Plain.tex:345, texboox:152
      const maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
      const totalHeight = Math.max((maxDistFromAxis / 500) * delimiterFactor, 2 * maxDistFromAxis - delimiterShortfall);
      // Finally, we defer to `makeCustomSizedDelim` with our calculated total
      // height
      return makeCustomSizedDelim(type, delim, totalHeight, true, context, classes);
  }
  /**
   *
   * @param type either 'mopen', 'mclose' or null
   */
  function makeNullFence(type, context, classes) {
      return new Span('', 'sizing' + // @todo not useful, redundant with 'nulldelimiter'
          // 'reset-' + context.size, 'size5',
          // @todo: that seems like a lot of resizing... do we need both?
          context.mathstyle.adjustTo(MATHSTYLES.textstyle) +
          ' nulldelimiter ' + // The null delimiter has a width, specified by class 'nulldelimiter'
          (classes || ''), type);
  }

  /**
   *  \left....\right
   *
   * Note that we can encounter malformed \left...\right, for example
   * a \left without a matching \right or vice versa. In that case, the
   * leftDelim (resp. rightDelim) will be undefined. We still need to handle
   * those cases.
   *
   */
  class LeftRightAtom extends Atom {
      constructor(body, options) {
          var _a;
          super('leftright', { style: options.style });
          this.body = body;
          this.inner = (_a = options.inner) !== null && _a !== void 0 ? _a : false;
          this.leftDelim = options.leftDelim;
          this.rightDelim = options.rightDelim;
      }
      toLatex(options) {
          let segments = [];
          if (this.inner) {
              segments = [
                  '\\left' + (this.leftDelim || '.'),
                  this.bodyToLatex(options),
                  '\\right' + (this.rightDelim || '.'),
              ];
          }
          else if (options.expandMacro) {
              // If we're in 'expandMacro' mode (i.e. interchange format
              // used, e.g., on the clipboard for maximum compatibility
              // with other LaTeX renderers), drop the `\mleft(` and `\mright`)
              // commands
              segments = [
                  this.leftDelim === '.' ? '' : this.leftDelim,
                  this.bodyToLatex(options),
                  this.rightDelim === '.' ? '' : this.rightDelim,
              ];
          }
          else {
              segments = [
                  '\\mleft' + (this.leftDelim || '.'),
                  this.bodyToLatex(options),
                  '\\mright' + (this.rightDelim || '.'),
              ];
          }
          return joinLatex(segments);
      }
      render(context) {
          var _a, _b;
          if (!this.body) {
              // No body, only a delimiter
              if (this.leftDelim) {
                  return new Atom('mopen', { value: this.leftDelim }).render(context);
              }
              if (this.rightDelim) {
                  return new Atom('mclose', { value: this.rightDelim }).render(context);
              }
              return null;
          }
          // The scope of the context is this group, so make a copy of it
          // so that any changes to it will be discarded when finished
          // with this group.
          const localContext = context.clone();
          const inner = Atom.render(localContext, this.body);
          const { mathstyle } = localContext;
          let innerHeight = 0;
          let innerDepth = 0;
          let spans = [];
          // Calculate its height and depth
          // The size of delimiters is the same, regardless of what mathstyle we are
          // in. Thus, to correctly calculate the size of delimiter we need around
          // a group, we scale down the inner size based on the size.
          innerHeight = height(inner) * mathstyle.sizeMultiplier;
          innerDepth = depth(inner) * mathstyle.sizeMultiplier;
          // Add the left delimiter to the beginning of the expression
          if (this.leftDelim) {
              spans.push(this.bind(context, makeLeftRightDelim('mopen', this.leftDelim, innerHeight, innerDepth, localContext, 'ML__open')));
              spans[spans.length - 1].applyStyle(this.mode, this.style);
          }
          if (inner) {
              // Replace the delim (\middle) spans with proper ones now that we know
              // the height/depth
              for (let i = 0; i < inner.length; i++) {
                  if (inner[i].delim) {
                      const savedCaret = inner[i].caret;
                      inner[i] = this.bind(context, makeLeftRightDelim('minner', inner[i].delim, innerHeight, innerDepth, localContext));
                      inner[i].caret = savedCaret;
                  }
              }
              spans = spans.concat(inner);
          }
          // Add the right delimiter to the end of the expression.
          if (this.rightDelim) {
              let delim = this.rightDelim;
              let classes;
              if (delim === '?') {
                  if (context.smartFence) {
                      // Use a placeholder delimiter matching the open delimiter
                      delim = {
                          '(': ')',
                          '\\{': '\\}',
                          '\\lbrace': '\\rbrace',
                          '\\langle': '\\rangle',
                          '\\lfloor': '\\rfloor',
                          '\\lceil': '\\rceil',
                          '\\vert': '\\vert',
                          '\\lvert': '\\rvert',
                          '\\Vert': '\\Vert',
                          '\\lVert': '\\rVert',
                          '\\lbrack': '\\rbrack',
                          '\\ulcorner': '\\urcorner',
                          '\\llcorner': '\\lrcorner',
                          '\\lgroup': '\\rgroup',
                          '\\lmoustache': '\\rmoustache',
                      }[this.leftDelim];
                      delim = delim || this.leftDelim;
                      classes = 'ML__smart-fence__close';
                  }
                  else {
                      delim = '.';
                  }
              }
              spans.push(this.bind(context, makeLeftRightDelim('mclose', delim, innerHeight, innerDepth, localContext, (classes !== null && classes !== void 0 ? classes : '') + ' ML__close')));
              spans[spans.length - 1].applyStyle(this.mode, this.style);
          }
          if (this.containsCaret) {
              // Tag the first and last atom in the
              // list with the "ML__contains-caret" style (it's the open and
              // closing fence, respectively)
              spans[0].classes = ((_a = spans[0].classes) !== null && _a !== void 0 ? _a : '') + ' ML__contains-caret';
              spans[spans.length - 1].classes =
                  ((_b = spans[spans.length - 1].classes) !== null && _b !== void 0 ? _b : '') + ' ML__contains-caret';
          }
          // If the `inner` flag is set, return the `inner` element (that's the
          // behavior for the regular `\left...\right`
          // Otherwise, include a `\mathopen{}...\mathclose{}`. That's the
          // behavior for `\mleft...\mright`, which allows for tighter spacing
          // for example in `\sin\mleft(x\mright)`
          const result = this.inner
              ? new Span(spans, mathstyle.cls(), 'minner')
              : new Span(spans, mathstyle.cls(), 'mclose');
          if (this.caret)
              result.caret = this.caret;
          return [this.bind(context, result)];
      }
  }

  class SubsupAtom extends Atom {
      constructor(options) {
          super('msubsup', { style: options === null || options === void 0 ? void 0 : options.style });
          this.baseType = options === null || options === void 0 ? void 0 : options.baseType;
      }
      render(context) {
          var _a;
          // The caret for this atom type is handled by its elements
          const baseType = (_a = {
              mbin: 'mbin',
              mop: 'mop',
              mrel: 'mrel',
              mopen: 'mopen',
              mclose: 'mclose',
              mpunct: 'mpunct',
              minner: 'minner',
              spacing: 'spacing',
          }[this.baseType]) !== null && _a !== void 0 ? _a : 'mord';
          const result = new Span('\u200B', '', baseType);
          if (context.phantomBase) {
              result.height = height(context.phantomBase);
              result.depth = depth(context.phantomBase);
          }
          console.assert(!this.limits);
          return [this.attachSupsub(context, result, result.type)];
      }
      toLatex(options) {
          return this.supsubToLatex(options);
      }
  }

  class PlaceholderAtom extends Atom {
      constructor(options) {
          super('placeholder', {
              mode: options === null || options === void 0 ? void 0 : options.mode,
              style: options === null || options === void 0 ? void 0 : options.style,
              value: options === null || options === void 0 ? void 0 : options.value,
          });
          this.captureSelection = true;
      }
      render(context) {
          const result = this.makeSpan(context, '⬚');
          if (this.caret) {
              result.classes += 'ML__placeholder-selected';
          }
          return [result];
      }
      toLatex(_options) {
          var _a;
          return `\\placeholder{${(_a = this.value) !== null && _a !== void 0 ? _a : ''}}`;
      }
  }

  /*
   * An atom representing a syntactic error, such as an unknown command
   */
  class ErrorAtom extends Atom {
      constructor(value) {
          super('error', { value, command: value, mode: 'math' });
          this.latex = value;
      }
      render(context) {
          const result = this.makeSpan(context, this.value);
          result.classes = 'ML__error';
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
  }

  class MacroAtom extends Atom {
      constructor(macro, args, body) {
          super('macro', { command: macro });
          this.body = body;
          // Set the `captureSelection` attribute so that the atom is handled
          // as an unbreakable unit
          this.captureSelection = true;
          this.latex = macro + args;
      }
      toLatex(options) {
          return options.expandMacro ? this.bodyToLatex(options) : this.latex;
      }
      render(context) {
          const result = new Span(Atom.render(context, this.body), '', 'mord');
          if (this.caret)
              result.caret = this.caret;
          this.bind(context, result);
          return [result];
      }
  }

  class TextAtom extends Atom {
      constructor(command, value, style) {
          super('text', { command, mode: 'text' });
          this.value = value;
          this.latex = value;
          this.applyStyle(style);
      }
      render(context) {
          const result = this.makeSpan(context, this.value);
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
      toLatex(_options) {
          var _a;
          return (_a = this.latex) !== null && _a !== void 0 ? _a : charToLatex('text', this.value);
      }
  }

  // Performance to check first char of string: https://jsben.ch/QLjdZ
  function isLiteral(token) {
      return !/^<({|}|\$|\$\$|space)>$/.test(token);
  }
  /**
   * Transform a list of tokens into a list of atoms.
   *

   * @property tokens - An array of tokens generated by the lexer.
   * @property args - Optional arguments to substitute the `#` token.
   * @property macros - A dictionary of objects, index by the name of
   * the macro, with the following keys:
   *    * args: an integer, the number of arguments, default 0. They can be referenced as #0,
   *       #1, #2... inside the definition of the macro
   *    * def: a string, the definition of the macro, which can reference other macros
   * @property index - The current token to be parsed: index in `this.tokens`
   * @property atoms - Accumulated result of the parsing by
   * `parseAtom()`
   * @property style - The font, weight, color, etc. to apply to the
   * upcoming tokens
   * @property parseMode - The parse mode indicates the syntax rules to
   * use to parse the upcoming tokens.
   * @property tabularMode - When in tabular mode, `'&'` is interpreted as
   *  a column separator and `'\'` as a row separator. Used for matrixes, etc...
   * @property endCount - Counter to prevent deadlock. If `end()` is
   * called too many times (1,000) in a row for the same token, bail.
   */
  class Parser {
      /**
       * @param tokens - An array of tokens generated by the lexer.
       * @param args - An optional list of arguments. `#n` tokens will be
       * substituted with the corresponding element in the args object. This is used
       * when parsing macros.
       */
      constructor(tokens, args, macros, onError) {
          this.index = 0;
          this.style = {};
          this.parseMode = 'math';
          this.smartFence = false;
          this.tabularMode = false; // For arrays, matrix, etc.: ifferent parsing rules apply.
          this.atoms = [];
          this.endCount = 0;
          this.tokens = tokens;
          this.args = args;
          this.macros = macros;
          this.onError = (err) => onError({
              before: tokensToString(this.tokens.slice(this.index, this.index + 10)),
              after: tokensToString(this.tokens.slice(Math.max(0, this.index - 10), this.index)),
              ...err,
          });
      }
      swapAtoms(newAtoms = []) {
          const result = this.atoms;
          this.atoms = newAtoms;
          return result;
      }
      swapParseMode(mode) {
          const result = this.parseMode;
          this.parseMode = mode;
          return result;
      }
      /**
       * True if we've reached the end of the token stream
       */
      end() {
          // To prevent a deadlock, count how many times end() is called without the
          // index advancing. If it happens more than 1,000 times in a row,
          // assume something is broken and pretend the stream is finished.
          this.endCount++;
          return this.index >= this.tokens.length || this.endCount > 1000;
      }
      get() {
          this.endCount = 0;
          return this.index < this.tokens.length ? this.tokens[this.index++] : '';
      }
      peek() {
          return this.tokens[this.index];
      }
      /**
       * @return True if the next token matches the input, and advance
       */
      match(input) {
          if (this.tokens[this.index] === input) {
              this.index++;
              return true;
          }
          return false;
      }
      /**
       * Return the last atom that can have a subsup attached to it.
       * If there isn't one, insert a `msubsup` and return it.
       */
      lastSubsupAtom() {
          const lastAtom = this.atoms.length === 0 ? undefined : this.atoms[this.atoms.length - 1];
          if (!lastAtom ||
              (lastAtom.type !== 'mop' &&
                  lastAtom.type !== 'leftright' &&
                  lastAtom.type !== 'msubsup')) {
              if (!(lastAtom === null || lastAtom === void 0 ? void 0 : lastAtom.limits) || (lastAtom === null || lastAtom === void 0 ? void 0 : lastAtom.limits) === 'nolimits') {
                  this.atoms.push(new SubsupAtom({ baseType: lastAtom === null || lastAtom === void 0 ? void 0 : lastAtom.type }));
              }
          }
          return this.atoms[this.atoms.length - 1];
      }
      /**
       * @return True if the next token matches the specified regular expression pattern.
       */
      hasPattern(pattern) {
          return pattern.test(this.tokens[this.index]);
      }
      hasInfixCommand() {
          const { index } = this;
          if (index < this.tokens.length && this.tokens[index].startsWith('\\')) {
              const info = getInfo(this.tokens[index], this.parseMode, this.macros);
              if (!info)
                  return false;
              if (info.ifMode && !info.ifMode.includes(this.parseMode)) {
                  return false;
              }
              return info.infix;
          }
          return false;
      }
      matchColumnSeparator() {
          const { index } = this;
          if (this.tabularMode && this.tokens[index] === '&') {
              this.index++;
              return true;
          }
          return false;
      }
      matchRowSeparator() {
          const { index } = this;
          if (this.tabularMode &&
              (this.tokens[index] === '\\\\' || this.tokens[index] === '\\cr')) {
              this.index++;
              return true;
          }
          return false;
      }
      /**
       * Return the appropriate value for a placeholder, either a default
       * one, or if a value was provided for #? via args, that value.
       */
      placeholder() {
          var _a;
          if (!this.args || this.args['?'] === undefined) {
              return [
                  new PlaceholderAtom({
                      mode: this.parseMode,
                      style: this.style,
                  }),
              ];
          }
          if (typeof ((_a = this.args) === null || _a === void 0 ? void 0 : _a['?']) === 'string') {
              // If there is a specific value defined for the placeholder,
              // use it.
              return parseLatex(this.args['?'], this.parseMode, null, this.macros, false, this.onError);
          }
          return this.args['?'];
      }
      // MatchToken(type: string): boolean {
      //     if (this.hasToken(type)) {
      //         this.index++;
      //         return true;
      //     }
      //     return false;
      // }
      matchWhitespace() {
          let found = false;
          while (this.match('<space>')) {
              found = true;
          }
          return found;
      }
      skipUntilToken(input) {
          let token = this.tokens[this.index];
          while (token && token !== input) {
              token = this.tokens[++this.index];
          }
          if (token === input) {
              this.index++;
          }
      }
      skipFiller() {
          let done = false;
          do {
              const skippedSpace = this.matchWhitespace();
              const skippedRelax = this.match('\\relax');
              done = !skippedSpace && !skippedRelax;
          } while (!done);
      }
      /**
       * Keywords are used to specify dimensions, and for various other
       * syntactic constructs.
       *
       * Unlike commands, they are not case sensitive.
       *
       * There are 25 keywords:
       *
       * at by bp cc cm dd depth em ex fil fill filll height in minus
       * mm mu pc plus pt sp spread to true width
       *
       * TeX: 8212
       * @return true if the expected keyword is present
       */
      matchKeyword(keyword) {
          const savedIndex = this.index;
          let done = this.end();
          let value = '';
          while (!done) {
              const token = this.get();
              if (isLiteral(token)) {
                  value += token;
                  done = this.end() || value.length >= keyword.length;
              }
              else {
                  done = true;
              }
          }
          const hasKeyword = keyword.toUpperCase() === value.toUpperCase();
          if (!hasKeyword) {
              this.index = savedIndex;
          }
          return hasKeyword;
      }
      /**
       * Return a sequence of characters as a string.
       * i.e. 'abcd' returns 'abcd'.
       * Terminates on the first non-literal token encountered
       * e.g. '<{>', '<}>' etc...
       * Will also terminate on character literal ']'
       */
      scanString() {
          let result = '';
          let done = this.end();
          while (!done) {
              if (this.match('<space>')) {
                  result += ' ';
              }
              else {
                  const token = this.peek();
                  if (token === ']') {
                      done = true;
                  }
                  else if (isLiteral(token)) {
                      result += this.get();
                  }
                  else if (token.startsWith('\\')) {
                      // TeX will give a 'Missing \endcsname inserted' error
                      // if it encounters any command when expecting a string.
                      // We're a bit more lax.
                      this.onError({ code: 'unbalanced-braces' });
                      result += this.get();
                  }
                  else {
                      // It's '<{>', '<}>', '<$>' or '<$$>
                      done = true;
                  }
              }
              done = done || this.end();
          }
          return result;
      }
      /**
       * Return a sequence of characters as a string.
       * Terminates on a balanced closing bracket
       * This is used by the `\ce` command
       */
      scanBalancedString() {
          let result = '';
          let done = this.end();
          let level = 1;
          while (!done) {
              if (this.match('<space>')) {
                  result += ' ';
              }
              else {
                  const token = this.get();
                  if (token === '<{>') {
                      result += '{';
                      level += 1;
                  }
                  else if (token === '<}>') {
                      level -= 1;
                      if (level > 0) {
                          result += '}';
                      }
                      else {
                          this.index -= 1;
                      }
                  }
                  else if (token === '<$>') {
                      result += '$';
                  }
                  else if (token === '<$$>') {
                      result += '$$';
                  }
                  else {
                      result += token;
                  }
              }
              done = level === 0 || this.end();
          }
          return result;
      }
      /**
       * Return the literal tokens, as a string, until a matching closing "}"
       */
      matchLiteralArg() {
          var _a;
          let result = '';
          if (this.match('<{>')) {
              let depth = 1;
              while (depth > 0 && !this.end()) {
                  const token = this.get();
                  if (token === '<}>') {
                      depth -= 1;
                      if (depth > 0) {
                          // Don't include final '}'
                          result += '}';
                      }
                  }
                  else if (token === '<{>') {
                      depth += 1;
                      result += '{';
                  }
                  else {
                      result += (_a = {
                          '<space>': ' ',
                          '<$$>': '$$',
                          '<$>': '$',
                      }[token]) !== null && _a !== void 0 ? _a : token;
                  }
              }
          }
          return result;
      }
      /**
       * Return a CSS color (#rrggbb)
       */
      scanColor() {
          return stringToColor(this.scanString());
      }
      /**
       * Return as a number a group of characters representing a
       * numerical quantity.
       *
       * From TeX:8695 (scan_int):
       * An integer number can be preceded by any number of spaces and `+' or
       * `-' signs. Then comes either a decimal constant (i.e., radix 10), an
       * octal constant (i.e., radix 8, preceded by '), a hexadecimal constant
       * (radix 16, preceded by "), an alphabetic constant (preceded by `), or
       * an internal variable.
       */
      scanNumber(isInteger = true) {
          var _a, _b;
          let negative = false;
          let token = this.peek();
          while (token === '<space>' || token === '+' || token === '-') {
              this.get();
              if (token === '-')
                  negative = !negative;
              token = this.peek();
          }
          isInteger = Boolean(isInteger);
          let radix = 10;
          let digits = /\d/;
          if (this.match("'")) {
              // Apostrophe indicates an octal value
              radix = 8;
              digits = /[0-7]/;
              isInteger = true;
          }
          else if (this.match('"') || this.match('x')) {
              // Double-quote indicates a hex value
              // The 'x' prefix notation for the hexadecimal numbers is a MathJax extension.
              // For example: 'x3a'
              radix = 16;
              // Hex digits have to be upper-case
              digits = /[\dA-F]/;
              isInteger = true;
          }
          else if (this.match('`')) {
              // A backtick indicates an alphabetic constant: a letter, or a single-letter command
              token = this.get();
              if (token) {
                  if (token.startsWith('\\') && token.length === 2) {
                      return (negative ? -1 : 1) * ((_a = token.codePointAt(1)) !== null && _a !== void 0 ? _a : 0);
                  }
                  return (negative ? -1 : 1) * ((_b = token.codePointAt(0)) !== null && _b !== void 0 ? _b : 0);
              }
              return Number.NaN;
          }
          let value = '';
          while (this.hasPattern(digits)) {
              value += this.get();
          }
          // Parse the fractional part, if applicable
          if (!isInteger && (this.match('.') || this.match(','))) {
              value += '.';
              while (this.hasPattern(digits)) {
                  value += this.get();
              }
          }
          const result = isInteger
              ? Number.parseInt(value, radix)
              : Number.parseFloat(value);
          return negative ? -result : result;
      }
      /**
       * Return as a floating point number a dimension in pt (1 em = 10 pt)
       *
       * See TeX:8831
       * @todo: note that some units depend on the font (em, ex). So it might be
       * better to return a dimen struct with the value + unit and resolve
       * later when we have a font context....
       */
      scanDimen() {
          const value = this.scanNumber(false);
          this.matchWhitespace();
          let result;
          if (this.matchKeyword('pt')) {
              result = convertDimenToEm(value, 'pt');
          }
          else if (this.matchKeyword('mm')) {
              result = convertDimenToEm(value, 'mm');
          }
          else if (this.matchKeyword('cm')) {
              result = convertDimenToEm(value, 'cm');
          }
          else if (this.matchKeyword('ex')) {
              result = convertDimenToEm(value, 'ex');
          }
          else if (this.matchKeyword('px')) {
              result = convertDimenToEm(value, 'px');
          }
          else if (this.matchKeyword('em')) {
              result = convertDimenToEm(value, 'em');
          }
          else if (this.matchKeyword('bp')) {
              result = convertDimenToEm(value, 'bp');
          }
          else if (this.matchKeyword('dd')) {
              result = convertDimenToEm(value, 'dd');
          }
          else if (this.matchKeyword('pc')) {
              result = convertDimenToEm(value, 'pc');
          }
          else if (this.matchKeyword('in')) {
              result = convertDimenToEm(value, 'in');
          }
          else if (this.matchKeyword('mu')) {
              result = convertDimenToEm(value, 'mu');
          }
          else {
              // If the units are missing, TeX assumes 'pt'
              this.onError({ code: 'missing-unit' });
              result = convertDimenToEm(value, 'pt');
          }
          return result;
      }
      scanSkip() {
          const result = this.scanDimen();
          // We parse, but ignore, the optional 'plus' and 'minus'
          // arguments.
          this.matchWhitespace();
          // 'plus', optionally followed by 'minus'
          // ('minus' cannot come before 'plus')
          // dimen or 'hfill'
          if (this.matchKeyword('plus')) {
              // @todo there could also be a \hFilLlL command here
              this.scanDimen();
          }
          this.matchWhitespace();
          if (this.matchKeyword('minus')) {
              // @todo there could also be a \hFilLlL command here
              this.scanDimen();
          }
          return result;
      }
      scanColspec() {
          this.matchWhitespace();
          const result = [];
          while (!this.end() && !(this.peek() === '<}>' || this.peek() === ']')) {
              const literal = this.get();
              if (literal === 'c' || literal === 'r' || literal === 'l') {
                  result.push({ align: literal });
              }
              else if (literal === '|') {
                  result.push({ rule: true });
              }
              else if (literal === '@') {
                  if (this.match('<{>')) {
                      const savedParsemode = this.swapParseMode('math');
                      result.push({
                          gap: this.parse((token) => token === '<}>'),
                      });
                      this.swapParseMode(savedParsemode);
                  }
                  if (!this.match('<}>')) {
                      this.onError({ code: 'unbalanced-braces' });
                  }
              }
          }
          return result;
      }
      /**
       * Parse a `\(...\)` or `\[...\]` sequence
       * @return group for the sequence or null
       */
      parseModeSet() {
          let final = '';
          if (this.match('\\('))
              final = '\\)';
          if (!final && this.match('\\['))
              final = '\\]';
          if (!final)
              return null;
          const savedParsemode = this.swapParseMode('math');
          const result = new GroupAtom(this.parse((token) => token === final), {
              mathStyleName: final === '\\)' ? 'textstyle' : 'displaystyle',
              latexOpen: final === '\\]' ? '\\[' : '\\(',
              latexClose: final,
          });
          if (!this.match(final)) {
              this.onError({ code: 'unbalanced-mode-shift' });
          }
          this.swapParseMode(savedParsemode);
          if (result.hasEmptyBranch('body'))
              return null;
          return result;
      }
      /**
       * Parse a `$...$` or `$$...$$` sequence
       */
      parseModeShift() {
          let final = '';
          if (this.match('<$>'))
              final = '<$>';
          if (!final && this.match('<$$>'))
              final = '<$$>';
          if (!final)
              return null;
          const savedParsemode = this.swapParseMode('math');
          const result = new GroupAtom(this.parse((token) => token === final), {
              mathStyleName: final === '<$>' ? 'textstyle' : 'displaystyle',
              latexOpen: final === '<$>' ? '$' : '$$',
              latexClose: final === '<$>' ? '$' : '$$',
          });
          if (!this.match(final)) {
              this.onError({ code: 'unbalanced-mode-shift' });
          }
          this.swapParseMode(savedParsemode);
          if (result.hasEmptyBranch('body'))
              return null;
          return result;
      }
      /**
       * Parse a \begin{env}...\end{end} sequence
       */
      parseEnvironment() {
          // An environment starts with a \begin command
          if (!this.match('\\begin'))
              return null;
          // The \begin command is immediately followed by the environment
          // name, as a string argument
          const envName = this.parseArgument('string');
          if (!envName)
              return null;
          const def = getEnvironmentDefinition(envName);
          if (!def) {
              this.onError({
                  code: 'unknown-environment',
                  arg: envName,
              });
              return null;
          }
          // If the environment has some arguments, parse them
          const args = [];
          if (def.params) {
              for (const parameter of def.params) {
                  // Parse an argument
                  if (parameter.isOptional) {
                      // If it's not present, parseOptionalArgument returns null,
                      // but push it on the list of arguments anyway.
                      // The null value will be interpreted as unspecified
                      // optional value by the command parse function.
                      args.push(this.parseOptionalArgument(parameter.type));
                  }
                  else {
                      const arg = this.parseArgument(parameter.type);
                      if (!arg) {
                          this.onError({
                              code: 'missing-argument',
                              arg: envName,
                          });
                      }
                      args.push(arg);
                  }
              }
          }
          // Some environments change the mode
          const savedMode = this.parseMode;
          const savedTabularMode = this.tabularMode;
          const saveAtoms = this.swapAtoms([]);
          // @todo: since calling scanImplicitGroup(), may not need to save/restore the atoms
          this.tabularMode = def.tabular;
          const array = [];
          const rowGaps = [];
          let row = [];
          let done = false;
          do {
              if (this.end()) {
                  this.onError({ code: 'unbalanced-environment', arg: envName });
                  done = true;
              }
              if (!done && this.match('\\end')) {
                  if (this.parseArgument('string') !== envName) {
                      this.onError({
                          code: 'unbalanced-environment',
                          arg: envName,
                      });
                  }
                  done = true;
              }
              if (!done) {
                  if (this.matchColumnSeparator()) {
                      row.push(this.swapAtoms([]));
                  }
                  else if (this.matchRowSeparator()) {
                      row.push(this.swapAtoms([]));
                      let gap = 0;
                      this.matchWhitespace();
                      if (this.match('[')) {
                          gap = this.scanDimen();
                          this.matchWhitespace();
                          this.match(']');
                      }
                      rowGaps.push(gap || 0);
                      array.push(row);
                      row = [];
                  }
                  else {
                      this.atoms = this.atoms.concat(this.parse((token) => token === '<}>' ||
                          token === '&' ||
                          token === '\\end' ||
                          token === '\\cr' ||
                          token === '\\\\'));
                  }
              }
          } while (!done);
          row.push(this.swapAtoms([]));
          if (row.length > 0)
              array.push(row);
          const newAtoms = this.swapAtoms(saveAtoms);
          // If we're in tabular mode, we should end up with an empty atoms list
          console.assert(!this.tabularMode || newAtoms.length === 0, 'Leftover atoms in tabular mode');
          this.parseMode = savedMode;
          this.tabularMode = savedTabularMode;
          if (!def.tabular && newAtoms.length === 0)
              return null;
          if (def.tabular && array.length === 0)
              return null;
          return def.createAtom(envName, array, rowGaps, args);
      }
      /**
       * Parse a sequence until a group end marker, such as
       * `}`, `\end`, `&`, etc...
       *
       * Returns an array of atoms or an empty array if the sequence
       * terminates right away.
       *
       * @param done - A predicate indicating if a
       * token signals the end of an implicit group
       */
      parse(done) {
          const savedStyle = this.style;
          if (!done) {
              // Default group end marker
              done = (token) => token === '<}>';
          }
          // To handle infix commands, we'll keep track of their prefix
          // (tokens coming before them) and their arguments
          let infix = '';
          let infixInfo = null;
          let infixArgs = [];
          let prefix = null;
          const saveAtoms = this.swapAtoms([]);
          while (!this.end() && !done(this.peek())) {
              if (this.hasInfixCommand() && !infix) {
                  // The next token is an infix and we have not seen one yet
                  // (there can be only one infix command per implicit group).
                  infix = this.get();
                  // The current parseMode, this.parseMode, may no longer have the value
                  // it had when we encountered the infix. However, since all infix are
                  // only defined in 'math' mode, we can use the 'math' constant
                  // for the parseMode
                  infixInfo = getInfo(infix, 'math', this.macros);
                  if (infixInfo) {
                      infixArgs = this.parseArguments(infixInfo)[1];
                  }
                  // Save the math list so far and start a new one
                  prefix = this.swapAtoms([]);
              }
              else {
                  this.parseToken();
              }
          }
          let result;
          if (infix) {
              console.assert(Boolean(infixInfo));
              infixArgs.unshift(this.swapAtoms(saveAtoms)); // Suffix
              if (prefix)
                  infixArgs.unshift(prefix);
              result = [infixInfo.createAtom(infix, infixArgs, this.style)];
          }
          else {
              result = this.swapAtoms(saveAtoms);
          }
          this.style = savedStyle;
          return result;
      }
      /**
       * Parse a group enclosed in a pair of braces: `{...}`.
       *
       * Return either a group Atom or null if not a group.
       *
       * Return a group Atom with an empty body if an empty
       * group (i.e. `{}`).
       */
      parseGroup() {
          if (!this.match('<{>'))
              return null;
          const result = new GroupAtom(this.parse((token) => token === '<}>'), {
              mode: this.parseMode,
              latexOpen: '{',
              latexClose: '}',
          });
          if (!this.match('<}>')) {
              this.onError({ code: 'unbalanced-braces' });
          }
          return result;
      }
      scanSmartFence() {
          this.matchWhitespace();
          if (!this.match('('))
              return null;
          // We've found an open paren... Convert to a `\mleft...\mright`
          const saveAtoms = this.swapAtoms([]);
          let nestLevel = 1;
          while (!this.end() && nestLevel !== 0) {
              if (this.match('('))
                  nestLevel += 1;
              if (this.match(')'))
                  nestLevel -= 1;
              if (nestLevel !== 0)
                  this.parseToken();
          }
          if (nestLevel === 0)
              this.match(')');
          return new LeftRightAtom(this.swapAtoms(saveAtoms), {
              inner: false,
              leftDelim: '(',
              rightDelim: nestLevel === 0 ? ')' : '?',
          });
      }
      /**
       * Scan a delimiter, e.g. '(', '|', '\vert', '\ulcorner'
       *
       * @return The delimiter (as a character or command) or null
       */
      scanDelim() {
          this.matchWhitespace();
          const token = this.get();
          if (!token) {
              this.onError({ code: 'unexpected-end-of-string' });
              return null;
          }
          let delim = '.';
          if (token.startsWith('\\') || isLiteral(token)) {
              delim = token;
          }
          const info = getInfo(delim, 'math', this.macros);
          if (!info) {
              this.onError({ code: 'unknown-command', arg: delim });
              return null;
          }
          if (info.ifMode && !info.ifMode.includes(this.parseMode)) {
              this.onError({ code: 'unexpected-delimiter', arg: delim });
              return null;
          }
          if (info.type === 'mopen' || info.type === 'mclose') {
              return delim;
          }
          // Some symbols are not of type mopen/mclose, but are still
          // valid delimiters...
          // '?' is a special delimiter used as a 'placeholder'
          // (when the closing delimiter is displayed greyed out)
          if (/^(\.|\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(delim)) {
              return delim;
          }
          this.onError({ code: 'unexpected-delimiter', arg: delim });
          return null;
      }
      /**
       * Parse a `/left.../right` sequence.
       *
       * Note: the `/middle` command can occur multiple times inside a
       * `/left.../right` sequence, and is handled separately.
       *
       * Return either an atom of type `'leftright'` or null
       */
      parseLeftRight() {
          if (this.match('\\right') || this.match('\\mright')) {
              // We have an unbalanced left/right (there's a \right, but no \left)
              this.onError({ code: 'unbalanced-braces' });
              return null;
          }
          const savedStyle = this.style;
          let close = '\\right';
          if (!this.match('\\left')) {
              if (!this.match('\\mleft'))
                  return null;
              close = '\\mright';
          }
          const leftDelim = this.scanDelim();
          if (!leftDelim)
              return null;
          const saveAtoms = this.swapAtoms([]);
          while (!this.end() && !this.match(close)) {
              this.parseToken();
          }
          this.style = savedStyle;
          // If we've reached the end and there was no `\right` or
          // there isn't a valid delimiter after `\right`, we'll
          // consider the `\right` missing and set the `rightDelim` to undefined
          const rightDelim = this.scanDelim();
          return new LeftRightAtom(this.swapAtoms(saveAtoms), {
              leftDelim,
              rightDelim,
              inner: close === '\\right',
              style: this.style,
          });
      }
      /**
       * Parse a subscript/superscript: `^` and `_`.
       *
       * Modify the last atom accordingly, or create a new 'msubsup' carrier.
       *
       */
      parseSupSub() {
          // No sup/sub in text or command mode.
          if (this.parseMode !== 'math')
              return false;
          // Apply the subscript/superscript to the last rendered atom.
          // If none is present (beginning of the list, i.e. `{^2}`,
          // an empty atom will be created, equivalent to `{{}^2}`
          let result = false;
          let token = this.peek();
          while (token === '^' || token === '_' || token === "'") {
              const supsub = token === '_' ? 'subscript' : 'superscript';
              if (this.match('^') || this.match('_')) {
                  const arg = this.parseArgument('math');
                  if (arg) {
                      this.lastSubsupAtom().addChildren(arg, supsub);
                      result = true;
                  }
              }
              else if (this.match("'")) {
                  // A single quote (prime) is actually equivalent to a
                  // '^{\prime}'
                  this.lastSubsupAtom().addChild(new Atom('mord', {
                      command: '\\prime',
                      mode: 'math',
                      value: '\u2032',
                  }), 'superscript');
                  result = true;
              }
              token = this.peek();
          }
          return result;
      }
      /**
       * Parse a `\limits` or `\nolimits` command.
       *
       * This will change the placement of limits to be either above or below
       * (if `\limits`) or in the superscript/subscript position (if `\nolimits`).
       *
       * This overrides the calculation made for the placement, which is usually
       * dependent on the displaystyle (`inlinemath` prefers `\nolimits`, while
       * `displaymath` prefers `\limits`).
       */
      parseLimits() {
          // Note: technically, \limits and \nolimits are only applicable
          // after an operator. However, we apply them in all cases. They
          // will simply be ignored when not applicable (i.e. on a literal)
          // which is actually consistent with TeX.
          if (this.match('\\limits')) {
              const lastAtom = this.lastSubsupAtom();
              lastAtom.limits = 'limits';
              // Record that the limits was set through an explicit command
              // so we can generate the appropriate LaTeX later
              lastAtom.explicitLimits = true;
              return true;
          }
          if (this.match('\\nolimits')) {
              const lastAtom = this.lastSubsupAtom();
              lastAtom.limits = 'nolimits';
              // Record that the limits was set through an explicit command
              // so we can generate the appropriate LaTeX later
              lastAtom.explicitLimits = true;
              return true;
          }
          return false;
      }
      parseArguments(info) {
          if (!info || !info.params)
              return [undefined, []];
          let explicitGroup;
          const args = [];
          let i = info.infix ? 2 : 0;
          while (i < info.params.length) {
              const parameter = info.params[i];
              // Parse an argument
              if (parameter.isOptional) {
                  args.push(this.parseOptionalArgument(parameter.type));
              }
              else if (parameter.type.endsWith('*')) {
                  // For example 'math*'.
                  // In this case, indicate that a 'yet-to-be-parsed'
                  // argument (and 'explicit group') is present
                  explicitGroup = parameter.type.slice(0, -1);
              }
              else {
                  const arg = this.parseArgument(parameter.type);
                  if (arg !== undefined) {
                      args.push(arg);
                  }
                  else {
                      // Report an error
                      this.onError({ code: 'missing-argument' });
                      args.push(this.placeholder());
                  }
              }
              i += 1;
          }
          return [explicitGroup, args];
      }
      parseArgument(argType) {
          var _a;
          this.skipFiller();
          argType = argType === 'auto' ? this.parseMode : argType;
          let result;
          // An argument (which is called a 'math field' in TeX)
          // could be a single character or symbol, as in `\frac12`
          // Note that ``\frac\sqrt{-1}\alpha\beta`` is equivalent to
          // ``\frac{\sqrt}{-1}{\beta}``
          if (!this.match('<{>')) {
              if (argType === 'delim') {
                  return (_a = this.scanDelim()) !== null && _a !== void 0 ? _a : '.';
              }
              if (argType === 'text' || argType === 'math') {
                  // Parse a single token.
                  const savedParseMode = this.swapParseMode(argType);
                  const atom = this.parseSimpleToken();
                  this.swapParseMode(savedParseMode);
                  return atom;
              }
          }
          const saveAtoms = this.swapAtoms([]);
          if (argType === 'text' || argType === 'math') {
              const savedParseMode = this.parseMode;
              this.parseMode = argType;
              // Collect an array of tokens until a balanced "}"
              const initialIndex = this.index;
              let depth = 1;
              do {
                  const token = this.get();
                  if (token === '<}>')
                      depth -= 1;
                  if (token === '<{>')
                      depth += 1;
              } while (depth > 0 && !this.end());
              result = Mode.parseTokens(argType, this.tokens.slice(initialIndex, this.index - 1), this.onError, {
                  args: this.args,
                  macros: this.macros,
                  smartFence: this.smartFence,
                  style: this.style,
                  parse: (mode, tokens, options) => {
                      const parser = new Parser(tokens, options.args, options.macros, this.onError);
                      parser.parseMode = mode;
                      parser.style = options.style;
                      result = parser.parse();
                      return [result, tokens.slice(parser.index)];
                  },
              });
              if (!result) {
                  // No mode-specific result. Try again from the start
                  this.index = initialIndex;
                  do {
                      this.atoms = this.atoms.concat(this.parse());
                  } while (!this.match('<}>') && !this.end());
              }
              this.parseMode = savedParseMode;
          }
          else {
              if (argType === 'string') {
                  result = this.scanString();
              }
              else if (argType === 'balanced-string') {
                  result = this.scanBalancedString();
              }
              else if (argType === 'number') {
                  result = this.scanNumber();
              }
              else if (argType === 'dimen') {
                  result = this.scanDimen();
              }
              else if (argType === 'skip') {
                  result = this.scanSkip();
              }
              else if (argType === 'colspec') {
                  result = this.scanColspec();
              }
              else if (argType === 'color') {
                  result = this.scanColor() || '#ffffff';
              }
              else if (argType === 'delim') {
                  result = this.scanDelim() || '.';
              }
              this.skipUntilToken('<}>');
          }
          const atoms = this.swapAtoms(saveAtoms);
          return result !== null && result !== void 0 ? result : atoms;
      }
      parseOptionalArgument(parseMode) {
          var _a;
          parseMode = parseMode === 'auto' ? this.parseMode : parseMode;
          this.matchWhitespace();
          if (!this.match('['))
              return null;
          const savedParseMode = this.parseMode;
          const saveAtoms = this.swapAtoms();
          let result;
          while (!this.end() && !this.match(']')) {
              if (parseMode === 'string') {
                  result = this.scanString();
              }
              else if (parseMode === 'number') {
                  result = this.scanNumber();
              }
              else if (parseMode === 'dimen') {
                  result = this.scanDimen();
              }
              else if (parseMode === 'skip') {
                  result = this.scanSkip();
              }
              else if (parseMode === 'colspec') {
                  result = this.scanColspec();
              }
              else if (parseMode === 'color') {
                  result = (_a = this.scanColor()) !== null && _a !== void 0 ? _a : '#ffffff';
              }
              else if (parseMode === 'bbox') {
                  // The \bbox command takes a very particular argument:
                  // a comma delimited list of up to three arguments:
                  // a color, a dimension and a string.
                  // Split the string by comma delimited sub-strings, ignoring commas
                  // that may be inside (). For example"x, rgb(a, b, c)" would return
                  // ['x', 'rgb(a, b, c)']
                  const list = this.scanString()
                      .toLowerCase()
                      .trim()
                      .split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
                  const bboxParameter = {};
                  for (const element of list) {
                      const color = stringToColor(element);
                      if (color) {
                          bboxParameter.backgroundcolor = color;
                      }
                      else {
                          const m = element.match(/^\s*([\d.]+)\s*([a-z]{2})/);
                          if (m) {
                              bboxParameter.padding = convertDimenToEm(m[1], m[2]);
                          }
                          else {
                              const m = element.match(/^\s*border\s*:\s*(.*)/);
                              if (m) {
                                  bboxParameter.border = m[1];
                              }
                          }
                      }
                  }
                  result = bboxParameter;
              }
              else if (parseMode === 'math') {
                  this.parseMode = parseMode;
                  this.atoms = this.atoms.concat(this.parse((token) => token === ']'));
                  this.parseMode = savedParseMode;
              }
          }
          const atoms = this.swapAtoms(saveAtoms);
          return result !== null && result !== void 0 ? result : atoms;
      }
      parseCommand(command) {
          var _a, _b, _c, _d;
          let result = null;
          if (command === '\\placeholder') {
              return [
                  new PlaceholderAtom({
                      mode: this.parseMode,
                      value: this.parseArgument('string'),
                      style: this.style,
                  }),
              ];
          }
          if (command === '\\char') {
              // \char has a special syntax and requires a non-braced integer
              // argument
              const initialIndex = this.index;
              let codepoint = Math.floor(this.scanNumber(true));
              if (!Number.isFinite(codepoint) ||
                  codepoint < 0 ||
                  codepoint > 0x10ffff) {
                  codepoint = 0x2753; // BLACK QUESTION MARK
              }
              result = new Atom(this.parseMode === 'math' ? 'mord' : 'text', {
                  command: '\\char',
                  mode: this.parseMode,
                  value: String.fromCodePoint(codepoint),
              });
              result.latex =
                  '\\char' + tokensToString(this.tokens.slice(initialIndex, this.index));
              return [result];
          }
          if (command === '\\hskip' || command === '\\kern') {
              // \hskip and \kern have a special syntax and requires a non-braced
              // 'skip' argument
              const width = this.scanSkip();
              if (!Number.isFinite(width))
                  return null;
              return [new SpacingAtom(command, this.style, width)];
          }
          // Is this a macro?
          result = this.scanMacro(command);
          if (result)
              return [result];
          // This wasn't a macro, so let's see if it's a regular command
          const info = getInfo(command, this.parseMode, {});
          if (!info) {
              // An unknown command
              this.onError({
                  code: 'unknown-command',
                  arg: command,
              });
              return [new ErrorAtom(command)];
          }
          if (info.ifMode && !info.ifMode.includes(this.parseMode)) {
              // Command invalid in this mode
              this.onError({
                  code: 'invalid-command',
                  arg: command,
              });
              return [new ErrorAtom(command)];
          }
          // Parse the arguments
          // If explicitGroup is not empty, an explicit group is expected
          // to follow the command and will be parsed *after* the
          // command has been processed.
          // This is used for commands such as \textcolor{color}{content}
          // that need to apply the color to the content *after* the
          // style has been changed.
          // In definitions, this is indicated with a parameter type
          // of 'auto*'
          const savedMode = this.parseMode;
          if (info.applyMode) {
              this.parseMode = info.applyMode;
          }
          const initialIndex = this.index;
          const [explicitGroup, args] = this.parseArguments(info);
          this.parseMode = savedMode;
          if (!args)
              return null; // Some required arguments were missing...
          if (info.applyMode && !info.applyStyle && !info.createAtom) {
              return args[0];
          }
          if (info.infix) {
              // Infix commands should be handled in scanImplicitGroup
              // If we find an infix command here, it's a syntax error
              // (second infix command in a group) and should be ignored.
              this.onError({
                  code: 'too-many-infix-commands',
                  arg: command,
              });
              return null;
          }
          //  Invoke the createAtom() function if present
          if (typeof info.createAtom === 'function') {
              result = info.createAtom(command, args, this.style);
              if (explicitGroup) {
                  result.body = this.parseArgument(explicitGroup);
              }
          }
          else if (typeof info.applyStyle === 'function') {
              const style = info.applyStyle(command, args);
              // No type provided -> the parse function will modify
              // the current style rather than create a new Atom.
              const savedMode = this.parseMode;
              if (info.applyMode) {
                  // Change to 'text' (or 'math') mode if necessary
                  this.parseMode = info.applyMode;
              }
              // If an explicit group is expected, process it now
              if (explicitGroup) {
                  // Create a temporary style
                  const saveStyle = this.style;
                  this.style = { ...this.style, ...style };
                  const atoms = this.parseArgument(explicitGroup);
                  this.style = saveStyle;
                  this.parseMode = savedMode;
                  return atoms;
              }
              // Merge the new style info with the current style
              this.style = { ...this.style, ...style };
              this.parseMode = savedMode;
          }
          else {
              // The new atom will inherit the current style
              // Only override the variant if it is not '' or undefined
              const style = {
                  ...this.style,
                  variant: (_a = info.variant) !== null && _a !== void 0 ? _a : this.style.variant,
              };
              result =
                  info.type === 'spacing'
                      ? new SpacingAtom(command, this.style)
                      : new Atom((_b = info.type) !== null && _b !== void 0 ? _b : 'mop', {
                          command,
                          style,
                          value: (_c = info.value) !== null && _c !== void 0 ? _c : command,
                          mode: (_d = info.applyMode) !== null && _d !== void 0 ? _d : this.parseMode,
                      });
          }
          if (result instanceof Atom &&
              !/^\\(llap|rlap|class|cssId|htmlData)$/.test(command)) {
              const argString = tokensToString(this.tokens.slice(initialIndex, this.index));
              if (argString && result.command) {
                  result.latex = result.command + argString;
              }
              if (result.isFunction && this.smartFence) {
                  // The command was a function that may be followed by
                  // an argument, like `\sin(`
                  const smartFence = this.scanSmartFence();
                  if (smartFence)
                      return [result, smartFence];
              }
          }
          if (!result)
              return null;
          return [result];
      }
      parseLiteral(literal) {
          const result = Mode.createAtom(this.parseMode, literal, {
              ...this.style,
          });
          if (result.isFunction && this.smartFence) {
              // The atom was a function that may be followed by
              // an argument, like `f(`.
              const smartFence = this.scanSmartFence();
              if (smartFence)
                  return [result, smartFence];
          }
          return [result];
      }
      parseSimpleToken() {
          const token = this.get();
          if (!token)
              return null;
          if (token === '<space>') {
              if (this.parseMode === 'text') {
                  return [new TextAtom(' ', ' ', this.style)];
              }
              return null;
          }
          if (token.startsWith('\\'))
              return this.parseCommand(token);
          if (isLiteral(token))
              return this.parseLiteral(token);
          if (token === '<}>') {
              this.onError({ latex: '', code: 'unbalanced-braces' });
          }
          else {
              this.onError({
                  latex: '',
                  code: 'unexpected-token',
                  arg: token,
              });
          }
          return null;
      }
      /**
       * Attempt to scan the macro name and return an atom list if successful.
       * Otherwise, it wasn't a macro.
       */
      scanMacro(macro) {
          var _a;
          const macroName = macro.slice(1);
          if (!this.macros || !this.macros[macroName])
              return null;
          const initialIndex = this.index;
          const args = [];
          let def;
          let argCount = 0;
          if (typeof this.macros[macroName] === 'string') {
              def = this.macros[macroName];
              // Let's see if there are arguments in the definition.
              if (/(^|[^\\])#1/.test(def))
                  argCount = 1;
              if (/(^|[^\\])#2/.test(def))
                  argCount = 2;
              if (/(^|[^\\])#3/.test(def))
                  argCount = 3;
              if (/(^|[^\\])#4/.test(def))
                  argCount = 4;
              if (/(^|[^\\])#5/.test(def))
                  argCount = 5;
              if (/(^|[^\\])#6/.test(def))
                  argCount = 6;
              if (/(^|[^\\])#7/.test(def))
                  argCount = 7;
              if (/(^|[^\\])#8/.test(def))
                  argCount = 8;
              if (/(^|[^\\])#9/.test(def))
                  argCount = 9;
          }
          else {
              def = this.macros[macroName].def;
              argCount = this.macros[macroName].args || 0;
          }
          for (let i = 1; i <= argCount; i++) {
              // Parse each argument as a string. We don't know yet
              // what the proper parse mode is, so defer parsing till later
              // when invoking `parseString`
              args[i] = this.matchLiteralArg();
          }
          // Carry forward the placeholder argument, if any.
          args['?'] = (_a = this.args) === null || _a === void 0 ? void 0 : _a['?'];
          // Group the result of the macro expansion
          return new MacroAtom(macro, tokensToString(this.tokens.slice(initialIndex, this.index)), parseLatex(def, this.parseMode, args, this.macros, false, this.onError));
      }
      /**
       * Make an atom for the current token or token group and
       * add it to the parser's current atoms
       */
      parseToken() {
          let result = this.parseEnvironment() ||
              this.parseModeShift() ||
              this.parseModeSet() ||
              this.parseGroup() ||
              this.parseLeftRight();
          if (!result && (this.parseSupSub() || this.parseLimits()))
              return true;
          if (!result)
              result = this.parseSimpleToken();
          // If we have an atom to add, push it at the end of the current math list
          // We could have no atom for tokens that were skipped, a ' ' in math mode
          // for example
          if (isArray(result)) {
              this.atoms = this.atoms.concat(result);
          }
          else if (result) {
              this.atoms.push(result);
          }
          return result !== null;
      }
  }
  /**
   * Given a string of LaTeX, return a corresponding array of atoms.
   * @param args - If there are any placeholder tokens, e.g.
   * `#0`, `#1`, etc... they will be replaced by the value provided by `args`.
   * @param smartFence - If true, promote plain fences, e.g. `(`,
   * as `\left...\right` or `\mleft...\mright`
   */
  function parseLatex(s, parseMode, args = null, macros = null, smartFence = false, onError) {
      const parser = new Parser(tokenize(s, args), args, macros, (err) => {
          if (typeof onError === 'function') {
              onError({ ...err, latex: s });
          }
      });
      parser.parseMode = parseMode !== null && parseMode !== void 0 ? parseMode : 'math'; // Other possible values: 'text', 'color', etc...
      if (smartFence)
          parser.smartFence = true;
      let atoms = [];
      while (!parser.end()) {
          const more = parser.parse();
          if (more) {
              atoms = atoms.concat(more);
          }
      }
      return atoms;
  }

  class AccentAtom extends Atom {
      constructor(command, body, options) {
          super('accent', { command, style: options.style });
          if (options.accentChar) {
              this.accent = options.accentChar;
          }
          else {
              this.svgAccent = options === null || options === void 0 ? void 0 : options.svgAccent;
          }
          this.body = body;
          this.skipBoundary = true;
          this.limits = 'accent'; // This will suppress the regular
          // supsub attachment and will delegate
          // it to the decomposeAccent
          // (any non-null value would do)
      }
      render(context) {
          // Accents are handled in the TeXbook pg. 443, rule 12.
          const { mathstyle } = context;
          // Build the base atom
          const base = Atom.render(context.cramp(), this.body);
          // Calculate the skew of the accent. This is based on the line "If the
          // nucleus is not a single character, let s = 0; otherwise set s to the
          // kern amount for the nucleus followed by the \skewchar of its font."
          // Note that our skew metrics are just the kern between each character
          // and the skewchar.
          let skew$1 = 0;
          if (!this.hasEmptyBranch('body') &&
              this.body.length === 2 &&
              this.body[1].isCharacterBox()) {
              skew$1 = skew(base);
          }
          // Calculate the amount of space between the body and the accent
          let clearance = Math.min(height(base), mathstyle.metrics.xHeight);
          let accentBody;
          if (this.svgAccent) {
              accentBody = makeSVGSpan(this.svgAccent);
              clearance = -clearance + METRICS.bigOpSpacing1;
          }
          else {
              // Build the accent
              const accent = makeSymbol('Main-Regular', this.accent, 'math');
              // Remove the italic correction of the accent, because it only serves to
              // shift the accent over to a place we don't want.
              accent.italic = 0;
              // The \vec character that the fonts use is a combining character, and
              // thus shows up much too far to the left. To account for this, we add a
              // specific class which shifts the accent over to where we want it.
              const vecClass = this.accent === '\u20D7' ? ' accent-vec' : '';
              accentBody = new Span(new Span(accent), 'accent-body' + vecClass);
          }
          accentBody = makeVlist(context, [base, -clearance, accentBody]);
          // Shift the accent over by the skew. Note we shift by twice the skew
          // because we are centering the accent, so by adding 2*skew to the left,
          // we shift it to the right by 1*skew.
          accentBody.children[accentBody.children.length - 1].left = 2 * skew$1;
          const result = new Span(accentBody, 'accent', 'mord');
          if (this.caret)
              result.caret = this.caret;
          return [this.attachSupsub(context, result, result.type)];
      }
  }

  // An `overunder` atom has the following attributes:
  // - body: atoms[]: atoms displayed on the base line
  // - svgBody: string. A SVG graphic displayed on the base line (if present, the body is ignored)
  // - above: atoms[]: atoms displayed above the body
  // - svgAbove: string. A named SVG graphic above the element
  // - below: atoms[]: atoms displayed below the body
  // - svgBelow: string. A named SVG graphic below the element
  class OverunderAtom extends Atom {
      constructor(command, options) {
          var _a;
          super('overunder', {
              command,
              toLatexOverride: options.toLatexOverride,
              style: options.style,
          });
          this.skipBoundary = (_a = options.skipBoundary) !== null && _a !== void 0 ? _a : true;
          this.limits = 'overunder';
          this.body = options.body;
          this.svgAbove = options.svgAbove;
          this.svgBelow = options.svgBelow;
          this.svgBody = options.svgBody;
          this.above = options.above;
          this.below = options.below;
      }
      render(context) {
          const body = this.svgBody
              ? makeSVGSpan(this.svgBody)
              : Atom.render(context, this.body);
          const annotationStyle = context.clone({
              mathstyle: MATHSTYLES.scriptstyle,
          });
          let above;
          let below;
          if (this.svgAbove) {
              above = makeSVGSpan(this.svgAbove);
          }
          else if (this.above) {
              above = new Span(Atom.render(annotationStyle, this.above), context.mathstyle.adjustTo(annotationStyle.mathstyle));
          }
          if (this.svgBelow) {
              below = makeSVGSpan(this.svgBelow);
          }
          else if (this.below) {
              below = new Span(Atom.render(annotationStyle, this.below), context.mathstyle.adjustTo(annotationStyle.mathstyle));
          }
          if (above && below) {
              // Pad the above and below if over a "base"
              below.left = 0.3;
              below.right = 0.3;
              above.left = 0.3;
              above.right = 0.3;
          }
          let result = makeOverunderStack(context, body, above, below, isSpanType(this.type) ? this.type : 'mrel');
          if (this.superscript || this.subscript) {
              result = this.attachLimits(context, result, 0, 0);
          }
          if (this.caret)
              result.caret = this.caret;
          // Bind the generated span so its components can be selected
          this.bind(context, result);
          return [result];
      }
  }
  /**
   * Combine a nucleus with an atom above and an atom below. Used to form
   * stacks for the 'overunder' atom type .
   *
   * @param nucleus The base over and under which the atoms will
   * be placed.
   * @param type The type ('mop', 'mrel', etc...) of the result
   */
  function makeOverunderStack(context, nucleus, above, below, type) {
      // If nothing above and nothing below, nothing to do.
      if (!above && !below) {
          return new Span(nucleus, 'op-over-under', type);
          // Return isArray(nucleus) ? makeSpan(nucleus) : nucleus;
      }
      let aboveShift = 0;
      let belowShift = 0;
      if (above) {
          aboveShift = Math.max(METRICS.bigOpSpacing1, METRICS.bigOpSpacing3 - depth(above));
      }
      if (below) {
          belowShift = Math.max(METRICS.bigOpSpacing2, METRICS.bigOpSpacing4 - height(below));
      }
      let result = null;
      if (below && above) {
          const bottom = height(below) + depth(below) + depth(nucleus);
          result = makeVlist(context, [
              0,
              below,
              belowShift,
              nucleus,
              aboveShift,
              above,
              METRICS.bigOpSpacing2,
          ], 'bottom', bottom);
      }
      else if (below && !above) {
          const top = height(nucleus);
          result = makeVlist(context, [0, below, belowShift, nucleus], 'top', top);
      }
      else if (above && !below) {
          result = makeVlist(context, [
              depth(nucleus),
              nucleus,
              Math.max(METRICS.bigOpSpacing2, aboveShift),
              above,
          ], 'bottom', depth(nucleus));
      }
      return new Span(result, 'op-over-under', type);
  }

  const ACCENTS = {
      acute: '\u02CA',
      grave: '\u02CB',
      dot: '\u02D9',
      ddot: '\u00A8',
      mathring: '\u02DA',
      tilde: '\u007E',
      bar: '\u02C9',
      breve: '\u02D8',
      check: '\u02C7',
      hat: '\u005E',
      vec: '\u20D7',
  };
  defineFunction(Object.keys(ACCENTS), '{body:auto}', {
      createAtom: (command, args, style) => new AccentAtom(command, args[0], {
          accentChar: ACCENTS[command.slice(1)],
          style,
      }),
  });
  defineFunction(['widehat', 'widecheck', 'widetilde'], '{body:auto}', {
      createAtom: (command, args, style) => {
          // Pick the correct SVG template based on the length of the body
          const baseString = parseArgAsString(args[0]);
          return new AccentAtom(command, args[0], {
              style,
              svgAccent: command.slice(1) +
                  (baseString.length > 5
                      ? '4'
                      : ['1', '1', '2', '2', '3', '3'][baseString.length]),
          });
      },
  });
  defineFunction('utilde', '{body:auto}', {
      createAtom: (command, args, style) => {
          const baseString = parseArgAsString(args[0]);
          const accent = 'widetilde' +
              (baseString.length > 5
                  ? '4'
                  : ['1', '1', '2', '2', '3', '3'][baseString.length]);
          return new OverunderAtom(command, {
              body: args[0],
              svgBelow: accent,
              style,
          });
      },
  });
  /*
   * From plain.tex
   *
   */
  defineFunction('^', '{:string}', {
      createAtom: (command, args, style) => {
          var _a;
          return new Atom('mord', {
              command,
              isExtensibleSymbol: false,
              isFunction: false,
              limits: 'nolimits',
              style,
              value: args[0]
                  ? (_a = {
                      a: 'â',
                      e: 'ê',
                      i: 'î',
                      o: 'ô',
                      u: 'û',
                      A: 'Â',
                      E: 'Ê',
                      I: 'Î',
                      O: 'Ô',
                      U: 'Û',
                  }[args[0]]) !== null && _a !== void 0 ? _a : '^' : '^',
          });
      },
  });
  defineFunction('`', '{:string}', {
      createAtom: (command, args, style) => {
          var _a;
          return new Atom('mord', {
              command,
              isExtensibleSymbol: false,
              isFunction: false,
              limits: 'nolimits',
              style,
              value: args[0]
                  ? (_a = {
                      a: 'à',
                      e: 'è',
                      i: 'ì',
                      o: 'ò',
                      u: 'ù',
                      A: 'À',
                      E: 'È',
                      I: 'Ì',
                      O: 'Ò',
                      U: 'Ù',
                  }[args[0]]) !== null && _a !== void 0 ? _a : '`' : '`',
          });
      },
  });
  defineFunction("'", '{:string}', {
      createAtom: (command, args, style) => {
          var _a;
          return new Atom('mord', {
              command,
              isExtensibleSymbol: false,
              isFunction: false,
              limits: 'nolimits',
              style,
              value: args[0]
                  ? (_a = {
                      a: 'á',
                      e: 'é',
                      i: 'í',
                      o: 'ó',
                      u: 'ú',
                      A: 'Á',
                      E: 'É',
                      I: 'Í',
                      O: 'Ó',
                      U: 'Ú',
                  }[args[0]]) !== null && _a !== void 0 ? _a : '\u005E' : '\u005E',
          });
      },
  });
  defineFunction('~', '{:string}', {
      createAtom: (command, args, style) => {
          var _a;
          return new Atom('mord', {
              command,
              isExtensibleSymbol: false,
              isFunction: false,
              limits: 'nolimits',
              style,
              value: args[0]
                  ? (_a = { n: 'ñ', N: 'Ñ', a: 'ã', o: 'õ', A: 'Ã', O: 'Õ' }[args[0]]) !== null && _a !== void 0 ? _a : '\u00B4' : '\u00B4',
          });
      },
  });
  defineFunction('c', '{:string}', {
      createAtom: (command, args, style) => {
          var _a;
          return new Atom('mord', {
              command,
              isExtensibleSymbol: false,
              isFunction: false,
              limits: 'nolimits',
              style,
              value: args[0] ? (_a = { c: 'ç', C: 'Ç' }[args[0]]) !== null && _a !== void 0 ? _a : '' : '',
          });
      },
  });

  class EncloseAtom extends Atom {
      constructor(command, body, notation, options) {
          super('enclose', { command, style: options.style });
          this.body = body;
          this.backgroundcolor = options.backgroundcolor;
          if (notation.updiagonalarrow) {
              notation.updiagonalstrike = false;
          }
          if (notation.box) {
              notation.left = false;
              notation.right = false;
              notation.bottom = false;
              notation.top = false;
          }
          this.notation = notation;
          this.shadow = options.shadow;
          this.strokeWidth = options.strokeWidth;
          this.strokeStyle = options.strokeStyle;
          this.svgStrokeStyle = options.svgStrokeStyle;
          this.strokeColor = options.strokeColor;
          this.borderStyle = options.borderStyle;
          this.padding = options.padding;
          this.captureSelection = true; // Do not let children be selected
      }
      toLatex(options) {
          let result = this.command;
          if (this.command === '\\enclose') {
              result += '{' + Object.keys(this.notation).join(' ') + '}';
              // \enclose can have optional parameters...
              let style = '';
              let sep = '';
              if (this.backgroundcolor && this.backgroundcolor !== 'transparent') {
                  style +=
                      sep + 'mathbackground="' + colorToString(this.backgroundcolor) + '"';
                  sep = ',';
              }
              if (this.shadow && this.shadow !== 'auto') {
                  style += sep + 'shadow="' + this.shadow + '"';
                  sep = ',';
              }
              if (this.strokeWidth !== 1 || this.strokeStyle !== 'solid') {
                  style += sep + this.borderStyle;
                  sep = ',';
              }
              else if (this.strokeColor && this.strokeColor !== 'currentColor') {
                  style += sep + 'mathcolor="' + colorToString(this.strokeColor) + '"';
                  sep = ',';
              }
              if (style) {
                  result += `[${style}]`;
              }
          }
          result += `{${this.bodyToLatex(options)}}`;
          return result;
      }
      render(context) {
          const base = new Span(Atom.render(context, this.body), '', 'mord');
          // Account for the padding
          const padding = typeof this.padding === 'number' ? this.padding : METRICS.fboxsep;
          // The 'ML__notation' class is required to prevent the span from being omitted
          // during rendering (it looks like an empty, no-op span)
          const notation = new Span('', 'ML__notation');
          notation.setStyle('position', 'absolute');
          notation.setStyle('height', height(base) + depth(base) + 2 * padding, 'em');
          notation.height = height(base) + padding;
          notation.depth = depth(base) + padding;
          if (padding !== 0) {
              notation.setStyle('width', `calc(100% + ${2 * padding}em)`);
          }
          else {
              notation.setStyle('width', '100%');
          }
          notation.setStyle('top', -padding, 'em');
          notation.setStyle('left', -padding, 'em');
          notation.setStyle('z-index', '-1'); // Ensure the box is *behind* the base
          if (this.backgroundcolor) {
              notation.setStyle('background-color', this.backgroundcolor);
          }
          if (this.notation.box)
              notation.setStyle('border', this.borderStyle);
          if (this.notation.actuarial) {
              notation.setStyle('border-top', this.borderStyle);
              notation.setStyle('border-right', this.borderStyle);
          }
          if (this.notation.madruwb) {
              notation.setStyle('border-bottom', this.borderStyle);
              notation.setStyle('border-right', this.borderStyle);
          }
          if (this.notation.roundedbox) {
              notation.setStyle('border-radius', (height(base) + depth(base)) / 2, 'em');
              notation.setStyle('border', this.borderStyle);
          }
          if (this.notation.circle) {
              notation.setStyle('border-radius', '50%');
              notation.setStyle('border', this.borderStyle);
          }
          if (this.notation.top) {
              notation.setStyle('border-top', this.borderStyle);
          }
          if (this.notation.left) {
              notation.setStyle('border-left', this.borderStyle);
          }
          if (this.notation.right) {
              notation.setStyle('border-right', this.borderStyle);
          }
          if (this.notation.bottom) {
              notation.setStyle('border-bottom', this.borderStyle);
          }
          let svg = '';
          if (this.notation.horizontalstrike) {
              svg += '<line x1="3%"  y1="50%" x2="97%" y2="50%"';
              svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`;
              svg += ' stroke-linecap="round"';
              if (this.svgStrokeStyle) {
                  svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
              }
              svg += '/>';
          }
          if (this.notation.verticalstrike) {
              svg += '<line x1="50%"  y1="3%" x2="50%" y2="97%"';
              svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`;
              svg += ' stroke-linecap="round"';
              if (this.svgStrokeStyle) {
                  svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
              }
              svg += '/>';
          }
          if (this.notation.updiagonalstrike) {
              svg += '<line x1="3%"  y1="97%" x2="97%" y2="3%"';
              svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`;
              svg += ' stroke-linecap="round"';
              if (this.svgStrokeStyle) {
                  svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
              }
              svg += '/>';
          }
          if (this.notation.downdiagonalstrike) {
              svg += '<line x1="3%"  y1="3%" x2="97%" y2="97%"';
              svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`;
              svg += ' stroke-linecap="round"';
              if (this.svgStrokeStyle) {
                  svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
              }
              svg += '/>';
          }
          // If (this.notation.updiagonalarrow) {
          //     const t = 1;
          //     const length = Math.sqrt(w * w + h * h);
          //     const f = 1 / length / 0.075 * t;
          //     const wf = w * f;
          //     const hf = h * f;
          //     const x = w - t / 2;
          //     let y = t / 2;
          //     if (y + hf - .4 * wf < 0 ) y = 0.4 * wf - hf;
          //     svg += '<line ';
          //     svg += `x1="1" y1="${h - 1}px" x2="${x - .7 * wf}px" y2="${y + .7 * hf}px"`;
          //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`;
          //     svg += ' stroke-linecap="round"';
          //     if (this.svgStrokeStyle) {
          //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
          //     }
          //     svg += '/>';
          //     svg += '<polygon points="';
          //     svg += `${x},${y} ${x - wf - .4 * hf},${y + hf - .4 * wf} `;
          //     svg += `${x - .7 * wf},${y + .7 * hf} ${x - wf + .4 * hf},${y + hf + .4 * wf} `;
          //     svg += `${x},${y}`;
          //     svg += `" stroke='none' fill="${this.strokeColor}"`;
          //     svg += '/>';
          // }
          // if (this.notation.phasorangle) {
          //     svg += '<path d="';
          //     svg += `M ${h / 2},1 L1,${h} L${w},${h} "`;
          //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}" fill="none"`;
          //     if (this.svgStrokeStyle) {
          //         svg += ' stroke-linecap="round"';
          //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
          //     }
          //     svg += '/>';
          // }
          // if (this.notation.radical) {
          //     svg += '<path d="';
          //     svg += `M 0,${.6 * h} L1,${h} L${emToPx(padding) * 2},1 "`;
          //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}" fill="none"`;
          //     if (this.svgStrokeStyle) {
          //         svg += ' stroke-linecap="round"';
          //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
          //     }
          //     svg += '/>';
          // }
          // if (this.notation.longdiv) {
          //     svg += '<path d="';
          //     svg += `M ${w} 1 L1 1 a${emToPx(padding)} ${h / 2}, 0, 0, 1, 1 ${h} "`;
          //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}" fill="none"`;
          //     if (this.svgStrokeStyle) {
          //         svg += ' stroke-linecap="round"';
          //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
          //     }
          //     svg += '/>';
          // }
          if (svg) {
              let svgStyle;
              if (this.shadow !== 'none') {
                  svgStyle =
                      this.shadow === 'auto'
                          ? 'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)'
                          : 'filter: drop-shadow(' + this.shadow + ')';
              }
              addSVGOverlay(notation, svg, svgStyle);
          }
          const result = new Span([notation, base]);
          // Set its position as relative so that the box can be absolute positioned
          // over the base
          result.setStyle('position', 'relative');
          result.setStyle('display', 'inline');
          // The padding adds to the width and height of the pod
          result.height = height(base) + padding;
          result.depth = depth(base) + padding;
          result.left = padding;
          result.right = padding;
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
  }

  // \enclose, a MathJax extension mapping to the MathML `menclose` tag.
  // The first argument is a comma delimited list of notations, as defined
  // here: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/menclose
  // The second, optional, specifies the style to use for the notations.
  defineFunction('enclose', '{notation:string}[style:string]{body:auto}', {
      createAtom: (command, args, style) => {
          var _a;
          const options = {
              strokeColor: 'currentColor',
              strokeWidth: 1,
              strokeStyle: 'solid',
              backgroundcolor: 'transparent',
              padding: 'auto',
              shadow: 'auto',
              svgStrokeStyle: undefined,
              borderStyle: undefined,
              style,
          };
          // Extract info from style string
          if (args[1]) {
              // Split the string by comma delimited sub-strings, ignoring commas
              // that may be inside (). For example"x, rgb(a, b, c)" would return
              // ['x', 'rgb(a, b, c)']
              const styles = args[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
              for (const s of styles) {
                  const shorthand = s.match(/\s*(\S+)\s+(\S+)\s+(.*)/);
                  if (shorthand) {
                      options.strokeWidth = convertDimenToPx(shorthand[1], 'px');
                      if (!Number.isFinite(options.strokeWidth)) {
                          options.strokeWidth = 1;
                      }
                      options.strokeStyle = shorthand[2];
                      options.strokeColor = shorthand[3];
                  }
                  else {
                      const attribute = s.match(/\s*([a-z]*)\s*=\s*"(.*)"/);
                      if (attribute) {
                          if (attribute[1] === 'mathbackground') {
                              options.backgroundcolor = attribute[2];
                          }
                          else if (attribute[1] === 'mathcolor') {
                              options.strokeColor = attribute[2];
                          }
                          else if (attribute[1] === 'padding') {
                              options.padding = convertDimenToPx(attribute[2], 'px');
                          }
                          else if (attribute[1] === 'shadow') {
                              options.shadow = attribute[2];
                          }
                      }
                  }
              }
              if (options.strokeStyle === 'dashed') {
                  options.svgStrokeStyle = '5,5';
              }
              else if (options.strokeStyle === 'dotted') {
                  options.svgStrokeStyle = '1,5';
              }
          }
          options.borderStyle = `${options.strokeWidth}px ${options.strokeStyle} ${options.strokeColor}`;
          // Normalize the list of notations.
          const notation = {};
          ((_a = args[0]) !== null && _a !== void 0 ? _a : '')
              .split(/[, ]/)
              .filter((v) => v.length > 0)
              .forEach((x) => {
              notation[x.toLowerCase()] = true;
          });
          return new EncloseAtom(command, args[2], notation, options);
      },
  });
  defineFunction('cancel', '{body:auto}', {
      createAtom: (name, args, style) => new EncloseAtom(name, args[0], { updiagonalstrike: true }, {
          strokeColor: 'currentColor',
          strokeWidth: 1,
          strokeStyle: 'solid',
          borderStyle: '1px solid currentColor',
          backgroundcolor: 'transparent',
          padding: 'auto',
          shadow: 'auto',
          style,
      }),
  });
  defineFunction('bcancel', '{body:auto}', {
      createAtom: (name, args, style) => new EncloseAtom(name, args[0], { downdiagonalstrike: true }, {
          strokeColor: 'currentColor',
          strokeWidth: 1,
          strokeStyle: 'solid',
          borderStyle: '1px solid currentColor',
          backgroundcolor: 'transparent',
          padding: 'auto',
          shadow: 'auto',
          style,
      }),
  });
  defineFunction('xcancel', '{body:auto}', {
      createAtom: (name, args, style) => new EncloseAtom(name, args[0], { updiagonalstrike: true, downdiagonalstrike: true }, {
          strokeColor: 'currentColor',
          strokeWidth: 1,
          strokeStyle: 'solid',
          borderStyle: '1px solid currentColor',
          backgroundcolor: 'transparent',
          padding: 'auto',
          shadow: 'auto',
          style,
      }),
  });

  class ArrayAtom extends Atom {
      constructor(envName, array, rowGaps, options = {}) {
          super('array');
          this.environmentName = envName;
          // The array could be sparse, desparsify-it.
          // Each cell need to be inserted (with a 'first' atom)
          // @todo
          this.array = array;
          this.rowGaps = rowGaps;
          if (options.mathStyleName)
              this.mathStyleName = options.mathStyleName;
          if (options.colFormat)
              this.colFormat = options.colFormat;
          if (this.colFormat && this.colFormat.length === 0) {
              this.colFormat = [{ align: 'l' }];
          }
          if (!this.colFormat) {
              this.colFormat = [
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
                  { align: 'l' },
              ];
          }
          if (options.leftDelim)
              this.leftDelim = options.leftDelim;
          if (options.rightDelim)
              this.rightDelim = options.rightDelim;
          if (options.jot)
              this.jot = options.jot;
          if (options.arraycolsep)
              this.arraycolsep = options.arraycolsep;
      }
      branch(cell) {
          if (!isColRowBranch(cell))
              return null;
          return this.array[cell[0]][cell[1]];
      }
      get branches() {
          const result = super.branches;
          this.array.forEach((_, col) => {
              this.array[col].forEach((_, row) => {
                  if (this.array[col][row]) {
                      result.push([col, row]);
                  }
              });
          });
          return result;
      }
      createBranch(cell) {
          if (!isColRowBranch(cell))
              return [];
          return [];
      }
      get rowCount() {
          return this.array.length;
      }
      get colCount() {
          return this.array[0].length;
      }
      removeBranch(name) {
          if (isNamedBranch(name)) {
              return super.removeBranch(name);
          }
          const children = this.branch(name);
          this.array[name[0]][name[1]] = null;
          children.forEach((x) => {
              x.parent = null;
              x.treeBranch = undefined;
          });
          // Drop the 'first' element
          console.assert(children[0].type === 'first');
          children.shift();
          this.isDirty = true;
          return children;
      }
      get hasChildren() {
          return this.children.length > 0;
      }
      get children() {
          const result = [];
          this.array.forEach((row) => {
              row.forEach((col) => {
                  col.forEach((x) => {
                      result.push(...x.children);
                      result.push(x);
                  });
              });
          });
          return [...result, ...super.children];
      }
      render(context) {
          var _a;
          // See http://tug.ctan.org/macros/latex/base/ltfsstrc.dtx
          // and http://tug.ctan.org/macros/latex/base/lttab.dtx
          const { colFormat } = this;
          // Fold the array so that there are no more columns of content than
          // there are columns prescribed by the column format.
          const array = [];
          let colMax = 0; // Maximum number of columns of content
          for (const colSpec of colFormat) {
              if (colSpec.align)
                  colMax++;
          }
          for (const row of this.array) {
              let colIndex = 0;
              while (colIndex < row.length) {
                  const newRow = [];
                  const lastCol = Math.min(row.length, colIndex + colMax);
                  while (colIndex < lastCol) {
                      newRow.push(row[colIndex++]);
                  }
                  array.push(newRow);
              }
          }
          // If the last row is empty, ignore it.
          if (array[array.length - 1].length === 1 &&
              array[array.length - 1][0].length === 0) {
              array.pop();
          }
          const mathstyle = this.mathStyleName
              ? MATHSTYLES[this.mathStyleName]
              : context.mathstyle;
          // Row spacing
          // Default \arraystretch from lttab.dtx
          const arraystretch = this.arraystretch || 1;
          const arraycolsep = typeof this.arraycolsep === 'number'
              ? this.arraycolsep
              : METRICS.arraycolsep;
          const arrayskip = arraystretch * METRICS.baselineskip;
          const arstrutHeight = 0.7 * arrayskip;
          const arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx
          let totalHeight = 0;
          let nc = 0;
          const body = [];
          const nr = array.length;
          for (let r = 0; r < nr; ++r) {
              const inrow = array[r];
              nc = Math.max(nc, inrow.length);
              let height$1 = arstrutHeight; // \@array adds an \@arstrut
              let depth$1 = arstrutDepth; // To each row (via the template)
              const outrow = { cells: [], height: 0, depth: 0, pos: 0 };
              for (const element of inrow) {
                  const localContext = context.clone({
                      mathstyle: MATHSTYLES[this.mathStyleName],
                  });
                  const cell = Atom.render(localContext, element) || [];
                  const elt = [new Span(null, '', 'mord')].concat(cell);
                  depth$1 = Math.max(depth$1, depth(elt));
                  height$1 = Math.max(height$1, height(elt));
                  outrow.cells.push(elt);
              }
              let jot = r === nr - 1 ? 0 : this.jot || 0;
              if ((_a = this.rowGaps) === null || _a === void 0 ? void 0 : _a[r]) {
                  jot = this.rowGaps[r];
                  if (jot > 0) {
                      // \@argarraycr
                      jot += arstrutDepth;
                      if (depth$1 < jot) {
                          depth$1 = jot; // \@xargarraycr
                      }
                      jot = 0;
                  }
              }
              outrow.height = height$1;
              outrow.depth = depth$1;
              totalHeight += height$1;
              outrow.pos = totalHeight;
              totalHeight += depth$1 + jot; // \@yargarraycr
              body.push(outrow);
          }
          const offset = totalHeight / 2 + mathstyle.metrics.axisHeight;
          const contentCols = [];
          for (let colIndex = 0; colIndex < nc; colIndex++) {
              const col = [];
              for (const row of body) {
                  const element = row.cells[colIndex];
                  if (!element) {
                      continue;
                  }
                  element.depth = row.depth;
                  element.height = row.height;
                  col.push(element);
                  col.push(row.pos - offset);
              }
              if (col.length > 0) {
                  contentCols.push(makeVlist(context, col, 'individualShift'));
              }
          }
          // Iterate over each column description.
          // Each `colDesc` will indicate whether to insert a gap, a rule or
          // a column from 'contentCols'
          const cols = [];
          let previousColContent = false;
          let previousColRule = false;
          let currentContentCol = 0;
          let firstColumn = !this.leftDelim;
          for (const colDesc of colFormat) {
              if (colDesc.align && currentContentCol >= contentCols.length) {
                  break;
              }
              else if (colDesc.align && currentContentCol < contentCols.length) {
                  // If an alignment is specified, insert a column of content
                  if (previousColContent) {
                      // If no gap was provided, insert a default gap between
                      // consecutive columns of content
                      cols.push(makeColGap(2 * arraycolsep));
                  }
                  else if (previousColRule || firstColumn) {
                      // If the previous column was a rule or this is the first column
                      // add a smaller gap
                      cols.push(makeColGap(arraycolsep));
                  }
                  cols.push(new Span(contentCols[currentContentCol], 'col-align-' + colDesc.align));
                  currentContentCol++;
                  previousColContent = true;
                  previousColRule = false;
                  firstColumn = false;
              }
              else if (colDesc.gap !== undefined) {
                  // Something to insert in between columns of content
                  if (typeof colDesc.gap === 'number') {
                      // It's a number, indicating how much space, in em,
                      // to leave in between columns
                      cols.push(makeColGap(colDesc.gap));
                  }
                  else {
                      // It's a mathlist
                      // Create a column made up of the mathlist
                      // as many times as there are rows.
                      cols.push(makeColOfRepeatingElements(context, body, offset, colDesc.gap));
                  }
                  previousColContent = false;
                  previousColRule = false;
                  firstColumn = false;
              }
              else if (colDesc.rule) {
                  // It's a rule.
                  const separator = new Span(null, 'vertical-separator');
                  separator.setStyle('height', totalHeight, 'em');
                  // Result.setTop((1 - context.mathstyle.sizeMultiplier) *
                  //     context.mathstyle.metrics.axisHeight);
                  separator.setStyle('margin-top', 3 * context.mathstyle.metrics.axisHeight - offset, 'em');
                  separator.setStyle('vertical-align', 'top');
                  // Separator.setStyle('display', 'inline-block');
                  let gap = 0;
                  if (previousColRule) {
                      gap = METRICS.doubleRuleSep - METRICS.arrayrulewidth;
                  }
                  else if (previousColContent) {
                      gap = arraycolsep - METRICS.arrayrulewidth;
                  }
                  separator.left = gap;
                  cols.push(separator);
                  previousColContent = false;
                  previousColRule = true;
                  firstColumn = false;
              }
          }
          if (previousColContent && !this.rightDelim) {
              // If the last column was content, add a small gap
              cols.push(makeColGap(arraycolsep));
          }
          if ((!this.leftDelim || this.leftDelim === '.') &&
              (!this.rightDelim || this.rightDelim === '.')) {
              // There are no delimiters around the array, just return what
              // we've built so far.
              return [new Span(cols, 'mtable', 'mord')];
          }
          // There is at least one delimiter. Wrap the core of the array with
          // appropriate left and right delimiters
          // const inner = new Span(new Span(cols, 'mtable'), 'mord');
          const inner = new Span(cols, 'mtable');
          const innerHeight = height(inner);
          const innerDepth = depth(inner);
          const result = this.bind(context, new Span([
              this.bind(context, makeLeftRightDelim('mopen', this.leftDelim, innerHeight, innerDepth, context)),
              inner,
              this.bind(context, makeLeftRightDelim('mclose', this.rightDelim, innerHeight, innerDepth, context)),
          ], '', 'mord'));
          if (this.caret)
              result.caret = this.caret;
          return [this.attachSupsub(context, result, result.type)];
      }
      toLatex(options) {
          let result = '\\begin{' + this.environmentName + '}';
          if (this.environmentName === 'array') {
              result += '{';
              if (this.colFormat !== undefined) {
                  for (let i = 0; i < this.colFormat.length; i++) {
                      if (this.colFormat[i].align) {
                          result += this.colFormat[i].align;
                      }
                      else if (this.colFormat[i].rule) {
                          result += '|';
                      }
                  }
              }
              result += '}';
          }
          for (let row = 0; row < this.array.length; row++) {
              for (let col = 0; col < this.array[row].length; col++) {
                  if (col > 0)
                      result += ' & ';
                  result = joinLatex([
                      result,
                      Atom.toLatex(this.array[row][col], options),
                  ]);
              }
              // Adds a separator between rows (but not after the last row)
              if (row < this.array.length - 1) {
                  result += ' \\\\ ';
              }
          }
          result += '\\end{' + this.environmentName + '}';
          return result;
      }
      getCell(row, col) {
          return this.array[row][col];
      }
      setCell(_row, _column, _value) {
          // @todo array
          console.assert(this.type === 'array' && Array.isArray(this.array));
          this.isDirty = true;
      }
      addRowBefore(_row) {
          console.assert(this.type === 'array' && Array.isArray(this.array));
          // @todo array
          this.isDirty = true;
      }
      addRowAfter(_row) {
          console.assert(this.type === 'array' && Array.isArray(this.array));
          // @todo array
          this.isDirty = true;
      }
      addColumnBefore(_col) {
          console.assert(this.type === 'array' && Array.isArray(this.array));
          this.isDirty = true;
      }
      addColumnAfter(_col) {
          console.assert(this.type === 'array' && Array.isArray(this.array));
          // @todo array
          this.isDirty = true;
      }
      get cells() {
          const result = [];
          this.array.forEach((row) => {
              row.forEach((cell) => {
                  cell.forEach((x) => {
                      result.push(x);
                  });
              });
          });
          return result;
      }
  }
  /**
   * Create a column separator span.
   *
   */
  function makeColGap(width) {
      const separator = new Span('\u200B', 'arraycolsep');
      separator.width = width;
      return separator;
  }
  /**
   * Create a column of repeating elements.
   */
  function makeColOfRepeatingElements(context, rows, offset, element) {
      const col = [];
      for (const row of rows) {
          const cell = new Span(Atom.render(context, element));
          cell.depth = row.depth;
          cell.height = row.height;
          col.push(cell);
          col.push(row.pos - offset);
      }
      return makeVlist(context, col, 'individualShift');
  }

  /*

  See http://texdoc.net/texmf-dist/doc/latex/amsmath/amsldoc.pdf

  <columns> ::= <column>*<line>
  <column> ::= <line>('l'|'c'|'r')
  <line> ::= '|' | '||' | ''

  'math',
                  frequency 0
  'displaymath',
                  frequency 8

  'equation'      centered, numbered
                  frequency 8

  'subequations'   with an 'equation' environment, appends a letter to eq no
                  frequency 1

  'array',        {columns:text}
                  cells are textstyle math
                  no fence

  'eqnarray'      DEPRECATED see http://www.tug.org/pracjourn/2006-4/madsen/madsen.pdf
                  {rcl}
                  first and last cell in each row is displaystyle math
                  each cell has a margin of \arraycolsep
                  Each line has a eqno
                  frequency 7


  'theorem'       text mode. Prepends in bold 'Theorem <counter>', then body in italics.

  'multline'      single column
                  first row left aligned, last right aligned, others centered
                  last line has an eqn. counter. multline* will omit the counter
                  no output if inside an equation
                  

  'gather'        at most two columns
                  first column centered, second column right aligned
                  frequency 1

  'gathered'      must be in equation environment
                  single column,
                  centered
                  frequency: COMMON
                  optional argument: [b], [t] to vertical align

  'align'        multiple columns,
                  alternating rl
                  there is some 'space' (additional column?) between each pair
                  each line is numbered (except when inside an equation environment)
                  there is an implicit {} at the beginning of left columns

  'aligned'      must be in equation environment
                  frequency: COMMON
                  @{}r@{}l@{\quad}@{}r@{}l@{}

  'split'         must be in an equation environment,
                  two columns, additional columns are interpreted as line breaks
                  first column is right aligned, second column is left aligned
                  entire construct is numbered (as opposed to 'align' where each line is numbered)
                  frequency: 0


  'alignedat'
  From AMSMath:
  ---The alignedat environment was changed to take two arguments rather
  than one: a mandatory argument (as formerly) specifying the number of
  align structures, and a new optional one specifying the placement of the
  environment (parallel to the optional argument of aligned). However,
  aligned is simpler to use, allowing any number of aligned structures
  automatically, and therefore the use of alignedat is deprecated.


   'alignat'      {pairs:number}
                  {rl} alternating as many times as indicated by <pairs> arg
                  no space between column pairs (unlike align)
                  there is an implicit {} at the beginning of left columns
                  frequency: 0

   'flalign'      multiple columns
                  alternate rl
                  third column further away than align...?
                  frequency: 0


  'matrix'        at most 10 columns
                  cells centered
                  no fence
                  no colsep at beginning or end
                  (mathtools package add an optional arg for the cell alignment)
                  frequency: COMMON

  'pmatrix'       fence: ()
                  frequency: COMMON

  'bmatrix'       fence: []
                  frequency: COMMON

  'Bmatrix'       fence: {}
                  frequency: 237

  'vmatrix'       fence: \vert
                  frequency: 368

  'Vmatrix'       fence: \Vert
                  frequency: 41

  'smallmatrix'   displaystyle: scriptstyle (?)
                  frequency: 279

  'cases'
                  frequency: COMMON
                  l@{2}l

  'center'        text mode only?
                  frequency: ?
  */
  // See https://en.wikibooks.org/wiki/LaTeX/Mathematics
  // and http://www.ele.uri.edu/faculty/vetter/Other-stuff/latex/Mathmode.pdf
  /*
  The star at the end of the name of a displayed math environment causes that
  the formula lines won't be numbered. Otherwise they would automatically get a number.

  \notag will also turn off the numbering.
  \shoveright and \shoveleft will force alignment of a line

  The only difference between align and equation is the spacing of the formulas.
  You should attempt to use equation when possible, and align when you have multi-line formulas.
  Equation will have space before/after < 1em if line before/after is short enough.

  Also: equation throws an error when you have an & inside the environment,
  so look out for that when converting between the two.



  Whereas align produces a structure whose width is the full line width, aligned
  gives a width that is the actual width of the contents, thus it can be used as
  a component in a containing expression, e.g. for putting the entire alignment
  in a parenthesis
  */
  defineEnvironment('math', '', (name, array, rowGaps) => new ArrayAtom(name, array, rowGaps, { mathStyleName: 'textstyle' }));
  defineEnvironment('displaymath', '', (name, array, rowGaps) => new ArrayAtom(name, array, rowGaps, { mathStyleName: 'textstyle' }));
  defineTabularEnvironment('array', '{columns:colspec}', (name, array, rowGaps, args) => new ArrayAtom(name, array, rowGaps, {
      colFormat: args[0],
      mathStyleName: 'textstyle',
  }));
  defineTabularEnvironment(['equation', 'equation', 'subequations'], '', (name, array, rowGaps) => new ArrayAtom(name, array, rowGaps, {
      colFormat: [{ align: 'c' }],
  }));
  // Note spelling: MULTLINE, not multiline.
  defineTabularEnvironment('multline', '', (name, array, rowGaps) => new ArrayAtom(name, array, rowGaps, {
      colFormat: [{ align: 'm' }],
  }));
  // An AMS-Math environment
  // See amsmath.dtx:3565
  // Note that some versions of AMS-Math have a gap on the left.
  // More recent version suppresses that gap, but have an option to turn it back on
  // for backward compatibility.
  // Note that technically, 'eqnarray' behaves (slightly) differently. However,
  // is is generally recommended to avoid using eqnarray and use align isntead.
  // https://texblog.net/latex-archive/maths/eqnarray-align-environment/
  defineTabularEnvironment(['align', 'align*', 'aligned', 'eqnarray'], '', (name, array, rowGaps) => {
      let colCount = 0;
      for (const row of array) {
          colCount = Math.max(colCount, row.length);
      }
      const colFormat = [
          { gap: 0 },
          { align: 'r' },
          { gap: 0 },
          { align: 'l' },
      ];
      let i = 2;
      while (i < colCount) {
          colFormat.push({ gap: 1 });
          colFormat.push({ align: 'r' });
          colFormat.push({ gap: 0 });
          colFormat.push({ align: 'l' });
          i += 2;
      }
      colFormat.push({ gap: 0 });
      return new ArrayAtom(name, array, rowGaps, {
          arraycolsep: 0,
          colFormat,
          jot: 0.3,
      });
  });
  // DefineEnvironment('alignat', '', function(name, args) {
  //     return {
  //     };
  // });
  // defineEnvironment('flalign', '', function(name, args) {
  //     return {
  //     };
  // });
  defineTabularEnvironment('split', '', (name, array, rowGaps) => new ArrayAtom(name, array, rowGaps, {
      colFormat: [{ align: 'r' }, { align: 'l' }],
  }));
  defineTabularEnvironment(['gather', 'gathered'], '', (name, array, rowGaps) => 
  // An AMS-Math environment
  // %    The \env{gathered} environment is for several lines that are
  // %    centered independently.
  // From amstex.sty
  // \newenvironment{gathered}[1][c]{%
  //   \relax\ifmmode\else\nonmatherr@{\begin{gathered}}\fi
  //   \null\,%
  //   \if #1t\vtop \else \if#1b\vbox \else \vcenter \fi\fi
  //   \bgroup\Let@\restore@math@cr
  //   \ifinany@\else\openup\jot\fi\ialign
  //   \bgroup\hfil\strut@$\m@th\displaystyle##$\hfil\crcr
  new ArrayAtom(name, array, rowGaps, {
      colFormat: [{ gap: 0.25 }, { align: 'c' }, { gap: 0 }],
  }));
  // DefineEnvironment('cardinality', '',  function() {
  //     const result = {};
  //     result.mathstyle = 'textstyle';
  //     result.lFence = '|';
  //     result.rFence = '|';
  //     return result;
  // });
  defineTabularEnvironment([
      'matrix',
      'pmatrix',
      'bmatrix',
      'Bmatrix',
      'vmatrix',
      'Vmatrix',
      'smallmatrix',
      'matrix*',
      'pmatrix*',
      'bmatrix*',
      'Bmatrix*',
      'vmatrix*',
      'Vmatrix*',
      'smallmatrix*',
  ], '[columns:colspec]', (name, array, rowGaps, args) => {
      var _a;
      // From amstex.sty:
      // \def\matrix{\hskip -\arraycolsep\array{*\c@MaxMatrixCols c}}
      // \def\endmatrix{\endarray \hskip -\arraycolsep}
      let leftDelim;
      let rightDelim;
      switch (name) {
          case 'pmatrix':
          case 'pmatrix*':
              leftDelim = '(';
              rightDelim = ')';
              break;
          case 'bmatrix':
          case 'bmatrix*':
              leftDelim = '[';
              rightDelim = ']';
              break;
          case 'Bmatrix':
          case 'Bmatrix*':
              leftDelim = '\\lbrace';
              rightDelim = '\\rbrace';
              break;
          case 'vmatrix':
          case 'vmatrix*':
              leftDelim = '\\vert';
              rightDelim = '\\vert';
              break;
          case 'Vmatrix':
          case 'Vmatrix*':
              leftDelim = '\\Vert';
              rightDelim = '\\Vert';
              break;
          case 'matrix':
          case 'matrix*':
              // Specifying a fence, even a null fence,
              // will prevent the insertion of an initial and final gap
              leftDelim = '.';
              rightDelim = '.';
              break;
      }
      return new ArrayAtom(name, array, rowGaps, {
          mathStyleName: name.startsWith('smallmatrix')
              ? 'scriptstyle'
              : 'textstyle',
          leftDelim,
          rightDelim,
          colFormat: (_a = args[0]) !== null && _a !== void 0 ? _a : [
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
              { align: 'c' },
          ],
      });
  });
  defineTabularEnvironment('cases', '', (name, array, rowGaps) => {
      // From amstex.sty:
      // \def\cases{\left\{\def\arraystretch{1.2}\hskip-\arraycolsep
      //   \array{l@{\quad}l}}
      // \def\endcases{\endarray\hskip-\arraycolsep\right.}
      // From amsmath.dtx
      // \def\env@cases{%
      //   \let\@ifnextchar\new@ifnextchar
      //   \left\lbrace
      //   \def\arraystretch{1.2}%
      //   \array{@{}l@{\quad}l@{}}%
      return new ArrayAtom(name, array, rowGaps, {
          arraystretch: 1.2,
          leftDelim: '\\lbrace',
          rightDelim: '.',
          colFormat: [{ align: 'l' }, { gap: 1 }, { align: 'l' }],
      });
  });
  defineTabularEnvironment('rcases', '', (name, array, rowGaps) => {
      return new ArrayAtom(name, array, rowGaps, {
          arraystretch: 1.2,
          leftDelim: '.',
          rightDelim: '\\rbrace',
          colFormat: [{ align: 'l' }, { gap: 1 }, { align: 'l' }],
      });
  });
  // This is a text mode environment
  /*
  \begin{theorem}
  Let $f$ be a function whose derivative exists in every point, then $f$
  is a continuous function.
  \end{theorem}
  */
  // defineEnvironment('theorem', '', function () {
  //     return {};
  // });
  defineEnvironment('center', '', (name, array, rowGaps) => new ArrayAtom(name, array, rowGaps, { colFormat: [{ align: 'c' }] }));

  // Extensible (horitontally stretchy) symbols
  defineFunction([
      'overrightarrow',
      'overleftarrow',
      'Overrightarrow',
      'overleftharpoon',
      'overrightharpoon',
      'overleftrightarrow',
      'overbrace',
      'overlinesegment',
      'overgroup',
  ], '{:auto}', {
      createAtom: (command, args, style) => new OverunderAtom(command, {
          body: args[0],
          style,
          // Set the "svgAbove" to the name of a SVG object (which is the same
          // as the command name)
          svgAbove: command.slice(1),
      }),
  });
  defineFunction([
      'underrightarrow',
      'underleftarrow',
      'underleftrightarrow',
      'underbrace',
      'underlinesegment',
      'undergroup',
  ], '{:auto}', {
      createAtom: (command, args, style) => new OverunderAtom(command, {
          body: args[0],
          style,
          // Set the "svgBelow" to the name of a SVG object (which is the same
          // as the command name)
          svgBelow: command.slice(1),
      }),
  });
  defineFunction([
      'xrightarrow',
      'xleftarrow',
      'xRightarrow',
      'xLeftarrow',
      'xleftharpoonup',
      'xleftharpoondown',
      'xrightharpoonup',
      'xrightharpoondown',
      'xlongequal',
      'xtwoheadleftarrow',
      'xtwoheadrightarrow',
      'xleftrightarrow',
      'xLeftrightarrow',
      'xrightleftharpoons',
      'xleftrightharpoons',
      'xhookleftarrow',
      'xhookrightarrow',
      'xmapsto',
      'xtofrom',
      'xrightleftarrows',
      'xrightequilibrium',
      'xleftequilibrium',
  ], '[:auto]{:auto}', {
      createAtom: (command, args, style) => {
          var _a;
          return new OverunderAtom(command, {
              style,
              // Set the "svgBody" to the name of a SVG object (which is the same
              // as the command name)
              svgBody: command.slice(1),
              // The overscript is optional, i.e. `\xtofrom` is valid
              above: ((_a = args[1]) === null || _a === void 0 ? void 0 : _a.length) === 0 ? null : args[1],
              below: args[0],
              skipBoundary: false,
              toLatexOverride: (atom, options) => command +
                  (!atom.hasEmptyBranch('below')
                      ? `[${atom.belowToLatex(options)}]`
                      : '') +
                  `{${atom.aboveToLatex(options)}}`,
          });
      },
  });

  /**
   * Operators are handled in the TeXbook pg. 443-444, rule 13(a).
   */
  class OperatorAtom extends Atom {
      constructor(command, symbol, options) {
          var _a;
          super((_a = options.type) !== null && _a !== void 0 ? _a : 'mop', {
              command,
              style: options.style,
              isExtensibleSymbol: options === null || options === void 0 ? void 0 : options.isExtensibleSymbol,
              isFunction: options === null || options === void 0 ? void 0 : options.isFunction,
          });
          if (typeof symbol === 'string') {
              this.value = symbol;
          }
          else {
              this.body = symbol;
          }
          this.captureSelection = options.captureSelection;
          this.variant = options === null || options === void 0 ? void 0 : options.variant;
          this.variantStyle = options === null || options === void 0 ? void 0 : options.variantStyle;
          this.limits = options === null || options === void 0 ? void 0 : options.limits;
      }
      render(context) {
          var _a;
          const { mathstyle } = context;
          let base;
          let baseShift = 0;
          let slant = 0;
          if (this.isExtensibleSymbol) {
              // Most symbol operators get larger in displaystyle (rule 13)
              // except `\smallint`
              const large = mathstyle.size === MATHSTYLES.displaystyle.size &&
                  this.value !== '\\smallint';
              base = makeSymbol(large ? 'Size2-Regular' : 'Size1-Regular', this.value, 'op-symbol ' + (large ? 'large-op' : 'small-op'), 'mop');
              // Shift the symbol so its center lies on the axis (rule 13). It
              // appears that our fonts have the centers of the symbols already
              // almost on the axis, so these numbers are very small. Note we
              // don't actually apply this here, but instead it is used either in
              // the vlist creation or separately when there are no limits.
              baseShift =
                  (base.height - base.depth) / 2 -
                      mathstyle.metrics.axisHeight * mathstyle.sizeMultiplier;
              // The slant of the symbol is just its italic correction.
              slant = base.italic;
              base.applyStyle(this.mode, {
                  color: this.style.color,
                  backgroundColor: this.style.backgroundColor,
              });
          }
          else if (this.body) {
              // If this is a list, decompose that list.
              base = new Span(Atom.render(context, this.body), '', 'mop');
              base.applyStyle(this.mode, {
                  color: this.style.color,
                  backgroundColor: this.style.backgroundColor,
              });
          }
          else {
              // Otherwise, this is a text operator. Build the text from the
              // operator's name.
              console.assert(this.type === 'mop');
              base = this.makeSpan(context, this.value);
              // Not all styles are applied, since the operators have a distinct
              // appearance (for example, can't override their font family)
              base.applyStyle(this.mode, {
                  color: this.style.color,
                  backgroundColor: this.style.backgroundColor,
                  letterShapeStyle: context.letterShapeStyle,
                  variant: this.variant,
                  variantStyle: this.variantStyle,
              });
          }
          if (this.isExtensibleSymbol)
              base.setTop(baseShift);
          let result = base;
          if (this.superscript || this.subscript) {
              const limits = (_a = this.limits) !== null && _a !== void 0 ? _a : 'auto';
              result =
                  limits === 'limits' ||
                      (limits === 'auto' && mathstyle.size === MATHSTYLES.displaystyle.size)
                      ? this.attachLimits(context, base, baseShift, slant)
                      : this.attachSupsub(context, base, 'mop');
          }
          if (this.caret)
              result.caret = this.caret;
          // Bind the generated span with its limits so they
          // can all be selected as one
          this.bind(context, result);
          return [result];
      }
      toLatex(options) {
          let result = '';
          if (this.value !== '\u200B') {
              // Not ZERO-WIDTH
              result +=
                  this.command === '\\mathop' || this.command === '\\operatorname'
                      ? this.command + `{${this.bodyToLatex(options)}}`
                      : this.command;
          }
          result = joinLatex([result, this.supsubToLatex(options)]);
          if (this.explicitLimits) {
              if (this.limits === 'limits')
                  result += '\\limits';
              if (this.limits === 'nolimits')
                  result += '\\nolimits';
          }
          return result;
      }
  }

  class SurdAtom extends Atom {
      constructor(command, options) {
          var _a;
          super('surd', {
              command,
              mode: (_a = options.mode) !== null && _a !== void 0 ? _a : 'math',
              style: options.style,
          });
          this.body = options.body;
          this.above = options.index;
      }
      toLatex(options) {
          let args = '';
          if (this.above) {
              args += `[${this.aboveToLatex(options)}]`;
          }
          args += `{${this.bodyToLatex(options)}}`;
          return this.command + args;
      }
      render(context) {
          var _a;
          // See the TeXbook pg. 443, Rule 11.
          // http://www.ctex.org/documents/shredder/src/texbook.pdf
          const { mathstyle } = context;
          // First, we do the same steps as in overline to build the inner group
          // and line
          const inner = (_a = Atom.render(context.cramp(), this.body)) !== null && _a !== void 0 ? _a : new Span('');
          const ruleWidth = METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
          let phi = ruleWidth;
          if (mathstyle.id < MATHSTYLES.textstyle.id) {
              phi = mathstyle.metrics.xHeight;
          }
          // Calculate the clearance between the body and line
          let lineClearance = ruleWidth + phi / 4;
          const innerTotalHeight = Math.max(2 * phi, (height(inner) + depth(inner)) * mathstyle.sizeMultiplier);
          const minDelimiterHeight = innerTotalHeight + (lineClearance + ruleWidth);
          // Create a \surd delimiter of the required minimum size
          const delim = this.bind(context, new Span(makeCustomSizedDelim('', '\\surd', minDelimiterHeight, false, context), 'sqrt-sign'));
          delim.applyStyle(this.mode, this.style);
          const delimDepth = delim.height + delim.depth - ruleWidth;
          // Adjust the clearance based on the delimiter size
          if (delimDepth > height(inner) + depth(inner) + lineClearance) {
              lineClearance =
                  (lineClearance + delimDepth - (height(inner) + depth(inner))) /
                      2;
          }
          // Shift the delimiter so that its top lines up with the top of the line
          delim.setTop(delim.height - height(inner) - (lineClearance + ruleWidth));
          const line = new Span(null, context.mathstyle.adjustTo(MATHSTYLES.textstyle) + ' sqrt-line');
          line.applyStyle(this.mode, this.style);
          line.height = ruleWidth;
          const body = makeVlist(context, [inner, lineClearance, line, ruleWidth]);
          let className = 'sqrt';
          if (this.containsCaret)
              className += ' ML__contains-caret';
          if (!this.above) {
              const result = new Span([delim, body], className, 'mord');
              if (this.caret)
                  result.caret = this.caret;
              return [this.bind(context, result)];
          }
          // Handle the optional root index
          // The index is always in scriptscript style
          const newcontext = context.clone({
              mathstyle: MATHSTYLES.scriptscriptstyle,
          });
          const root = new Span(Atom.render(newcontext, this.above), mathstyle.adjustTo(MATHSTYLES.scriptscriptstyle));
          // Figure out the height and depth of the inner part
          const innerRootHeight = Math.max(delim.height, body.height);
          const innerRootDepth = Math.max(delim.depth, body.depth);
          // The amount the index is shifted by. This is taken from the TeX
          // source, in the definition of `\r@@t`.
          const toShift = 0.6 * (innerRootHeight - innerRootDepth);
          // Build a VList with the superscript shifted up correctly
          const rootVlist = makeVlist(context, [root], 'shift', -toShift);
          // Add a class surrounding it so we can add on the appropriate
          // kerning
          const result = new Span([new Span(rootVlist, 'root'), delim, body], className, 'mord');
          result.height = delim.height;
          result.depth = delim.depth;
          if (this.caret)
              result.caret = this.caret;
          return [this.bind(context, result)];
      }
  }

  /**
   * Gengrac -- Generalized fraction
   *
   * Decompose fractions, binomials, and in general anything made
   * of two expressions on top of each other, optionally separated by a bar,
   * and optionally surrounded by fences (parentheses, brackets, etc...)
   *
   * Depending on the type of fraction the mathstyle is either
   * display math or inline math (which is indicated by 'textstyle'). This value can
   * also be set to 'auto', which indicates it should use the current mathstyle
   */
  class GenfracAtom extends Atom {
      constructor(command, above, below, options) {
          var _a, _b, _c;
          super('genfrac', {
              style: options.style,
              command,
              toLatexOverride: options.toLatexOverride,
          });
          this.above = above;
          this.below = below;
          this.hasBarLine = (_a = options === null || options === void 0 ? void 0 : options.hasBarLine) !== null && _a !== void 0 ? _a : true;
          this.continuousFraction = (_b = options === null || options === void 0 ? void 0 : options.continuousFraction) !== null && _b !== void 0 ? _b : false;
          this.numerPrefix = options === null || options === void 0 ? void 0 : options.numerPrefix;
          this.denomPrefix = options === null || options === void 0 ? void 0 : options.denomPrefix;
          this.mathStyleName = (_c = options === null || options === void 0 ? void 0 : options.mathStyleName) !== null && _c !== void 0 ? _c : 'auto';
          this.leftDelim = options === null || options === void 0 ? void 0 : options.leftDelim;
          this.rightDelim = options === null || options === void 0 ? void 0 : options.rightDelim;
      }
      toLatex(options) {
          return (this.command +
              `{${this.aboveToLatex(options)}}` +
              `{${this.belowToLatex(options)}}`);
      }
      render(context) {
          const mathstyle = this.mathStyleName === 'auto'
              ? context.mathstyle
              : MATHSTYLES[this.mathStyleName];
          const newContext = context.clone({ mathstyle });
          const style = this.computedStyle;
          let numer = [];
          if (this.numerPrefix) {
              numer.push(new Span(this.numerPrefix, 'mord'));
          }
          const numeratorStyle = this.continuousFraction
              ? mathstyle
              : mathstyle.fracNum();
          numer = numer.concat(Atom.render(newContext.clone({ mathstyle: numeratorStyle }), this.above));
          const numerReset = makeHlist(numer, context.mathstyle.adjustTo(numeratorStyle));
          let denom = [];
          if (this.denomPrefix) {
              denom.push(new Span(this.denomPrefix, 'mord'));
          }
          const denominatorStyle = this.continuousFraction
              ? mathstyle
              : mathstyle.fracDen();
          denom = denom.concat(Atom.render(newContext.clone({ mathstyle: denominatorStyle }), this.below));
          const denomReset = makeHlist(denom, context.mathstyle.adjustTo(denominatorStyle));
          const ruleWidth = !this.hasBarLine
              ? 0
              : METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
          // Rule 15b from TeXBook Appendix G, p.444
          //
          // 15b. If C > T, set u ← σ8 and v ← σ11. Otherwise set u ← σ9 or σ10,according
          // as θ ̸= 0 or θ = 0, and set v ← σ12. (The fraction will be typeset with
          // its numerator shifted up by an amount u with respect to the current
          // baseline, and with the denominator shifted down by v, unless the boxes
          // are unusually large.)
          let numberShift;
          let clearance = 0;
          let denomShift;
          if (mathstyle.size === MATHSTYLES.displaystyle.size) {
              numberShift = mathstyle.metrics.num1; // Set u ← σ8
              clearance =
                  ruleWidth > 0 ? 3 * ruleWidth : 7 * METRICS.defaultRuleThickness;
              denomShift = mathstyle.metrics.denom1; // V ← σ11
          }
          else {
              if (ruleWidth > 0) {
                  numberShift = mathstyle.metrics.num2; // U ← σ9
                  clearance = ruleWidth; //  Φ ← θ
              }
              else {
                  numberShift = mathstyle.metrics.num3; // U ← σ10
                  clearance = 3 * METRICS.defaultRuleThickness; // Φ ← 3 ξ8
              }
              denomShift = mathstyle.metrics.denom2; // V ← σ12
          }
          const numerDepth = depth(numerReset);
          const denomHeight = height(denomReset);
          let frac;
          if (ruleWidth === 0) {
              // Rule 15c from Appendix G
              // No bar line between numerator and denominator
              const candidateClearance = numberShift - numerDepth - (denomHeight - denomShift);
              if (candidateClearance < clearance) {
                  numberShift += 0.5 * (clearance - candidateClearance);
                  denomShift += 0.5 * (clearance - candidateClearance);
              }
              frac = makeVlist(newContext, [numerReset, -numberShift, denomReset, denomShift], 'individualShift');
          }
          else {
              // Rule 15d from Appendix G
              // There is a bar line between the numerator and the denominator
              const { axisHeight } = mathstyle.metrics;
              const numerLine = axisHeight + 0.5 * ruleWidth;
              const denomLine = axisHeight - 0.5 * ruleWidth;
              if (numberShift - numerDepth - numerLine < clearance) {
                  numberShift += clearance - (numberShift - numerDepth - numerLine);
              }
              if (denomLine - (denomHeight - denomShift) < clearance) {
                  denomShift += clearance - (denomLine - (denomHeight - denomShift));
              }
              const mid = new Span(null, ' frac-line');
              mid.applyStyle(this.mode, style);
              // Manually set the height of the line because its height is
              // created in CSS
              mid.height = ruleWidth / 2;
              mid.depth = ruleWidth / 2;
              frac = makeVlist(newContext, [
                  denomReset,
                  denomShift,
                  mid,
                  ruleWidth / 2 - axisHeight,
                  numerReset,
                  -numberShift,
              ], 'individualShift');
          }
          // Add a 'mfrac' class to provide proper context for
          // other css selectors (such as 'frac-line')
          frac.classes += ' mfrac';
          // Since we manually change the style sometimes (with \dfrac or \tfrac),
          // account for the possible size change here.
          frac.height *= mathstyle.sizeMultiplier / context.mathstyle.sizeMultiplier;
          frac.depth *= mathstyle.sizeMultiplier / context.mathstyle.sizeMultiplier;
          // Rule 15e of Appendix G
          const delimSize = mathstyle.size === MATHSTYLES.displaystyle.size
              ? mathstyle.metrics.delim1
              : mathstyle.metrics.delim2;
          // Optional delimiters
          const leftDelim = this.bind(context, makeCustomSizedDelim('mopen', this.leftDelim, delimSize, true, context.clone({ mathstyle })));
          leftDelim.applyStyle(this.mode, style);
          const rightDelim = this.bind(context, makeCustomSizedDelim('mclose', this.rightDelim, delimSize, true, context.clone({ mathstyle })));
          rightDelim.applyStyle(this.mode, style);
          const result = this.bind(context, 
          // MakeStruts(
          new Span([leftDelim, frac, rightDelim], context.parentSize !== context.size
              ? 'sizing reset-' + context.parentSize + ' ' + context.size
              : '', 'mord'
          // )
          ));
          if (this.caret)
              result.caret = this.caret;
          return [this.attachSupsub(context, result, result.type)];
      }
  }

  class DelimAtom extends Atom {
      constructor(command, delim, options) {
          super('delim', { command, style: options === null || options === void 0 ? void 0 : options.style });
          this.value = delim;
          this.size = options === null || options === void 0 ? void 0 : options.size;
      }
      render(_context) {
          const span = new Span(null, '');
          span.delim = this.value;
          return [span];
      }
      toLatex(_options) {
          if (this.value.length === 1) {
              return this.command + this.value;
          }
          return this.command + '{' + this.value + '}';
      }
  }
  class SizedDelimAtom extends Atom {
      constructor(command, delim, options) {
          super('sizeddelim', { command, style: options.style });
          this.value = delim;
          this.delimClass = options.delimClass;
          this.size = options.size;
      }
      render(context) {
          const result = this.bind(context, makeSizedDelim(this.delimClass, this.value, this.size, context));
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
      toLatex(_options) {
          if (this.value.length === 1) {
              return this.command + this.value;
          }
          return this.command + '{' + this.value + '}';
      }
  }

  defineFunction([
      'arccos',
      'arcsin',
      'arctan',
      'arctg',
      'arcctg',
      'arg',
      'ch',
      'cos',
      'cosh',
      'cot',
      'coth',
      'ctg',
      'cth',
      'cotg',
      'csc',
      'cosec',
      'deg',
      'dim',
      'exp',
      'hom',
      'inf',
      'ker',
      'lg',
      'lb',
      'lg',
      // Sometimes used as the log2
      'ln',
      'log',
      'Pr',
      'sec',
      'sh',
      'sin',
      'sinh',
      'sup',
      'tan',
      'tanh',
      'tg',
      'th',
  ], '', {
      isFunction: true,
      createAtom: (command, _args, style) => new OperatorAtom(command, command.slice(1), {
          limits: 'nolimits',
          isExtensibleSymbol: false,
          isFunction: true,
          variant: 'main',
          variantStyle: 'up',
          style,
      }),
  });
  defineFunction(['liminf', 'limsup'], '', {
      createAtom: (command, _args, style) => new OperatorAtom(command, { '\\liminf': 'lim inf', '\\limsup': 'lim sup' }[command], {
          limits: 'limits',
          isExtensibleSymbol: false,
          variant: 'main',
          style,
      }),
  });
  defineFunction(['lim', 'mod'], '', {
      createAtom: (command, _args, style) => new OperatorAtom(command, command.slice(1), {
          limits: 'limits',
          isExtensibleSymbol: false,
          variant: 'main',
          style,
      }),
  });
  // With Limits
  defineFunction(['det', 'max', 'min'], '', {
      isFunction: true,
      createAtom: (command, _args, style) => new OperatorAtom(command, command.slice(1), {
          limits: 'limits',
          isExtensibleSymbol: false,
          isFunction: true,
          variant: 'main',
          style,
      }),
  });
  // Root
  defineFunction('sqrt', '[index:auto]{radicand:auto}', {
      createAtom: (command, args, style) => new SurdAtom(command, {
          body: args[1],
          index: args[0],
          style,
      }),
  });
  // Fractions
  defineFunction(['frac', 'dfrac', 'tfrac', 'cfrac', 'binom', 'dbinom', 'tbinom'], '{numerator}{denominator}', {
      createAtom: (command, args, style) => {
          const options = {
              mathStyleName: 'auto',
              style,
          };
          switch (command) {
              case '\\dfrac':
              case '\\frac':
              case '\\tfrac':
                  options.hasBarLine = true;
                  break;
              case '\\atopfrac':
                  options.hasBarLine = false;
                  break;
              case '\\dbinom':
              case '\\binom':
              case '\\tbinom':
                  options.hasBarLine = false;
                  options.leftDelim = '(';
                  options.rightDelim = ')';
                  break;
          }
          switch (command) {
              case '\\dfrac':
              case '\\dbinom':
                  options.mathStyleName = 'displaystyle';
                  break;
              case '\\tfrac':
              case '\\tbinom':
                  options.mathStyleName = 'textstyle';
                  break;
              case '\\cfrac':
                  options.hasBarLine = true;
                  options.continuousFraction = true;
                  break;
          }
          return new GenfracAtom(command, args[0], args[1], options);
      },
  });
  defineFunction(['over', 'atop', 'choose'], '', {
      infix: true,
      createAtom: (command, args, style) => {
          let leftDelim;
          let rightDelim;
          if (command === '\\choose') {
              leftDelim = '(';
              rightDelim = ')';
          }
          return new GenfracAtom(command, args[0], args[1], {
              hasBarLine: command === '\\over',
              leftDelim,
              rightDelim,
              style,
              toLatexOverride: (atom, options) => `{${atom.aboveToLatex(options)}${atom.command} ${atom.belowToLatex(options)}}`,
          });
      },
  });
  // Slashed package
  /*
  defineFunction('\\slashed'
  */
  defineFunction('pdiff', '{numerator}{denominator}', {
      createAtom: (command, args, style) => new GenfracAtom(command, args[0], args[1], {
          hasBarLine: true,
          numerPrefix: '\u2202',
          denomPrefix: '\u2202',
          style,
      }),
  });
  // Limits, symbols
  defineFunction([
      'sum',
      'prod',
      'bigcup',
      'bigcap',
      'coprod',
      'bigvee',
      'bigwedge',
      'biguplus',
      'bigotimes',
      'bigoplus',
      'bigodot',
      'bigsqcup',
      'smallint',
      'intop',
  ], '', {
      createAtom: (command, args, style) => new OperatorAtom(command, {
          coprod: '\u2210',
          bigvee: '\u22C1',
          bigwedge: '\u22C0',
          biguplus: '\u2A04',
          bigcap: '\u22C2',
          bigcup: '\u22C3',
          intop: '\u222B',
          prod: '\u220F',
          sum: '\u2211',
          bigotimes: '\u2A02',
          bigoplus: '\u2A01',
          bigodot: '\u2A00',
          bigsqcup: '\u2A06',
          smallint: '\u222B',
      }[command.slice(1)], {
          isExtensibleSymbol: true,
          limits: 'auto',
          variant: 'main',
          style,
      }),
  });
  // No limits, symbols (i.e. display larger in 'display' mode, and
  // centered on the baseline)
  const EXTENSIBLE_SYMBOLS = {
      int: '\u222B',
      iint: '\u222C',
      iiint: '\u222D',
      oint: '\u222E',
      oiint: '\u222F',
      oiiint: '\u2230',
      intclockwise: '\u2231',
      varointclockwise: '\u2232',
      ointctrclockwise: '\u2233',
      intctrclockwise: '\u2A11',
      sqcup: '\u2294',
      sqcap: '\u2293',
      uplus: '\u228E',
      wr: '\u2240',
      amalg: '\u2A3F',
      Cap: '\u22D2',
      Cup: '\u22D3',
      doublecap: '\u22D2',
      doublecup: '\u22D3',
  };
  defineFunction(Object.keys(EXTENSIBLE_SYMBOLS), '', {
      createAtom: (command, _args, style) => new OperatorAtom(command, EXTENSIBLE_SYMBOLS[command.slice(1)], {
          limits: 'nolimits',
          isExtensibleSymbol: true,
          style,
          variant: { '\u22D2': 'ams', '\u22D3': 'ams' }[EXTENSIBLE_SYMBOLS[command.slice(1)]],
      }),
  });
  defineFunction(['Re', 'Im'], '', {
      createAtom: (command, _args, style) => new OperatorAtom(command, { '\\Re': '\u211C', '\\Im': '\u2111' }[command], {
          limits: 'nolimits',
          style,
          isExtensibleSymbol: false,
          isFunction: true,
          variant: 'fraktur',
      }),
  });
  defineFunction('middle', '{:delim}', {
      createAtom: (command, args, style) => new DelimAtom(command, args[0], { style }),
  });
  // TODO
  // Some missing greek letters, but see https://reference.wolfram.com/language/tutorial/LettersAndLetterLikeForms.html
  // koppa, stigma, Sampi
  // See https://tex.stackexchange.com/questions/231878/accessing-archaic-greek-koppa-in-the-birkmult-document-class
  // Capital Alpha, etc...
  // Colon (ratio) (2236)
  // Review:
  // https://en.wikipedia.org/wiki/Help:Displaying_a_formula
  // https://reference.wolfram.com/language/tutorial/LettersAndLetterLikeForms.html
  // ftp://ftp.dante.de/tex-archive/info/symbols/comprehensive/symbols-a4.pdf
  // Media Wiki Reference
  // https://en.wikipedia.org/wiki/Help:Displaying_a_formula
  // MathJax Reference
  // http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands
  // http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm
  // LaTeX Reference
  // http://ctan.sharelatex.com/tex-archive/info/latex2e-help-texinfo/latex2e.html
  // iBooks Author/Pages
  // https://support.apple.com/en-au/HT202501
  // Mathematica Reference
  // https://reference.wolfram.com/language/tutorial/NamesOfSymbolsAndMathematicalObjects.html
  // https://reference.wolfram.com/language/guide/MathematicalTypesetting.html
  /*
      * @todo \sb (equivalent to _) $\mathfrak{sl}\sb 2$ frequency 184
      * @todo \sp (equivalent to ^) $\mathfrak{sl}\sp 2$ frequency 274
      * \intertext    frequency 0


      See http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/mathtools/mathtools.pdf

  */

  /* eslint-disable */
  class ChemAtom extends Atom {
      constructor(command, arg) {
          super('chem', { command, mode: 'math' });
          const tex = texify.go(mhchemParser.go(arg, command === '\\pu' ? 'pu' : 'ce'), false);
          this.body = parseLatex(tex);
          this.latex = command + '{' + arg + '}';
          this.captureSelection = true;
      }
      render(context) {
          const span = new Span(Atom.render(context, this.body), '', 'chem');
          if (this.caret)
              span.caret = this.caret;
          // Need to bind the group so that the DOM element can be matched
          // and the atom iterated recursively. Otherwise, it behaves
          // as if `captureSelection === true`
          this.bind(context, span);
          return [span];
      }
      toLatex(_options) {
          return this.latex;
      }
  }
  defineFunction(['ce', 'pu'], '{chemformula:balanced-string}', {
      createAtom: (command, args, style) => new ChemAtom(name, args[0]),
  });
  /*************************************************************
   *
   *  MathJax/extensions/TeX/mhchem.js
   *
   *  Implements the \ce command for handling chemical formulas
   *  from the mhchem LaTeX package.
   *
   *  ---------------------------------------------------------------------
   *
   *  Copyright (c) 2011-2015 The MathJax Consortium
   *  Copyright (c) 2015-2018 Martin Hensel
   *
   *  Licensed under the Apache License, Version 2.0 (the "License");
   *  you may not use this file except in compliance with the License.
   *  You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   *  Unless required by applicable law or agreed to in writing, software
   *  distributed under the License is distributed on an "AS IS" BASIS,
   *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   *  See the License for the specific language governing permissions and
   *  limitations under the License.
   */
  //
  // Core parser for mhchem syntax  (recursive)
  //
  /** @type {MhchemParser} */
  var mhchemParser = {
      //
      // Parses mchem \ce syntax
      //
      // Call like
      //   go("H2O");
      //
      go: function (input, stateMachine) {
          if (!input) {
              return [];
          }
          if (stateMachine === undefined) {
              stateMachine = 'ce';
          }
          var state = '0';
          //
          // String buffers for parsing:
          //
          // buffer.a == amount
          // buffer.o == element
          // buffer.b == left-side superscript
          // buffer.p == left-side subscript
          // buffer.q == right-side subscript
          // buffer.d == right-side superscript
          //
          // buffer.r == arrow
          // buffer.rdt == arrow, script above, type
          // buffer.rd == arrow, script above, content
          // buffer.rqt == arrow, script below, type
          // buffer.rq == arrow, script below, content
          //
          // buffer.text_
          // buffer.rm
          // etc.
          //
          // buffer.parenthesisLevel == int, starting at 0
          // buffer.sb == bool, space before
          // buffer.beginsWithBond == bool
          //
          // These letters are also used as state names.
          //
          // Other states:
          // 0 == begin of main part (arrow/operator unlikely)
          // 1 == next entity
          // 2 == next entity (arrow/operator unlikely)
          // 3 == next atom
          // c == macro
          //
          /** @type {Buffer} */
          var buffer = {};
          buffer['parenthesisLevel'] = 0;
          input = input.replace(/\n/g, ' ');
          input = input.replace(/[\u2212\u2013\u2014\u2010]/g, '-');
          input = input.replace(/[\u2026]/g, '...');
          //
          // Looks through mhchemParser.transitions, to execute a matching action
          // (recursive)
          //
          var lastInput;
          var watchdog = 10;
          /** @type {ParserOutput[]} */
          var output = [];
          while (true) {
              if (lastInput !== input) {
                  watchdog = 10;
                  lastInput = input;
              }
              else {
                  watchdog--;
              }
              //
              // Find actions in transition table
              //
              var machine = mhchemParser.stateMachines[stateMachine];
              var t = machine.transitions[state] || machine.transitions['*'];
              iterateTransitions: for (var i = 0; i < t.length; i++) {
                  var matches = mhchemParser.patterns.match_(t[i].pattern, input);
                  if (matches) {
                      //
                      // Execute actions
                      //
                      var task = t[i].task;
                      for (var iA = 0; iA < task.action_.length; iA++) {
                          var o;
                          //
                          // Find and execute action
                          //
                          if (machine.actions[task.action_[iA].type_]) {
                              o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);
                          }
                          else if (mhchemParser.actions[task.action_[iA].type_]) {
                              o = mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);
                          }
                          else {
                              throw [
                                  'MhchemBugA',
                                  'mhchem bug A. Please report. (' + task.action_[iA].type_ + ')',
                              ]; // Trying to use non-existing action
                          }
                          //
                          // Add output
                          //
                          mhchemParser.concatArray(output, o);
                      }
                      //
                      // Set next state,
                      // Shorten input,
                      // Continue with next character
                      //   (= apply only one transition per position)
                      //
                      state = task.nextState || state;
                      if (input.length > 0) {
                          if (!task.revisit) {
                              input = matches.remainder;
                          }
                          if (!task.toContinue) {
                              break iterateTransitions;
                          }
                      }
                      else {
                          return output;
                      }
                  }
              }
              //
              // Prevent infinite loop
              //
              if (watchdog <= 0) {
                  throw ['MhchemBugU', 'mhchem bug U. Please report.']; // Unexpected character
              }
          }
      },
      concatArray: function (a, b) {
          if (b) {
              if (Array.isArray(b)) {
                  for (var iB = 0; iB < b.length; iB++) {
                      a.push(b[iB]);
                  }
              }
              else {
                  a.push(b);
              }
          }
      },
      patterns: {
          //
          // Matching patterns
          // either regexps or function that return null or {match_:"a", remainder:"bc"}
          //
          patterns: {
              // property names must not look like integers ("2") for correct property traversal order, later on
              'empty': /^$/,
              'else': /^./,
              'else2': /^./,
              'space': /^\s/,
              'space A': /^\s(?=[A-Z\\$])/,
              'space$': /^\s$/,
              'a-z': /^[a-z]/,
              'x': /^x/,
              'x$': /^x$/,
              'i$': /^i$/,
              'letters': /^(?:[a-zA-Z\u03B1-\u03C9\u0391-\u03A9?@]|(?:\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))))+/,
              '\\greek': /^\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\s+|\{\}|(?![a-zA-Z]))/,
              'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,
              '$one lowercase latin letter$ $': /^\$(?:([a-z])(?:$|[^a-zA-Z]))\$$/,
              'one lowercase greek letter $': /^(?:\$?[\u03B1-\u03C9]\$?|\$?\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\s*\$?)(?:\s+|\{\}|(?![a-zA-Z]))$/,
              'digits': /^[0-9]+/,
              '-9.,9': /^[+\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))/,
              '-9.,9 no missing 0': /^[+\-]?[0-9]+(?:[.,][0-9]+)?/,
              '(-)(9.,9)(e)(99)': function (input) {
                  var m = input.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))?(\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+))\))?(?:([eE]|\s*(\*|x|\\times|\u00D7)\s*10\^)([+\-]?[0-9]+|\{[+\-]?[0-9]+\}))?/);
                  if (m && m[0]) {
                      return {
                          match_: m.splice(1),
                          remainder: input.substr(m[0].length),
                      };
                  }
                  return null;
              },
              '(-)(9)^(-9)': function (input) {
                  var m = input.match(/^(\+\-|\+\/\-|\+|\-|\\pm\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\.[0-9]+)?)\^([+\-]?[0-9]+|\{[+\-]?[0-9]+\})/);
                  if (m && m[0]) {
                      return {
                          match_: m.splice(1),
                          remainder: input.substr(m[0].length),
                      };
                  }
                  return null;
              },
              'state of aggregation $': function (input) {
                  // ... or crystal system
                  var a = mhchemParser.patterns.findObserveGroups(input, '', /^\([a-z]{1,3}(?=[\),])/, ')', ''); // (aq), (aq,$\infty$), (aq, sat)
                  if (a && a.remainder.match(/^($|[\s,;\)\]\}])/)) {
                      return a;
                  } //  AND end of 'phrase'
                  var m = input.match(/^(?:\((?:\\ca\s?)?\$[amothc]\$\))/); // OR crystal system ($o$) (\ca$c$)
                  if (m) {
                      return {
                          match_: m[0],
                          remainder: input.substr(m[0].length),
                      };
                  }
                  return null;
              },
              '_{(state of aggregation)}$': /^_\{(\([a-z]{1,3}\))\}/,
              '{[(': /^(?:\\\{|\[|\()/,
              ')]}': /^(?:\)|\]|\\\})/,
              ', ': /^[,;]\s*/,
              ',': /^[,;]/,
              '.': /^[.]/,
              '. ': /^([.\u22C5\u00B7\u2022])\s*/,
              '...': /^\.\.\.(?=$|[^.])/,
              '* ': /^([*])\s*/,
              '^{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '^{', '', '', '}');
              },
              '^($...$)': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '^', '$', '$', '');
              },
              '^a': /^\^([0-9]+|[^\\_])/,
              '^\\x{}{}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '^', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', true);
              },
              '^\\x{}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '^', /^\\[a-zA-Z]+\{/, '}', '');
              },
              '^\\x': /^\^(\\[a-zA-Z]+)\s*/,
              '^(-1)': /^\^(-?\d+)/,
              "'": /^'/,
              '_{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '_{', '', '', '}');
              },
              '_($...$)': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '_', '$', '$', '');
              },
              '_9': /^_([+\-]?[0-9]+|[^\\])/,
              '_\\x{}{}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '_', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', true);
              },
              '_\\x{}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '_', /^\\[a-zA-Z]+\{/, '}', '');
              },
              '_\\x': /^_(\\[a-zA-Z]+)\s*/,
              '^_': /^(?:\^(?=_)|\_(?=\^)|[\^_]$)/,
              '{}': /^\{\}/,
              '{...}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '', '{', '}', '');
              },
              '{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '{', '', '', '}');
              },
              '$...$': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '', '$', '$', '');
              },
              '${(...)}$': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '${', '', '', '}$');
              },
              '$(...)$': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '$', '', '', '$');
              },
              '=<>': /^[=<>]/,
              '#': /^[#\u2261]/,
              '+': /^\+/,
              '-$': /^-(?=[\s_},;\]/]|$|\([a-z]+\))/,
              '-9': /^-(?=[0-9])/,
              '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\s,;\)\]\}]))/,
              '-': /^-/,
              'pm-operator': /^(?:\\pm|\$\\pm\$|\+-|\+\/-)/,
              'operator': /^(?:\+|(?:[\-=<>]|<<|>>|\\approx|\$\\approx\$)(?=\s|$|-?[0-9]))/,
              'arrowUpDown': /^(?:v|\(v\)|\^|\(\^\))(?=$|[\s,;\)\]\}])/,
              '\\bond{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\bond{', '', '', '}');
              },
              '->': /^(?:<->|<-->|->|<-|<=>>|<<=>|<=>|[\u2192\u27F6\u21CC])/,
              'CMT': /^[CMT](?=\[)/,
              '[(...)]': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '[', '', '', ']');
              },
              '1st-level escape': /^(&|\\\\|\\hline)\s*/,
              '\\,': /^(?:\\[,\ ;:])/,
              '\\x{}{}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '', /^\\[a-zA-Z]+\{/, '}', '', '', '{', '}', '', true);
              },
              '\\x{}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '', /^\\[a-zA-Z]+\{/, '}', '');
              },
              '\\ca': /^\\ca(?:\s+|(?![a-zA-Z]))/,
              '\\x': /^(?:\\[a-zA-Z]+\s*|\\[_&{}%])/,
              'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,
              'others': /^[\/~|]/,
              '\\frac{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\frac{', '', '', '}', '{', '', '', '}');
              },
              '\\overset{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\overset{', '', '', '}', '{', '', '', '}');
              },
              '\\underset{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\underset{', '', '', '}', '{', '', '', '}');
              },
              '\\underbrace{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\underbrace{', '', '', '}_', '{', '', '', '}');
              },
              '\\color{(...)}0': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\color{', '', '', '}');
              },
              '\\color{(...)}{(...)}1': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\color{', '', '', '}', '{', '', '', '}');
              },
              '\\color(...){(...)}2': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\color', '\\', '', /^(?=\{)/, '{', '', '', '}');
              },
              '\\ce{(...)}': function (input) {
                  return mhchemParser.patterns.findObserveGroups(input, '\\ce{', '', '', '}');
              },
              'oxidation$': /^(?:[+-][IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
              'd-oxidation$': /^(?:[+-]?\s?[IVX]+|\\pm\s*0|\$\\pm\$\s*0)$/,
              'roman numeral': /^[IVX]+/,
              '1/2$': /^[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+(?:\$[a-z]\$|[a-z])?$/,
              'amount': function (input) {
                  var match;
                  // e.g. 2, 0.5, 1/2, -2, n/2, +;  $a$ could be added later in parsing
                  match = input.match(/^(?:(?:(?:\([+\-]?[0-9]+\/[0-9]+\)|[+\-]?(?:[0-9]+|\$[a-z]\$|[a-z])\/[0-9]+|[+\-]?[0-9]+[.,][0-9]+|[+\-]?\.[0-9]+|[+\-]?[0-9]+)(?:[a-z](?=\s*[A-Z]))?)|[+\-]?[a-z](?=\s*[A-Z])|\+(?!\s))/);
                  if (match) {
                      return {
                          match_: match[0],
                          remainder: input.substr(match[0].length),
                      };
                  }
                  var a = mhchemParser.patterns.findObserveGroups(input, '', '$', '$', '');
                  if (a) {
                      // e.g. $2n-1$, $-$
                      match = a.match_.match(/^\$(?:\(?[+\-]?(?:[0-9]*[a-z]?[+\-])?[0-9]*[a-z](?:[+\-][0-9]*[a-z]?)?\)?|\+|-)\$$/);
                      if (match) {
                          return {
                              match_: match[0],
                              remainder: input.substr(match[0].length),
                          };
                      }
                  }
                  return null;
              },
              'amount2': function (input) {
                  return this['amount'](input);
              },
              '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,
              'formula$': function (input) {
                  if (input.match(/^\([a-z]+\)$/)) {
                      return null;
                  } // state of aggregation = no formula
                  var match = input.match(/^(?:[a-z]|(?:[0-9\ \+\-\,\.\(\)]+[a-z])+[0-9\ \+\-\,\.\(\)]*|(?:[a-z][0-9\ \+\-\,\.\(\)]+)+[a-z]?)$/);
                  if (match) {
                      return {
                          match_: match[0],
                          remainder: input.substr(match[0].length),
                      };
                  }
                  return null;
              },
              'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,
              '/': /^\s*(\/)\s*/,
              '//': /^\s*(\/\/)\s*/,
              '*': /^\s*[*.]\s*/,
          },
          findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {
              /** @type {{(input: string, pattern: string | RegExp): string | string[] | null;}} */
              var _match = function (input, pattern) {
                  if (typeof pattern === 'string') {
                      if (input.indexOf(pattern) !== 0) {
                          return null;
                      }
                      return pattern;
                  }
                  else {
                      var match = input.match(pattern);
                      if (!match) {
                          return null;
                      }
                      return match[0];
                  }
              };
              /** @type {{(input: string, i: number, endChars: string | RegExp): {endMatchBegin: number, endMatchEnd: number} | null;}} */
              var _findObserveGroups = function (input, i, endChars) {
                  var braces = 0;
                  while (i < input.length) {
                      var a = input.charAt(i);
                      var match = _match(input.substr(i), endChars);
                      if (match !== null && braces === 0) {
                          return {
                              endMatchBegin: i,
                              endMatchEnd: i + match.length,
                          };
                      }
                      else if (a === '{') {
                          braces++;
                      }
                      else if (a === '}') {
                          if (braces === 0) {
                              throw [
                                  'ExtraCloseMissingOpen',
                                  'Extra close brace or missing open brace',
                              ];
                          }
                          else {
                              braces--;
                          }
                      }
                      i++;
                  }
                  if (braces > 0) {
                      return null;
                  }
                  return null;
              };
              var match = _match(input, begExcl);
              if (match === null) {
                  return null;
              }
              input = input.substr(match.length);
              match = _match(input, begIncl);
              if (match === null) {
                  return null;
              }
              var e = _findObserveGroups(input, match.length, endIncl || endExcl);
              if (e === null) {
                  return null;
              }
              var match1 = input.substring(0, endIncl ? e.endMatchEnd : e.endMatchBegin);
              if (!(beg2Excl || beg2Incl)) {
                  return {
                      match_: match1,
                      remainder: input.substr(e.endMatchEnd),
                  };
              }
              else {
                  var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);
                  if (group2 === null) {
                      return null;
                  }
                  /** @type {string[]} */
                  var matchRet = [match1, group2.match_];
                  return {
                      match_: combine ? matchRet.join('') : matchRet,
                      remainder: group2.remainder,
                  };
              }
          },
          //
          // Matching function
          // e.g. match("a", input) will look for the regexp called "a" and see if it matches
          // returns null or {match_:"a", remainder:"bc"}
          //
          match_: function (m, input) {
              var pattern = mhchemParser.patterns.patterns[m];
              if (pattern === undefined) {
                  throw ['MhchemBugP', 'mhchem bug P. Please report. (' + m + ')']; // Trying to use non-existing pattern
              }
              else if (typeof pattern === 'function') {
                  return mhchemParser.patterns.patterns[m](input); // cannot use cached var pattern here, because some pattern functions need this===mhchemParser
              }
              else {
                  // RegExp
                  var match = input.match(pattern);
                  if (match) {
                      var mm;
                      if (match[2]) {
                          mm = [match[1], match[2]];
                      }
                      else if (match[1]) {
                          mm = match[1];
                      }
                      else {
                          mm = match[0];
                      }
                      return {
                          match_: mm,
                          remainder: input.substr(match[0].length),
                      };
                  }
                  return null;
              }
          },
      },
      //
      // Generic state machine actions
      //
      actions: {
          'a=': function (buffer, m) {
              buffer.a = (buffer.a || '') + m;
          },
          'b=': function (buffer, m) {
              buffer.b = (buffer.b || '') + m;
          },
          'p=': function (buffer, m) {
              buffer.p = (buffer.p || '') + m;
          },
          'o=': function (buffer, m) {
              buffer.o = (buffer.o || '') + m;
          },
          'q=': function (buffer, m) {
              buffer.q = (buffer.q || '') + m;
          },
          'd=': function (buffer, m) {
              buffer.d = (buffer.d || '') + m;
          },
          'rm=': function (buffer, m) {
              buffer.rm = (buffer.rm || '') + m;
          },
          'text=': function (buffer, m) {
              buffer.text_ = (buffer.text_ || '') + m;
          },
          'insert': function (buffer, m, a) {
              return { type_: a };
          },
          'insert+p1': function (buffer, m, a) {
              return { type_: a, p1: m };
          },
          'insert+p1+p2': function (buffer, m, a) {
              return { type_: a, p1: m[0], p2: m[1] };
          },
          'copy': function (buffer, m) {
              return m;
          },
          'rm': function (buffer, m) {
              return { type_: 'rm', p1: m || '' };
          },
          'text': function (buffer, m) {
              return mhchemParser.go(m, 'text');
          },
          '{text}': function (buffer, m) {
              var ret = ['{'];
              mhchemParser.concatArray(ret, mhchemParser.go(m, 'text'));
              ret.push('}');
              return ret;
          },
          'tex-math': function (buffer, m) {
              return mhchemParser.go(m, 'tex-math');
          },
          'tex-math tight': function (buffer, m) {
              return mhchemParser.go(m, 'tex-math tight');
          },
          'bond': function (buffer, m, k) {
              return { type_: 'bond', kind_: k || m };
          },
          'color0-output': function (buffer, m) {
              return { type_: 'color0', color: m[0] };
          },
          'ce': function (buffer, m) {
              return mhchemParser.go(m);
          },
          '1/2': function (buffer, m) {
              /** @type {ParserOutput[]} */
              var ret = [];
              if (m.match(/^[+\-]/)) {
                  ret.push(m.substr(0, 1));
                  m = m.substr(1);
              }
              var n = m.match(/^([0-9]+|\$[a-z]\$|[a-z])\/([0-9]+)(\$[a-z]\$|[a-z])?$/);
              n[1] = n[1].replace(/\$/g, '');
              ret.push({ type_: 'frac', p1: n[1], p2: n[2] });
              if (n[3]) {
                  n[3] = n[3].replace(/\$/g, '');
                  ret.push({ type_: 'tex-math', p1: n[3] });
              }
              return ret;
          },
          '9,9': function (buffer, m) {
              return mhchemParser.go(m, '9,9');
          },
      },
      //
      // createTransitions
      // convert  { 'letter': { 'state': { action_: 'output' } } }  to  { 'state' => [ { pattern: 'letter', task: { action_: [{type_: 'output'}] } } ] }
      // with expansion of 'a|b' to 'a' and 'b' (at 2 places)
      //
      createTransitions: function (o) {
          var pattern, state;
          /** @type {string[]} */
          var stateArray;
          var i;
          //
          // 1. Collect all states
          //
          /** @type {Transitions} */
          var transitions = {};
          for (pattern in o) {
              for (state in o[pattern]) {
                  stateArray = state.split('|');
                  o[pattern][state].stateArray = stateArray;
                  for (i = 0; i < stateArray.length; i++) {
                      transitions[stateArray[i]] = [];
                  }
              }
          }
          //
          // 2. Fill states
          //
          for (pattern in o) {
              for (state in o[pattern]) {
                  stateArray = o[pattern][state].stateArray || [];
                  for (i = 0; i < stateArray.length; i++) {
                      //
                      // 2a. Normalize actions into array:  'text=' ==> [{type_:'text='}]
                      // (Note to myself: Resolving the function here would be problematic. It would need .bind (for *this*) and currying (for *option*).)
                      //
                      /** @type {any} */
                      var p = o[pattern][state];
                      if (p.action_) {
                          p.action_ = [].concat(p.action_);
                          for (var k = 0; k < p.action_.length; k++) {
                              if (typeof p.action_[k] === 'string') {
                                  p.action_[k] = { type_: p.action_[k] };
                              }
                          }
                      }
                      else {
                          p.action_ = [];
                      }
                      //
                      // 2.b Multi-insert
                      //
                      var patternArray = pattern.split('|');
                      for (var j = 0; j < patternArray.length; j++) {
                          if (stateArray[i] === '*') {
                              // insert into all
                              for (var t in transitions) {
                                  transitions[t].push({
                                      pattern: patternArray[j],
                                      task: p,
                                  });
                              }
                          }
                          else {
                              transitions[stateArray[i]].push({
                                  pattern: patternArray[j],
                                  task: p,
                              });
                          }
                      }
                  }
              }
          }
          return transitions;
      },
      stateMachines: {},
  };
  //
  // Definition of state machines
  //
  mhchemParser.stateMachines = {
      //
      // \ce state machines
      //
      //#region ce
      'ce': {
          // main parser
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': { action_: 'output' },
              },
              'else': {
                  '0|1|2': {
                      action_: 'beginsWithBond=false',
                      revisit: true,
                      toContinue: true,
                  },
              },
              'oxidation$': {
                  '0': { action_: 'oxidation-output' },
              },
              'CMT': {
                  r: { action_: 'rdt=', nextState: 'rt' },
                  rd: { action_: 'rqt=', nextState: 'rdt' },
              },
              'arrowUpDown': {
                  '0|1|2|as': {
                      action_: ['sb=false', 'output', 'operator'],
                      nextState: '1',
                  },
              },
              'uprightEntities': {
                  '0|1|2': { action_: ['o=', 'output'], nextState: '1' },
              },
              'orbital': {
                  '0|1|2|3': { action_: 'o=', nextState: 'o' },
              },
              '->': {
                  '0|1|2|3': { action_: 'r=', nextState: 'r' },
                  'a|as': { action_: ['output', 'r='], nextState: 'r' },
                  '*': { action_: ['output', 'r='], nextState: 'r' },
              },
              '+': {
                  'o': { action_: 'd= kv', nextState: 'd' },
                  'd|D': { action_: 'd=', nextState: 'd' },
                  'q': { action_: 'd=', nextState: 'qd' },
                  'qd|qD': { action_: 'd=', nextState: 'qd' },
                  'dq': { action_: ['output', 'd='], nextState: 'd' },
                  '3': {
                      action_: ['sb=false', 'output', 'operator'],
                      nextState: '0',
                  },
              },
              'amount': {
                  '0|2': { action_: 'a=', nextState: 'a' },
              },
              'pm-operator': {
                  '0|1|2|a|as': {
                      action_: [
                          'sb=false',
                          'output',
                          { type_: 'operator', option: '\\pm' },
                      ],
                      nextState: '0',
                  },
              },
              'operator': {
                  '0|1|2|a|as': {
                      action_: ['sb=false', 'output', 'operator'],
                      nextState: '0',
                  },
              },
              '-$': {
                  'o|q': {
                      action_: ['charge or bond', 'output'],
                      nextState: 'qd',
                  },
                  'd': { action_: 'd=', nextState: 'd' },
                  'D': {
                      action_: ['output', { type_: 'bond', option: '-' }],
                      nextState: '3',
                  },
                  'q': { action_: 'd=', nextState: 'qd' },
                  'qd': { action_: 'd=', nextState: 'qd' },
                  'qD|dq': {
                      action_: ['output', { type_: 'bond', option: '-' }],
                      nextState: '3',
                  },
              },
              '-9': {
                  '3|o': {
                      action_: ['output', { type_: 'insert', option: 'hyphen' }],
                      nextState: '3',
                  },
              },
              '- orbital overlap': {
                  o: {
                      action_: ['output', { type_: 'insert', option: 'hyphen' }],
                      nextState: '2',
                  },
                  d: {
                      action_: ['output', { type_: 'insert', option: 'hyphen' }],
                      nextState: '2',
                  },
              },
              '-': {
                  '0|1|2': {
                      action_: [
                          { type_: 'output', option: 1 },
                          'beginsWithBond=true',
                          { type_: 'bond', option: '-' },
                      ],
                      nextState: '3',
                  },
                  '3': { action_: { type_: 'bond', option: '-' } },
                  'a': {
                      action_: ['output', { type_: 'insert', option: 'hyphen' }],
                      nextState: '2',
                  },
                  'as': {
                      action_: [
                          { type_: 'output', option: 2 },
                          { type_: 'bond', option: '-' },
                      ],
                      nextState: '3',
                  },
                  'b': { action_: 'b=' },
                  'o': {
                      action_: { type_: '- after o/d', option: false },
                      nextState: '2',
                  },
                  'q': {
                      action_: { type_: '- after o/d', option: false },
                      nextState: '2',
                  },
                  'd|qd|dq': {
                      action_: { type_: '- after o/d', option: true },
                      nextState: '2',
                  },
                  'D|qD|p': {
                      action_: ['output', { type_: 'bond', option: '-' }],
                      nextState: '3',
                  },
              },
              'amount2': {
                  '1|3': { action_: 'a=', nextState: 'a' },
              },
              'letters': {
                  '0|1|2|3|a|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },
                  'q|dq': { action_: ['output', 'o='], nextState: 'o' },
                  'd|D|qd|qD': { action_: 'o after d', nextState: 'o' },
              },
              'digits': {
                  'o': { action_: 'q=', nextState: 'q' },
                  'd|D': { action_: 'q=', nextState: 'dq' },
                  'q': { action_: ['output', 'o='], nextState: 'o' },
                  'a': { action_: 'o=', nextState: 'o' },
              },
              'space A': {
                  'b|p|bp': {},
              },
              'space': {
                  'a': { nextState: 'as' },
                  '0': { action_: 'sb=false' },
                  '1|2': { action_: 'sb=true' },
                  'r|rt|rd|rdt|rdq': { action_: 'output', nextState: '0' },
                  '*': { action_: ['output', 'sb=true'], nextState: '1' },
              },
              '1st-level escape': {
                  '1|2': {
                      action_: [
                          'output',
                          { type_: 'insert+p1', option: '1st-level escape' },
                      ],
                  },
                  '*': {
                      action_: [
                          'output',
                          { type_: 'insert+p1', option: '1st-level escape' },
                      ],
                      nextState: '0',
                  },
              },
              '[(...)]': {
                  'r|rt': { action_: 'rd=', nextState: 'rd' },
                  'rd|rdt': { action_: 'rq=', nextState: 'rdq' },
              },
              '...': {
                  'o|d|D|dq|qd|qD': {
                      action_: ['output', { type_: 'bond', option: '...' }],
                      nextState: '3',
                  },
                  '*': {
                      action_: [
                          { type_: 'output', option: 1 },
                          { type_: 'insert', option: 'ellipsis' },
                      ],
                      nextState: '1',
                  },
              },
              '. |* ': {
                  '*': {
                      action_: ['output', { type_: 'insert', option: 'addition compound' }],
                      nextState: '1',
                  },
              },
              'state of aggregation $': {
                  '*': {
                      action_: ['output', 'state of aggregation'],
                      nextState: '1',
                  },
              },
              '{[(': {
                  'a|as|o': {
                      action_: ['o=', 'output', 'parenthesisLevel++'],
                      nextState: '2',
                  },
                  '0|1|2|3': {
                      action_: ['o=', 'output', 'parenthesisLevel++'],
                      nextState: '2',
                  },
                  '*': {
                      action_: ['output', 'o=', 'output', 'parenthesisLevel++'],
                      nextState: '2',
                  },
              },
              ')]}': {
                  '0|1|2|3|b|p|bp|o': {
                      action_: ['o=', 'parenthesisLevel--'],
                      nextState: 'o',
                  },
                  'a|as|d|D|q|qd|qD|dq': {
                      action_: ['output', 'o=', 'parenthesisLevel--'],
                      nextState: 'o',
                  },
              },
              ', ': {
                  '*': { action_: ['output', 'comma'], nextState: '0' },
              },
              '^_': {
                  // ^ and _ without a sensible argument
                  '*': {},
              },
              '^{(...)}|^($...$)': {
                  '0|1|2|as': { action_: 'b=', nextState: 'b' },
                  'p': { action_: 'b=', nextState: 'bp' },
                  '3|o': { action_: 'd= kv', nextState: 'D' },
                  'q': { action_: 'd=', nextState: 'qD' },
                  'd|D|qd|qD|dq': { action_: ['output', 'd='], nextState: 'D' },
              },
              "^a|^\\x{}{}|^\\x{}|^\\x|'": {
                  '0|1|2|as': { action_: 'b=', nextState: 'b' },
                  'p': { action_: 'b=', nextState: 'bp' },
                  '3|o': { action_: 'd= kv', nextState: 'd' },
                  'q': { action_: 'd=', nextState: 'qd' },
                  'd|qd|D|qD': { action_: 'd=' },
                  'dq': { action_: ['output', 'd='], nextState: 'd' },
              },
              '_{(state of aggregation)}$': {
                  'd|D|q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' },
              },
              '_{(...)}|_($...$)|_9|_\\x{}{}|_\\x{}|_\\x': {
                  '0|1|2|as': { action_: 'p=', nextState: 'p' },
                  'b': { action_: 'p=', nextState: 'bp' },
                  '3|o': { action_: 'q=', nextState: 'q' },
                  'd|D': { action_: 'q=', nextState: 'dq' },
                  'q|qd|qD|dq': { action_: ['output', 'q='], nextState: 'q' },
              },
              '=<>': {
                  '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {
                      action_: [{ type_: 'output', option: 2 }, 'bond'],
                      nextState: '3',
                  },
              },
              '#': {
                  '0|1|2|3|a|as|o': {
                      action_: [
                          { type_: 'output', option: 2 },
                          { type_: 'bond', option: '#' },
                      ],
                      nextState: '3',
                  },
              },
              '{}': {
                  '*': {
                      action_: { type_: 'output', option: 1 },
                      nextState: '1',
                  },
              },
              '{...}': {
                  '0|1|2|3|a|as|b|p|bp': { action_: 'o=', nextState: 'o' },
                  'o|d|D|q|qd|qD|dq': {
                      action_: ['output', 'o='],
                      nextState: 'o',
                  },
              },
              '$...$': {
                  'a': { action_: 'a=' },
                  '0|1|2|3|as|b|p|bp|o': { action_: 'o=', nextState: 'o' },
                  'as|o': { action_: 'o=' },
                  'q|d|D|qd|qD|dq': { action_: ['output', 'o='], nextState: 'o' },
              },
              '\\bond{(...)}': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'bond'],
                      nextState: '3',
                  },
              },
              '\\frac{(...)}': {
                  '*': {
                      action_: [{ type_: 'output', option: 1 }, 'frac-output'],
                      nextState: '3',
                  },
              },
              '\\overset{(...)}': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'overset-output'],
                      nextState: '3',
                  },
              },
              '\\underset{(...)}': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'underset-output'],
                      nextState: '3',
                  },
              },
              '\\underbrace{(...)}': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'underbrace-output'],
                      nextState: '3',
                  },
              },
              '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'color-output'],
                      nextState: '3',
                  },
              },
              '\\color{(...)}0': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'color0-output'],
                  },
              },
              '\\ce{(...)}': {
                  '*': {
                      action_: [{ type_: 'output', option: 2 }, 'ce'],
                      nextState: '3',
                  },
              },
              '\\,': {
                  '*': {
                      action_: [{ type_: 'output', option: 1 }, 'copy'],
                      nextState: '1',
                  },
              },
              '\\x{}{}|\\x{}|\\x': {
                  '0|1|2|3|a|as|b|p|bp|o|c0': {
                      action_: ['o=', 'output'],
                      nextState: '3',
                  },
                  '*': { action_: ['output', 'o=', 'output'], nextState: '3' },
              },
              'others': {
                  '*': {
                      action_: [{ type_: 'output', option: 1 }, 'copy'],
                      nextState: '3',
                  },
              },
              'else2': {
                  'a': { action_: 'a to o', nextState: 'o', revisit: true },
                  'as': {
                      action_: ['output', 'sb=true'],
                      nextState: '1',
                      revisit: true,
                  },
                  'r|rt|rd|rdt|rdq': {
                      action_: ['output'],
                      nextState: '0',
                      revisit: true,
                  },
                  '*': { action_: ['output', 'copy'], nextState: '3' },
              },
          }),
          actions: {
              'o after d': function (buffer, m) {
                  var ret;
                  if ((buffer.d || '').match(/^[0-9]+$/)) {
                      var tmp = buffer.d;
                      buffer.d = undefined;
                      ret = this['output'](buffer);
                      buffer.b = tmp;
                  }
                  else {
                      ret = this['output'](buffer);
                  }
                  mhchemParser.actions['o='](buffer, m);
                  return ret;
              },
              'd= kv': function (buffer, m) {
                  buffer.d = m;
                  buffer.dType = 'kv';
              },
              'charge or bond': function (buffer, m) {
                  if (buffer['beginsWithBond']) {
                      /** @type {ParserOutput[]} */
                      var ret = [];
                      mhchemParser.concatArray(ret, this['output'](buffer));
                      mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, '-'));
                      return ret;
                  }
                  else {
                      buffer.d = m;
                  }
              },
              '- after o/d': function (buffer, m, isAfterD) {
                  var c1 = mhchemParser.patterns.match_('orbital', buffer.o || '');
                  var c2 = mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || '');
                  var c3 = mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || '');
                  var c4 = mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || '');
                  var hyphenFollows = m === '-' && ((c1 && c1.remainder === '') || c2 || c3 || c4);
                  if (hyphenFollows &&
                      !buffer.a &&
                      !buffer.b &&
                      !buffer.p &&
                      !buffer.d &&
                      !buffer.q &&
                      !c1 &&
                      c3) {
                      buffer.o = '$' + buffer.o + '$';
                  }
                  /** @type {ParserOutput[]} */
                  var ret = [];
                  if (hyphenFollows) {
                      mhchemParser.concatArray(ret, this['output'](buffer));
                      ret.push({ type_: 'hyphen' });
                  }
                  else {
                      c1 = mhchemParser.patterns.match_('digits', buffer.d || '');
                      if (isAfterD && c1 && c1.remainder === '') {
                          mhchemParser.concatArray(ret, mhchemParser.actions['d='](buffer, m));
                          mhchemParser.concatArray(ret, this['output'](buffer));
                      }
                      else {
                          mhchemParser.concatArray(ret, this['output'](buffer));
                          mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, '-'));
                      }
                  }
                  return ret;
              },
              'a to o': function (buffer) {
                  buffer.o = buffer.a;
                  buffer.a = undefined;
              },
              'sb=true': function (buffer) {
                  buffer.sb = true;
              },
              'sb=false': function (buffer) {
                  buffer.sb = false;
              },
              'beginsWithBond=true': function (buffer) {
                  buffer['beginsWithBond'] = true;
              },
              'beginsWithBond=false': function (buffer) {
                  buffer['beginsWithBond'] = false;
              },
              'parenthesisLevel++': function (buffer) {
                  buffer['parenthesisLevel']++;
              },
              'parenthesisLevel--': function (buffer) {
                  buffer['parenthesisLevel']--;
              },
              'state of aggregation': function (buffer, m) {
                  return {
                      type_: 'state of aggregation',
                      p1: mhchemParser.go(m, 'o'),
                  };
              },
              'comma': function (buffer, m) {
                  var a = m.replace(/\s*$/, '');
                  var withSpace = a !== m;
                  if (withSpace && buffer['parenthesisLevel'] === 0) {
                      return { type_: 'comma enumeration L', p1: a };
                  }
                  else {
                      return { type_: 'comma enumeration M', p1: a };
                  }
              },
              'output': function (buffer, m, entityFollows) {
                  // entityFollows:
                  //   undefined = if we have nothing else to output, also ignore the just read space (buffer.sb)
                  //   1 = an entity follows, never omit the space if there was one just read before (can only apply to state 1)
                  //   2 = 1 + the entity can have an amount, so output a\, instead of converting it to o (can only apply to states a|as)
                  /** @type {ParserOutput | ParserOutput[]} */
                  var ret;
                  if (!buffer.r) {
                      ret = [];
                      if (!buffer.a &&
                          !buffer.b &&
                          !buffer.p &&
                          !buffer.o &&
                          !buffer.q &&
                          !buffer.d &&
                          !entityFollows) ;
                      else {
                          if (buffer.sb) {
                              ret.push({ type_: 'entitySkip' });
                          }
                          if (!buffer.o &&
                              !buffer.q &&
                              !buffer.d &&
                              !buffer.b &&
                              !buffer.p &&
                              entityFollows !== 2) {
                              buffer.o = buffer.a;
                              buffer.a = undefined;
                          }
                          else if (!buffer.o &&
                              !buffer.q &&
                              !buffer.d &&
                              (buffer.b || buffer.p)) {
                              buffer.o = buffer.a;
                              buffer.d = buffer.b;
                              buffer.q = buffer.p;
                              buffer.a = buffer.b = buffer.p = undefined;
                          }
                          else {
                              if (buffer.o &&
                                  buffer.dType === 'kv' &&
                                  mhchemParser.patterns.match_('d-oxidation$', buffer.d || '')) {
                                  buffer.dType = 'oxidation';
                              }
                              else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {
                                  buffer.dType = undefined;
                              }
                          }
                          ret.push({
                              type_: 'chemfive',
                              a: mhchemParser.go(buffer.a, 'a'),
                              b: mhchemParser.go(buffer.b, 'bd'),
                              p: mhchemParser.go(buffer.p, 'pq'),
                              o: mhchemParser.go(buffer.o, 'o'),
                              q: mhchemParser.go(buffer.q, 'pq'),
                              d: mhchemParser.go(buffer.d, buffer.dType === 'oxidation' ? 'oxidation' : 'bd'),
                              dType: buffer.dType,
                          });
                      }
                  }
                  else {
                      // r
                      /** @type {ParserOutput[]} */
                      var rd;
                      if (buffer.rdt === 'M') {
                          rd = mhchemParser.go(buffer.rd, 'tex-math');
                      }
                      else if (buffer.rdt === 'T') {
                          rd = [{ type_: 'text', p1: buffer.rd || '' }];
                      }
                      else {
                          rd = mhchemParser.go(buffer.rd);
                      }
                      /** @type {ParserOutput[]} */
                      var rq;
                      if (buffer.rqt === 'M') {
                          rq = mhchemParser.go(buffer.rq, 'tex-math');
                      }
                      else if (buffer.rqt === 'T') {
                          rq = [{ type_: 'text', p1: buffer.rq || '' }];
                      }
                      else {
                          rq = mhchemParser.go(buffer.rq);
                      }
                      ret = {
                          type_: 'arrow',
                          r: buffer.r,
                          rd: rd,
                          rq: rq,
                      };
                  }
                  for (var p in buffer) {
                      if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {
                          delete buffer[p];
                      }
                  }
                  return ret;
              },
              'oxidation-output': function (buffer, m) {
                  var ret = ['{'];
                  mhchemParser.concatArray(ret, mhchemParser.go(m, 'oxidation'));
                  ret.push('}');
                  return ret;
              },
              'frac-output': function (buffer, m) {
                  return {
                      type_: 'frac-ce',
                      p1: mhchemParser.go(m[0]),
                      p2: mhchemParser.go(m[1]),
                  };
              },
              'overset-output': function (buffer, m) {
                  return {
                      type_: 'overset',
                      p1: mhchemParser.go(m[0]),
                      p2: mhchemParser.go(m[1]),
                  };
              },
              'underset-output': function (buffer, m) {
                  return {
                      type_: 'underset',
                      p1: mhchemParser.go(m[0]),
                      p2: mhchemParser.go(m[1]),
                  };
              },
              'underbrace-output': function (buffer, m) {
                  return {
                      type_: 'underbrace',
                      p1: mhchemParser.go(m[0]),
                      p2: mhchemParser.go(m[1]),
                  };
              },
              'color-output': function (buffer, m) {
                  return {
                      type_: 'color',
                      color1: m[0],
                      color2: mhchemParser.go(m[1]),
                  };
              },
              'r=': function (buffer, m) {
                  buffer.r = m;
              },
              'rdt=': function (buffer, m) {
                  buffer.rdt = m;
              },
              'rd=': function (buffer, m) {
                  buffer.rd = m;
              },
              'rqt=': function (buffer, m) {
                  buffer.rqt = m;
              },
              'rq=': function (buffer, m) {
                  buffer.rq = m;
              },
              'operator': function (buffer, m, p1) {
                  return { type_: 'operator', kind_: p1 || m };
              },
          },
      },
      'a': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': {},
              },
              '1/2$': {
                  '0': { action_: '1/2' },
              },
              'else': {
                  '0': { nextState: '1', revisit: true },
              },
              '$(...)$': {
                  '*': { action_: 'tex-math tight', nextState: '1' },
              },
              ',': {
                  '*': { action_: { type_: 'insert', option: 'commaDecimal' } },
              },
              'else2': {
                  '*': { action_: 'copy' },
              },
          }),
          actions: {},
      },
      'o': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': {},
              },
              '1/2$': {
                  '0': { action_: '1/2' },
              },
              'else': {
                  '0': { nextState: '1', revisit: true },
              },
              'letters': {
                  '*': { action_: 'rm' },
              },
              '\\ca': {
                  '*': { action_: { type_: 'insert', option: 'circa' } },
              },
              '\\x{}{}|\\x{}|\\x': {
                  '*': { action_: 'copy' },
              },
              '${(...)}$|$(...)$': {
                  '*': { action_: 'tex-math' },
              },
              '{(...)}': {
                  '*': { action_: '{text}' },
              },
              'else2': {
                  '*': { action_: 'copy' },
              },
          }),
          actions: {},
      },
      'text': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': { action_: 'output' },
              },
              '{...}': {
                  '*': { action_: 'text=' },
              },
              '${(...)}$|$(...)$': {
                  '*': { action_: 'tex-math' },
              },
              '\\greek': {
                  '*': { action_: ['output', 'rm'] },
              },
              '\\,|\\x{}{}|\\x{}|\\x': {
                  '*': { action_: ['output', 'copy'] },
              },
              'else': {
                  '*': { action_: 'text=' },
              },
          }),
          actions: {
              output: function (buffer) {
                  if (buffer.text_) {
                      /** @type {ParserOutput} */
                      var ret = { type_: 'text', p1: buffer.text_ };
                      for (var p in buffer) {
                          delete buffer[p];
                      }
                      return ret;
                  }
              },
          },
      },
      'pq': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': {},
              },
              'state of aggregation $': {
                  '*': { action_: 'state of aggregation' },
              },
              'i$': {
                  '0': { nextState: '!f', revisit: true },
              },
              '(KV letters),': {
                  '0': { action_: 'rm', nextState: '0' },
              },
              'formula$': {
                  '0': { nextState: 'f', revisit: true },
              },
              '1/2$': {
                  '0': { action_: '1/2' },
              },
              'else': {
                  '0': { nextState: '!f', revisit: true },
              },
              '${(...)}$|$(...)$': {
                  '*': { action_: 'tex-math' },
              },
              '{(...)}': {
                  '*': { action_: 'text' },
              },
              'a-z': {
                  f: { action_: 'tex-math' },
              },
              'letters': {
                  '*': { action_: 'rm' },
              },
              '-9.,9': {
                  '*': { action_: '9,9' },
              },
              ',': {
                  '*': {
                      action_: {
                          type_: 'insert+p1',
                          option: 'comma enumeration S',
                      },
                  },
              },
              '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                  '*': { action_: 'color-output' },
              },
              '\\color{(...)}0': {
                  '*': { action_: 'color0-output' },
              },
              '\\ce{(...)}': {
                  '*': { action_: 'ce' },
              },
              '\\,|\\x{}{}|\\x{}|\\x': {
                  '*': { action_: 'copy' },
              },
              'else2': {
                  '*': { action_: 'copy' },
              },
          }),
          actions: {
              'state of aggregation': function (buffer, m) {
                  return {
                      type_: 'state of aggregation subscript',
                      p1: mhchemParser.go(m, 'o'),
                  };
              },
              'color-output': function (buffer, m) {
                  return {
                      type_: 'color',
                      color1: m[0],
                      color2: mhchemParser.go(m[1], 'pq'),
                  };
              },
          },
      },
      'bd': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': {},
              },
              'x$': {
                  '0': { nextState: '!f', revisit: true },
              },
              'formula$': {
                  '0': { nextState: 'f', revisit: true },
              },
              'else': {
                  '0': { nextState: '!f', revisit: true },
              },
              '-9.,9 no missing 0': {
                  '*': { action_: '9,9' },
              },
              '.': {
                  '*': { action_: { type_: 'insert', option: 'electron dot' } },
              },
              'a-z': {
                  f: { action_: 'tex-math' },
              },
              'x': {
                  '*': { action_: { type_: 'insert', option: 'KV x' } },
              },
              'letters': {
                  '*': { action_: 'rm' },
              },
              "'": {
                  '*': { action_: { type_: 'insert', option: 'prime' } },
              },
              '${(...)}$|$(...)$': {
                  '*': { action_: 'tex-math' },
              },
              '{(...)}': {
                  '*': { action_: 'text' },
              },
              '\\color{(...)}{(...)}1|\\color(...){(...)}2': {
                  '*': { action_: 'color-output' },
              },
              '\\color{(...)}0': {
                  '*': { action_: 'color0-output' },
              },
              '\\ce{(...)}': {
                  '*': { action_: 'ce' },
              },
              '\\,|\\x{}{}|\\x{}|\\x': {
                  '*': { action_: 'copy' },
              },
              'else2': {
                  '*': { action_: 'copy' },
              },
          }),
          actions: {
              'color-output': function (buffer, m) {
                  return {
                      type_: 'color',
                      color1: m[0],
                      color2: mhchemParser.go(m[1], 'bd'),
                  };
              },
          },
      },
      'oxidation': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': {},
              },
              'roman numeral': {
                  '*': { action_: 'roman-numeral' },
              },
              '${(...)}$|$(...)$': {
                  '*': { action_: 'tex-math' },
              },
              'else': {
                  '*': { action_: 'copy' },
              },
          }),
          actions: {
              'roman-numeral': function (buffer, m) {
                  return { type_: 'roman numeral', p1: m || '' };
              },
          },
      },
      'tex-math': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': { action_: 'output' },
              },
              '\\ce{(...)}': {
                  '*': { action_: ['output', 'ce'] },
              },
              '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                  '*': { action_: 'o=' },
              },
              'else': {
                  '*': { action_: 'o=' },
              },
          }),
          actions: {
              output: function (buffer) {
                  if (buffer.o) {
                      /** @type {ParserOutput} */
                      var ret = { type_: 'tex-math', p1: buffer.o };
                      for (var p in buffer) {
                          delete buffer[p];
                      }
                      return ret;
                  }
              },
          },
      },
      'tex-math tight': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': { action_: 'output' },
              },
              '\\ce{(...)}': {
                  '*': { action_: ['output', 'ce'] },
              },
              '{...}|\\,|\\x{}{}|\\x{}|\\x': {
                  '*': { action_: 'o=' },
              },
              '-|+': {
                  '*': { action_: 'tight operator' },
              },
              'else': {
                  '*': { action_: 'o=' },
              },
          }),
          actions: {
              'tight operator': function (buffer, m) {
                  buffer.o = (buffer.o || '') + '{' + m + '}';
              },
              'output': function (buffer) {
                  if (buffer.o) {
                      /** @type {ParserOutput} */
                      var ret = { type_: 'tex-math', p1: buffer.o };
                      for (var p in buffer) {
                          delete buffer[p];
                      }
                      return ret;
                  }
              },
          },
      },
      '9,9': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': {},
              },
              ',': {
                  '*': { action_: 'comma' },
              },
              'else': {
                  '*': { action_: 'copy' },
              },
          }),
          actions: {
              comma: function () {
                  return { type_: 'commaDecimal' };
              },
          },
      },
      //#endregion
      //
      // \pu state machines
      //
      //#region pu
      'pu': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': { action_: 'output' },
              },
              'space$': {
                  '*': { action_: ['output', 'space'] },
              },
              '{[(|)]}': {
                  '0|a': { action_: 'copy' },
              },
              '(-)(9)^(-9)': {
                  '0': { action_: 'number^', nextState: 'a' },
              },
              '(-)(9.,9)(e)(99)': {
                  '0': { action_: 'enumber', nextState: 'a' },
              },
              'space': {
                  '0|a': {},
              },
              'pm-operator': {
                  '0|a': {
                      action_: { type_: 'operator', option: '\\pm' },
                      nextState: '0',
                  },
              },
              'operator': {
                  '0|a': { action_: 'copy', nextState: '0' },
              },
              '//': {
                  d: { action_: 'o=', nextState: '/' },
              },
              '/': {
                  d: { action_: 'o=', nextState: '/' },
              },
              '{...}|else': {
                  '0|d': { action_: 'd=', nextState: 'd' },
                  'a': { action_: ['space', 'd='], nextState: 'd' },
                  '/|q': { action_: 'q=', nextState: 'q' },
              },
          }),
          actions: {
              'enumber': function (buffer, m) {
                  /** @type {ParserOutput[]} */
                  var ret = [];
                  if (m[0] === '+-' || m[0] === '+/-') {
                      ret.push('\\pm ');
                  }
                  else if (m[0]) {
                      ret.push(m[0]);
                  }
                  if (m[1]) {
                      mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));
                      if (m[2]) {
                          if (m[2].match(/[,.]/)) {
                              mhchemParser.concatArray(ret, mhchemParser.go(m[2], 'pu-9,9'));
                          }
                          else {
                              ret.push(m[2]);
                          }
                      }
                      m[3] = m[4] || m[3];
                      if (m[3]) {
                          m[3] = m[3].trim();
                          if (m[3] === 'e' || m[3].substr(0, 1) === '*') {
                              ret.push({ type_: 'cdot' });
                          }
                          else {
                              ret.push({ type_: 'times' });
                          }
                      }
                  }
                  if (m[3]) {
                      ret.push('10^{' + m[5] + '}');
                  }
                  return ret;
              },
              'number^': function (buffer, m) {
                  /** @type {ParserOutput[]} */
                  var ret = [];
                  if (m[0] === '+-' || m[0] === '+/-') {
                      ret.push('\\pm ');
                  }
                  else if (m[0]) {
                      ret.push(m[0]);
                  }
                  mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));
                  ret.push('^{' + m[2] + '}');
                  return ret;
              },
              'operator': function (buffer, m, p1) {
                  return { type_: 'operator', kind_: p1 || m };
              },
              'space': function () {
                  return { type_: 'pu-space-1' };
              },
              'output': function (buffer) {
                  /** @type {ParserOutput | ParserOutput[]} */
                  var ret;
                  var md = mhchemParser.patterns.match_('{(...)}', buffer.d || '');
                  if (md && md.remainder === '') {
                      buffer.d = md.match_;
                  }
                  var mq = mhchemParser.patterns.match_('{(...)}', buffer.q || '');
                  if (mq && mq.remainder === '') {
                      buffer.q = mq.match_;
                  }
                  if (buffer.d) {
                      buffer.d = buffer.d.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C');
                      buffer.d = buffer.d.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F');
                  }
                  if (buffer.q) {
                      // fraction
                      buffer.q = buffer.q.replace(/\u00B0C|\^oC|\^{o}C/g, '{}^{\\circ}C');
                      buffer.q = buffer.q.replace(/\u00B0F|\^oF|\^{o}F/g, '{}^{\\circ}F');
                      var b5 = {
                          d: mhchemParser.go(buffer.d, 'pu'),
                          q: mhchemParser.go(buffer.q, 'pu'),
                      };
                      if (buffer.o === '//') {
                          ret = { type_: 'pu-frac', p1: b5.d, p2: b5.q };
                      }
                      else {
                          ret = b5.d;
                          if (b5.d.length > 1 || b5.q.length > 1) {
                              ret.push({ type_: ' / ' });
                          }
                          else {
                              ret.push({ type_: '/' });
                          }
                          mhchemParser.concatArray(ret, b5.q);
                      }
                  }
                  else {
                      // no fraction
                      ret = mhchemParser.go(buffer.d, 'pu-2');
                  }
                  for (var p in buffer) {
                      delete buffer[p];
                  }
                  return ret;
              },
          },
      },
      'pu-2': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '*': { action_: 'output' },
              },
              '*': {
                  '*': { action_: ['output', 'cdot'], nextState: '0' },
              },
              '\\x': {
                  '*': { action_: 'rm=' },
              },
              'space': {
                  '*': { action_: ['output', 'space'], nextState: '0' },
              },
              '^{(...)}|^(-1)': {
                  '1': { action_: '^(-1)' },
              },
              '-9.,9': {
                  '0': { action_: 'rm=', nextState: '0' },
                  '1': { action_: '^(-1)', nextState: '0' },
              },
              '{...}|else': {
                  '*': { action_: 'rm=', nextState: '1' },
              },
          }),
          actions: {
              'cdot': function () {
                  return { type_: 'tight cdot' };
              },
              '^(-1)': function (buffer, m) {
                  buffer.rm += '^{' + m + '}';
              },
              'space': function () {
                  return { type_: 'pu-space-2' };
              },
              'output': function (buffer) {
                  /** @type {ParserOutput | ParserOutput[]} */
                  var ret = [];
                  if (buffer.rm) {
                      var mrm = mhchemParser.patterns.match_('{(...)}', buffer.rm || '');
                      if (mrm && mrm.remainder === '') {
                          ret = mhchemParser.go(mrm.match_, 'pu');
                      }
                      else {
                          ret = { type_: 'rm', p1: buffer.rm };
                      }
                  }
                  for (var p in buffer) {
                      delete buffer[p];
                  }
                  return ret;
              },
          },
      },
      'pu-9,9': {
          transitions: mhchemParser.createTransitions({
              'empty': {
                  '0': { action_: 'output-0' },
                  'o': { action_: 'output-o' },
              },
              ',': {
                  '0': { action_: ['output-0', 'comma'], nextState: 'o' },
              },
              '.': {
                  '0': { action_: ['output-0', 'copy'], nextState: 'o' },
              },
              'else': {
                  '*': { action_: 'text=' },
              },
          }),
          actions: {
              'comma': function () {
                  return { type_: 'commaDecimal' };
              },
              'output-0': function (buffer) {
                  /** @type {ParserOutput[]} */
                  var ret = [];
                  buffer.text_ = buffer.text_ || '';
                  if (buffer.text_.length > 4) {
                      var a = buffer.text_.length % 3;
                      if (a === 0) {
                          a = 3;
                      }
                      for (var i = buffer.text_.length - 3; i > 0; i -= 3) {
                          ret.push(buffer.text_.substr(i, 3));
                          ret.push({ type_: '1000 separator' });
                      }
                      ret.push(buffer.text_.substr(0, a));
                      ret.reverse();
                  }
                  else {
                      ret.push(buffer.text_);
                  }
                  for (var p in buffer) {
                      delete buffer[p];
                  }
                  return ret;
              },
              'output-o': function (buffer) {
                  /** @type {ParserOutput[]} */
                  var ret = [];
                  buffer.text_ = buffer.text_ || '';
                  if (buffer.text_.length > 4) {
                      var a = buffer.text_.length - 3;
                      for (var i = 0; i < a; i += 3) {
                          ret.push(buffer.text_.substr(i, 3));
                          ret.push({ type_: '1000 separator' });
                      }
                      ret.push(buffer.text_.substr(i));
                  }
                  else {
                      ret.push(buffer.text_);
                  }
                  for (var p in buffer) {
                      delete buffer[p];
                  }
                  return ret;
              },
          },
      },
  };
  //
  // texify: Take MhchemParser output and convert it to TeX
  //
  /** @type {Texify} */
  var texify = {
      go: function (input, isInner) {
          // (recursive, max 4 levels)
          if (!input) {
              return '';
          }
          var res = '';
          var cee = false;
          for (var i = 0; i < input.length; i++) {
              var inputi = input[i];
              if (typeof inputi === 'string') {
                  res += inputi;
              }
              else {
                  res += texify._go2(inputi);
                  if (inputi.type_ === '1st-level escape') {
                      cee = true;
                  }
              }
          }
          if (!isInner && !cee && res) {
              res = '{' + res + '}';
          }
          return res;
      },
      _goInner: function (input) {
          if (!input) {
              return input;
          }
          return texify.go(input, true);
      },
      _go2: function (buf) {
          /** @type {undefined | string} */
          var res;
          switch (buf.type_) {
              case 'chemfive':
                  res = '';
                  var b5 = {
                      a: texify._goInner(buf.a),
                      b: texify._goInner(buf.b),
                      p: texify._goInner(buf.p),
                      o: texify._goInner(buf.o),
                      q: texify._goInner(buf.q),
                      d: texify._goInner(buf.d),
                  };
                  //
                  // a
                  //
                  if (b5.a) {
                      if (b5.a.match(/^[+\-]/)) {
                          b5.a = '{' + b5.a + '}';
                      }
                      res += b5.a + '\\,';
                  }
                  //
                  // b and p
                  //
                  if (b5.b || b5.p) {
                      res += '{\\vphantom{X}}';
                      res +=
                          '^{\\hphantom{' +
                              (b5.b || '') +
                              '}}_{\\hphantom{' +
                              (b5.p || '') +
                              '}}';
                      res += '{\\vphantom{X}}';
                      res += '^{\\smash[t]{\\vphantom{2}}\\mathllap{' + (b5.b || '') + '}}';
                      res += '_{\\vphantom{2}\\mathllap{\\smash[t]{' + (b5.p || '') + '}}}';
                  }
                  //
                  // o
                  //
                  if (b5.o) {
                      if (b5.o.match(/^[+\-]/)) {
                          b5.o = '{' + b5.o + '}';
                      }
                      res += b5.o;
                  }
                  //
                  // q and d
                  //
                  if (buf.dType === 'kv') {
                      if (b5.d || b5.q) {
                          res += '{\\vphantom{X}}';
                      }
                      if (b5.d) {
                          res += '^{' + b5.d + '}';
                      }
                      if (b5.q) {
                          res += '_{\\smash[t]{' + b5.q + '}}';
                      }
                  }
                  else if (buf.dType === 'oxidation') {
                      if (b5.d) {
                          res += '{\\vphantom{X}}';
                          res += '^{' + b5.d + '}';
                      }
                      if (b5.q) {
                          res += '{\\vphantom{X}}';
                          res += '_{\\smash[t]{' + b5.q + '}}';
                      }
                  }
                  else {
                      if (b5.q) {
                          res += '{\\vphantom{X}}';
                          res += '_{\\smash[t]{' + b5.q + '}}';
                      }
                      if (b5.d) {
                          res += '{\\vphantom{X}}';
                          res += '^{' + b5.d + '}';
                      }
                  }
                  break;
              case 'rm':
                  res = '\\mathrm{' + buf.p1 + '}';
                  break;
              case 'text':
                  if (buf.p1.match(/[\^_]/)) {
                      buf.p1 = buf.p1.replace(' ', '~').replace('-', '\\text{-}');
                      res = '\\mathrm{' + buf.p1 + '}';
                  }
                  else {
                      res = '\\text{' + buf.p1 + '}';
                  }
                  break;
              case 'roman numeral':
                  res = '\\mathrm{' + buf.p1 + '}';
                  break;
              case 'state of aggregation':
                  res = '\\mskip2mu ' + texify._goInner(buf.p1);
                  break;
              case 'state of aggregation subscript':
                  res = '\\mskip1mu ' + texify._goInner(buf.p1);
                  break;
              case 'bond':
                  res = texify._getBond(buf.kind_);
                  if (!res) {
                      throw [
                          'MhchemErrorBond',
                          'mhchem Error. Unknown bond type (' + buf.kind_ + ')',
                      ];
                  }
                  break;
              case 'frac':
                  var c = '\\frac{' + buf.p1 + '}{' + buf.p2 + '}';
                  res =
                      '\\mathchoice{\\textstyle' + c + '}{' + c + '}{' + c + '}{' + c + '}';
                  break;
              case 'pu-frac':
                  var d = '\\frac{' +
                      texify._goInner(buf.p1) +
                      '}{' +
                      texify._goInner(buf.p2) +
                      '}';
                  res =
                      '\\mathchoice{\\textstyle' + d + '}{' + d + '}{' + d + '}{' + d + '}';
                  break;
              case 'tex-math':
                  res = buf.p1 + ' ';
                  break;
              case 'frac-ce':
                  res =
                      '\\frac{' +
                          texify._goInner(buf.p1) +
                          '}{' +
                          texify._goInner(buf.p2) +
                          '}';
                  break;
              case 'overset':
                  res =
                      '\\overset{' +
                          texify._goInner(buf.p1) +
                          '}{' +
                          texify._goInner(buf.p2) +
                          '}';
                  break;
              case 'underset':
                  res =
                      '\\underset{' +
                          texify._goInner(buf.p1) +
                          '}{' +
                          texify._goInner(buf.p2) +
                          '}';
                  break;
              case 'underbrace':
                  res =
                      '\\underbrace{' +
                          texify._goInner(buf.p1) +
                          '}_{' +
                          texify._goInner(buf.p2) +
                          '}';
                  break;
              case 'color':
                  res =
                      '{\\color{' + buf.color1 + '}{' + texify._goInner(buf.color2) + '}}';
                  break;
              case 'color0':
                  res = '\\color{' + buf.color + '}';
                  break;
              case 'arrow':
                  var b6 = {
                      rd: texify._goInner(buf.rd),
                      rq: texify._goInner(buf.rq),
                  };
                  var arrow = '\\x' + texify._getArrow(buf.r);
                  if (b6.rq) {
                      arrow += '[{' + b6.rq + '}]';
                  }
                  if (b6.rd) {
                      arrow += '{' + b6.rd + '}';
                  }
                  else {
                      arrow += '{}';
                  }
                  res = arrow;
                  break;
              case 'operator':
                  res = texify._getOperator(buf.kind_);
                  break;
              case '1st-level escape':
                  res = buf.p1 + ' '; // &, \\\\, \\hlin
                  break;
              case 'space':
                  res = ' ';
                  break;
              case 'entitySkip':
                  res = '~';
                  break;
              case 'pu-space-1':
                  res = '~';
                  break;
              case 'pu-space-2':
                  res = '\\mkern3mu ';
                  break;
              case '1000 separator':
                  res = '\\mkern2mu ';
                  break;
              case 'commaDecimal':
                  res = '{,}';
                  break;
              case 'comma enumeration L':
                  res = '{' + buf.p1 + '}\\mkern6mu ';
                  break;
              case 'comma enumeration M':
                  res = '{' + buf.p1 + '}\\mkern3mu ';
                  break;
              case 'comma enumeration S':
                  res = '{' + buf.p1 + '}\\mkern1mu ';
                  break;
              case 'hyphen':
                  res = '\\text{-}';
                  break;
              case 'addition compound':
                  res = '\\,{\\cdot}\\,';
                  break;
              case 'electron dot':
                  res = '\\mkern1mu \\bullet\\mkern1mu ';
                  break;
              case 'KV x':
                  res = '{\\times}';
                  break;
              case 'prime':
                  res = '\\prime ';
                  break;
              case 'cdot':
                  res = '\\cdot ';
                  break;
              case 'tight cdot':
                  res = '\\mkern1mu{\\cdot}\\mkern1mu ';
                  break;
              case 'times':
                  res = '\\times ';
                  break;
              case 'circa':
                  res = '{\\sim}';
                  break;
              case '^':
                  res = 'uparrow';
                  break;
              case 'v':
                  res = 'downarrow';
                  break;
              case 'ellipsis':
                  res = '\\ldots ';
                  break;
              case '/':
                  res = '/';
                  break;
              case ' / ':
                  res = '\\,/\\,';
                  break;
              default:
                  throw ['MhchemBugT', 'mhchem bug T. Please report.']; // Missing texify rule or unknown MhchemParser output
          }
          return res;
      },
      _getArrow: function (a) {
          switch (a) {
              case '->':
                  return 'rightarrow';
              case '\u2192':
                  return 'rightarrow';
              case '\u27F6':
                  return 'rightarrow';
              case '<-':
                  return 'leftarrow';
              case '<->':
                  return 'leftrightarrow';
              case '<-->':
                  return 'rightleftarrows';
              case '<=>':
                  return 'rightleftharpoons';
              case '\u21CC':
                  return 'rightleftharpoons';
              case '<=>>':
                  return 'rightequilibrium';
              case '<<=>':
                  return 'leftequilibrium';
              default:
                  throw ['MhchemBugT', 'mhchem bug T. Please report.'];
          }
      },
      _getBond: function (a) {
          switch (a) {
              case '-':
                  return '{-}';
              case '1':
                  return '{-}';
              case '=':
                  return '{=}';
              case '2':
                  return '{=}';
              case '#':
                  return '{\\equiv}';
              case '3':
                  return '{\\equiv}';
              case '~':
                  return '{\\tripledash}';
              case '~-':
                  return '{\\mathrlap{\\raisebox{-.1em}{$-$}}\\raisebox{.1em}{$\\tripledash$}}';
              case '~=':
                  return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$\\tripledash$}}-}';
              case '~--':
                  return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$\\tripledash$}}-}';
              case '-~-':
                  return '{\\mathrlap{\\raisebox{-.2em}{$-$}}\\mathrlap{\\raisebox{.2em}{$-$}}\\tripledash}';
              case '...':
                  return '{{\\cdot}{\\cdot}{\\cdot}}';
              case '....':
                  return '{{\\cdot}{\\cdot}{\\cdot}{\\cdot}}';
              case '->':
                  return '{\\rightarrow}';
              case '<-':
                  return '{\\leftarrow}';
              case '<':
                  return '{<}';
              case '>':
                  return '{>}';
              default:
                  throw ['MhchemBugT', 'mhchem bug T. Please report.'];
          }
      },
      _getOperator: function (a) {
          switch (a) {
              case '+':
                  return ' {}+{} ';
              case '-':
                  return ' {}-{} ';
              case '=':
                  return ' {}={} ';
              case '<':
                  return ' {}<{} ';
              case '>':
                  return ' {}>{} ';
              case '<<':
                  return ' {}\\ll{} ';
              case '>>':
                  return ' {}\\gg{} ';
              case '\\pm':
                  return ' {}\\pm{} ';
              case '\\approx':
                  return ' {}\\approx{} ';
              case '$\\approx$':
                  return ' {}\\approx{} ';
              case 'v':
                  return ' \\downarrow{} ';
              case '(v)':
                  return ' \\downarrow{} ';
              case '^':
                  return ' \\uparrow{} ';
              case '(^)':
                  return ' \\uparrow{} ';
              default:
                  throw ['MhchemBugT', 'mhchem bug T. Please report.'];
          }
      },
  };

  class BoxAtom extends Atom {
      constructor(command, body, options) {
          super('box', {
              command,
              toLatexOverride: options.toLatexOverride,
              style: options.style,
          });
          this.body = body;
          this.framecolor = options.framecolor;
          this.verbatimFramecolor = options.verbatimBackgroundcolor;
          this.backgroundcolor = options.backgroundcolor;
          this.verbatimBackgroundcolor = options.verbatimBackgroundcolor;
          this.padding = options.padding;
          this.border = options.border;
      }
      render(context) {
          // The padding extends outside of the base
          const padding = typeof this.padding === 'number' ? this.padding : METRICS.fboxsep;
          // Base is the main content "inside" the box
          const content = new Span(Atom.render(context, this.body), '', 'mord');
          content.setStyle('vertical-align', -depth(content), 'em');
          content.setStyle('height', 0);
          const base = new Span(content, '', 'mord');
          // This span will represent the box (background and border)
          // It's positioned to overlap the base
          // The 'ML__box' class is required to prevent the span from being omitted
          // during rendering (it looks like an empty, no-op span)
          const box = new Span('', 'ML__box');
          box.setStyle('position', 'absolute');
          box.setStyle('height', height(base) + depth(base) + 2 * padding, 'em');
          if (padding === 0) {
              box.setStyle('width', '100%');
          }
          else {
              box.setStyle('width', `calc(100% + ${2 * padding}em)`);
          }
          box.setStyle('top', -2 * padding, 'em');
          box.setStyle('left', -padding, 'em');
          box.setStyle('z-index', '-1'); // Ensure the box is *behind* the base
          box.setStyle('box-sizing', 'border-box');
          if (this.backgroundcolor) {
              box.setStyle('background-color', this.backgroundcolor);
          }
          if (this.framecolor) {
              box.setStyle('border', `${METRICS.fboxrule} em solid ${this.framecolor}`);
          }
          if (this.border)
              box.setStyle('border', this.border);
          base.setStyle('display', 'inline-block');
          base.setStyle('height', height(base) + depth(base), 'em');
          // The result is a span that encloses the box and the base
          const result = new Span([box, base]);
          // Set its position as relative so that the box can be absolute positioned
          // over the base
          result.setStyle('position', 'relative');
          result.setStyle('vertical-align', -padding + depth(base), 'em');
          // The padding adds to the width and height of the pod
          result.height = height(base) + padding;
          result.depth = depth(base) + padding;
          result.left = padding;
          result.right = padding;
          result.setStyle('height', result.height + result.depth - 2 * padding, 'em');
          result.setStyle('top', -padding, 'em');
          result.setStyle('display', 'inline-block');
          if (this.caret)
              result.caret = this.caret;
          return [this.attachSupsub(context, result, result.type)];
      }
  }

  class PhantomAtom extends Atom {
      constructor(command, body, options) {
          var _a;
          super('phantom', { command, style: options.style });
          this.captureSelection = true;
          this.body = body;
          this.phantomType = options.phantomType;
          this.isInvisible = (_a = options.isInvisible) !== null && _a !== void 0 ? _a : false;
      }
      render(context) {
          if (this.phantomType === 'vphantom') {
              const content = new Span(Atom.render(context, this.body), 'inner');
              content.applyStyle('math', {
                  backgroundColor: 'transparent',
                  color: 'transparent',
              });
              return [new Span([content, new Span(null, 'fix')], 'rlap', 'mord')];
          }
          if (this.phantomType === 'hphantom' ||
              this.phantomType === 'smash' ||
              this.phantomType === 'bsmash' ||
              this.phantomType === 'tsmash') {
              const content = new Span(Atom.render(context, this.body), '', 'mord');
              if (this.isInvisible) {
                  content.applyStyle('math', {
                      backgroundColor: 'transparent',
                      color: 'transparent',
                  });
              }
              if (this.phantomType !== 'bsmash') {
                  content.height = 0;
              }
              if (this.phantomType !== 'tsmash') {
                  content.depth = 0;
              }
              return [new Span(makeVlist(context, [content]), '', 'mord')];
          }
          return [new Span(Atom.render(context, this.body), '', 'mord')];
      }
  }

  class LineAtom extends Atom {
      constructor(command, body, options) {
          super('line', { command, style: options.style });
          this.skipBoundary = true;
          this.body = body;
          this.position = options.position;
      }
      render(context) {
          const { mathstyle } = context;
          // TeXBook:443. Rule 9 and 10
          const inner = Atom.render(context.cramp(), this.body);
          const ruleWidth = METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
          const line = new Span(null, context.mathstyle.adjustTo(MATHSTYLES.textstyle) +
              ' ' +
              this.position +
              '-line');
          line.height = ruleWidth;
          line.maxFontSize = 1;
          let vlist;
          if (this.position === 'overline') {
              vlist = makeVlist(context, [inner, 3 * ruleWidth, line, ruleWidth]);
          }
          else {
              const innerSpan = new Span(inner);
              vlist = makeVlist(context, [ruleWidth, line, 3 * ruleWidth, innerSpan], 'top', height(innerSpan));
          }
          if (this.caret)
              vlist.caret = this.caret;
          return [new Span(vlist, this.position, 'mord')];
      }
  }

  class OverlapAtom extends Atom {
      constructor(command, body, options) {
          var _a;
          super('overlap', { command, style: options.style });
          this.skipBoundary = true;
          this.body = body;
          this.align = (_a = options === null || options === void 0 ? void 0 : options.align) !== null && _a !== void 0 ? _a : 'left';
      }
      render(context) {
          // For llap (18), rlap (270), clap (0)
          // smash (common), mathllap (0), mathrlap (0), mathclap (0)
          // See https://www.tug.org/TUGboat/tb22-4/tb72perlS.pdf
          // and https://tex.stackexchange.com/questions/98785/what-are-the-different-kinds-of-vertical-spacing-and-horizontal-spacing-commands
          const inner = new Span(Atom.render(context, this.body), 'inner'); // @revisit
          if (this.caret)
              inner.caret = this.caret;
          return [
              new Span([inner, new Span(null, 'fix')], this.align === 'left' ? 'llap' : 'rlap', 'mord'),
          ];
      }
  }

  class RuleAtom extends Atom {
      constructor(command, options) {
          var _a, _b;
          super('rule', { command, style: options.style });
          this.height = options.height;
          this.width = options.width;
          this.depth = (_a = options.depth) !== null && _a !== void 0 ? _a : 0;
          this.shift = (_b = options.shift) !== null && _b !== void 0 ? _b : 0;
      }
      render(context) {
          const { mathstyle } = context;
          let shift = Number.isFinite(this.shift) ? this.shift : 0;
          shift /= mathstyle.sizeMultiplier;
          const width = this.width / mathstyle.sizeMultiplier;
          const height = this.height / mathstyle.sizeMultiplier;
          const result = new Span('', 'rule', 'mord');
          result.setStyle('border-right-width', width, 'em');
          result.setStyle('border-top-width', height, 'em');
          result.setStyle('margin-top', -(height - shift), 'em');
          result.setStyle('border-color', context.color); // @revisit
          result.width = width;
          result.height = height + shift;
          result.depth = -shift;
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
      toLatex(options) {
          let result = this.command;
          if (this.shift) {
              result += `[${Atom.toLatex(this.shift, options)}em]`;
          }
          result +=
              `{${Atom.toLatex(this.width, options)}em}` +
                  `{${Atom.toLatex(this.height, options)}em}`;
          return result;
      }
  }

  defineFunction('ensuremath', '{:math}', {
      createAtom: (_name, args, style) => new GroupAtom(args[0], {
          mode: 'math',
          latexOpen: '\\ensuremath{',
          latexClose: '}',
          style,
      }),
  });
  defineFunction('color', '{:color}', {
      applyStyle: (_name, args) => {
          return { color: args[0] };
      },
  });
  // From the xcolor package.
  // Unlike what its name might suggest, this command does not set the mode to text
  // That is, it can equally be applied to math and text mode.
  defineFunction('textcolor', '{:color}{content:auto*}', {
      applyStyle: (_name, args) => {
          return { color: args[0] };
      },
  });
  // Can be preceded by e.g. '\fboxsep=4pt' (also \fboxrule)
  // Note:
  // - \boxed: sets content in displaystyle mode (@todo: should change type of argument)
  //      equivalent to \fbox{$$<content>$$}
  // - \fbox: sets content in 'auto' mode (frequency 777)
  // - \framebox[<width>][<alignment>]{<content>} (<alignment> := 'c'|'t'|'b' (center, top, bottom) (frequency 28)
  // @todo
  defineFunction('boxed', '{content:math}', {
      createAtom: (name, args, style) => new BoxAtom(name, args[0], {
          framecolor: 'black',
          style,
      }),
  });
  // In LaTeX, \colorbox sets the mode to text
  defineFunction('colorbox', '{background-color:string}{content:auto}', {
      createAtom: (name, args, style) => new BoxAtom(name, args[1], {
          backgroundcolor: stringToColor(args[0]),
          verbatimBackgroundcolor: args[0],
          style,
          toLatexOverride: (atom, options) => {
              var _a;
              return `${atom.command}{${(_a = atom.verbatimBackgroundcolor) !== null && _a !== void 0 ? _a : colorToString(atom.backgroundcolor)}}{${atom.bodyToLatex(options)}}`;
          },
      }),
  });
  defineFunction('fcolorbox', '{frame-color:string}{background-color:string}{content:auto}', {
      createAtom: (name, args, style) => new BoxAtom(name, args[2], {
          framecolor: stringToColor(args[0]),
          backgroundcolor: stringToColor(args[1]),
          verbatimBackgroundcolor: args[1],
          verbatimFramecolor: args[0],
          style,
          toLatexOverride: (atom, options) => {
              var _a, _b;
              return `${atom.command}{${(_a = atom.verbatimFramecolor) !== null && _a !== void 0 ? _a : colorToString(atom.framecolor)}{${(_b = atom.verbatimBackgroundcolor) !== null && _b !== void 0 ? _b : colorToString(atom.backgroundcolor)}}{${atom.bodyToLatex(options)}}`;
          },
      }),
  });
  // \bbox, MathJax extension
  // The first argument is a CSS border property shorthand, e.g.
  // \bbox[red], \bbox[5px,border:2px solid red]
  // The MathJax syntax is
  // arglist ::= <arg>[,<arg>[,<arg>]]
  // arg ::= [<background:color>|<padding:dimen>|<style>]
  // style ::= 'border:' <string>
  defineFunction('bbox', '[:bbox]{body:auto}', {
      createAtom: (name, args, style) => {
          if (args[0]) {
              const arg = args[0];
              return new BoxAtom(name, args[1], {
                  padding: arg.padding,
                  border: arg.border,
                  backgroundcolor: arg.backgroundcolor,
                  style,
                  toLatexOverride: (atom, options) => {
                      let result = name;
                      if (Number.isFinite(atom.padding) ||
                          atom.border !== undefined ||
                          atom.backgroundcolor !== undefined) {
                          const bboxParameters = [];
                          if (Number.isFinite(atom.padding)) {
                              bboxParameters.push(`${Math.floor(1e2 * atom.padding) / 1e2}em`);
                          }
                          if (atom.border) {
                              bboxParameters.push(`border: ${atom.border}`);
                          }
                          if (atom.backgroundcolor) {
                              bboxParameters.push(colorToString(atom.backgroundcolor));
                          }
                          result += `[${bboxParameters.join(',')}]`;
                      }
                      return result + `{${atom.bodyToLatex(options)}}`;
                  },
              });
          }
          return new BoxAtom(name, args[1], { style });
      },
  });
  defineFunction(['displaystyle', 'textstyle', 'scriptstyle', 'scriptscriptstyle'], '{:math*}', {
      createAtom: (name, args, style) => new GroupAtom(args[0], {
          latexOpen: `{${name} `,
          latexClose: '}',
          style,
          mathStyleName: name.slice(1),
      }),
  });
  // Size
  defineFunction([
      'tiny',
      'scriptsize',
      'footnotesize',
      'small',
      'normalsize',
      'large',
      'Large',
      'LARGE',
      'huge',
      'Huge',
  ], '', {
      applyMode: 'text',
      applyStyle: (name, _args) => {
          return {
              fontSize: {
                  tiny: 'size1',
                  scriptsize: 'size2',
                  footnotesize: 'size3',
                  small: 'size4',
                  normalsize: 'size5',
                  large: 'size6',
                  Large: 'size7',
                  LARGE: 'size8',
                  huge: 'size9',
                  Huge: 'size10',
              }[name.slice(1)],
          };
      },
  });
  // \fontseries only works in text mode
  defineFunction('fontseries', '{:string}', {
      ifMode: 'text',
      applyStyle: (_name, args) => {
          return { fontSeries: args[0] };
      },
  });
  // SHAPE: italic, small caps
  defineFunction('fontshape', '{:string}', {
      ifMode: 'text',
      applyStyle: (_name, args) => {
          return { fontShape: args[0] };
      },
  });
  // FONT FAMILY: Fraktur, Calligraphic, ...
  defineFunction('fontfamily', '{:string}', {
      ifMode: 'text',
      applyStyle: (_name, args) => {
          return { fontFamily: args[0] };
      },
  });
  // In LaTeX, the \fontseries, \fontshape, \fontfamily, \fontsize commands
  // do not take effect until \selectfont is encoded. In our implementation,
  // they take effect immediately, and \selectfont is a no-op
  defineFunction('selectfont', '', {
      ifMode: 'text',
      applyStyle: (_name, _args) => {
          return {};
      },
  });
  // \bf works in any mode
  // As per the LaTeX 2.09 semantics, it overrides shape, family
  defineFunction('bf', '', {
      applyStyle: (_name, _args) => {
          return { fontSeries: 'b', fontShape: 'n', fontFamily: 'cmr' };
      },
  });
  // Note: These function work a little bit differently than LaTex
  // In LaTeX, \bm{x\mathrm{y}} yield a bold x and an upright y.
  // This is not necesarily intentional, but a side effect of the (current)
  // implementation of \bm
  defineFunction(['boldsymbol', 'bm'], '{:math*}', {
      applyMode: 'math',
      createAtom: (name, args, style) => new GroupAtom(args[0], {
          latexOpen: `${name}{`,
          latexClose: '}',
          style,
          customClass: 'ML__boldsymbol',
      }),
  });
  // Note: switches to math mode
  defineFunction('bold', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variantStyle: 'bold' };
      },
  });
  defineFunction('bfseries', '', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontSeries: 'b' };
      },
  });
  defineFunction('mdseries', '', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontSeries: 'm' };
      },
  });
  defineFunction('upshape', '', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'n' };
      },
  });
  defineFunction('slshape', '', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'sl' };
      },
  });
  // Small caps
  defineFunction('scshape', '', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'sc' };
      },
  });
  defineFunction('textbf', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontSeries: 'b' };
      },
  });
  defineFunction('textmd', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontSeries: 'm' };
      },
  });
  defineFunction('textup', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'n' };
      },
  });
  // @todo: family could be 'none' or 'default'
  // "normal" font of the body text, not necessarily roman
  defineFunction('textnormal', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'n', fontSeries: 'm' };
      },
  });
  defineFunction('textsl', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'sl' };
      },
  });
  defineFunction('textit', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'it' };
      },
  });
  defineFunction('textsc', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontShape: 'sc' };
      },
  });
  defineFunction('textrm', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontFamily: 'roman' };
      },
  });
  defineFunction('textsf', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontFamily: 'sans-serif' };
      },
  });
  defineFunction('texttt', '{:text*}', {
      applyMode: 'text',
      applyStyle: (_name, _args) => {
          return { fontFamily: 'monospace' };
      },
  });
  // Note: \mathbf is a no-op in text mode
  defineFunction('mathbf', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variant: 'normal', variantStyle: 'bold' };
      },
  });
  defineFunction('mathit', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variant: 'normal', variantStyle: 'italic' };
      },
  });
  // From the ISOMath package
  defineFunction('mathbfit', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variant: 'normal', variantStyle: 'bolditalic' };
      },
  });
  defineFunction('mathrm', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variant: 'normal', variantStyle: 'up' };
      },
  });
  defineFunction('mathsf', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variant: 'sans-serif', variantStyle: 'up' };
      },
  });
  defineFunction('mathtt', '{:math*}', {
      applyMode: 'math',
      applyStyle: (_name, _args) => {
          return { variant: 'monospace', variantStyle: 'up' };
      },
  });
  defineFunction('it', '', {
      applyStyle: (_name, _args) => {
          return {
              fontSeries: 'm',
              fontShape: 'it',
              fontFamily: 'cmr',
              variantStyle: 'italic',
          };
      },
  });
  // In LaTeX, \rmfamily, \sffamily and \ttfamily are no-op in math mode.
  defineFunction('rmfamily', '', {
      applyStyle: (_name, _args) => {
          return { fontFamily: 'roman' };
      },
  });
  defineFunction('sffamily', '', {
      applyStyle: (_name, _args) => {
          return { fontFamily: 'sans-serif' };
      },
  });
  defineFunction('ttfamily', '', {
      applyStyle: (_name, _args) => {
          return { fontFamily: 'monospace' };
      },
  });
  // In LaTeX, \Bbb and \mathbb are no-op in text mode.
  // They also map lowercase characters to different glyphs.
  // Note that \Bbb has been deprecated for over 20 years (as well as \rm, \it, \bf)
  defineFunction(['Bbb', 'mathbb'], '{:math*}', {
      applyStyle: (_name, _args) => {
          return { variant: 'double-struck', variantStyle: 'up' };
      },
  });
  defineFunction(['frak', 'mathfrak'], '{:math*}', {
      applyStyle: (_name, _args) => {
          return { variant: 'fraktur', variantStyle: 'up' };
      },
  });
  defineFunction('mathcal', '{:math*}', {
      applyStyle: (_name, _args) => {
          return { variant: 'calligraphic', variantStyle: 'up' };
      },
  });
  defineFunction('mathscr', '{:math*}', {
      applyStyle: (_name, _args) => {
          return { variant: 'script', variantStyle: 'up' };
      },
  });
  /*
   * Rough synomym for \text{}
   * An \mbox within math mode does not use the current math font; rather it uses
   * the typeface of the surrounding running text.
   */
  defineFunction('mbox', '{:text}', {
      ifMode: 'math',
      createAtom: (name, args, style) => new GroupAtom(args[0], {
          latexOpen: name + '{',
          latexClose: '}',
          style,
          mode: 'text',
      }),
  });
  defineFunction('text', '{:text}', {
      ifMode: 'math',
      applyMode: 'text',
  });
  /* A MathJax extension: assign a class to the element */
  defineFunction('class', '{name:string}{content:auto*}', {
      createAtom: (_command, args, style) => new GroupAtom(args[1], {
          customClass: args[0],
          style,
      }),
  });
  /* A MathJax extension: assign an ID to the element */
  defineFunction('cssId', '{id:string}{content:auto}', {
      createAtom: (command, args, style) => new GroupAtom(args[1], {
          cssId: args[0],
          style,
      }),
  });
  /*  assign an property to the element */
  defineFunction('htmlData', '{data:string}{content:auto}', {
      createAtom: (command, args, style) => new GroupAtom(args[1], {
          htmlData: args[0],
          style,
      }),
  });
  /* Note: in TeX, \em is restricted to text mode. We extend it to math
   * This is the 'switch' variant of \emph, i.e:
   * `\emph{important text}`
   * `{\em important text}`
   */
  defineFunction('em', '{:auto*}', {
      createAtom: (command, args, style) => new GroupAtom(args[0], {
          latexOpen: '\\em',
          latexClose: '',
          customClass: 'ML__emph',
          style,
      }),
  });
  /* Note: in TeX, \emph is restricted to text mode. We extend it to math */
  defineFunction('emph', '{:auto}', {
      createAtom: (command, args, style) => new GroupAtom(args[0], {
          latexOpen: '\\emph{',
          latexClose: '}',
          customClass: 'ML__emph',
          style,
      }),
  });
  // Extra data needed for the delimiter parse function down below
  const DELIMITER_SIZES = {
      '\\bigl': { mclass: 'mopen', size: 1 },
      '\\Bigl': { mclass: 'mopen', size: 2 },
      '\\biggl': { mclass: 'mopen', size: 3 },
      '\\Biggl': { mclass: 'mopen', size: 4 },
      '\\bigr': { mclass: 'mclose', size: 1 },
      '\\Bigr': { mclass: 'mclose', size: 2 },
      '\\biggr': { mclass: 'mclose', size: 3 },
      '\\Biggr': { mclass: 'mclose', size: 4 },
      '\\bigm': { mclass: 'mrel', size: 1 },
      '\\Bigm': { mclass: 'mrel', size: 2 },
      '\\biggm': { mclass: 'mrel', size: 3 },
      '\\Biggm': { mclass: 'mrel', size: 4 },
      '\\big': { mclass: 'mord', size: 1 },
      '\\Big': { mclass: 'mord', size: 2 },
      '\\bigg': { mclass: 'mord', size: 3 },
      '\\Bigg': { mclass: 'mord', size: 4 },
  };
  defineFunction([
      'bigl',
      'Bigl',
      'biggl',
      'Biggl',
      'bigr',
      'Bigr',
      'biggr',
      'Biggr',
      'bigm',
      'Bigm',
      'biggm',
      'Biggm',
      'big',
      'Big',
      'bigg',
      'Bigg',
  ], '{:delim}', {
      createAtom: (name, args, style) => new SizedDelimAtom(name, args[0], {
          size: DELIMITER_SIZES[name].size,
          delimClass: DELIMITER_SIZES[name].mclass,
          style,
      }),
  });
  defineFunction([
      'hspace',
      'hspace*',
  ], '{width:skip}', {
      createAtom: (name, args, style) => { var _a; return new SpacingAtom(name, style, (_a = args[0]) !== null && _a !== void 0 ? _a : 0); },
  });
  defineFunction('mathop', '{:auto}', {
      createAtom: (command, args, style) => new OperatorAtom(command, args[0], {
          type: 'mop',
          captureSelection: true,
          limits: 'limits',
          isFunction: true,
          style,
      }),
  });
  defineFunction([
      'mathbin',
      'mathrel',
      'mathopen',
      'mathclose',
      'mathpunct',
      'mathord',
      'mathinner',
  ], '{:auto}', {
      createAtom: (command, args, style) => new OperatorAtom(command, args[0], {
          type: {
              '\\mathbin': 'mbin',
              '\\mathrel': 'mrel',
              '\\mathopen': 'mopen',
              '\\mathclose': 'mclose',
              '\\mathpunct': 'mpunct',
              '\\mathord': 'mord',
              '\\mathinner': 'minner',
          }[command],
          captureSelection: true,
          style,
      }),
  });
  // @todo see http://mirrors.ibiblio.org/CTAN/macros/latex/required/amsmath/amsopn.pdf
  // for list of additional operators
  defineFunction(['operatorname', 'operatorname*'], '{operator:math}', {
      createAtom: (name, args, style) => {
          const result = new OperatorAtom(name, args[0], {
              isFunction: true,
              limits: name === '\\operatorname' ? 'nolimits' : 'limits',
              style,
          });
          result.captureSelection = true; // Do not let children be selected
          /*
              The \operatorname commands is defined with:
      
              \gdef\newmcodes@{\mathcode`\'39\mathcode`\*42\mathcode`\."613A%
              \ifnum\mathcode`\-=45 \else
                  \mathchardef\std@minus\mathcode`\-\relax
              \fi
              \mathcode`\-45\mathcode`\/47\mathcode`\:"603A\relax}
      
      
              \mathcode assigns to a character its category (2=mbin), its font family (0=cmr),
              and its character code.
      
              It basically temporarily reassigns to ":.'-/*" the values/properties
              these characters have in text mode (but importantly, not to " " (space))
      
              */
          result.body.forEach((x) => {
              var _a;
              if (x.type !== 'first') {
                  x.type = 'mord';
                  x.value = (_a = { '\u2217': '*', '\u2212': '-' }[x.value]) !== null && _a !== void 0 ? _a : x.value;
                  x.isFunction = false;
                  if (!x.style.variant && !x.style.variantStyle) {
                      // No variant as been specified (as it could have been with
                      // \operatorname{\mathit{lim}} for example)
                      // Bypass the default auto styling by specifing an upright style
                      x.style.variant = 'main';
                      x.style.variantStyle = 'up';
                  }
              }
          });
          return result;
      },
  });
  class UnicodeAtom extends Atom {
      constructor(arg, style) {
          let codepoint = Number.parseInt(arg);
          if (!Number.isFinite(codepoint))
              codepoint = 0x2753; // BLACK QUESTION MARK
          super('mord', {
              value: String.fromCodePoint(codepoint),
              style,
          });
          this.codepoint = codepoint;
      }
      toLatex(_options) {
          return ('\\unicode"' +
              ('000000' + this.codepoint.toString(16)).toUpperCase().slice(-6));
      }
  }
  defineFunction('unicode', '{charcode:number}', {
      createAtom: (name, args, style) => new UnicodeAtom(args[0], style),
  });
  // A box of the width and height
  defineFunction('rule', '[raise:dimen]{width:dimen}{thickness:dimen}', {
      createAtom: (name, args, style) => new RuleAtom(name, {
          shift: args[0],
          width: args[1],
          height: args[2],
          style,
      }),
  });
  // An overline
  defineFunction('overline', '{:auto}', {
      createAtom: (name, args, style) => new LineAtom(name, args[0], {
          position: 'overline',
          style,
      }),
  });
  defineFunction('underline', '{:auto}', {
      createAtom: (name, args, style) => new LineAtom(name, args[0], {
          position: 'underline',
          style,
      }),
  });
  defineFunction('overset', '{annotation:auto}{symbol:auto}', {
      createAtom: (name, args, style) => new OverunderAtom(name, {
          body: args[1],
          above: args[0],
          style,
          toLatexOverride: (atom, options) => `${atom.command}{${atom.aboveToLatex(options)}}` +
              `{${atom.bodyToLatex(options)}}`,
      }),
  });
  defineFunction('underset', '{annotation:auto}{symbol:auto}', {
      createAtom: (name, args, style) => new OverunderAtom(name, {
          body: args[1],
          below: args[0],
          style,
          toLatexOverride: (atom, options) => `${name}{${atom.belowToLatex(options)}}` +
              `{${atom.bodyToLatex(options)}}`,
      }),
  });
  defineFunction(['stackrel', 'stackbin'], '{annotation:auto}{symbol:auto}', {
      createAtom: (name, args, style) => 
      // Set the correct spacing rule for \stackrel
      // @revisit: this is not actually used...?
      // mathtype: name === '\\stackrel' ? 'mrel' : 'mbin',
      new OverunderAtom(name, {
          body: args[1],
          above: args[0],
          style,
          toLatexOverride: (atom, options) => `${atom.command}{${atom.aboveToLatex(options)}}` +
              `{${atom.bodyToLatex(options)}}`,
      }),
  });
  defineFunction(['overwithdelims', 'atopwithdelims'], '{numer:auto}{denom:auto}{left-delim:delim}{right-delim:delim}', {
      infix: true,
      createAtom: (name, args, style) => new GenfracAtom(name, args[0], args[1], {
          leftDelim: args[2],
          rightDelim: args[3],
          style,
          toLatexOverride: (atom, options) => `${atom.aboveToLatex(options)} ${atom.command}${atom.leftDelim}${atom.rightDelim}${atom.belowToLatex(options)}`,
      }),
  });
  defineFunction('smash', '[:string]{:auto}', {
      createAtom: (name, args, style) => {
          let phantomType = 'smash';
          if (args[0] === 'b') {
              phantomType = 'bsmash';
          }
          else if (args[0] === 't') {
              phantomType = 'tsmash';
          }
          return new PhantomAtom(name, args[1], { phantomType, style });
      },
  });
  defineFunction(['phantom', 'vphantom', 'hphantom'], '{:auto*}', {
      createAtom: (name, args, style) => new PhantomAtom(name, args[1], {
          isInvisible: true,
          phantomType: name.slice(1),
          style,
      }),
  });
  defineFunction('rlap', '{:auto}', {
      createAtom: (name, args, style) => new OverlapAtom(name, args[0], { align: 'right', style }),
  });
  defineFunction('llap', '{:auto}', {
      createAtom: (name, args, style) => new OverlapAtom(name, args[0], { style }),
  });
  defineFunction('mathllap', '{:auto}', {
      createAtom: (name, args, style) => new OverlapAtom(name, args[0], { style }),
  });
  defineFunction('mathrlap', '{:auto}', {
      createAtom: (name, args, style) => new OverlapAtom(name, args[0], { align: 'right', style }),
  });

  // Simple characters allowed in math mode
  defineSymbols('0123456789/@.?!');
  defineSymbolRange(0x0041, 0x005a); // A-z
  defineSymbolRange(0x0061, 0x007a); // A-Z
  // Quantifiers
  defineSymbol('\\forall', '\u2200');
  defineSymbol('\\exists', '\u2203');
  defineSymbol('\\nexists', '\u2204', 'mord', 'ams');
  defineSymbol('\\mid', '\u2223', 'mrel');
  defineSymbol('\\top', '\u22A4');
  defineSymbol('\\bot', '\u22A5');
  // Misc Symbols
  defineSymbol('\\sharp', '\u266F');
  defineSymbol('\\flat', '\u266D');
  defineSymbol('\\natural', '\u266E');
  defineSymbol('\\#', '\u0023');
  defineSymbol('\\&', '\u0026');
  defineSymbol('\\clubsuit', '\u2663');
  defineSymbol('\\heartsuit', '\u2661');
  defineSymbol('\\spadesuit', '\u2660');
  defineSymbol('\\diamondsuit', '\u2662');
  // DefineSymbol( '\\cross', '\uF4A0',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
  // defineSymbol( '\\transpose', '\uF3C7',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
  // defineSymbol( '\\conjugate', 'conj'],  MAIN,  'mord', '\uF3C8'); // NOTE: not a real TeX symbol, but Mathematica
  // defineSymbol( '\\conjugatetranspose', '\uF3C9',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
  // defineSymbol( '\\hermitianconjugate', '\uF3CE',  'mord',  MAIN); // NOTE: not a real TeX symbol, but Mathematica
  defineSymbol('\\differencedelta', '\u2206', 'mrel');
  defineSymbol('\\backslash', '\\');
  defineSymbol('\\nabla', '\u2207');
  defineSymbol('\\partial', '\u2202');
  defineSymbol('\\ell', '\u2113');
  defineSymbol('\\hbar', '\u210F');
  defineSymbol('\\hslash', '\u210F', 'mord', 'ams');
  defineSymbol('\\Finv', '\u2132', 'mord', 'ams');
  defineSymbol('\\Game', '\u2141', 'mord', 'ams');
  defineSymbol('\\wp', '\u2118');
  defineSymbol('\\eth', '\u00F0', 'mord', 'ams');
  defineSymbol('\\mho', '\u2127', 'mord', 'ams');
  defineSymbol('\\Bbbk', '\u006B', 'mord', 'ams');
  defineSymbol('\\N', 'N', 'mord', 'double-struck'); // NOTE: Check if standard Latex
  defineSymbol('\\R', 'R', 'mord', 'double-struck'); // NOTE: Check if standard Latex
  defineSymbol('\\Q', 'Q', 'mord', 'double-struck'); // NOTE: Check if standard Latex
  defineSymbol('\\C', 'C', 'mord', 'double-struck'); // NOTE: Check if standard Latex
  defineSymbol('\\Z', 'Z', 'mord', 'double-struck'); // NOTE: Check if standard Latex
  defineSymbol('\\P', 'P', 'mord', 'double-struck'); // NOTE: Check if standard Latex
  defineSymbol('\\pounds', '\u00A3');
  defineSymbol('\\yen', '\u00A5', 'mord', 'ams');
  defineSymbol('\\euro', '\u20AC'); // NOTE: not TeX built-in, but textcomp package
  // TODO Koppa, Stigma, Sampi
  // Math and Text
  defineSymbol('\\dagger', '\u2020', 'mbin');
  defineSymbol('\\dag', '\u2020', 'mbin');
  defineSymbol('\\ddag', '\u2021', 'mbin');
  defineSymbol('\\ddagger', '\u2021', 'mbin');
  defineSymbol('\\maltese', '\u2720', 'mord', 'ams');
  // Arrow Symbols
  defineSymbol('\\rightarrow', '\u2192', 'mrel');
  defineSymbol('\\to', '\u2192', 'mrel');
  defineSymbol('\\leftarrow', '\u2190', 'mrel');
  defineSymbol('\\gets', '\u2190', 'mrel');
  defineSymbol('\\Rightarrow', '\u21D2', 'mrel');
  defineSymbol('\\Leftarrow', '\u21D0', 'mrel');
  defineSymbol('\\longrightarrow', '\u27F6', 'mrel');
  defineSymbol('\\longleftarrow', '\u27F5', 'mrel');
  defineSymbol('\\Longrightarrow', '\u27F9', 'mrel');
  defineSymbol('\\implies', '\u27F9', 'mrel');
  defineSymbol('\\Longleftarrow', '\u27F8', 'mrel');
  defineSymbol('\\impliedby', '\u27F8', 'mrel');
  defineSymbol('\\dashrightarrow', '\u21E2', 'mrel', 'ams');
  defineSymbol('\\dashleftarrow', '\u21E0', 'mrel', 'ams');
  defineSymbol('\\Rrightarrow', '\u21DB', 'mrel', 'ams');
  defineSymbol('\\Lleftarrow', '\u21DA', 'mrel', 'ams');
  defineSymbol('\\longleftrightarrow', '\u27F7', 'mrel');
  defineSymbol('\\biconditional', '\u27F7', 'mrel');
  defineSymbol('\\Longleftrightarrow', '\u27FA', 'mrel');
  defineSymbol('\\leftrightarrows', '\u21C6', 'mrel', 'ams');
  defineSymbol('\\rightleftarrows', '\u21C4', 'mrel', 'ams');
  defineSymbol('\\mapsto', '\u21A6', 'mrel');
  defineSymbol('\\longmapsto', '\u27FC', 'mrel');
  defineSymbol('\\uparrow', '\u2191', 'mrel');
  defineSymbol('\\downarrow', '\u2193', 'mrel');
  defineSymbol('\\Uparrow', '\u21D1', 'mrel');
  defineSymbol('\\Downarrow', '\u21D3', 'mrel');
  defineSymbol('\\updownarrow', '\u2195', 'mrel');
  defineSymbol('\\Updownarrow', '\u21D5', 'mrel');
  defineSymbol('\\curvearrowright', '\u21B7', 'mrel', 'ams');
  defineSymbol('\\curvearrowleft', '\u21B6', 'mrel', 'ams');
  defineSymbol('\\hookrightarrow', '\u21AA', 'mrel');
  defineSymbol('\\hookleftarrow', '\u21A9', 'mrel');
  defineSymbol('\\rightharpoonup', '\u21C0', 'mrel');
  defineSymbol('\\leftharpoonup', '\u21BC', 'mrel');
  defineSymbol('\\rightharpoondown', '\u21C1', 'mrel');
  defineSymbol('\\leftharpoondown', '\u21BD', 'mrel');
  defineSymbol('\\rightrightarrows', '\u21C9', 'mrel', 'ams');
  defineSymbol('\\leftleftarrows', '\u21C7', 'mrel', 'ams');
  defineSymbol('\\upuparrows', '\u21C8', 'mrel', 'ams');
  defineSymbol('\\downdownarrows', '\u21CA', 'mrel', 'ams');
  defineSymbol('\\leftarrowtail', '\u21A2', 'mrel', 'ams');
  defineSymbol('\\rightarrowtail', '\u21A3', 'mrel', 'ams');
  defineSymbol('\\looparrowright', '\u21AC', 'mrel', 'ams');
  defineSymbol('\\looparrowleft', '\u21AB', 'mrel', 'ams');
  defineSymbol('\\twoheadleftarrow', '\u219E', 'mrel', 'ams');
  defineSymbol('\\twoheadrightarrow', '\u21A0', 'mrel', 'ams');
  defineSymbol('\\rightleftharpoons', '\u21CC', 'mrel');
  defineSymbol('\\leftrightharpoons', '\u21CB', 'mrel', 'ams');
  defineSymbol('\\Rsh', '\u21B1', 'mrel', 'ams');
  defineSymbol('\\Lsh', '\u21B0', 'mrel', 'ams');
  defineSymbol('\\searrow', '\u2198', 'mrel');
  defineSymbol('\\nearrow', '\u2197', 'mrel');
  defineSymbol('\\swarrow', '\u2199', 'mrel');
  defineSymbol('\\nwarrow', '\u2196', 'mrel');
  defineSymbol('\\circlearrowright', '\u21BB', 'mrel', 'ams');
  defineSymbol('\\circlearrowleft', '\u21BA', 'mrel', 'ams');
  defineSymbol('\\restriction', '\u21BE', 'mrel', 'ams');
  defineSymbol('\\upharpoonright', '\u21BE', 'mrel', 'ams');
  defineSymbol('\\upharpoonleft', '\u21BF', 'mrel', 'ams');
  defineSymbol('\\downharpoonright', '\u21C2', 'mrel', 'ams');
  defineSymbol('\\downharpoonleft', '\u21C3', 'mrel', 'ams');
  defineSymbol('\\rightsquigarrow', '\u21DD', 'mrel', 'ams');
  defineSymbol('\\leadsto', '\u21DD', 'mrel', 'ams');
  defineSymbol('\\leftrightsquigarrow', '\u21AD', 'mrel', 'ams');
  defineSymbol('\\originalof', '\u22B6', 'mrel');
  defineSymbol('\\laplace', '\u22B6', 'mrel');
  defineSymbol('\\imageof', '\u22B7', 'mrel');
  defineSymbol('\\Laplace', '\u22B7', 'mrel');
  defineSymbol('\\multimap', '\u22B8', 'mrel', 'ams');
  // 'ams' Negated Arrows
  defineSymbol('\\nrightarrow', '\u219B', 'mrel', 'ams');
  defineSymbol('\\nleftarrow', '\u219A', 'mrel', 'ams');
  defineSymbol('\\nRightarrow', '\u21CF', 'mrel', 'ams');
  defineSymbol('\\nLeftarrow', '\u21CD', 'mrel', 'ams');
  defineSymbol('\\nleftrightarrow', '\u21AE', 'mrel', 'ams');
  defineSymbol('\\nLeftrightarrow', '\u21CE', 'mrel', 'ams');
  // 'ams' Negated Binary Relations
  defineSymbol('\\nless', '\u226E', 'mrel', 'ams');
  defineSymbol('\\nleqslant', '\uE010', 'mrel', 'ams');
  defineSymbol('\\lneq', '\u2A87', 'mrel', 'ams');
  defineSymbol('\\lneqq', '\u2268', 'mrel', 'ams');
  defineSymbol('\\nleqq', '\uE011', 'mrel', 'ams');
  defineSymbol('\\unlhd', '\u22B4', 'mbin', 'ams');
  defineSymbol('\\unrhd', '\u22B5', 'mbin', 'ams');
  defineSymbol('\\lvertneqq', '\uE00C', 'mrel', 'ams');
  defineSymbol('\\lnsim', '\u22E6', 'mrel', 'ams');
  defineSymbol('\\lnapprox', '\u2A89', 'mrel', 'ams');
  defineSymbol('\\nprec', '\u2280', 'mrel', 'ams');
  defineSymbol('\\npreceq', '\u22E0', 'mrel', 'ams');
  defineSymbol('\\precnsim', '\u22E8', 'mrel', 'ams');
  defineSymbol('\\precnapprox', '\u2AB9', 'mrel', 'ams');
  defineSymbol('\\nsim', '\u2241', 'mrel', 'ams');
  defineSymbol('\\nshortmid', '\uE006', 'mrel', 'ams');
  defineSymbol('\\nmid', '\u2224', 'mrel', 'ams');
  defineSymbol('\\nvdash', '\u22AC', 'mrel', 'ams');
  defineSymbol('\\nvDash', '\u22AD', 'mrel', 'ams');
  defineSymbol('\\ngtr', '\u226F', 'mrel', 'ams');
  defineSymbol('\\ngeqslant', '\uE00F', 'mrel', 'ams');
  defineSymbol('\\ngeqq', '\uE00E', 'mrel', 'ams');
  defineSymbol('\\gneq', '\u2A88', 'mrel', 'ams');
  defineSymbol('\\gneqq', '\u2269', 'mrel', 'ams');
  defineSymbol('\\gvertneqq', '\uE00D', 'mrel', 'ams');
  defineSymbol('\\gnsim', '\u22E7', 'mrel', 'ams');
  defineSymbol('\\gnapprox', '\u2A8A', 'mrel', 'ams');
  defineSymbol('\\nsucc', '\u2281', 'mrel', 'ams');
  defineSymbol('\\nsucceq', '\u22E1', 'mrel', 'ams');
  defineSymbol('\\succnsim', '\u22E9', 'mrel', 'ams');
  defineSymbol('\\succnapprox', '\u2ABA', 'mrel', 'ams');
  defineSymbol('\\ncong', '\u2246', 'mrel', 'ams');
  defineSymbol('\\nshortparallel', '\uE007', 'mrel', 'ams');
  defineSymbol('\\nparallel', '\u2226', 'mrel', 'ams');
  defineSymbol('\\nVDash', '\u22AF', 'mrel', 'ams');
  defineSymbol('\\nsupseteqq', '\uE018', 'mrel', 'ams');
  defineSymbol('\\supsetneq', '\u228B', 'mrel', 'ams');
  defineSymbol('\\varsupsetneq', '\uE01B', 'mrel', 'ams');
  defineSymbol('\\supsetneqq', '\u2ACC', 'mrel', 'ams');
  defineSymbol('\\varsupsetneqq', '\uE019', 'mrel', 'ams');
  defineSymbol('\\nVdash', '\u22AE', 'mrel', 'ams');
  defineSymbol('\\precneqq', '\u2AB5', 'mrel', 'ams');
  defineSymbol('\\succneqq', '\u2AB6', 'mrel', 'ams');
  defineSymbol('\\nsubseteqq', '\uE016', 'mrel', 'ams');
  // 'ams' Misc
  defineSymbol('\\checkmark', '\u2713', 'mord', 'ams');
  defineSymbol('\\diagup', '\u2571', 'mord', 'ams');
  defineSymbol('\\diagdown', '\u2572', 'mord', 'ams');
  defineSymbol('\\measuredangle', '\u2221', 'mord', 'ams');
  defineSymbol('\\sphericalangle', '\u2222', 'mord', 'ams');
  defineSymbol('\\backprime', '\u2035', 'mord', 'ams');
  defineSymbol('\\backdoubleprime', '\u2036', 'mord', 'ams');
  defineSymbol('\\ast', '\u2217', 'mbin');
  defineSymbol('\\star', '\u22C6', 'mbin');
  defineSymbol('\\diamond', '\u22C4', 'mbin');
  defineSymbol('\\Diamond', '\u25CA', 'mord', 'ams');
  defineSymbol('\\lozenge', '\u25CA', 'mord', 'ams');
  defineSymbol('\\blacklozenge', '\u29EB', 'mord', 'ams');
  defineSymbol('\\bigstar', '\u2605', 'mord', 'ams');
  // 'ams' Hebrew
  defineSymbol('\\aleph', '\u2135');
  defineSymbol('\\beth', '\u2136', 'mord', 'ams');
  defineSymbol('\\daleth', '\u2138', 'mord', 'ams');
  defineSymbol('\\gimel', '\u2137', 'mord', 'ams');
  // 'ams' Delimiters
  defineSymbol('\\lbrace', '{', 'mopen');
  defineSymbol('\\rbrace', '}', 'mclose');
  defineSymbol('\\langle', '\u27E8', 'mopen');
  defineSymbol('\\rangle', '\u27E9', 'mclose');
  defineSymbol('\\lfloor', '\u230A', 'mopen');
  defineSymbol('\\rfloor', '\u230B', 'mclose');
  defineSymbol('\\lceil', '\u2308', 'mopen');
  defineSymbol('\\rceil', '\u2309', 'mclose');
  defineSymbol('\\vert', '\u2223');
  defineSymbol('\\mvert', '\u2223', 'mrel');
  defineSymbol('\\lvert', '\u2223', 'mopen');
  defineSymbol('\\rvert', '\u2223', 'mclose');
  defineSymbol('\\|', '\u2225');
  defineSymbol('\\Vert', '\u2225');
  defineSymbol('\\mVert', '\u2225');
  defineSymbol('\\lVert', '\u2225', 'mopen');
  defineSymbol('\\rVert', '\u2225', 'mclose');
  defineSymbol('\\parallel', '\u2225', 'mrel');
  defineSymbol('\\shortparallel', '\u2225', 'mrel', 'ams');
  defineSymbol('\\lbrack', '[', 'mopen');
  defineSymbol('\\rbrack', ']', 'mclose');
  defineSymbol('\\{', '{', 'mopen');
  defineSymbol('\\}', '}', 'mclose');
  defineSymbol('(', '(', 'mopen');
  defineSymbol(')', ')', 'mclose');
  defineSymbol('[', '[', 'mopen');
  defineSymbol(']', ']', 'mclose');
  defineSymbol('\\ulcorner', '\u250C', 'mopen', 'ams');
  defineSymbol('\\urcorner', '\u2510', 'mclose', 'ams');
  defineSymbol('\\llcorner', '\u2514', 'mopen', 'ams');
  defineSymbol('\\lrcorner', '\u2518', 'mclose', 'ams');
  // Large Delimiters
  defineSymbol('\\lgroup', '\u27EE', 'mopen');
  defineSymbol('\\rgroup', '\u27EF', 'mclose');
  defineSymbol('\\lmoustache', '\u23B0', 'mopen');
  defineSymbol('\\rmoustache', '\u23B1', 'mclose');
  // Relations
  defineSymbol('=', '=', 'mrel');
  defineSymbol('\\ne', '\u2260', 'mrel');
  defineSymbol('\\neq', '\u2260', 'mrel');
  // DefineSymbol( '\\longequal', '\uF7D9',  'mrel',  MAIN);   // NOTE: Not TeX
  defineSymbol('<', '<', 'mrel');
  defineSymbol('\\lt', '<', 'mrel');
  defineSymbol('>', '>', 'mrel');
  defineSymbol('\\gt', '>', 'mrel');
  defineSymbol('\\le', '\u2264', 'mrel');
  defineSymbol('\\leq', '\u2264', 'mrel');
  defineSymbol('\\ge', '\u2265', 'mrel');
  defineSymbol('\\geq', '\u2265', 'mrel');
  defineSymbol('\\leqslant', '\u2A7D', 'mrel', 'ams');
  defineSymbol('\\geqslant', '\u2A7E', 'mrel', 'ams');
  defineSymbol('\\ll', '\u226A', 'mrel');
  defineSymbol('\\gg', '\u226B', 'mrel');
  defineSymbol('\\coloneq', '\u2254', 'mrel');
  defineSymbol('\\measeq', '\u225D', 'mrel'); // MEASSURED BY
  defineSymbol('\\eqdef', '\u225E', 'mrel');
  defineSymbol('\\questeq', '\u225F', 'mrel'); // QUESTIONED EQUAL TO
  defineSymbol(':', ':', 'mrel');
  defineSymbol('\\cong', '\u2245', 'mrel');
  defineSymbol('\\equiv', '\u2261', 'mrel');
  defineSymbol('\\prec', '\u227A', 'mrel');
  defineSymbol('\\preceq', '\u2AAF', 'mrel');
  defineSymbol('\\succ', '\u227B', 'mrel');
  defineSymbol('\\succeq', '\u2AB0', 'mrel');
  defineSymbol('\\perp', '\u22A5', 'mrel');
  defineSymbol('\\propto', '\u221D', 'mrel');
  defineSymbol('\\Colon', '\u2237', 'mrel');
  defineSymbol('\\smile', '\u2323', 'mrel');
  defineSymbol('\\frown', '\u2322', 'mrel');
  defineSymbol('\\sim', '\u223C', 'mrel');
  defineSymbol('\\gtrsim', '\u2273', 'mrel', 'ams');
  defineSymbol('\\approx', '\u2248', 'mrel');
  defineSymbol('\\approxeq', '\u224A', 'mrel', 'ams');
  defineSymbol('\\thickapprox', '\u2248', 'mrel', 'ams');
  defineSymbol('\\lessapprox', '\u2A85', 'mrel', 'ams');
  defineSymbol('\\gtrapprox', '\u2A86', 'mrel', 'ams');
  defineSymbol('\\precapprox', '\u2AB7', 'mrel', 'ams');
  defineSymbol('\\succapprox', '\u2AB8', 'mrel', 'ams');
  defineSymbol('\\thicksim', '\u223C', 'mrel', 'ams');
  defineSymbol('\\succsim', '\u227F', 'mrel', 'ams');
  defineSymbol('\\precsim', '\u227E', 'mrel', 'ams');
  defineSymbol('\\backsim', '\u223D', 'mrel', 'ams');
  defineSymbol('\\eqsim', '\u2242', 'mrel', 'ams');
  defineSymbol('\\backsimeq', '\u22CD', 'mrel', 'ams');
  defineSymbol('\\simeq', '\u2243', 'mrel');
  defineSymbol('\\lesssim', '\u2272', 'mrel', 'ams');
  defineSymbol('\\nleq', '\u2270', 'mrel', 'ams');
  defineSymbol('\\ngeq', '\u2271', 'mrel', 'ams');
  defineSymbol('\\smallsmile', '\u2323', 'mrel', 'ams');
  defineSymbol('\\smallfrown', '\u2322', 'mrel', 'ams');
  defineSymbol('\\bowtie', '\u22C8', 'mrel');
  defineSymbol('\\Join', '\u22C8', 'mrel');
  defineSymbol('\\asymp', '\u224D', 'mrel');
  defineSymbol('\\sqsubseteq', '\u2291', 'mrel');
  defineSymbol('\\sqsupseteq', '\u2292', 'mrel');
  defineSymbol('\\leqq', '\u2266', 'mrel', 'ams');
  defineSymbol('\\eqslantless', '\u2A95', 'mrel', 'ams');
  defineSymbol('\\lll', '\u22D8', 'mrel', 'ams');
  defineSymbol('\\lessgtr', '\u2276', 'mrel', 'ams');
  defineSymbol('\\lesseqgtr', '\u22DA', 'mrel', 'ams');
  defineSymbol('\\lesseqqgtr', '\u2A8B', 'mrel', 'ams');
  defineSymbol('\\risingdotseq', '\u2253', 'mrel', 'ams');
  defineSymbol('\\fallingdotseq', '\u2252', 'mrel', 'ams');
  defineSymbol('\\subseteqq', '\u2AC5', 'mrel', 'ams');
  defineSymbol('\\Subset', '\u22D0', 'mrel', 'ams');
  defineSymbol('\\sqsubset', '\u228F', 'mrel', 'ams');
  defineSymbol('\\preccurlyeq', '\u227C', 'mrel', 'ams');
  defineSymbol('\\curlyeqprec', '\u22DE', 'mrel', 'ams');
  defineSymbol('\\vDash', '\u22A8', 'mrel', 'ams');
  defineSymbol('\\Vvdash', '\u22AA', 'mrel', 'ams');
  defineSymbol('\\bumpeq', '\u224F', 'mrel', 'ams');
  defineSymbol('\\Bumpeq', '\u224E', 'mrel', 'ams');
  defineSymbol('\\geqq', '\u2267', 'mrel', 'ams');
  defineSymbol('\\eqslantgtr', '\u2A96', 'mrel', 'ams');
  defineSymbol('\\ggg', '\u22D9', 'mrel', 'ams');
  defineSymbol('\\gtrless', '\u2277', 'mrel', 'ams');
  defineSymbol('\\gtreqless', '\u22DB', 'mrel', 'ams');
  defineSymbol('\\gtreqqless', '\u2A8C', 'mrel', 'ams');
  defineSymbol('\\supseteqq', '\u2AC6', 'mrel', 'ams');
  defineSymbol('\\Supset', '\u22D1', 'mrel', 'ams');
  defineSymbol('\\sqsupset', '\u2290', 'mrel', 'ams');
  defineSymbol('\\succcurlyeq', '\u227D', 'mrel', 'ams');
  defineSymbol('\\curlyeqsucc', '\u22DF', 'mrel', 'ams');
  defineSymbol('\\Vdash', '\u22A9', 'mrel', 'ams');
  defineSymbol('\\shortmid', '\u2223', 'mrel', 'ams');
  defineSymbol('\\between', '\u226C', 'mrel', 'ams');
  defineSymbol('\\pitchfork', '\u22D4', 'mrel', 'ams');
  defineSymbol('\\varpropto', '\u221D', 'mrel', 'ams');
  defineSymbol('\\backepsilon', '\u220D', 'mrel', 'ams');
  defineSymbol('\\llless', '\u22D8', 'mrel', 'ams');
  defineSymbol('\\gggtr', '\u22D9', 'mrel', 'ams');
  defineSymbol('\\lhd', '\u22B2', 'mbin', 'ams');
  defineSymbol('\\rhd', '\u22B3', 'mbin', 'ams');
  defineSymbol('\\doteq', '\u2250', 'mrel');
  defineSymbol('\\doteqdot', '\u2251', 'mrel', 'ams');
  defineSymbol('\\Doteq', '\u2251', 'mrel', 'ams');
  defineSymbol('\\eqcirc', '\u2256', 'mrel', 'ams');
  defineSymbol('\\circeq', '\u2257', 'mrel', 'ams');
  defineSymbol('\\lessdot', '\u22D6', 'mbin', 'ams');
  defineSymbol('\\gtrdot', '\u22D7', 'mbin', 'ams');
  // In TeX, '~' is a spacing command (non-breaking space).
  // However, '~' is used as an ASCII Math shortctut character, so define a \\~
  // command which maps to the '~' character
  defineSymbol('\\~', '~', 'mrel');
  defineSymbol('\\leftrightarrow', '\u2194', 'mrel');
  defineSymbol('\\Leftrightarrow', '\u21D4', 'mrel');
  defineSymbol('\\models', '\u22A8', 'mrel');
  defineSymbol('\\vdash', '\u22A2', 'mrel');
  defineSymbol('\\therefore', '\u2234', 'mrel', 'ams');
  defineSymbol('\\because', '\u2235', 'mrel', 'ams');
  defineSymbol('\\dashv', '\u22A3', 'mrel');
  defineSymbol('\\roundimplies', '\u2970', 'mrel');
  // 'ams' Binary Operators
  defineSymbol('+', '+', 'mbin');
  defineSymbol('-', '\u2212', 'mbin');
  defineSymbol('\u2212', '\u2212', 'mbin');
  defineSymbol('\\pm', '\u00B1', 'mbin');
  defineSymbol('\\mp', '\u2213', 'mbin');
  defineSymbol('*', '\u2217', 'mbin');
  defineSymbol('\\times', '\u00D7', 'mbin');
  defineSymbol('\\div', '\u00F7', 'mbin');
  defineSymbol('\\surd', '\u221A');
  defineSymbol('\\divides', '\u2223', 'mbin');
  // From MnSymbol package
  defineSymbol('\\ltimes', '\u22C9', 'mbin', 'ams');
  defineSymbol('\\rtimes', '\u22CA', 'mbin', 'ams');
  defineSymbol('\\leftthreetimes', '\u22CB', 'mbin', 'ams');
  defineSymbol('\\rightthreetimes', '\u22CC', 'mbin', 'ams');
  defineSymbol('\\intercal', '\u22BA', 'mbin', 'ams');
  defineSymbol('\\dotplus', '\u2214', 'mbin', 'ams');
  defineSymbol('\\doublebarwedge', '\u2A5E', 'mbin', 'ams');
  defineSymbol('\\divideontimes', '\u22C7', 'mbin', 'ams');
  defineSymbol('\\centerdot', '\u22C5', 'mbin', 'ams');
  defineSymbol('\\cdot', '\u22C5', 'mbin');
  defineSymbol('\\infty', '\u221E');
  defineSymbol('\\prime', '\u2032');
  defineSymbol('\\doubleprime', '\u2033'); // NOTE: Not in TeX, but Mathematica
  defineSymbol('\\angle', '\u2220');
  defineSymbol('`', '\u2018');
  defineSymbol('\\$', '$');
  defineSymbol('\\%', '%');
  defineSymbol('\\_', '_');
  // Note: In TeX, greek symbols are only available in Math mode
  defineSymbol('\\alpha', '\u03B1');
  defineSymbol('\\beta', '\u03B2');
  defineSymbol('\\gamma', '\u03B3');
  defineSymbol('\\delta', '\u03B4');
  defineSymbol('\\epsilon', '\u03F5');
  defineSymbol('\\varepsilon', '\u03B5');
  defineSymbol('\\zeta', '\u03B6');
  defineSymbol('\\eta', '\u03B7');
  defineSymbol('\\theta', '\u03B8');
  defineSymbol('\\vartheta', '\u03D1');
  defineSymbol('\\iota', '\u03B9');
  defineSymbol('\\kappa', '\u03BA');
  defineSymbol('\\varkappa', '\u03F0', 'mord', 'ams');
  defineSymbol('\\lambda', '\u03BB');
  defineSymbol('\\mu', '\u03BC');
  defineSymbol('\\nu', '\u03BD');
  defineSymbol('\\xi', '\u03BE');
  defineSymbol('\\omicron', 'o');
  defineSymbol('\\pi', '\u03C0');
  defineSymbol('\\varpi', '\u03D6');
  defineSymbol('\\rho', '\u03C1');
  defineSymbol('\\varrho', '\u03F1');
  defineSymbol('\\sigma', '\u03C3');
  defineSymbol('\\varsigma', '\u03C2');
  defineSymbol('\\tau', '\u03C4');
  defineSymbol('\\phi', '\u03D5');
  defineSymbol('\\varphi', '\u03C6');
  defineSymbol('\\upsilon', '\u03C5');
  defineSymbol('\\chi', '\u03C7');
  defineSymbol('\\psi', '\u03C8');
  defineSymbol('\\omega', '\u03C9');
  defineSymbol('\\Gamma', '\u0393');
  defineSymbol('\\Delta', '\u0394');
  defineSymbol('\\Theta', '\u0398');
  defineSymbol('\\Lambda', '\u039B');
  defineSymbol('\\Xi', '\u039E');
  defineSymbol('\\Pi', '\u03A0');
  defineSymbol('\\Sigma', '\u03A3');
  defineSymbol('\\Upsilon', '\u03A5');
  defineSymbol('\\Phi', '\u03A6');
  defineSymbol('\\Psi', '\u03A8');
  defineSymbol('\\Omega', '\u03A9');
  // 'ams' Greek
  defineSymbol('\\digamma', '\u03DD', 'mord', 'ams');
  defineSymbol('\\emptyset', '\u2205');
  defineSymbol('\\varnothing', '\u2205', 'mord', 'ams');
  defineSymbol('\\cap', '\u2229', 'mbin');
  defineSymbol('\\cup', '\u222A', 'mbin');
  defineSymbol('\\setminus', '\u2216', 'mbin');
  defineSymbol('\\smallsetminus', '\u2216', 'mbin', 'ams');
  defineSymbol('\\complement', '\u2201', 'mord', 'ams');
  defineSymbol('\\in', '\u2208', 'mrel');
  defineSymbol('\\notin', '\u2209', 'mrel');
  defineSymbol('\\not', '\u0338', 'mrel');
  defineSymbol('\\ni', '\u220B', 'mrel');
  defineSymbol('\\owns', '\u220B', 'mrel');
  defineSymbol('\\subset', '\u2282', 'mrel');
  defineSymbol('\\supset', '\u2283', 'mrel');
  defineSymbol('\\subseteq', '\u2286', 'mrel');
  defineSymbol('\\supseteq', '\u2287', 'mrel');
  defineSymbol('\\subsetneq', '\u228A', 'mrel', 'ams');
  defineSymbol('\\varsubsetneq', '\uE01A', 'mrel', 'ams');
  defineSymbol('\\subsetneqq', '\u2ACB', 'mrel', 'ams');
  defineSymbol('\\varsubsetneqq', '\uE017', 'mrel', 'ams');
  defineSymbol('\\nsubset', '\u2284', 'mrel', 'ams'); // NOTE: Not TeX?
  defineSymbol('\\nsupset', '\u2285', 'mrel', 'ams'); // NOTE: Not TeX?
  defineSymbol('\\nsubseteq', '\u2288', 'mrel', 'ams');
  defineSymbol('\\nsupseteq', '\u2289', 'mrel', 'ams');
  // See http://tex.stackexchange.com/questions/41476/lengths-and-when-to-use-them
  defineSymbol('\\ ', '\u00A0', 'space');
  defineSymbol('~', '\u00A0', 'space');
  defineSymbol('\\space', '\u00A0', 'space');
  defineSymbol('\\!', null, 'spacing');
  defineSymbol('\\,', null, 'spacing');
  defineSymbol('\\:', null, 'spacing');
  defineSymbol('\\;', null, 'spacing');
  defineSymbol('\\enskip', null, 'spacing');
  // \enspace is a TeX command (not LaTeX) equivalent to a \skip
  defineSymbol('\\enspace', null, 'spacing');
  defineSymbol('\\quad', null, 'spacing');
  defineSymbol('\\qquad', null, 'spacing');
  // Punctuation
  defineSymbol('\\colon', ':', 'mpunct');
  defineSymbol('\\cdotp', '\u22C5', 'mpunct');
  defineSymbol('\\cdots', '\u22EF', 'minner');
  defineSymbol('\\ddots', '\u22F1', 'minner');
  defineSymbol('\\ldots', '\u2026', 'minner');
  defineSymbol('\\mathellipsis', '\u2026', 'minner');
  defineSymbol('\\vdots', '\u22EE');
  defineSymbol('\\ldotp', '\u002E', 'mpunct');
  defineSymbol(',', ',', 'mpunct');
  defineSymbol(';', ';', 'mpunct');
  defineSymbol('\\land', '\u2227', 'mbin');
  defineSymbol('\\wedge', '\u2227', 'mbin');
  defineSymbol('\\lor', '\u2228', 'mbin');
  defineSymbol('\\vee', '\u2228', 'mbin');
  defineSymbol('\\lnot', '\u00AC');
  defineSymbol('\\neg', '\u00AC');
  defineSymbol('\\barwedge', '\u22BC', 'mbin', 'ams');
  defineSymbol('\\veebar', '\u22BB', 'mbin', 'ams');
  defineSymbol('\\nor', '\u22BB', 'mbin', 'ams'); // NOTE: Not TeX, Mathematica
  defineSymbol('\\curlywedge', '\u22CF', 'mbin', 'ams');
  defineSymbol('\\curlyvee', '\u22CE', 'mbin', 'ams');
  defineSymbol('\\square', '\u25A1', 'mord', 'ams');
  defineSymbol('\\Box', '\u25A1', 'mord', 'ams');
  defineSymbol('\\blacksquare', '\u25A0', 'mord', 'ams');
  defineSymbol('\\boxminus', '\u229F', 'mbin', 'ams');
  defineSymbol('\\boxplus', '\u229E', 'mbin', 'ams');
  defineSymbol('\\boxtimes', '\u22A0', 'mbin', 'ams');
  defineSymbol('\\boxdot', '\u22A1', 'mbin', 'ams');
  defineSymbol('\\circ', '\u2218', 'mbin');
  defineSymbol('\\bigcirc', '\u25EF', 'mbin');
  defineSymbol('\\bullet', '\u2219', 'mbin');
  defineSymbol('\\circleddash', '\u229D', 'mbin', 'ams');
  defineSymbol('\\circledast', '\u229B', 'mbin', 'ams');
  defineSymbol('\\oplus', '\u2295', 'mbin');
  defineSymbol('\\ominus', '\u2296', 'mbin');
  defineSymbol('\\otimes', '\u2297', 'mbin');
  defineSymbol('\\odot', '\u2299', 'mbin');
  defineSymbol('\\circledcirc', '\u229A', 'mbin', 'ams');
  defineSymbol('\\oslash', '\u2298', 'mbin');
  defineSymbol('\\circledS', '\u24C8', 'mord', 'ams');
  defineSymbol('\\circledR', '\u00AE', 'mord', 'ams');
  defineSymbol('\\triangle', '\u25B3');
  defineSymbol('\\bigtriangleup', '\u25B3', 'mbin');
  defineSymbol('\\vartriangle', '\u25B3', 'mrel', 'ams');
  defineSymbol('\\triangleq', '\u225C', 'mrel', 'ams');
  defineSymbol('\\triangledown', '\u25BD', 'mord', 'ams');
  defineSymbol('\\bigtriangledown', '\u25BD', 'mbin');
  defineSymbol('\\triangleleft', '\u25C3', 'mbin');
  defineSymbol('\\vartriangleleft', '\u22B2', 'mrel', 'ams');
  defineSymbol('\\trianglelefteq', '\u22B4', 'mrel', 'ams');
  defineSymbol('\\ntriangleleft', '\u22EA', 'mrel', 'ams');
  defineSymbol('\\ntrianglelefteq', '\u22EC', 'mrel', 'ams');
  defineSymbol('\\triangleright', '\u25B9', 'mbin');
  defineSymbol('\\vartriangleright', '\u22B3', 'mrel', 'ams');
  defineSymbol('\\trianglerighteq', '\u22B5', 'mrel', 'ams');
  defineSymbol('\\ntriangleright', '\u22EB', 'mrel', 'ams');
  defineSymbol('\\ntrianglerighteq', '\u22ED', 'mrel', 'ams');
  defineSymbol('\\blacktriangle', '\u25B2', 'mord', 'ams');
  defineSymbol('\\blacktriangledown', '\u25BC', 'mord', 'ams');
  defineSymbol('\\blacktriangleleft', '\u25C0', 'mrel', 'ams');
  defineSymbol('\\blacktriangleright', '\u25B6', 'mrel', 'ams');
  defineSymbol('\\/', '/');
  defineSymbol('|', '\u2223', 'mord');
  defineSymbol('\\And', '\u0026', 'mbin');
  defineSymbol('\\imath', '\u0131');
  defineSymbol('\\jmath', '\u0237');
  defineSymbol('\\degree', '\u00B0');
  defineSymbol("'", '\u2032'); // Prime
  defineSymbol('"', '\u201D'); // Double Prime
  // defineSymbol( "\'', '\u2033',  'mord',  MAIN);       // Double Prime

  var _a, _b;
  // Adapted from https://jakedeichert.com/blog/2020/02/a-super-hacky-alternative-to-import-meta-url/
  function getFileUrl() {
      const stackTraceFrames = String(new Error().stack)
          .replace(/^Error.*\n/, '')
          .split('\n');
      if (stackTraceFrames.length === 0)
          return '';
      // 0 = this getFileUrl frame (because the Error is created here)
      // 1 = the caller of getFileUrl (the file path we want to grab)
      const callerFrame = stackTraceFrames[0];
      // Extract the script's complete url
      const m = callerFrame.match(/http.*js/);
      if (!m)
          return '';
      return m[0];
  }
  const gScriptUrl = (_b = (_a = document.currentScript) === null || _a === void 0 ? void 0 : _a.src) !== null && _b !== void 0 ? _b : getFileUrl();

  // The URL of the bundled MathLive library. Used later to locate the `fonts`
  // directory, relative to the library
  // If loaded via a <script> tag, `document.currentScript.src` is this location
  // If loaded via a module (e.g. `import ...`),`import.meta.url` is this location.
  // However, `import.meta` is not supported by WebPack. So, use a super-hacky-alternative
  // to get the URL.
  // See https://github.com/webpack/webpack/issues/6719
  async function loadFonts(fontsDirectory, onError) {
      var _a;
      function makeFontFace(name, source, descriptors = {}) {
          return new FontFace(name, `url(${source}.woff2) format('woff2'), url(${source}.woff) format('woff')`, descriptors);
      }
      // If the "mathlive-fonts.css" stylesheet is included in the <head> of the
      // page, it will include a `--ML__static-fonts` variable.
      // In that case, don't load the fonts dynamically
      const useStaticFonts = (_a = getComputedStyle(document.documentElement).getPropertyValue('--ML__static-fonts')) !== null && _a !== void 0 ? _a : false;
      if (useStaticFonts)
          return;
      if ('fonts' in document) {
          const fontFamilies = [
              'KaTeX_Main',
              'KaTeX_Math',
              'KaTeX_AMS',
              'KaTeX_Caligraphic',
              'KaTeX_Fraktur',
              'KaTeX_SansSerif',
              'KaTeX_Script',
              'KaTeX_Size1',
              'KaTeX_Size2',
              'KaTeX_Size3',
              'KaTeX_Size4',
          ];
          // For (const fontFace of document.fonts.values()) { console.log(fontFace.family)}
          let fontsLoaded = false;
          // Firefox returns true for fonts that are not loaded...
          // https://bugzilla.mozilla.org/show_bug.cgi?id=1252821 🤦‍♂️
          // So, if on Firefox, always assume that the fonts are not loaded.
          if (!/firefox/i.test(navigator.userAgent)) {
              try {
                  fontsLoaded = fontFamilies.every((x) => document.fonts.check('16px ' + x));
              }
              catch {
                  fontsLoaded = false;
              }
          }
          if (!fontsLoaded) {
              if (document.body.classList.contains('ML__fonts-loading')) {
                  return;
              }
              document.body.classList.add('ML__fonts-loading');
              // Locate the `fonts` folder relative to the script URL
              const fontsFolder = new URL(fontsDirectory !== null && fontsDirectory !== void 0 ? fontsDirectory : './fonts', gScriptUrl).toString();
              const fonts = [
                  ['KaTeX_Main-Regular'],
                  ['KaTeX_Main-BoldItalic', { style: 'italic', weight: 'bold' }],
                  ['KaTeX_Main-Bold', { weight: 'bold' }],
                  ['KaTeX_Main-Italic', { style: 'italic' }],
                  ['KaTeX_Math-Italic', { style: 'italic' }],
                  ['KaTeX_Math-BoldItalic', { style: 'italic', weight: 'bold' }],
                  ['KaTeX_AMS-Regular'],
                  ['KaTeX_Caligraphic-Regular'],
                  ['KaTeX_Caligraphic-Bold', { weight: 'bold' }],
                  ['KaTeX_Fraktur-Regular'],
                  ['KaTeX_Fraktur-Bold', { weight: 'bold' }],
                  ['KaTeX_SansSerif-Regular', { style: 'italic' }],
                  ['KaTeX_SansSerif-Bold', { weight: 'bold' }],
                  ['KaTeX_SansSerif-Italic', { style: 'italic' }],
                  ['KaTeX_Script-Regular'],
                  ['KaTeX_Typewriter-Regular'],
                  ['KaTeX_Size1-Regular'],
                  ['KaTeX_Size2-Regular'],
                  ['KaTeX_Size3-Regular'],
                  ['KaTeX_Size4-Regular'],
              ].map((x) => makeFontFace(x[0].replace(/-[a-zA-Z]+$/, ''), fontsFolder + '/' + x[0], x[1]));
              try {
                  const loadedFonts = (await Promise.all(fonts.map((x) => {
                      try {
                          return x.load();
                      }
                      catch (error) {
                          if (typeof onError === 'function') {
                              onError({
                                  code: 'font-not-found',
                                  arg: error,
                              });
                          }
                      }
                      return undefined;
                  })));
                  // Render them at the same time
                  loadedFonts.forEach((font) => document.fonts.add(font));
              }
              catch (error) {
                  console.error(error);
              }
              // Event if an error occur, give up and pretend the fonts are
              // loaded (displayign somehting is better than nothing)
              document.body.classList.remove('ML__fonts-loading');
          }
      }
  }

  function hashCode(s) {
      let hash = 0;
      if (s.length === 0) {
          return hash;
      }
      for (let i = 0; i < s.length; i++) {
          const char = s.charCodeAt(i);
          hash = (hash << 5) - hash + char;
          hash &= hash; // Convert to 32bit integer
          // hash &= hash; // Convert to 32bit integer
      }
      return hash;
  }

  function inject(element, css) {
      var _a, _b;
      if (!css)
          return null;
      let root = (_a = element === null || element === void 0 ? void 0 : element.getRootNode()) !== null && _a !== void 0 ? _a : document === null || document === void 0 ? void 0 : document.head;
      if (!root)
          return null;
      if (root === document)
          root = document.head;
      const id = hashCode(css).toString(36);
      const element_ = root.querySelector(`style[data-id="${id}"]`);
      if (element_) {
          const refCount = Number.parseFloat((_b = element_.getAttribute('data-refcount')) !== null && _b !== void 0 ? _b : '0');
          element_.dataset.refcount = Number(refCount + 1).toString();
      }
      else {
          // Make a new node holding the stylesheet
          const styleNode = document.createElement('style');
          // StyleNode.setAttribute('media', 'screen')
          // styleNode.setAttribute('media', 'only screen and (max-width : 1024px)')
          styleNode.dataset.id = id;
          styleNode.dataset.refcount = '1';
          styleNode.append(document.createTextNode(css));
          root.appendChild(styleNode);
      }
      return {
          release: () => {
              var _a;
              const element_ = document.head.querySelector(`style[data-id="${id}"]`);
              if (element_) {
                  const refCount = Number.parseFloat((_a = element_.getAttribute('data-refcount')) !== null && _a !== void 0 ? _a : '0');
                  if (refCount === 1) {
                      element_.remove();
                  }
                  else {
                      element_.dataset.refcount = Number(refCount - 1).toString();
                  }
              }
          },
      };
  }

  function isOffset(value) {
      return typeof value === 'number' && !Number.isNaN(value);
  }
  function isRange(value) {
      return Array.isArray(value) && value.length === 2;
  }
  function isSelection(value) {
      return (typeof value === 'object' &&
          'ranges' in value &&
          Array.isArray(value.ranges));
  }

  /* eslint-disable */
  // Type MathJson =
  //     | string
  //     | number
  //     | boolean
  //     | null
  //     | { [property: string]: MathJson }
  //     | MathJson[];
  const CANONICAL_NAMES = {
      // CONSTANTS
      '\\imaginaryI': '\u2148',
      '\\imaginaryJ': '\u2149',
      '\\pi': 'π',
      '\\exponentialE': '\u212F',
      // ARITHMETIC
      '﹢': '+',
      '＋': '+',
      '−': '-',
      '-': '-',
      '﹣': '-',
      '－': '-',
      '\\times': '*',
      '\\cdot': '*',
      '⨉': '*',
      '️✖': '*',
      '️×': '*',
      '.': '*',
      '÷': '/',
      // '/':             '/',        // SOLIDUS
      '⁄': '/',
      '／': '/',
      '!': 'factorial',
      '\\mp': 'minusplus',
      '\\ne': '!=',
      '\\coloneq': ':=',
      '\\questeq': '?=',
      '\\approx': 'approx',
      '\\cong': 'congruent',
      '\\sim': 'similar',
      '\\equiv': 'equiv',
      '\\pm': 'plusminus',
      '\\land': 'and',
      '\\wedge': 'and',
      '\\lor': 'or',
      '\\vee': 'or',
      '\\oplus': 'xor',
      '\\veebar': 'xor',
      '\\lnot': 'not',
      '\\neg': 'not',
      '\\exists': 'exists',
      '\\nexists': '!exists',
      '\\forall': 'forAll',
      '\\backepsilon': 'suchThat',
      '\\therefore': 'therefore',
      '\\because': 'because',
      '\\nabla': 'nabla',
      '\\circ': 'circle',
      // '\\oplus':       'oplus',
      '\\ominus': 'ominus',
      '\\odot': 'odot',
      '\\otimes': 'otimes',
      '\\zeta': 'Zeta',
      '\\Gamma': 'Gamma',
      '\\min': 'min',
      '\\max': 'max',
      '\\mod': 'mod',
      '\\lim': 'lim',
      '\\sum': 'sum',
      '\\prod': 'prod',
      '\\int': 'integral',
      '\\iint': 'integral2',
      '\\iiint': 'integral3',
      '\\Re': 'Re',
      '\\gothicCapitalR': 'Re',
      '\\Im': 'Im',
      '\\gothicCapitalI': 'Im',
      '\\binom': 'nCr',
      '\\partial': 'partial',
      '\\differentialD': 'differentialD',
      '\\capitalDifferentialD': 'capitalDifferentialD',
      '\\Finv': 'Finv',
      '\\Game': 'Game',
      '\\wp': 'wp',
      '\\ast': 'ast',
      '\\star': 'star',
      '\\asymp': 'asymp',
      // Function domain, limits
      '\\to': 'to',
      '\\gets': 'gets',
      // Sets
      '\\in': 'elementof',
      '\\notin': '!elementof',
      '\\ni': 'ownedby',
      '\\owns': 'ownedby',
      '\\subset': 'subset',
      '\\supset': 'superset',
      '\\complement': 'complement',
      // Logic
      '\\rightarrow': 'shortLogicalImplies',
      '\\leftarrow': 'shortLogicalImpliedBy',
      '\\leftrightarrow': 'shortLogicalEquivalent',
      '\\longrightarrow': 'logicalImplies',
      '\\longleftarrow': 'logicalImpliedBy',
      '\\longleftrightarrow': 'logicalEquivalent',
      // Metalogic
      '\\Rightarrow': 'shortImplies',
      '\\Leftarrow': 'shortImpliedBy',
      '\\Leftrightarrow': 'shortEquivalent',
      '\\implies': 'implies',
      '\\Longrightarrow': 'implies',
      '\\impliedby': 'impliedBy',
      '\\Longleftarrow': 'impliedBy',
      '\\iff': 'equivalent',
      '\\Longleftrightarrow': 'equivalent',
  };
  // The OP_NAME table maps a canonical name to a function name
  const OP_NAME = {
      '+': 'add',
      '*': 'multiply',
      '-': 'subtract',
      '/': 'divide',
      '=': 'equal',
      ':=': 'assign',
      '!=': 'ne',
      '?=': 'questeq',
      'approx': 'approx',
      'congruent': 'congruent',
      'similar': 'similar',
      'equiv': 'equiv',
      '<': 'lt',
      '>': 'gt',
      '<=': 'le',
      '>=': 'ge',
      '≤': 'le',
      '≥': 'ge',
      '>>': 'gg',
      '<<': 'll',
      '**': 'pow',
      '++': 'increment',
      '--': 'decrement',
  };
  // The FUNCTION_TEMPLATE table maps a canonical name to a LaTeX template
  const FUNCTION_TEMPLATE = {
      'equal': '%0 = %1',
      'ne': '%0 \\ne %1',
      'questeq': '%0 \\questeq %1',
      'approx': '%0 \\approx %1',
      'congruent': '%0 \\cong %1',
      'similar': '%0 \\sim %1',
      'equiv': '%0 \\equiv %1',
      'assign': '%0 := %1',
      'lt': '%0 < %1',
      'gt': '%0 > %1',
      'le': '%0 \\le %1',
      'ge': '%0 \\ge %1',
      // TRIGONOMETRY
      'sin': '\\sin%_%^ %0',
      'cos': '\\cos%_%^ %0',
      'tan': '\\tan%_%^ %0',
      'cot': '\\cot%_%^ %0',
      'sec': '\\sec%_%^ %0',
      'csc': '\\csc%_%^ %0',
      'sinh': '\\sinh %0',
      'cosh': '\\cosh %0',
      'tanh': '\\tanh %0',
      'csch': '\\csch %0',
      'sech': '\\sech %0',
      'coth': '\\coth %0',
      'arcsin': '\\arcsin %0',
      'arccos': '\\arccos %0',
      'arctan': '\\arctan %0',
      'arccot': '\\arcctg %0',
      'arcsec': '\\arcsec %0',
      'arccsc': '\\arccsc %0',
      'arsinh': '\\arsinh %0',
      'arcosh': '\\arcosh %0',
      'artanh': '\\artanh %0',
      'arcsch': '\\arcsch %0',
      'arsech': '\\arsech %0',
      'arcoth': '\\arcoth %0',
      // LOGARITHMS
      'ln': '\\ln%_%^ %',
      'log': '\\log%_%^ %',
      'lg': '\\lg %',
      'lb': '\\lb %',
      // Big operator
      'sum': '\\sum%_%^ %0',
      'prod': '\\prod%_%^ %0',
      // OTHER
      'Zeta': '\\zeta%_%^ %',
      'Gamma': '\\Gamma %',
      'min': '\\min%_%^ %',
      'max': '\\max%_%^ %',
      'mod': '\\mod%_%^ %',
      'lim': '\\lim%_%^ %',
      'binom': '\\binom %',
      'nabla': '\\nabla %',
      'curl': '\\nabla\\times %0',
      'div': '\\nabla\\cdot %0',
      'floor': '\\lfloor %0 \\rfloor%_%^',
      'ceil': '\\lceil %0 \\rceil%_%^',
      'abs': '\\left| %0 \\right|%_%^',
      'norm': '\\lVert %0 \\rVert%_%^',
      'ucorner': '\\ulcorner %0 \\urcorner%_%^',
      'lcorner': '\\llcorner %0 \\lrcorner%_%^',
      'angle': '\\langle %0 \\rangle%_%^',
      'group': '\\lgroup %0 \\rgroup%_%^',
      'moustache': '\\lmoustache %0 \\rmoustache%_%^',
      'brace': '\\lbrace %0 \\rbrace%_%^',
      'sqrt[]': '\\sqrt[%^]{%0}',
      'sqrt': '\\sqrt{%0}',
      'lcm': '\\operatorname{lcm}%',
      'gcd': '\\operatorname{gcd}%',
      'erf': '\\operatorname{erf}%',
      'erfc': '\\operatorname{erfc}%',
      'randomReal': '\\operatorname{randomReal}%',
      'randomInteger': '\\operatorname{randomInteger}%',
      // Logic operators
      'and': '%0 \\land %1',
      'or': '%0 \\lor %1',
      'xor': '%0 \\oplus %1',
      'not': '%0 \\lnot %1',
      // Other operators
      'circle': '%0 \\circ %1',
      'ast': '%0 \\ast %1',
      'star': '%0 \\star %1',
      'asymp': '%0 \\asymp %1',
      '/': '\\frac{%0}{%1}',
      'Re': '\\Re{%0}',
      'Im': '\\Im{%0}',
      'factorial': '%0!',
      'factorial2': '%0!!',
  };
  // From www.w3.org/TR/MathML3/appendixc.html
  // The keys of OP_PRECEDENCE are "canonical names"
  // (the values of the CANONICAL_NAMES table above, e.g. "?=")
  // Those are different from the latex names (e.g. \\questeq)
  // and from the function names (e.g. "questeq")
  const OP_PRECEDENCE = {
      'degree': 880,
      'nabla': 740,
      'curl': 740,
      'partial': 740,
      'differentialD': 740,
      'capitalDifferentialD': 740,
      '**': 720,
      'odot': 710,
      // Logical not
      'not': 680,
      // Division
      'div': 660,
      'solidus': 660,
      '/': 660,
      'setminus': 650,
      '%': 640,
      'otimes': 410,
      // Set operators
      'union': 350,
      'intersection': 350,
      // Multiplication, division and modulo
      '*': 390,
      'ast': 390,
      '.': 390,
      'oplus': 300,
      'ominus': 300,
      // Addition
      '+': 275,
      '-': 275,
      '+-': 275,
      '-+': 275,
      // Most circled-ops are 265
      'circle': 265,
      'circledast': 265,
      'circledcirc': 265,
      'star': 265,
      // Range
      '..': 263,
      // Unit conversion
      'to': 262,
      'in': 262,
      '|': 261,
      // Relational
      'congruent': 265,
      'equiv': 260,
      '=': 260,
      '!=': 255,
      '?=': 255,
      'similar': 250,
      'approx': 247,
      '<': 245,
      '>': 243,
      '>=': 242,
      '≥': 242,
      '<=': 241,
      // Set operator
      'complement': 240,
      'subset': 240,
      'superset': 240,
      // @todo and equality and neg operators
      'elementof': 240,
      '!elementof': 240,
      //
      'exists': 230,
      '!exists': 230,
      'forall': 230,
      // Logical operators
      'and': 200,
      'xor': 195,
      'or': 190,
      // Note: 'not' is 680
      // center, low, diag, vert ellipsis         150
      // Composition/sequence
      'suchThat': 110,
      ':': 100,
      // '..':               100,
      // '...':               100,
      // Conditional (?:)
      // Assignment
      'assign': 80,
      ':=': 80,
      'therefore': 70,
      'because': 70,
      // Arrows
      // Note: MathML had 270 for the arrows, but this
      // would not work for (a = b => b = a)
      // See also https://en.wikipedia.org/wiki/Logical_connective#Order_of_precedence
      // for a suggested precedence (note that in this page lower precedence
      // has the opposite meaning as what we use)
      'shortLogicalImplies': 52,
      'shortImplies': 51,
      'logicalImplies': 50,
      'implies': 49,
      'shortLogicalImpliedBy': 48,
      'shortImpliedBy': 47,
      'logicalImpliedBy': 46,
      'impliedBy': 45,
      'shortLogicalEquivalent': 44,
      'shortEquivalent': 43,
      'logicalEquivalent': 42,
      'equivalent': 41,
      ',': 40,
      ';': 30,
  };
  function getArg(ast, index) {
      return isArray(ast.arg) ? ast.arg[index] : undefined;
  }
  /**
   * Given a canonical name, return its precedence
   * @param canonicalName, for example "and"
   */
  function getPrecedence(canonicalName) {
      return canonicalName ? OP_PRECEDENCE[canonicalName] || -1 : -1;
  }
  function getAssociativity(canonicalName) {
      if (/=|=>/.test(canonicalName)) {
          return 'right';
      }
      return 'left';
  }
  /**
   *
   * @param name - function canonical name
   */
  function getLatexTemplateForFunction(name) {
      let result = FUNCTION_TEMPLATE[name];
      if (!result) {
          result =
              name.length > 1 ? '\\operatorname{' + name + '}%^%_ %' : name + '%^%_ %';
      }
      return result;
  }
  /**
   *
   * @param name symbol name, e.g. "alpha"
   */
  function getLatexForSymbol(name) {
      let result = FUNCTION_TEMPLATE[name];
      if (result) {
          return result.replace('%1', '').replace('%0', '').replace('%', '');
      }
      if (name.length > 1) {
          result = '\\' + name;
      }
      if (!result) {
          result = unicodeStringToLatex('math', name);
      }
      return result;
  }
  function isFunction(canonicalName) {
      if (canonicalName === 'f' || canonicalName === 'g')
          return true;
      const t = FUNCTION_TEMPLATE[canonicalName];
      if (!t)
          return false;
      // A plain "%" is a placeholder for an argument list, indicating a function
      if (/%[^01_^]?/.test(t))
          return true;
      return false;
  }
  /**
   *
   * @param latex, for example '\\times'
   * @retur the canonical name for the input, for example '*'
   */
  function getCanonicalName(latex) {
      latex = (latex || '').trim();
      let result = CANONICAL_NAMES[latex];
      if (!result) {
          if (/^\\[^{}]+$/.test(latex)) {
              const info = getInfo(latex, 'math', {});
              result = info ? info.value || latex.slice(1) : latex.slice(1);
          }
          else {
              result = latex;
          }
      }
      return result;
  }
  /**
   * Return the operator precedence of the atom
   * or null if not an operator
   */
  function opPrec(atom) {
      if (!atom)
          return null;
      const name = getCanonicalName(getString(atom));
      const result = [
          getPrecedence(name),
          getAssociativity(name),
      ];
      if (result[0] <= 0)
          return null;
      return result;
  }
  function isOperator(atom) {
      return opPrec(atom) !== null;
  }
  const DELIM_FUNCTION = {
      '\\lfloor\\rfloor': 'floor',
      '\\lceil\\rceil': 'ceil',
      '\\vert\\vert': 'abs',
      '\\lvert\\rvert': 'abs',
      '||': 'abs',
      '\\Vert\\Vert': 'norm',
      '\\lVert\\rVert': 'norm',
      '\\ulcorner\\urcorner': 'ucorner',
      '\\llcorner\\lrcorner': 'lcorner',
      '\\langle\\rangle': 'angle',
      '\\lgroup\\rgroup': 'group',
      '\\lmoustache\\rmoustache': 'moustache',
      '\\lbrace\\rbrace': 'brace',
  };
  const POSTFIX_FUNCTION = {
      '!': 'factorial',
      '\\dag': 'dagger',
      '\\dagger': 'dagger',
      '\\ddagger': 'dagger2',
      '\\maltese': 'maltese',
      '\\backprime': 'backprime',
      '\\backdoubleprime': 'backprime2',
      '\\prime': 'prime',
      '\\doubleprime': 'prime2',
      '\\$': '$',
      '\\%': '%',
      '\\_': '_',
      '\\degree': 'degree',
  };
  const ASSOCIATIVE_FUNCTION = {
      '+': 'add',
      '-': 'add',
      // handled specifically so that the
      // argument is negated
      '*': 'multiply',
      '=': 'equal',
      ',': 'list',
      ';': 'list2',
      'and': 'and',
      'or': 'or',
      'xor': 'xor',
      'union': 'union',
      // ShortLogicalEquivalent and logicalEquivalent map to the same function
      // they mean the same thing, but have a difference precedence.
      'shortLogicalEquivalent': 'logicalEquivalent',
      'logicalEquivalent': 'logicalEquivalent',
      // shortEquivalent and equivalent map to the same function
      // they mean the same thing, but have a difference precedence.
      'shortEquivalent': 'equivalent',
      'equivalent': 'equivalent',
  };
  const SUPER_ASSOCIATIVE_FUNCTION = {
      ',': 'list',
      ';': 'list2',
  };
  function getString(atom) {
      if (typeof atom === 'string')
          return atom;
      if (isArray(atom)) {
          let result = '';
          for (const subAtom of atom) {
              result += getString(subAtom);
          }
          return result;
      }
      if (atom.symbol &&
          !/^\\math(op|bin|rel|open|punct|ord|inner)/.test(atom.symbol)) {
          return atom.symbol;
      }
      if (atom.type === 'leftright') {
          return '';
      }
      if (typeof atom.value === 'string') {
          return atom.value;
      }
      if (isArray(atom.branch('body'))) {
          let result = '';
          for (const subAtom of atom.branch('body')) {
              result += getString(subAtom);
          }
          return result;
      }
      return '';
  }
  /**
   *
   * @param {object} expr - Abstract Syntax Tree object
   * @return A string, the symbol, or undefined
   */
  function asSymbol(node) {
      return typeof node.sym === 'string'
          ? getLatexForSymbol(node.sym) || node.sym
          : '';
  }
  /**
   *
   * @param {object} node - Abstract Syntax Tree node
   * @return A JavaScript number, the value of the AST or NaN
   */
  function asMachineNumber(node) {
      return Number.parseFloat(node.num);
  }
  function isNumber(node) {
      return typeof node === 'object' && node.num !== undefined;
  }
  function numberRe(node) {
      let result = 0;
      if (isNumber(node)) {
          if (typeof node.num === 'object') {
              result =
                  node.num.re !== undefined ? parseFloatToPrecision(node.num.re) : 0;
          }
          else {
              result = Number.parseFloat(node.num);
          }
      }
      return result;
  }
  function numberIm(node) {
      let result = 0;
      if (isNumber(node)) {
          if (typeof node.num === 'object') {
              result =
                  typeof node.num.im !== 'undefined'
                      ? parseFloatToPrecision(node.num.im)
                      : 0;
          }
      }
      return result;
  }
  function isComplexWithRealAndImaginary(node) {
      return numberRe(node) !== 0 && numberIm(node) !== 0;
  }
  function hasSup(node) {
      return node && typeof node.sup !== 'undefined';
  }
  function hasSub(node) {
      return node && typeof node.sub !== 'undefined';
  }
  /**
   * Return true if the current atom is of the specified type and value.
   */
  function isAtom(expr, type, value) {
      let result = false;
      const atom = expr.atoms[expr.index];
      if (atom && atom.type === type) {
          result = typeof value === 'undefined' ? true : getString(atom) === value;
      }
      return result;
  }
  function wrapFn(functionName, ...parameters) {
      const result = { fn: functionName, arg: undefined };
      if (parameters) {
          const args = [];
          for (const arg of parameters) {
              if (arg)
                  args.push(arg);
          }
          if (args.length > 0)
              result.arg = args;
      }
      return result;
  }
  function wrapNumber(number) {
      if (typeof number === 'number') {
          return { num: number.toString() };
      }
      if (typeof number === 'string') {
          return { num: number };
      }
      if (typeof number === 'object') {
          // This is a complex number
          console.assert(typeof number.re === 'string' || typeof number.im === 'string');
          return { num: number };
      }
      return undefined;
  }
  /**
   * Return the negative of the expression. Usually { fn:'negate', arg }
   * but for numbers, the negated number
   * @param {object} node
   * @private
   */
  function negate(node) {
      if (isNumber(node)) {
          const re = numberRe(node);
          const im = numberIm(node);
          if (im !== 0) {
              if (re !== 0) {
                  node.num.re = (-re).toString();
              }
              node.num.im = (-im).toString();
          }
          else {
              node.num = (-re).toString();
          }
          return node;
      }
      return wrapFn('negate', node);
  }
  function nextIsSupsub(expr) {
      const atom = expr.atoms[expr.index + 1];
      return atom && atom.type === 'msubsup';
  }
  /**
   * Parse for a possible sup/sub attached directly to the current atom
   * or to a following 'msubsup' atom.
   * After the call, the index points to the next atom to process.
   * @param {object} expr
   * @private
   */
  function parseSupsub(expr, options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      let atom = expr.atoms[expr.index];
      // Is there a supsub directly on this atom?
      if (atom &&
          (typeof ((_a = atom.branches) === null || _a === void 0 ? void 0 : _a.superscript) !== 'undefined' ||
              typeof ((_b = atom.branches) === null || _b === void 0 ? void 0 : _b.subscript) !== 'undefined')) {
          // Move to the following atom
          expr.index += 1;
      }
      else {
          atom = null;
      }
      // If this atom didn't have a sup/sub,
      // is the following atom a subsup atom?
      if (!atom) {
          atom = expr.atoms[expr.index + 1];
          if (!atom ||
              atom.type !== 'msubsup' ||
              !(((_c = atom.branches) === null || _c === void 0 ? void 0 : _c.superscript) || ((_d = atom.branches) === null || _d === void 0 ? void 0 : _d.subscript))) {
              atom = null;
          }
          else {
              // Yes. Skip the current atom and the supsub
              expr.index += 2;
          }
      }
      if (atom) {
          if (typeof ((_e = atom.branches) === null || _e === void 0 ? void 0 : _e.subscript) !== 'undefined') {
              expr.ast.sub = parse((_f = atom.branches) === null || _f === void 0 ? void 0 : _f.subscript, options);
          }
          if (typeof ((_g = atom.branches) === null || _g === void 0 ? void 0 : _g.superscript) !== 'undefined') {
              if (atom.type === 'msubsup') {
                  if (/['\u2032]|\\prime/.test(getString((_h = atom.branches) === null || _h === void 0 ? void 0 : _h.superscript))) {
                      expr.index += 1;
                      atom = expr.atoms[expr.index + 1];
                      if (atom &&
                          atom.type === 'msubsup' &&
                          /['\u2032]|\\prime/.test(getString((_j = atom.branches) === null || _j === void 0 ? void 0 : _j.superscript))) {
                          expr.ast.sup = { sym: '\u2033' }; // DOUBLE-PRIME
                      }
                      else {
                          expr.ast.sup = { sym: '\u2032' }; // PRIME
                          expr.index -= 1;
                      }
                  }
                  else if (/['\u2033]|\\doubleprime/.test(getString((_k = atom.branches) === null || _k === void 0 ? void 0 : _k.superscript))) {
                      expr.ast.sup = { sym: '\u2033' }; // DOUBLE-PRIME
                  }
                  else if (expr.ast) {
                      expr.ast.sup = parse((_l = atom.branches) === null || _l === void 0 ? void 0 : _l.superscript, options);
                  }
              }
              else {
                  expr.ast.sup = parse((_m = atom.branches) === null || _m === void 0 ? void 0 : _m.superscript, options);
              }
          }
      }
      else {
          // Didn't find a supsup either on this atom and there was no 'msubsup'
          // Time to move on to the next atom.
          expr.index += 1;
      }
      return expr;
  }
  /**
   * Parse postfix operators, such as "!" (factorial)
   * @private
   */
  function parsePostfix(expr, options) {
      const lhs = expr.ast;
      if (nextIsDigraph(expr, '!!')) {
          expr.index += 1;
          expr.ast = wrapFn('factorial2', lhs);
          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
          return expr;
      }
      if (nextIsDigraph(expr, '++')) {
          expr.index += 1;
          expr.ast = wrapFn('increment', lhs);
          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
          return expr;
      }
      if (nextIsDigraph(expr, '--')) {
          expr.index += 1;
          expr.ast = wrapFn('decrement', lhs);
          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
          return expr;
      }
      const atom = expr.atoms[expr.index];
      if ((atom === null || atom === void 0 ? void 0 : atom.symbol) && POSTFIX_FUNCTION[atom.symbol]) {
          expr.ast = wrapFn(POSTFIX_FUNCTION[atom.symbol], lhs);
          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
      }
      return expr;
  }
  /**
   * Delimiters can be expressed:
   * - as a matching pair of regular characters: '(a)'
   * - a as 'leftright' expression: '\left(a\right)'
   * - as a matching pair of 'sizeddelim': '\Bigl(a\Bigr)
   *
   * Note that the '\delim' command is only used for delimiters in the middle
   * of a \left\right pair and not to represent pair-matched delimiters.
   *
   * This function handles all three cases
   */
  function parseDelim(expr, ldelim, rdelim, options) {
      expr.index = expr.index || 0;
      if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) {
          expr.ast = undefined;
          return expr;
      }
      const savedPrec = expr.minPrec;
      expr.minPrec = 0;
      let atom = expr.atoms[expr.index];
      if (!ldelim) {
          // If we didn't expect a specific delimiter, parse any delimiter
          // and return it as a function application
          let pairedDelim = true;
          if (atom.type === 'mopen') {
              ldelim = atom.value;
              rdelim = RIGHT_DELIM[ldelim];
          }
          else if (atom.type === 'sizeddelim') {
              ldelim = atom.value;
              rdelim = RIGHT_DELIM[ldelim];
          }
          else if (atom instanceof LeftRightAtom) {
              pairedDelim = false;
              ldelim = atom.leftDelim;
              rdelim = atom.rightDelim;
              // If we have an unclosed smart fence, assume the right delim is
              // matching the left delim
              if (rdelim === '?')
                  rdelim = RIGHT_DELIM[ldelim];
          }
          if (ldelim && rdelim) {
              if (ldelim === '|' && rdelim === '|') {
                  // Check if this could be a ||x|| instead of |x|
                  const atom = expr.atoms[expr.index + 1];
                  if (atom && atom.type === 'mord' && atom.value === '|') {
                      // Yes, it's a ||x||
                      ldelim = '\\lVert';
                      rdelim = '\\rVert';
                  }
              }
              expr = parseDelim(expr, ldelim, rdelim, options);
              if (expr) {
                  if (pairedDelim)
                      expr.index += 1;
                  expr.ast = {
                      fn: DELIM_FUNCTION[ldelim + rdelim] || ldelim + rdelim,
                      arg: [expr.ast],
                  };
                  expr.minPrec = savedPrec;
                  return expr;
              }
          }
          return undefined;
      }
      if (atom.type === 'mopen' && getString(atom) === ldelim) {
          expr.index += 1; // Skip the open delim
          expr = parseExpression(expr, options);
          atom = expr.atoms[expr.index];
          if (atom && atom.type === 'mclose' && getString(atom) === rdelim) {
              if (nextIsSupsub(expr)) {
                  // Wrap in a group if we have an upcoming superscript or subscript
                  expr.ast = { group: expr.ast };
              }
              expr = parseSupsub(expr, options);
              expr = parsePostfix(expr, options);
          } // TODO: else, syntax error?
      }
      else if (atom.type === 'mord' && getString(atom) === ldelim) {
          expr.index += 1; // Skip the open delim
          expr = parseExpression(expr, options);
          atom = expr.atoms[expr.index];
          if (atom && atom.type === 'mord' && getString(atom) === rdelim) {
              expr.index += 1;
              expr = parseSupsub(expr, options);
              expr = parsePostfix(expr, options);
          } // TODO: else, syntax error?
      }
      else if (ldelim === '\\lVert' &&
          atom.type === 'mord' &&
          atom.value === '|') {
          atom = expr.atoms[expr.index + 1];
          if (atom && atom.type === 'mord' && atom.value === '|') {
              // This is an opening ||
              expr.index += 2; // Skip the open delim
              expr = parseExpression(expr, options);
              atom = expr.atoms[expr.index];
              const atom2 = expr.atoms[expr.index + 1];
              if (atom &&
                  atom.type === 'mord' &&
                  atom.value === '|' &&
                  atom2 &&
                  atom2.type === 'mord' &&
                  atom2.value === '|') {
                  // This was a closing ||
                  expr.index += 2;
                  expr = parseSupsub(expr, options);
                  expr = parsePostfix(expr, options);
              }
          }
      }
      else if (atom.type === 'sizeddelim' && atom.value === ldelim) {
          expr.index += 1; // Skip the open delim
          expr = parseExpression(expr, options);
          atom = expr.atoms[expr.index];
          if (atom && atom.type === 'sizeddelim' && atom.value === rdelim) {
              expr.index += 1;
              expr = parseSupsub(expr, options);
              expr = parsePostfix(expr, options);
          } // TODO: else, syntax error?
      }
      else if (atom instanceof LeftRightAtom &&
          atom.leftDelim === ldelim &&
          (atom.rightDelim === '?' || atom.rightDelim === rdelim)) {
          // This atom type includes the content of the parenthetical expression
          // in its body
          expr.ast = parse(atom.branch('body'), options);
          if (nextIsSupsub(expr)) {
              // Wrap in a group if we have an upcoming superscript or subscript
              expr.ast = { group: expr.ast };
          }
          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
      }
      else {
          return undefined;
      }
      expr.minPrec = savedPrec;
      return expr;
  }
  function nextIsDigraph(expr, digraph) {
      expr.index = expr.index || 0;
      if (expr.atoms.length <= 1 || expr.index >= expr.atoms.length - 1) {
          return false;
      }
      return (digraph ===
          getString(expr.atoms[expr.index]) + getString(expr.atoms[expr.index + 1]));
  }
  /**
   * Some symbols are made up of two consecutive characters.
   * Handle them here. Return undefined if not a digraph.
   * TODO: other digraphs:
   * :=
   * ++
   * **
   * =:
   * °C U+2103
   * °F U+2109
   * @private
   *
   */
  function parseDigraph(expr) {
      expr.index = expr.index || 0;
      if (expr.atoms.length <= 1 || expr.index >= expr.atoms.length - 1) {
          return undefined;
      }
      if (isAtom(expr, 'mord', '\\nabla')) {
          expr.index += 1;
          if (isAtom(expr, 'mbin', '\\times')) {
              expr.index += 1;
              expr.ast = 'curl'; // Divergence
              return expr;
          }
          if (isAtom(expr, 'mbin', '\\cdot')) {
              expr.index += 1;
              expr.ast = 'div';
              return expr;
          }
          expr.index -= 1;
      }
      else {
          const digraph = expr.atoms[expr.index].symbol + expr.atoms[expr.index + 1].symbol;
          const result = /^(>=|<=|>>|<<|:=|!=)$/.test(digraph) ? digraph : '';
          if (result) {
              expr.index += 1;
          }
          return result;
      }
      return undefined;
  }
  function parsePrimary(expr, options) {
      // <primary> := ('-'|'+) <primary> | <number> |
      //              '(' <expression> ')' | <symbol> | <text> (<expression>)
      expr.index = expr.index || 0;
      expr.ast = undefined;
      if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) {
          return expr;
      }
      let atom = expr.atoms[expr.index];
      if (atom.mode === 'text') {
          let text = '';
          while (expr.atoms[expr.index] && expr.atoms[expr.index].mode === 'text') {
              text += expr.atoms[expr.index].value;
              expr.index += 1;
          }
          expr.ast = { text };
          return expr;
      }
      const value = getCanonicalName(getString(atom));
      const digraph = parseDigraph(expr);
      if (digraph) {
          expr.ast = wrapFn(expr.ast, parsePrimary(expr, options).ast);
      }
      else if (atom.type === 'root') {
          expr.index = 0;
          expr.atoms = atom.branch('body');
          return parsePrimary(expr, options);
      }
      else if (atom.type === 'mbin' && value === '-') {
          // Prefix - sign
          expr.index += 1; // Skip the '-' symbol
          expr = parsePrimary(expr, options);
          expr.ast = negate(expr.ast);
      }
      else if (atom.type === 'mbin' && value === '+') {
          // Prefix + sign
          expr.index += 1; // Skip the '+' symbol
          expr = parsePrimary(expr, options);
          expr.ast = wrapFn('add', expr.ast);
      }
      else if (atom.type === 'mord' && /^[\d.]$/.test(atom.value)) {
          // Looks like a number
          let number = '';
          let done = false;
          let pat = /^[\d.eEdD]$/;
          while (expr.index < expr.atoms.length &&
              !done &&
              (isAtom(expr, 'spacing') ||
                  ((isAtom(expr, 'mord') ||
                      isAtom(expr, 'mpunct', ',') ||
                      isAtom(expr, 'mbin')) &&
                      pat.test(expr.atoms[expr.index].value)))) {
              if (expr.atoms[expr.index].type === 'spacing') {
                  expr.index += 1;
              }
              else if (typeof expr.atoms[expr.index].superscript !== 'undefined' ||
                  typeof expr.atoms[expr.index].subscript !== 'undefined') {
                  done = true;
              }
              else {
                  let digit = expr.atoms[expr.index].value;
                  if (digit === 'd' || digit === 'D') {
                      digit = 'e';
                      pat = /^[\d+-.]$/;
                  }
                  else if (digit === 'e' || digit === 'E') {
                      if (nextIsSupsub(expr)) {
                          digit = '';
                          expr.index -= 1;
                          done = true;
                      }
                      else {
                          digit = 'E';
                          pat = /^[\d+-.]$/;
                      }
                  }
                  else if (pat === /^[\d+-.]$/) {
                      pat = /^\d$/;
                  }
                  number += digit === ',' ? '' : digit;
                  expr.index += 1;
              }
          }
          expr.ast = number ? wrapNumber(number) : undefined;
          // This was a number. Is it followed by a fraction, e.g. 2 1/2
          atom = expr.atoms[expr.index];
          if (atom && atom.type === 'genfrac' && !isNaN(expr.ast.num)) {
              // Add an invisible plus, i.e. 2 1/2 = 2 + 1/2
              const lhs = expr.ast;
              expr = parsePrimary(expr, options);
              expr.ast = wrapFn('add', lhs, expr.ast);
          }
          if (atom &&
              atom.type === 'group' &&
              atom.command.startsWith('\\nicefrac')) {
              // \nicefrac macro, add an invisible plus
              const lhs = expr.ast;
              expr = parsePrimary(expr, options);
              expr.ast = wrapFn('add', lhs, expr.ast);
          }
          if (atom && atom.type === 'msubsup') {
              expr = parseSupsub(expr, options);
          }
          expr = parsePostfix(expr, options);
      }
      else if (atom.type === 'genfrac' || atom.type === 'surd') {
          // A fraction or a square/cube root
          expr.ast = atomToMathJson(atom, options);
          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
      }
      else if (atom.type === 'mord' || atom.type === 'mbin') {
          // A 'mord' but not a number: either an identifier ('x') or
          // a function ('\\Zeta')
          if (isFunction(value) && !isOperator(atom)) {
              // A function
              expr.ast = { fn: value };
              expr = parseSupsub(expr, options);
              const fn = expr.ast;
              const arg = parsePrimary(expr, options).ast;
              if (arg && /^(list0|list|list2)$/.test(arg.fn)) {
                  fn.arg = arg.arg;
              }
              else if (arg) {
                  fn.arg = [arg];
              }
              expr.ast = fn;
          }
          else {
              // An identifier
              expr.ast = atomToMathJson(atom, options);
              if (expr.ast.sym === 'ⅈ') {
                  // It's 'i', the imaginary unit
                  expr.ast = wrapNumber({ im: '1' });
              }
              expr = parseSupsub(expr, options);
          }
          expr = parsePostfix(expr, options);
      }
      else if (atom.type === 'mop') {
          // Could be a function or an operator.
          if ((/^\\(mathop|operatorname|operatorname\*)/.test(atom.command) ||
              isFunction(value)) &&
              !isOperator(atom)) {
              expr.ast = {
                  fn: /^\\(mathop|operatorname|operatorname\*)/.test(atom.command)
                      ? getString(atom.branch('body'))
                      : value,
              };
              expr = parseSupsub(expr, options);
              if (hasSup(expr.ast)) {
                  // There was an exponent with the function.
                  // This may be an inverse function
                  const INVERSE_FUNCTION = {
                      sin: 'arcsin',
                      cos: 'arccos',
                      tan: 'arctan',
                      cot: 'arccot',
                      sec: 'arcsec',
                      csc: 'arccsc',
                      sinh: 'arsinh',
                      cosh: 'arcosh',
                      tanh: 'artanh',
                      csch: 'arcsch',
                      sech: 'arsech',
                      coth: 'arcoth',
                  };
                  if (asMachineNumber(expr.ast.sup) === -1 && INVERSE_FUNCTION[value]) {
                      expr.ast = wrapFn(INVERSE_FUNCTION[value], parsePrimary(expr, options).ast);
                  }
                  else {
                      // Keep the exponent, add the argument
                      const fn = expr.ast;
                      fn.arg = [parsePrimary(expr, options).ast];
                      expr.ast = fn;
                  }
              }
              else {
                  const fn = expr.ast;
                  const arg = parsePrimary(expr, options).ast;
                  if (arg && /^(list0|list|list2)$/.test(arg.fn)) {
                      fn.arg = arg.arg;
                  }
                  else if (arg) {
                      fn.arg = [arg];
                  }
                  expr.ast = fn;
              }
          }
      }
      else if (atom.type === 'array') {
          expr.index += 1;
          expr.ast = atomToMathJson(atom, options);
      }
      else if (atom.type === 'group') {
          expr.index += 1;
          expr.ast = atomToMathJson(atom, options);
      }
      else if (atom.type === 'mclose') {
          return expr;
      }
      else if (atom.type === 'error') {
          expr.index += 1;
          expr.ast = { error: atom.command };
          return expr;
      }
      if (expr.ast === undefined) {
          // Parse either a group of paren, and return their content as the result
          // or a pair of delimiters, and return them as a function applied
          // to their content, i.e. "|x|" -> {fn: "||", arg: "x"}
          const delim = parseDelim(expr, '(', ')', options) ||
              parseDelim(expr, null, null, options);
          if (delim) {
              expr = delim;
          }
          else if (!isOperator(atom)) {
              // This is not an operator (if it is, it may be an operator
              // dealing with an empty lhs. It's possible.
              // Couldn't interpret the expression. Output an error.
              if (atom.type === 'placeholder') {
                  // Default value for a placeholder is 0
                  // (except for the denominator of a 'genfrac')
                  expr.ast = wrapNumber(0);
              }
              else {
                  expr.ast = { text: '?' };
                  expr.ast.error = 'Unexpected token ' + "'" + atom.type + "'";
                  if (atom.latex) {
                      expr.ast.latex = atom.latex;
                  }
              }
              expr.index += 1; // Skip the unexpected token, and attempt to continue
          }
      }
      atom = expr.atoms[expr.index];
      if (atom &&
          (atom.type === 'mord' ||
              atom.type === 'surd' ||
              atom.type === 'mop' ||
              atom.type === 'mopen' ||
              atom.type === 'sizeddelim' ||
              atom.type === 'leftright')) {
          if (atom instanceof SizedDelimAtom) {
              for (const d in RIGHT_DELIM) {
                  if (atom.value === RIGHT_DELIM[d]) {
                      // This is (most likely) a closing delim, exit.
                      // There are ambiguous cases, for example |x|y|z|.
                      expr.index += 1;
                      return expr;
                  }
              }
          }
          if ((atom.type === 'mord' || atom.type === 'mop') && isOperator(atom)) {
              // It's actually an operator
              return expr;
          }
          const lhs = expr.ast;
          expr.ast = {};
          expr = parsePrimary(expr, options);
          if ((expr === null || expr === void 0 ? void 0 : expr.ast) && lhs) {
              if ((isFunction(lhs.fn) && typeof lhs.arg === 'undefined') ||
                  (isArray(lhs.arg) && lhs.arg.length === 0)) {
                  // A function with no arguments followed by a list ->
                  // the list becomes the argument to the function
                  if (expr.ast.fn === 'list2' || expr.ast.fn === 'list') {
                      expr.ast = wrapFn(lhs.fn, expr.ast.arg);
                  }
                  else {
                      // A function "f(x)" or "√x" followed by something else:
                      // implicit multiply
                      expr.ast = wrapFn('multiply', lhs, expr.ast);
                  }
              }
              else {
                  // Invisible times, e.g. '2x'
                  if (expr.ast.fn === 'multiply') {
                      expr.ast.arg.unshift(lhs);
                  }
                  else if (numberIm(lhs) === 0 &&
                      numberRe(lhs) !== 0 &&
                      numberIm(expr.ast) === 1 &&
                      numberRe(expr.ast) === 0) {
                      // Imaginary number, i.e. "3i"
                      expr.ast = wrapNumber({ im: numberRe(lhs).toString() });
                  }
                  else {
                      expr.ast = wrapFn('multiply', lhs, expr.ast);
                  }
              }
          }
          else {
              expr.ast = lhs;
          }
      }
      return expr;
  }
  /**
   * Given an atom or an array of atoms, return their AST representation as
   * an object.
   * @param {object} expr An expressions, including expr.atoms, expr.index,
   * expr.minPrec the minimum precedence that this parser should parse
   * before returning; expr.ast, the resulting AST.
   * @return {object} the expr object, updated
   * @private
   */
  function parseExpression(expr, options) {
      expr.index = expr.index || 0;
      expr.ast = undefined;
      if (expr.atoms.length === 0 || expr.index >= expr.atoms.length)
          return expr;
      expr.minPrec = expr.minPrec || 0;
      let lhs = parsePrimary(expr, options).ast;
      let done = false;
      const { minPrec } = expr;
      while (!done) {
          const atom = expr.atoms[expr.index];
          const digraph = parseDigraph(expr);
          done = !atom || atom.mode === 'text' || (!digraph && !isOperator(atom));
          let prec;
          let assoc;
          if (!done) {
              [prec, assoc] = digraph
                  ? [getPrecedence(digraph), getAssociativity(digraph)]
                  : opPrec(atom);
              done = prec < minPrec;
          }
          if (!done) {
              const opName = digraph || getCanonicalName(getString(atom));
              if (assoc === 'left') {
                  expr.minPrec = prec + 1;
              }
              else {
                  expr.minPrec = prec;
              }
              expr.index += 1;
              if (opName === '|') {
                  if (typeof atom.subscript !== 'undefined' ||
                      (expr.atoms[expr.index] &&
                          typeof expr.atoms[expr.index].subscript !== 'undefined' &&
                          expr.atoms[expr.index].type === 'msubsup')) {
                      // Bind is a special function. It doesn't have a rhs, and
                      // its argument is a subscript.
                      expr.ast = {};
                      const subArg = parseSupsub(expr, options).ast.sub;
                      lhs = wrapFn('bind', lhs);
                      if (subArg && subArg.fn === 'equal' && lhs.arg) {
                          // This is a subscript of the form "x=..."
                          lhs.arg.push(getArg(subArg, 0));
                          lhs.arg.push(getArg(subArg, 1));
                      }
                      else if (subArg &&
                          lhs.arg &&
                          (subArg.fn === 'list' || subArg.fn === 'list2')) {
                          // Form: "x=0;n=3;z=5"
                          let currentSym = { sym: 'x' };
                          for (let i = 0; i < subArg.arg.length; i++) {
                              if (subArg.arg[i].fn === 'equal') {
                                  currentSym = getArg(subArg.arg[i], 0);
                                  lhs.arg.push(currentSym);
                                  lhs.arg.push(getArg(subArg.arg[i], 1));
                              }
                              else {
                                  lhs.arg.push(currentSym);
                                  lhs.arg.push(subArg.arg[i]);
                              }
                          }
                      }
                      else if (subArg) {
                          // Default identifier if none provided
                          lhs.arg.push({ sym: 'x' });
                          lhs.arg.push(subArg);
                      }
                  }
                  else {
                      // That was a "|", but not with a subscript after, so
                      // it's the end of the expression, might be a right fence.
                      done = true;
                  }
              }
              else {
                  const rhs = parseExpression(expr, options).ast;
                  // Some operators (',' and ';' for example) convert into a function
                  // even if there's only two arguments. They're super associative...
                  let fn = SUPER_ASSOCIATIVE_FUNCTION[opName];
                  if (fn && lhs && lhs.fn !== fn) {
                      // Only promote them if the lhs is not already the same function.
                      // If it is, we'll combine it below.
                      lhs = wrapFn(fn, lhs);
                  }
                  // Promote subtraction to an addition
                  if (opName === '-') {
                      if ((lhs === null || lhs === void 0 ? void 0 : lhs.arg) && lhs.fn === 'add') {
                          // Add(x,y) - z -> add(x, y, -z)
                          if (rhs !== undefined)
                              lhs.arg.push(negate(rhs));
                      }
                      else if (lhs && lhs.fn === 'subtract') {
                          // X-y - z      -> add(x, -y, -z)
                          lhs = wrapFn('add', getArg(lhs, 0), negate(getArg(lhs, 1)), negate(rhs));
                      }
                      else if (isNumber(lhs) &&
                          !hasSup(lhs) &&
                          isNumber(rhs) &&
                          !hasSup(rhs) &&
                          (typeof rhs.num.re === 'undefined' || rhs.num.re === '0') &&
                          typeof rhs.num.im !== 'undefined') {
                          lhs = {
                              num: {
                                  re: lhs.num,
                                  im: (-Number.parseFloat(rhs.num.im)).toString(),
                              },
                          };
                      }
                      else {
                          lhs = wrapFn('subtract', lhs, rhs);
                      }
                  }
                  else {
                      // Is there a function (e.g. 'add') implementing the
                      // associative version of this operator (e.g. '+')?
                      fn = ASSOCIATIVE_FUNCTION[opName];
                      if (fn === 'add' && lhs && lhs.fn === 'subtract') {
                          // Subtract(x, y) + z -> add(x, -y, z)
                          lhs = wrapFn('add', getArg(lhs, 0), negate(getArg(lhs, 1)), rhs);
                      }
                      else if (fn && lhs && lhs.fn === fn && !hasSup(lhs)) {
                          // Add(x,y) + z -> add(x, y, z)
                          if (typeof rhs !== 'undefined') {
                              if (rhs.fn === fn && !hasSup(rhs) && rhs.arg) {
                                  // Add(x, y) = add (a, b)
                                  lhs.arg = [...lhs.arg, ...rhs.arg];
                              }
                              else if (lhs.arg) {
                                  lhs.arg.push(rhs);
                              }
                          }
                      }
                      else if (fn && rhs && rhs.arg && rhs.fn === fn) {
                          // X =    y = z -> equal(x, y, z)
                          rhs.arg.unshift(lhs);
                          lhs = rhs;
                      }
                      else if (fn === 'multiply' &&
                          isNumber(lhs) &&
                          !hasSup(lhs) &&
                          rhs &&
                          asMachineNumber(rhs) === 10 &&
                          isNumber(rhs.sup)) {
                          // N * 10^m
                          lhs = wrapNumber(asMachineNumber(lhs) * 10 ** asMachineNumber(rhs.sup));
                      }
                      else if (fn === 'add' &&
                          isNumber(lhs) &&
                          !hasSup(lhs) &&
                          rhs &&
                          numberIm(rhs) !== 0 &&
                          !hasSup(rhs)) {
                          lhs = {
                              num: {
                                  re: lhs.num,
                                  im: rhs.num.im,
                              },
                          };
                      }
                      else {
                          lhs = wrapFn(fn || OP_NAME[opName] || opName, lhs, rhs);
                      }
                  }
              }
          }
      }
      expr.ast = lhs;
      return expr;
  }
  /**
   * Return a string escaped as necessary to comply with the JSON format
   * @param {string} s
   * @return {string}
   * @private
   */
  function escapeText(s) {
      return s
          .replace(/\\/g, '\\\\')
          .replace(/"/g, '\\"')
          .replace(/[\b]/g, '\\b')
          .replace(/\f/g, '\\f')
          .replace(/\n/g, '\\n')
          .replace(/\r/g, '\\r')
          .replace(/\t/g, '\\t');
  }
  /**
   * Return an AST representation of a single atom
   *
   */
  function atomToMathJson(atom, options) {
      var _a, _b, _c;
      const MATH_VARIANTS = {
          'double-struck': 'double-struck',
          'calligraphic': 'script',
          'script': 'script',
          'fraktur': 'fraktur',
          'sans-serif': 'sans-serif',
          'monospace': 'monospace',
      };
      // TODO: See https://www.w3.org/TR/MathML2/chapter6.html#chars.letter-like-tables
      let result = {};
      let sym = '';
      let m;
      let lhs;
      let rhs;
      const style = atom.computedStyle;
      let variant = MATH_VARIANTS[style.variant +
          (!style.variantStyle || style.variantStyle === 'up'
              ? ''
              : '-' + style.variantStyle)];
      let variantSym;
      let styleString = '';
      if (style.fontSeries === 'b')
          styleString += 'bold';
      if (style.fontShape === 'it')
          styleString += 'italic';
      const { command } = atom;
      switch (atom.type) {
          case 'root':
          case 'group':
              // Macros appear as group as well. Handle some of them.
              if (command === null || command === void 0 ? void 0 : command.startsWith('\\nicefrac')) {
                  m = command.slice(9).match(/({.*}|[^}])({.*}|[^}])/);
                  if (m) {
                      lhs = m[1].length === 1 ? m[1] : m[1].substr(1, m[1].length - 2);
                      lhs = parseLatex(lhs, 'math', null, options.macros);
                      rhs = m[2].length === 1 ? m[2] : m[2].substr(1, m[2].length - 2);
                      rhs = parseLatex(rhs, 'math', null, options.macros);
                      result = wrapFn('divide', parse(lhs, options), parse(rhs, options));
                  }
                  else {
                      result = { fn: 'divide' };
                  }
              }
              else {
                  result = { group: parse(atom.branch('body'), options) };
              }
              break;
          case 'genfrac':
              // If there's no denominator, or a placeholder, use "1" as the value
              result = wrapFn('divide', parse(atom.above, options), ((_b = (_a = atom.below) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.type) === 'placeholder'
                  ? wrapNumber(1)
                  : parse(atom.below, options));
              break;
          case 'surd':
              result = !atom.hasEmptyBranch('above')
                  ? wrapFn('pow', parse(atom.body, options), wrapFn('divide', wrapNumber(1), parse(atom.above, options)))
                  : wrapFn('sqrt', parse(atom.body, options));
              break;
          case 'rule':
              break;
          // Case 'line':
          case 'overlap':
              // Case 'accent':
              break;
          case 'overunder':
              break;
          case 'mord':
          case 'mbin':
              // Check to see if it's a \char command
              m = !command
                  ? undefined
                  : command.match(/{?\\char"([\dabcdefABCDEF]*)}?/);
              if (m) {
                  sym = String.fromCodePoint(Number.parseInt(m[1], 16));
              }
              else {
                  sym = getCanonicalName(getString(atom));
                  if (sym.length > 0 && sym.startsWith('\\')) {
                      // This is an identifier with no special handling.
                      // Use the Unicode value if outside ASCII range
                      if (typeof atom.value === 'string') {
                          // TODO: consider making this an option?
                          // if (atom.branch('body').charCodeAt(0) > 255) {
                          //     sym = '&#x' + ('000000' +
                          //         atom.branch('body').charCodeAt(0).toString(16)).substr(-4) + ';';
                          // } else {
                          sym = atom.value;
                          // }
                      }
                  }
              }
              variantSym = escapeText(mathVariantToUnicode(sym, variant, styleString));
              if (variantSym !== sym) {
                  // If there's a specific Unicode character matching this one
                  // no need to record a variant.
                  result = { sym: variantSym };
                  variant = 'normal';
              }
              else {
                  result = { sym };
              }
              break;
          // Case 'mpunct':
          //     result = '<mo separator="true">' + command + '</mo>';
          //     break;
          case 'minner':
              break;
          case 'mop':
              break;
          case 'box':
              result = parse(atom.branch('body'), options);
              break;
          case 'enclose':
              // Result = '<menclose notation="';
              // for (const notation in atom.notation) {
              //     if (Object.prototype.hasOwnProperty.call(atom.notation, notation) &&
              //         atom.notation[notation]) {
              //         result += sep + notation;
              //         sep = ' ';
              //     }
              // }
              // result += '">' + toAST(atom.branch('body')).mathML + '</menclose>';
              break;
          case 'array':
              if (atom instanceof ArrayAtom) {
                  if (atom.environmentName === 'cardinality') {
                      // @revisit... It's an environment, but not an array...?
                      result = wrapFn('card', parse(atom.array, options));
                  }
                  else if (/array|matrix|pmatrix|bmatrix/.test(atom.environmentName)) {
                      result = { fn: 'array', args: [] };
                      for (const row of atom.array) {
                          result.args.push(row.map((cell) => parse(cell, options)));
                      }
                  }
                  else if (atom.environmentName === 'cases') {
                      result = { fn: 'cases', args: [] };
                      for (const row of atom.array) {
                          if (row[0]) {
                              const statement = [];
                              statement.push(parse(row[0], options));
                              let condition = parse(row[1], options);
                              if (condition) {
                                  if (condition.fn === 'text' && condition.arg) {
                                      if (/^(if|when|for)$/i.test(condition.arg[0].trim())) {
                                          condition = condition.arg.filter((x) => typeof x !== 'string');
                                      }
                                  }
                              }
                              statement.push(condition !== null && condition !== void 0 ? condition : {});
                              result.args.push(statement);
                          }
                      }
                  }
              }
              break;
          case 'spacing':
          case 'space':
              break;
          default:
              result = undefined;
              console.warn('Unhandled atom "' +
                  atom.type +
                  '" in "' +
                  ((_c = atom.command) !== null && _c !== void 0 ? _c : atom.branch('body')) +
                  '"');
      }
      if (result && variant && variant !== 'normal') {
          result.variant = variant;
      }
      return result;
  }
  function filterPresentationAtoms(atoms) {
      if (!atoms)
          return [];
      let result;
      if (isArray(atoms)) {
          result = [];
          for (const atom of atoms) {
              const filter = filterPresentationAtoms(atom);
              result = result.concat(filter);
          }
      }
      else {
          if (atoms.type === 'spacing' || atoms.type === 'first') {
              return [];
          }
          if (atoms.type === 'box') {
              result = filterPresentationAtoms(atoms.branch('body'));
          }
          else {
              if (!atoms.hasEmptyBranch('body')) {
                  atoms.setChildren(filterPresentationAtoms(atoms.branch('body')), 'body');
              }
              if (!atoms.hasEmptyBranch('superscript')) {
                  atoms.setChildren(filterPresentationAtoms(atoms.branch('superscript')), 'superscript');
              }
              if (!atoms.hasEmptyBranch('subscript')) {
                  atoms.setChildren(filterPresentationAtoms(atoms.branch('subscript')), 'subscript');
              }
              if (atoms instanceof ArrayAtom) {
                  atoms.array = atoms.array.map((row) => row.map((cell) => filterPresentationAtoms(cell)));
              }
              result = [atoms];
          }
      }
      return result;
  }
  /**
   * Parse a sequence of text zone and math zones:
   * <sentence> := ((<text>) <expression>)+
   */
  function parseSentence(expr, options) {
      expr.index = expr.index || 0;
      expr.ast = undefined;
      const zones = [];
      // Iterate while we have atoms to look at
      while (expr.atoms[expr.index]) {
          if (expr.atoms[expr.index].mode === 'text') {
              // Text mode atom...
              let text = '';
              while (expr.atoms[expr.index] && expr.atoms[expr.index].mode === 'text') {
                  text += expr.atoms[expr.index].value;
                  expr.index += 1;
              }
              zones.push(wrapFn('text', text));
          }
          else {
              const z = parseExpression(expr, options).ast;
              // Something went wrong in parsing the expression...
              if (!z)
                  return undefined;
              zones.push(z);
          }
      }
      if (zones.length > 1) {
          return wrapFn('sequence', ...zones);
      }
      return zones[0] || undefined;
  }
  function parse(atoms, options) {
      return parseSentence({ atoms: filterPresentationAtoms(atoms) }, options);
  }
  function atomtoMathJson(atoms, options) {
      return parse(atoms, options);
  }
  /**
   *
   * @param {string} fence - The fence to wrap around the arguments
   * @return {string} - A string wrapped in the fence
   */
  function wrapFence(fence, ...args) {
      fence = fence || '.. ';
      let result = '';
      if (args.length > 0) {
          if (!fence.startsWith('.'))
              result += fence[0];
          let sep = '';
          for (const arg of args) {
              result += sep + arg;
              sep = fence[2];
          }
          if (fence[1] !== '.')
              result += fence[1];
      }
      return result;
  }
  /**
   * Return a formatted mantissa:
   * 1234567 -> 123 456 7...
   * 1233333 -> 12(3)
   * @param {string} m
   * @param {Object.<string, any>} config
   * @private
   */
  function formatMantissa(m, config) {
      const originalLength = m.length;
      // The last digit may have been rounded, if it exceeds the precison,
      // which could throw off the
      // repeating pattern detection. Ignore   it.
      m = m.slice(0, Math.max(0, config.precision - 2));
      for (let i = 0; i < m.length - 16; i++) {
          // Offset is the part of the mantissa that is not repeating
          const offset = m.slice(0, Math.max(0, i));
          // Try to find a repeating pattern of length j
          for (let j = 0; j < 17; j++) {
              const cycle = m.substr(i, j + 1);
              const times = Math.floor((m.length - offset.length) / cycle.length);
              if (times > 1) {
                  if ((offset + cycle.repeat(times + 1)).startsWith(m)) {
                      // We've found a repeating pattern!
                      if (cycle === '0') {
                          return offset.replace(/(\d{3})/g, '$1' + config.groupSeparator);
                      }
                      return (offset.replace(/(\d{3})/g, '$1' + config.groupSeparator) +
                          config.beginRepeatingDigits +
                          cycle.replace(/(\d{3})/g, '$1' + config.groupSeparator) +
                          config.endRepeatingDigits);
                  }
              }
          }
      }
      if (originalLength !== m.length) {
          m += '\\ldots';
      }
      return m.replace(/(\d{3})/g, '$1' + config.groupSeparator);
  }
  function parseFloatToPrecision(number) {
      return Number.parseFloat(Number.parseFloat(number).toPrecision(15));
  }
  /**
   *
   * @param num - A number, represented as a string (e.g. "-12.45"
   *  particularly useful for arbitrary precision numbers) or a number (-12.45)
   * @return A LaTeX representation of the AST
   */
  function numberAsLatex(number, config) {
      let result = '';
      let value;
      if (typeof config.precision === 'number') {
          if (typeof number === 'number') {
              value = parseFloatToPrecision(number);
          }
          else {
              let sign = '';
              let exponent = '';
              if (number.startsWith('-')) {
                  sign = '-';
                  number = number.slice(1);
              }
              else if (number.startsWith('+')) {
                  number = number.slice(1);
              }
              if (number.includes('.')) {
                  const m = number.match(/(\d*).(\d*)([e|E]([-+]?\d*))?/);
                  const base = m[1];
                  const mantissa = m[2].slice(0, Math.max(0, Math.min(config.precision - base.length, m[2].length)));
                  exponent = m[4] || '';
                  if (base === '0') {
                      let p = 0; // Index of the first non-zero digit after the decimal
                      while (mantissa[p] === '0' && p < mantissa.length) {
                          p += 1;
                      }
                      let r = '';
                      if (p <= 4) {
                          r = '0' + config.decimalMarker;
                          r += mantissa.slice(0, Math.max(0, p));
                          r += formatMantissa(number.slice(r.length), config);
                      }
                      else if (p + 1 >= config.precision) {
                          r = '0';
                          sign = '';
                      }
                      else {
                          r = number[p];
                          const f = formatMantissa(number.slice(p + 1), config);
                          if (f) {
                              r += config.decimalMarker + f;
                          }
                      }
                      if (r !== '0') {
                          if (number.length - 1 > config.precision &&
                              !r.endsWith('}') &&
                              !r.endsWith('\\ldots')) {
                              r += '\\ldots';
                          }
                          if (p > 4) {
                              r += config.exponentProduct;
                              r += config.exponentMarker
                                  ? config.exponentMarker + (1 - p).toString()
                                  : '10^{' + (1 - p).toString() + '}';
                          }
                      }
                      number = r;
                  }
                  else {
                      number = base.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
                      const f = formatMantissa(mantissa, config);
                      if (f) {
                          number += config.decimalMarker + f;
                          // If (num.length - 1 > config.precision && !num.endsWith('}') && !num.endsWith('\\ldots')) {
                          //     num += '\\ldots';
                          // }
                      }
                  }
              }
              else if (number.length > config.precision) {
                  const { length } = number;
                  let r = number[0];
                  const f = formatMantissa(number.slice(2), config);
                  if (f) {
                      r += config.decimalMarker + f;
                      if (!r.endsWith('}')) {
                          r += '\\ldots';
                      }
                  }
                  if (r !== '1') {
                      r += config.exponentProduct;
                  }
                  else {
                      r = '';
                  }
                  r += config.exponentMarker
                      ? config.exponentMarker + (length - 2).toString()
                      : '10^{' + (length - 2).toString() + '}';
                  number = r;
              }
              else {
                  number = number.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
              }
              if (exponent) {
                  // There is an exponent...
                  exponent = config.exponentMarker
                      ? config.exponentMarker + exponent
                      : config.exponentProduct + ' 10^{' + exponent + '}';
              }
              return sign + number + exponent;
          }
      }
      if (config.scientificNotation === 'engineering') {
          // Ensure the exponent is a multiple of 3
          if (value === 0) {
              result = '0';
          }
          else {
              const y = Math.abs(value);
              let exponent = Math.round(Math.log10(y));
              exponent -= exponent % 3;
              if (y < 1000)
                  exponent = 0;
              const mantissa = y / 10 ** exponent;
              let mantissaString = '';
              const m = mantissa.toString().match(/^(.*)\.(.*)$/);
              if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {
                  mantissaString = m[1] + config.decimalMarker + m[2];
              }
              if (config.groupSeparator) {
                  mantissaString = formatMantissa(mantissa.toExponential(), config);
              }
              let exponentString = '';
              if (exponent === 0) {
                  exponentString = '';
              }
              else if (config.exponentMarker) {
                  exponentString = config.exponentMarker + exponent;
              }
              else {
                  exponentString = config.exponentProduct + ' 10^{' + exponent + '}';
              }
              result = (value < 0 ? '-' : '') + mantissaString + exponentString;
          }
      }
      else {
          const valueString = typeof number === 'string' ? number : number.toString();
          let m = valueString.match(/^(.*)[e|]([-+]?\d*)$/i);
          let base;
          let exponent;
          let mantissa;
          base = valueString;
          mantissa = '';
          if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {
              // There is an exponent...
              base = m[1];
              exponent = config.exponentMarker
                  ? config.exponentMarker + m[2]
                  : config.exponentProduct + ' 10^{' + m[2] + '}';
          }
          m = base.match(/^(.*)\.(.*)$/);
          if ((m === null || m === void 0 ? void 0 : m[1]) && m[2]) {
              base = m[1];
              mantissa = m[2];
          }
          if (config.groupSeparator) {
              base = base.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
              mantissa = formatMantissa(mantissa, config);
          }
          if (mantissa)
              mantissa = config.decimalMarker + mantissa;
          result = base + mantissa + (exponent || '');
      }
      return result;
  }
  /**
   *
   * @param {object} ast - Abstract Syntax Tree object (in canonical form)
   * @return {string} A LaTeX representation of the AST
   */
  function jsonToLatex(ast, options) {
      const config = {
          precision: 14,
          decimalMarker: '.',
          groupSeparator: '\\, ',
          product: '\\cdot ',
          exponentProduct: '\\cdot ',
          exponentMarker: '',
          arcSeparator: '\\,',
          scientificNotation: 'auto',
          beginRepeatingDigits: '\\overline{',
          endRepeatingDigits: '}',
          ...options,
      };
      let result = '';
      if (ast === undefined)
          return '';
      if (typeof ast === 'string') {
          result = ast;
      }
      else if (ast.latex) {
          // If ast.latex key is present, use it to render the element
          result = ast.latex;
      }
      else if (isNumber(ast)) {
          const value = asMachineNumber(ast);
          if (value === -Infinity) {
              result = '-\\infty ';
          }
          else if (value === Infinity) {
              result = '\\infty ';
          }
          else if (typeof ast.num === 'object' &&
              (typeof ast.num.re === 'string' || typeof ast.num.im === 'string')) {
              const re = numberRe(ast);
              const im = numberIm(ast);
              if (Number.isNaN(re) || Number.isNaN(im)) {
                  result = '\\text{NaN}';
              }
              else if (Math.abs(im) <= Number.EPSILON &&
                  Math.abs(re) <= Number.EPSILON) {
                  result = '0';
              }
              else {
                  if (Math.abs(re) > Number.EPSILON) {
                      result = numberAsLatex(re, config);
                  }
                  if (Math.abs(im) > Number.EPSILON) {
                      if (Math.abs(re) > Number.EPSILON) {
                          result += im > 0 ? '+' : '';
                      }
                      result +=
                          (Math.abs(im) !== 1 ? numberAsLatex(im, config) : '') +
                              '\\imaginaryI ';
                  }
              }
          }
          else if (Number.isNaN(value)) {
              result = '\\text{NaN}';
          }
          else {
              result = numberAsLatex(ast.num, config);
          }
          if (hasSup(ast))
              result += '^{' + jsonToLatex(ast.sup, config) + '}';
          if (hasSub(ast))
              result += '_{' + jsonToLatex(ast.sub, config) + '}';
      }
      else if (ast.group) {
          result = jsonToLatex(ast.group, config);
          if (!isNumber(ast.group) && !asSymbol(ast.group)) {
              result = wrapFence(ast.fence || '(),', result);
          }
          else if (numberIm(ast.group) !== 0) {
              result = wrapFence(ast.fence || '(),', result);
          }
          if (hasSup(ast))
              result += '^{' + jsonToLatex(ast.sup, config) + '}';
          if (hasSub(ast))
              result += '_{' + jsonToLatex(ast.sub, config) + '}';
      }
      else if (ast.fn) {
          if (ast.fn === 'bind') {
              result = jsonToLatex(getArg(ast, 0), config) + '|_{';
              if (ast.arg && ast.arg.length === 2) {
                  result += jsonToLatex(getArg(ast, 1));
              }
              else {
                  let sep = '';
                  for (let i = 1; i < ast.arg.length; i += 2) {
                      result +=
                          sep +
                              jsonToLatex(getArg(ast, i)) +
                              ' = ' +
                              jsonToLatex(getArg(ast, i + 1));
                      sep = ', ';
                  }
              }
              result += '}';
          }
          else if (ast.fn === 'divide') {
              result =
                  '\\frac{' +
                      jsonToLatex(getArg(ast, 0), config) +
                      '}{' +
                      jsonToLatex(getArg(ast, 1), config) +
                      '}';
          }
          else if (ast.fn === 'negate') {
              result = '-' + jsonToLatex(getArg(ast, 0), config);
          }
          else if (ast.fn === 'subtract') {
              result =
                  jsonToLatex(getArg(ast, 0), config) +
                      ' - ' +
                      jsonToLatex(getArg(ast, 1), config);
          }
          else if ((ast.fn === 'add' || ast.fn === 'multiply') &&
              isArray(ast.arg)) {
              const a = [];
              for (const exp of ast.arg) {
                  if (exp.fn === 'add' || exp.fn === 'subtract') {
                      a.push(wrapFence('() ', jsonToLatex(exp, config)));
                  }
                  else if (isComplexWithRealAndImaginary(exp)) {
                      // Complex numbers that have both a real and imaginary part
                      // should be wrapped in parentheses
                      a.push(wrapFence('() ', jsonToLatex(exp, config)));
                  }
                  else if (hasSup(ast) &&
                      !(numberIm(exp) === 0 || numberIm(exp) === 1)) {
                      // Wrap with parentheses if there's an exponent
                      // and the imaginary part is neither 0 nor 1
                      a.push(wrapFence('() ', jsonToLatex(exp, config)));
                  }
                  else {
                      a.push(jsonToLatex(exp, config));
                  }
              }
              if (ast.fn === 'multiply') {
                  result =
                      ast.arg &&
                          ast.arg.length === 2 &&
                          (isNumber(ast.arg[0]) || ast.arg[0].fn === 'divide') &&
                          (!isNumber(ast.arg[1]) ||
                              (numberRe(ast.arg[1]) === 0 && numberIm(ast.arg[1]) === 1))
                          ? a[0] + a[1]
                          : a.join(' \\times ');
              }
              else {
                  // Addition (and subtraction)
                  if (ast.arg && ast.arg.length === 1) {
                      result =
                          ast.arg[0].fn === 'negate' ||
                              (isNumber(ast.arg[0]) && asMachineNumber(ast.arg[0]) < 0)
                              ? a[0]
                              : '+' + a[0];
                  }
                  else {
                      result = a[0];
                      for (let i = 1; i < ast.arg.length; i++) {
                          result +=
                              ast.arg[i].fn === 'negate' ||
                                  (isNumber(ast.arg[i]) && asMachineNumber(ast.arg[i]) < 0)
                                  ? a[i]
                                  : ' + ' + a[i];
                      }
                  }
              }
          }
          else if (ast.fn === 'list' || ast.fn === 'list2') {
              const a = [];
              if (ast.arg) {
                  for (const exp of ast.arg) {
                      a.push(jsonToLatex(exp, config));
                  }
              }
              result = a.join(ast.fn === 'list2' ? '; ' : ', ');
          }
          else if (ast.fn === 'sequence') {
              result = joinLatex(ast.arg.map((x) => jsonToLatex(x, config)));
          }
          else if (ast.fn === 'text') {
              result = '\\text{' + (ast.arg[0] || '') + '}';
          }
          else if (ast.fn === 'pow' && isArray(ast.arg) && ast.arg.length >= 2) {
              result = jsonToLatex(getArg(ast, 0), config);
              if (!isNumber(getArg(ast, 0)) && !asSymbol(getArg(ast, 0))) {
                  result = wrapFence(ast.fence || '(),', result);
              }
              result += '^{' + jsonToLatex(getArg(ast, 1), config) + '}';
          }
          else if (ast.fn === 'equal' && ast.arg && ast.arg.length > 2) {
              result = ast.arg.map((x) => jsonToLatex(x, config)).join(' = ');
          }
          else {
              const fn = getLatexTemplateForFunction(ast.fn);
              result = fn;
              let argstring = '';
              const parenRequired = /%(?![01_^])/.test(fn) && isArray(ast.arg) && ast.arg.length > 1;
              if (parenRequired) {
                  // Parenthesis are required if argument list is longer than 1
                  result += wrapFence(ast.fence || '(),', ...ast.arg.map((x) => jsonToLatex(x, config)));
              }
              else if (isArray(ast.arg) && ast.arg.length > 0) {
                  // The parenthesis may be optional...
                  const arg0 = jsonToLatex(getArg(ast, 0), config);
                  const arg1 = jsonToLatex(getArg(ast, 1), config);
                  const argsn = [...ast.arg];
                  if (fn.includes('%0')) {
                      result = result.replace('%0', arg0);
                      argsn.shift();
                  }
                  if (fn.includes('%1')) {
                      result = result.replace('%1', arg1);
                      argsn.shift();
                  }
                  if (argsn.length > 0) {
                      argstring = wrapFence(ast.fence || '(),', ...argsn.map((x) => jsonToLatex(x, config)));
                  }
              }
              else {
                  // Empty argument list
                  argstring = wrapFence(ast.fence || '(),', '');
              }
              result = hasSup(ast)
                  ? result.replace('%^', '^{' + jsonToLatex(ast.sup, config) + '}')
                  : result.replace('%^', '');
              result = hasSub(ast)
                  ? result.replace('%_', '_{' + jsonToLatex(ast.sub, config) + '}')
                  : result.replace('%_', '');
              // Insert the arguments in the function template (%)
              result = result.replace(/%(?![01_^])/, argstring);
              // If there are any placeholders left, remove them
              result = result.replace('%0', '').replace('%1', '');
          }
      }
      else if (typeof ast.sym === 'string') {
          result = asSymbol(ast);
          // Is it a Unicode value?
          let m = result.match(/^&#x([\da-f]+);$/i);
          if (m === null || m === void 0 ? void 0 : m[1]) {
              result = String.fromCodePoint(Number.parseInt(m[1], 16));
          }
          else {
              m = result.match(/^&#(\d+);$/i);
              if (m === null || m === void 0 ? void 0 : m[1]) {
                  result = String.fromCodePoint(Number.parseInt(m[1]));
              }
          }
          // Is there a variant info attached to it?
          if (typeof ast.variant === 'string') {
              const MATH_VARIANTS = {
                  'normal': 'mathrm',
                  'double-struck': 'mathbb',
                  'bold': 'mathbf',
                  // 'script': 'mathcal',
                  'fraktur': 'mathfrak',
                  'script': 'mathscr',
                  'sans-serif': 'mathsf',
                  'monospace': 'mathtt',
              };
              result = '\\' + MATH_VARIANTS[ast.variant] + '{' + result + '}';
          }
          if (hasSup(ast))
              result += '^{' + jsonToLatex(ast.sup, config) + '}';
          if (hasSub(ast))
              result += '_{' + jsonToLatex(ast.sub, config) + '}';
      }
      else if (typeof ast.text === 'string') {
          result = '\\text{' + ast.text + '}';
      }
      // If there was an error attached to this node,
      // display it on a red background
      if (typeof ast.error === 'string') {
          result = '\\bbox[#F56165]{' + result + '}';
      }
      return result;
  }

  const SPECIAL_OPERATORS = {
      '\\pm': '&#177;',
      '\\times': '&#215;',
      '\\colon': ':',
      '\\vert': '|',
      '\\Vert': '\u2225',
      '\\mid': '\u2223',
      '\\lbrace': '{',
      '\\rbrace': '}',
      '\\langle': '\u27E8',
      '\\rangle': '\u27E9',
      '\\lfloor': '\u230A',
      '\\rfloor': '\u230B',
      '\\lceil': '\u2308',
      '\\rceil': '\u2309',
      '\\vec': '&#x20d7;',
      '\\acute': '&#x00b4;',
      '\\grave': '&#x0060;',
      '\\dot': '&#x02d9;',
      '\\ddot': '&#x00a8;',
      '\\tilde': '&#x007e;',
      '\\bar': '&#x00af;',
      '\\breve': '&#x02d8;',
      '\\check': '&#x02c7;',
      '\\hat': '&#x005e;',
  };
  const APPLY_FUNCTION = '&#x2061;';
  const INVISIBLE_TIMES = '&#8290;';
  function xmlEscape(string) {
      return (string
          // .replace(/&/g, '&amp;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#39;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;'));
  }
  function makeID$1(id, options) {
      if (!id || !options.generateID)
          return '';
      // Note: the 'extid' attribute is recognized by SRE as an attribute
      // to be passed to SSML as a <mark> tag.
      return ' extid="' + id + '"';
  }
  function scanIdentifier(stream, final, options) {
      let result = false;
      final = final || stream.atoms.length;
      let mathML = '';
      let body = '';
      let superscript = -1;
      let subscript = -1;
      const atom = stream.atoms[stream.index];
      if (stream.index < final &&
          atom.type === 'mord' &&
          !'0123456789,.'.includes(atom.value)) {
          body = atomToMathML(atom, options);
          if (atom.superscript) {
              superscript = stream.index;
          }
          if (atom.subscript) {
              subscript = stream.index;
          }
          stream.index += 1;
      }
      if (body.length > 0) {
          result = true;
          // If there are separate atoms for sub/sup, record them
          if (isSuperscriptAtom(stream)) {
              superscript = stream.index;
              stream.index += 1;
          }
          if (isSubscriptAtom(stream)) {
              subscript = stream.index;
              stream.index += 1;
          }
          if (superscript >= 0 && subscript >= 0) {
              mathML = '<msubsup>' + body;
              mathML += toMathML(stream.atoms[subscript].subscript, 0, 0, options)
                  .mathML;
              mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options)
                  .mathML;
              mathML += '</msubsup>';
          }
          else if (superscript >= 0) {
              mathML = '<msup>' + body;
              if (isSuperscriptAtom(stream)) {
                  // There's another superscript after this one. Maybe double-prime?
                  const sup = toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
                  const sup2 = toMathML(stream.atoms[superscript + 1].superscript, 0, 0, options).mathML;
                  if ((sup === '<mi>\u2032</mi>' || sup === '<mi>&#x2032;</mi>') &&
                      (sup2 === '<mi>\u2032</mi>' || sup2 === '<mi>&#x2032;</mi>')) {
                      mathML += '<mi>&#x2033;</mi>';
                  }
                  else if (sup === '<mi>\u2032</mi>' || sup === '<mi>&#x2032;</mi>') {
                      mathML += '<mi>&#x2032;</mi>';
                  }
                  else {
                      mathML += sup;
                  }
              }
              else {
                  mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options)
                      .mathML;
              }
              mathML += '</msup>';
          }
          else if (subscript >= 0) {
              mathML = '<msub>' + body;
              mathML += toMathML(stream.atoms[subscript].subscript, 0, 0, options)
                  .mathML;
              mathML += '</msub>';
          }
          else {
              mathML = body;
          }
          if ((stream.lastType === 'mi' ||
              stream.lastType === 'mn' ||
              stream.lastType === 'mtext' ||
              stream.lastType === 'fence') &&
              !/^<mo>(.*)<\/mo>$/.test(mathML)) {
              mathML = `<mo>${INVISIBLE_TIMES}</mo>${mathML}`; // &InvisibleTimes;
          }
          if (body.endsWith('>f</mi>') || body.endsWith('>g</mi>')) {
              mathML += `<mo>${APPLY_FUNCTION}</mo>`; // &ApplyFunction;
              stream.lastType = 'applyfunction';
          }
          else {
              stream.lastType = /^<mo>(.*)<\/mo>$/.test(mathML) ? 'mo' : 'mi';
          }
          stream.mathML += mathML;
      }
      return result;
  }
  /**
   * Return true if the current atom is a standalone superscript atom
   * i.e. an atom with no content, except of a superscript.
   * Superscripts can be encoded either as an attribute on the last atom
   * or as a standalone, empty, atom following the one to which it applies.
   * @param {object} stream
   */
  function isSuperscriptAtom(stream) {
      return (stream.index < stream.atoms.length &&
          stream.atoms[stream.index].superscript &&
          stream.atoms[stream.index].type === 'msubsup');
  }
  function isSubscriptAtom(stream) {
      return (stream.index < stream.atoms.length &&
          stream.atoms[stream.index].subscript &&
          stream.atoms[stream.index].type === 'msubsup');
  }
  function indexOfSuperscriptInNumber(stream) {
      let result = -1;
      let i = stream.index;
      let done = false;
      let found = false;
      while (i < stream.atoms.length && !done && !found) {
          done =
              stream.atoms[i].type !== 'mord' ||
                  !'0123456789,.'.includes(stream.atoms[i].body);
          found = !done && stream.atoms[i].superscript;
          i++;
      }
      if (found) {
          result = i - 1;
      }
      return result;
  }
  function parseSubsup(base, stream, options) {
      let result = false;
      let mathML = '';
      let atom = stream.atoms[stream.index - 1];
      if (!atom) {
          return false;
      }
      if (!atom.superscript && !atom.subscript) {
          if (isSuperscriptAtom(stream) || isSubscriptAtom(stream)) {
              atom = stream.atoms[stream.index];
              stream.index += 1;
          }
      }
      if (!atom) {
          return false;
      }
      if (atom.superscript && atom.subscript) {
          mathML = '<msubsup>' + base;
          mathML += toMathML(atom.subscript, 0, 0, options).mathML;
          mathML += toMathML(atom.superscript, 0, 0, options).mathML;
          mathML += '</msubsup>';
      }
      else if (atom.superscript) {
          mathML = '<msup>' + base;
          mathML += toMathML(atom.superscript, 0, 0, options).mathML;
          mathML += '</msup>';
      }
      else if (atom.subscript) {
          mathML = '<msub>' + base;
          mathML += toMathML(atom.subscript, 0, 0, options).mathML;
          mathML += '</msub>';
      }
      if (mathML.length > 0) {
          result = true;
          stream.mathML += mathML;
          stream.lastType = '';
      }
      return result;
  }
  function scanText(stream, final, options) {
      let result = false;
      final = final || stream.atoms.length;
      const initial = stream.index;
      let mathML = '';
      while (stream.index < final && stream.atoms[stream.index].mode === 'text') {
          mathML += stream.atoms[stream.index].body
              ? stream.atoms[stream.index].body
              : ' ';
          stream.index += 1;
      }
      if (mathML.length > 0) {
          result = true;
          mathML =
              '<mtext' +
                  makeID$1(stream.atoms[initial].id, options) +
                  '>' +
                  mathML +
                  '</mtext>';
          stream.mathML += mathML;
          stream.lastType = 'mtext';
      }
      return result;
  }
  function scanNumber(stream, final, options) {
      let result = false;
      final = final || stream.atoms.length;
      const initial = stream.index;
      let mathML = '';
      let superscript = indexOfSuperscriptInNumber(stream);
      if (superscript >= 0 && superscript < final) {
          final = superscript;
      }
      while (stream.index < final &&
          stream.atoms[stream.index].type === 'mord' &&
          '0123456789,.'.includes(stream.atoms[stream.index].body)) {
          mathML += stream.atoms[stream.index].body;
          stream.index += 1;
      }
      if (mathML.length > 0) {
          result = true;
          mathML =
              '<mn' +
                  makeID$1(stream.atoms[initial].id, options) +
                  '>' +
                  mathML +
                  '</mn>';
          if (superscript < 0 && isSuperscriptAtom(stream)) {
              superscript = stream.index;
              stream.index += 1;
          }
          if (superscript >= 0) {
              mathML = '<msup>' + mathML;
              mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options)
                  .mathML;
              mathML += '</msup>';
          }
          stream.mathML += mathML;
          stream.lastType = 'mn';
      }
      return result;
  }
  function scanFence(stream, final, options) {
      let result = false;
      final = final || stream.atoms.length;
      let mathML = '';
      let lastType = '';
      if (stream.index < final && stream.atoms[stream.index].type === 'mopen') {
          let found = false;
          let depth = 0;
          const openIndex = stream.index;
          let closeIndex = -1;
          let index = openIndex + 1;
          while (index < final && !found) {
              if (stream.atoms[index].type === 'mopen') {
                  depth += 1;
              }
              else if (stream.atoms[index].type === 'mclose') {
                  depth -= 1;
              }
              if (depth === -1) {
                  found = true;
                  closeIndex = index;
              }
              index += 1;
          }
          if (found) {
              // TODO: could add attribute indicating it's a fence (fence=true)
              mathML = '<mrow>';
              mathML += toMo(stream.atoms[openIndex], options);
              mathML += toMathML(stream.atoms, openIndex + 1, closeIndex, options)
                  .mathML;
              // TODO: could add attribute indicating it's a fence (fence=true)
              mathML += toMo(stream.atoms[closeIndex], options);
              mathML += '</mrow>';
              if (stream.lastType === 'mi' ||
                  stream.lastType === 'mn' ||
                  stream.lastType === 'mfrac' ||
                  stream.lastType === 'fence') {
                  mathML = `<mo>${INVISIBLE_TIMES}</mo>${mathML}`; // &InvisibleTimes;
              }
              stream.index = closeIndex + 1;
              if (parseSubsup(mathML, stream, options)) {
                  result = true;
                  stream.lastType = '';
                  mathML = '';
              }
              lastType = 'fence';
          }
      }
      if (mathML.length > 0) {
          result = true;
          stream.mathML += mathML;
          stream.lastType = lastType;
      }
      return result;
  }
  function scanOperator(stream, final, options) {
      let result = false;
      final = final || stream.atoms.length;
      let mathML = '';
      let lastType = '';
      const atom = stream.atoms[stream.index];
      if (stream.index < final && (atom.type === 'mbin' || atom.type === 'mrel')) {
          mathML += atomToMathML(stream.atoms[stream.index], options);
          stream.index += 1;
          lastType = 'mo';
      }
      else if (stream.index < final && atom.type === 'mop') {
          // MathML += '<mrow>';
          if (atom.limits === 'limits' && (atom.superscript || atom.subscript)) {
              // Operator with limits, e.g. \sum
              const op = toMo(atom, options);
              if (atom.superscript && atom.subscript) {
                  // Both superscript and subscript
                  mathML += '<munderover>' + op;
                  mathML += toMathML(atom.subscript, 0, 0, options).mathML;
                  mathML += toMathML(atom.superscript, 0, 0, options).mathML;
                  mathML += '</munderover>';
              }
              else if (atom.superscript) {
                  // Superscript only
                  mathML += '<mover>' + op;
                  mathML += toMathML(atom.superscript, 0, 0, options).mathML;
                  mathML += '</mover>';
              }
              else {
                  // Subscript only
                  mathML += '<munder>' + op;
                  mathML += toMathML(atom.subscript, 0, 0, options).mathML;
                  mathML += '</munder>';
              }
              lastType = 'mo';
          }
          else {
              const atom = stream.atoms[stream.index];
              const isUnit = atom.symbol === '\\operatorname';
              const op = isUnit
                  ? '<mi class="MathML-Unit"' +
                      makeID$1(atom.id, options) +
                      '>' +
                      toString$1(atom.value) +
                      '</mi>'
                  : toMo(atom, options);
              mathML += op;
              stream.index += 1;
              if (parseSubsup(mathML, stream, options)) {
                  result = true;
                  stream.lastType = '';
                  mathML = '';
              }
              stream.index -= 1;
              if (!isUnit && !/^<mo>(.*)<\/mo>$/.test(op)) {
                  mathML += `<mo>${APPLY_FUNCTION}</mo>`; // APPLY FUNCTION
                  // mathML += scanArgument(stream);
                  lastType = 'applyfunction';
              }
              else {
                  lastType = isUnit ? 'mi' : 'mo';
              }
          }
          // MathML += '</mrow>';
          if ((stream.lastType === 'mi' || stream.lastType === 'mn') &&
              !/^<mo>(.*)<\/mo>$/.test(mathML)) {
              mathML = `<mo>${INVISIBLE_TIMES}</mo>${mathML}`; // &InvisibleTimes;
          }
          stream.index += 1;
      }
      if (mathML.length > 0) {
          result = true;
          stream.mathML += mathML;
          stream.lastType = lastType;
      }
      return result;
  }
  /**
   * Given an atom or an array of atoms, return their MathML representation as
   * a string.
   * @param {string|Atom|Atom[]} input
   * @param initial index of the input to start conversion from
   * @param final last index of the input to stop conversion to
   */
  function toMathML(input, initial, final, options) {
      const result = {
          atoms: input,
          index: initial !== null && initial !== void 0 ? initial : 0,
          mathML: '',
          lastType: '',
      };
      if (typeof input === 'number' || typeof input === 'boolean') {
          result.mathML = input.toString();
      }
      else if (typeof input === 'string') {
          result.mathML = input;
      }
      else if (input instanceof Atom) {
          result.mathML = atomToMathML(input, options);
      }
      else if (Array.isArray(input)) {
          let count = 0;
          final = final ? final : input ? input.length : 0;
          while (result.index < final) {
              if (scanText(result, final, options) ||
                  scanNumber(result, final, options) ||
                  scanIdentifier(result, final, options) ||
                  scanOperator(result, final, options) ||
                  scanFence(result, final, options)) {
                  count += 1;
              }
              else if (result.index < final) {
                  let mathML = atomToMathML(result.atoms[result.index], options);
                  if (result.lastType === 'mn' &&
                      mathML.length > 0 &&
                      result.atoms[result.index].type === 'genfrac') {
                      // If this is a fraction preceded by a number (e.g. 2 1/2),
                      // add an "invisible plus" (U+0264) character in front of it
                      mathML = '<mo>&#x2064;</mo>' + mathML;
                  }
                  if (result.atoms[result.index].type === 'genfrac') {
                      result.lastType = 'mfrac';
                  }
                  else {
                      result.lastType = '';
                  }
                  if (mathML.length > 0) {
                      result.mathML += mathML;
                      count += 1;
                  }
                  result.index += 1;
              }
          }
          // If there are more than a single element, wrap them in a mrow tag.
          if (count > 1) {
              result.mathML = '<mrow>' + result.mathML + '</mrow>';
          }
      }
      return result;
  }
  function toMo(atom, options) {
      let result = '';
      const body = toString$1(atom.value);
      if (body) {
          result = '<mo' + makeID$1(atom.id, options) + '>' + body + '</mo>';
      }
      return result;
  }
  function toString$1(atoms) {
      if (!atoms)
          return '';
      if (typeof atoms === 'string')
          return xmlEscape(atoms);
      if (!Array.isArray(atoms) && typeof atoms.body === 'string') {
          return xmlEscape(atoms.body);
      }
      let result = '';
      for (const atom of atoms) {
          if (typeof atom.value === 'string') {
              result += atom.value;
          }
      }
      return xmlEscape(result);
  }
  /**
   * Return a MathML fragment representation of a single atom
   *
   */
  function atomToMathML(atom, options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      // For named SVG atoms, map to a Unicode char
      const SVG_CODE_POINTS = {
          widehat: '^',
          widecheck: 'ˇ',
          widetilde: '~',
          utilde: '~',
          overleftarrow: '\u2190',
          underleftarrow: '\u2190',
          xleftarrow: '\u2190',
          overrightarrow: '\u2192',
          underrightarrow: '\u2192',
          xrightarrow: '\u2192',
          underbrace: '\u23DF',
          overbrace: '\u23DE',
          overgroup: '\u23E0',
          undergroup: '\u23E1',
          overleftrightarrow: '\u2194',
          underleftrightarrow: '\u2194',
          xleftrightarrow: '\u2194',
          Overrightarrow: '\u21D2',
          xRightarrow: '\u21D2',
          overleftharpoon: '\u21BC',
          xleftharpoonup: '\u21BC',
          overrightharpoon: '\u21C0',
          xrightharpoonup: '\u21C0',
          xLeftarrow: '\u21D0',
          xLeftrightarrow: '\u21D4',
          xhookleftarrow: '\u21A9',
          xhookrightarrow: '\u21AA',
          xmapsto: '\u21A6',
          xrightharpoondown: '\u21C1',
          xleftharpoondown: '\u21BD',
          xrightleftharpoons: '\u21CC',
          xleftrightharpoons: '\u21CB',
          xtwoheadleftarrow: '\u219E',
          xtwoheadrightarrow: '\u21A0',
          xlongequal: '=',
          xtofrom: '\u21C4',
          xrightleftarrows: '\u21C4',
          xrightequilibrium: '\u21CC',
          xleftequilibrium: '\u21CB',
      };
      const SPECIAL_IDENTIFIERS = {
          '\\exponentialE': '&#x02147;',
          '\\imaginaryI': '&#x2148;',
          '\\differentialD': '&#x2146;',
          '\\capitalDifferentialD': '&#x2145;',
          '\\alpha': '&#x03b1;',
          '\\pi': '&#x03c0;',
          '\\infty': '&#x221e;',
          '\\forall': '&#x2200;',
          '\\nexists': '&#x2204;',
          '\\exists': '&#x2203;',
          '\\hbar': '\u210F',
          '\\cdotp': '\u22C5',
          '\\ldots': '\u2026',
          '\\cdots': '\u22EF',
          '\\ddots': '\u22F1',
          '\\vdots': '\u22EE',
          '\\ldotp': '\u002E',
      };
      const MATH_VARIANTS = {
          cal: 'script',
          frak: 'fraktur',
          bb: 'double-struck',
          scr: 'script',
          cmtt: 'monospace',
          cmss: 'sans-serif',
      };
      const SPACING = {
          '\\!': -3 / 18,
          '\\ ': 6 / 18,
          '\\,': 3 / 18,
          '\\:': 4 / 18,
          '\\;': 5 / 18,
          '\\enspace': 0.5,
          '\\quad': 1,
          '\\qquad': 2,
          '\\enskip': 0.5,
      };
      let result = '';
      let sep = '';
      let col;
      let row;
      let i;
      let underscript;
      let overscript;
      let body;
      let variant = MATH_VARIANTS[atom.fontFamily || atom.font] || '';
      if (variant) {
          variant = ' mathvariant="' + variant + '"';
      }
      const { command } = atom;
      if (atom.mode === 'text') {
          result = '<mi' + makeID$1(atom.id, options) + '>' + atom.value + '</mi>';
      }
      else {
          switch (atom.type) {
              case 'first':
                  break; // Nothing to do
              case 'group':
              case 'root':
                  result = toMathML(atom.body, 0, 0, options).mathML;
                  break;
              case 'array':
                  if ((atom.leftDelim && atom.leftDelim !== '.') ||
                      (atom.rightDelim && atom.rightDelim !== '.')) {
                      result += '<mrow>';
                      if (atom.leftDelim && atom.leftDelim !== '.') {
                          result +=
                              '<mo>' +
                                  (SPECIAL_OPERATORS[atom.leftDelim] || atom.leftDelim) +
                                  '</mo>';
                      }
                  }
                  result += '<mtable';
                  if (atom.colFormat) {
                      result += ' columnalign="';
                      for (i = 0; i < atom.colFormat.length; i++) {
                          if (atom.colFormat[i].align) {
                              result +=
                                  { l: 'left', c: 'center', r: 'right' }[atom.colFormat[i].align] + ' ';
                          }
                      }
                      result += '"';
                  }
                  result += '>';
                  for (row = 0; row < atom.array.length; row++) {
                      result += '<mtr>';
                      for (col = 0; col < atom.array[row].length; col++) {
                          result +=
                              '<mtd>' +
                                  toMathML(atom.array[row][col], 0, 0, options).mathML +
                                  '</mtd>';
                      }
                      result += '</mtr>';
                  }
                  result += '</mtable>';
                  if ((atom.leftDelim && atom.leftDelim !== '.') ||
                      (atom.rightDelim && atom.rightDelim !== '.')) {
                      if (atom.rightDelim && atom.rightDelim !== '.') {
                          result +=
                              '<mo>' +
                                  (SPECIAL_OPERATORS[atom.leftDelim] || atom.rightDelim) +
                                  '</mo>';
                      }
                      result += '</mrow>';
                  }
                  break;
              case 'genfrac':
                  if (atom.leftDelim || atom.rightDelim) {
                      result += '<mrow>';
                  }
                  if (atom.leftDelim && atom.leftDelim !== '.') {
                      result +=
                          '<mo' +
                              makeID$1(atom.id, options) +
                              '>' +
                              (SPECIAL_OPERATORS[atom.leftDelim] || atom.leftDelim) +
                              '</mo>';
                  }
                  if (atom.hasBarLine) {
                      result += '<mfrac>';
                      result +=
                          toMathML(atom.above, 0, 0, options).mathML || '<mi>&nbsp;</mi>';
                      result +=
                          toMathML(atom.below, 0, 0, options).mathML || '<mi>&nbsp;</mi>';
                      result += '</mfrac>';
                  }
                  else {
                      // No bar line, i.e. \choose, etc...
                      result += '<mtable' + makeID$1(atom.id, options) + '>';
                      result +=
                          '<mtr>' + toMathML(atom.above, 0, 0, options).mathML + '</mtr>';
                      result +=
                          '<mtr>' + toMathML(atom.below, 0, 0, options).mathML + '</mtr>';
                      result += '</mtable>';
                  }
                  if (atom.rightDelim && atom.rightDelim !== '.') {
                      result +=
                          '<mo' +
                              makeID$1(atom.id, options) +
                              '>' +
                              (SPECIAL_OPERATORS[atom.rightDelim] || atom.rightDelim) +
                              '</mo>';
                  }
                  if (atom.leftDelim || atom.rightDelim) {
                      result += '</mrow>';
                  }
                  break;
              case 'surd':
                  if (!atom.hasEmptyBranch('above')) {
                      result += '<mroot' + makeID$1(atom.id, options) + '>';
                      result += toMathML(atom.body, 0, 0, options).mathML;
                      result += toMathML(atom.above, 0, 0, options).mathML;
                      result += '</mroot>';
                  }
                  else {
                      result += '<msqrt' + makeID$1(atom.id, options) + '>';
                      result += toMathML(atom.body, 0, 0, options).mathML;
                      result += '</msqrt>';
                  }
                  break;
              case 'leftright':
                  // TODO: could add fence=true attribute
                  result = '<mrow>';
                  if (atom.leftDelim && atom.leftDelim !== '.') {
                      result +=
                          '<mo' +
                              makeID$1(atom.id, options) +
                              '>' +
                              (SPECIAL_OPERATORS[atom.leftDelim] || atom.leftDelim) +
                              '</mo>';
                  }
                  if (atom.body) {
                      result += toMathML(atom.body, 0, 0, options).mathML;
                  }
                  if (atom.rightDelim && atom.rightDelim !== '.') {
                      result +=
                          '<mo' +
                              makeID$1(atom.id, options) +
                              '>' +
                              (SPECIAL_OPERATORS[atom.rightDelim] || atom.rightDelim) +
                              '</mo>';
                  }
                  result += '</mrow>';
                  break;
              case 'sizeddelim':
              case 'delim':
                  result +=
                      '<mo separator="true"' +
                          makeID$1(atom.id, options) +
                          '>' +
                          (SPECIAL_OPERATORS[atom.delim] || atom.delim) +
                          '</mo>';
                  break;
              case 'accent':
                  result += '<mover accent="true"' + makeID$1(atom.id, options) + '>';
                  result += toMathML(atom.body, 0, 0, options).mathML;
                  result +=
                      '<mo>' + (SPECIAL_OPERATORS[command] || atom.accent) + '</mo>';
                  result += '</mover>';
                  break;
              case 'line':
              case 'overlap':
                  break;
              case 'overunder':
                  overscript = atom.above;
                  underscript = atom.below;
                  if ((atom.svgAbove || overscript) && (atom.svgBelow || underscript)) {
                      body = atom.body;
                  }
                  else if (overscript && overscript.length > 0) {
                      body = atom.body;
                      if ((_b = (_a = atom.body) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.below) {
                          underscript = atom.body[0].below;
                          body = atom.body[0].body;
                      }
                      else if (((_d = (_c = atom.body) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.type) === 'first' && ((_f = (_e = atom.body) === null || _e === void 0 ? void 0 : _e[1]) === null || _f === void 0 ? void 0 : _f.below)) {
                          underscript = atom.body[1].below;
                          body = atom.body[1].body;
                      }
                  }
                  else if (underscript && underscript.length > 0) {
                      body = atom.body;
                      if ((_h = (_g = atom.body) === null || _g === void 0 ? void 0 : _g[0]) === null || _h === void 0 ? void 0 : _h.above) {
                          overscript = atom.body[0].above;
                          body = atom.body[0].body;
                      }
                      else if (((_k = (_j = atom.body) === null || _j === void 0 ? void 0 : _j[0]) === null || _k === void 0 ? void 0 : _k.type) === 'first' && ((_m = (_l = atom.body) === null || _l === void 0 ? void 0 : _l[1]) === null || _m === void 0 ? void 0 : _m.above)) {
                          overscript = atom.body[1].overscript;
                          body = atom.body[1].body;
                      }
                  }
                  if ((atom.svgAbove || overscript) && (atom.svgBelow || underscript)) {
                      result += `<munderover ${variant} ${makeID$1(atom.id, options)}>`;
                      result +=
                          SVG_CODE_POINTS[atom.svgBody] ||
                              toMathML(body, 0, 0, options).mathML;
                      result +=
                          SVG_CODE_POINTS[atom.svgBelow] ||
                              toMathML(underscript, 0, 0, options).mathML;
                      result +=
                          SVG_CODE_POINTS[atom.svgAbove] ||
                              toMathML(overscript, 0, 0, options).mathML;
                      result += '</munderover>';
                  }
                  else if (atom.svgAbove || overscript) {
                      result +=
                          `<mover ${variant} ${makeID$1(atom.id, options)}>` +
                              (SVG_CODE_POINTS[atom.svgBody] ||
                                  toMathML(body, 0, 0, options).mathML);
                      result +=
                          SVG_CODE_POINTS[atom.svgAbove] ||
                              toMathML(overscript, 0, 0, options).mathML;
                      result += '</mover>';
                  }
                  else if (atom.svgBelow || underscript) {
                      result +=
                          `<munder ${variant} ${makeID$1(atom.id, options)}>` +
                              (SVG_CODE_POINTS[atom.svgBody] ||
                                  toMathML(body, 0, 0, options).mathML);
                      result +=
                          SVG_CODE_POINTS[atom.svgBelow] ||
                              toMathML(underscript, 0, 0, options).mathML;
                      result += '</munder>';
                  }
                  break;
              case 'placeholder': // No real equivalent in MathML -- will generate a '?'qq
              case 'mord': {
                  result =
                      SPECIAL_IDENTIFIERS[command] ||
                          command ||
                          (typeof atom.value === 'string' ? atom.value : '');
                  const m = command
                      ? command.match(/{?\\char"([\dabcdefABCDEF]*)}?/)
                      : null;
                  if (m) {
                      // It's a \char command
                      result = '&#x' + m[1] + ';';
                  }
                  else if (result.length > 0 && result.startsWith('\\')) {
                      // This is an identifier with no special handling. Use the
                      // Unicode value
                      if (typeof atom.value === 'string' &&
                          atom.value.charCodeAt(0) > 255) {
                          result =
                              '&#x' +
                                  ('000000' + atom.value.charCodeAt(0).toString(16)).slice(-4) +
                                  ';';
                      }
                      else if (typeof atom.value === 'string') {
                          result = atom.value.charAt(0);
                      }
                      else {
                          console.log('Did not expect this');
                          result = '';
                      }
                  }
                  const tag = /\d/.test(result) ? 'mn' : 'mi';
                  result =
                      '<' +
                          tag +
                          variant +
                          makeID$1(atom.id, options) +
                          '>' +
                          xmlEscape(result) +
                          '</' +
                          tag +
                          '>';
                  break;
              }
              case 'mbin':
              case 'mrel':
              case 'minner':
                  if (command && SPECIAL_IDENTIFIERS[command]) {
                      // Some 'textord' are actually identifiers. Check them here.
                      result =
                          '<mi' +
                              makeID$1(atom.id, options) +
                              '>' +
                              SPECIAL_IDENTIFIERS[command] +
                              '</mi>';
                  }
                  else if (command && SPECIAL_OPERATORS[command]) {
                      result =
                          '<mo' +
                              makeID$1(atom.id, options) +
                              '>' +
                              SPECIAL_OPERATORS[command] +
                              '</mo>';
                  }
                  else {
                      result = toMo(atom, options);
                  }
                  break;
              case 'mpunct':
                  result =
                      '<mo separator="true"' +
                          makeID$1(atom.id, options) +
                          '>' +
                          (SPECIAL_OPERATORS[command] || command) +
                          '</mo>';
                  break;
              case 'mop':
                  if (atom.body !== '\u200B') {
                      // Not ZERO-WIDTH
                      result = '<mo' + makeID$1(atom.id, options) + '>';
                      result +=
                          command === '\\operatorname' ? atom.body : command || atom.body;
                      result += '</mo>';
                  }
                  break;
              // Case 'mathstyle':
              // TODO: mathstyle is a switch. Need to figure out its scope to properly wrap it around a <mstyle> tag
              // if (atom.mathstyle === 'displaystyle') {
              //     result += '<mstyle displaystyle="true">';
              //     result += '</mstyle>';
              // } else {
              //     result += '<mstyle displaystyle="false">';
              //     result += '</mstyle>';
              // };
              // break;
              case 'box':
                  result = '<menclose notation="box"';
                  if (atom.backgroundcolor) {
                      result +=
                          ' mathbackground="' + stringToColor(atom.backgroundcolor) + '"';
                  }
                  result +=
                      makeID$1(atom.id, options) +
                          '>' +
                          toMathML(atom.body, 0, 0, options).mathML +
                          '</menclose>';
                  break;
              case 'spacing':
                  result += '<mspace width="' + (SPACING[command] || 0) + 'em"/>';
                  break;
              case 'enclose':
                  result = '<menclose notation="';
                  for (const notation in atom.notation) {
                      if (Object.prototype.hasOwnProperty.call(atom.notation, notation) &&
                          atom.notation[notation]) {
                          result += sep + notation;
                          sep = ' ';
                      }
                  }
                  result +=
                      makeID$1(atom.id, options) +
                          '">' +
                          toMathML(atom.body, 0, 0, options).mathML +
                          '</menclose>';
                  break;
              case 'space':
                  result += '&nbsp;';
                  break;
              case 'msubsup':
                  break;
              case 'phantom':
                  break;
              case 'composition':
                  break;
              default:
                  console.log('In conversion to MathML, unknown type : ' + atom.type);
          }
      }
      return result;
  }
  function atomsToMathML(atoms, options) {
      return toMathML(atoms, 0, 0, options).mathML;
  }

  const SPECIAL_IDENTIFIERS = {
      '\u2212': '-',
      '-': '-',
      '\\alpha': 'alpha',
      '\\beta': 'beta',
      '\\gamma': 'gamma',
      '\\delta': 'delta',
      '\\epsilon': 'epsilon',
      '\\varepsilon': 'varepsilon',
      '\\zeta': 'zeta',
      '\\eta': 'eta',
      '\\theta': 'theta',
      '\\vartheta': 'vartheta',
      '\\iota': 'iota',
      '\\kappa': 'kappa',
      '\\lambda': 'lambda',
      '\\mu': 'mu',
      '\\nu': 'nu',
      '\\xi': 'xi',
      '\\pi': 'pi',
      '\\rho': 'rho',
      '\\sigma': 'sigma',
      '\\tau': 'tau',
      '\\upsilon': 'upsilon',
      '\\phi': 'phi',
      '\\varphi': 'varphi',
      '\\chi': 'chi',
      '\\psi': 'psi',
      '\\omega': 'omega',
      '\\Gamma': 'Gamma',
      '\\Delta': 'Delta',
      '\\Theta': 'Theta',
      '\\Lambda': 'Lambda',
      '\\Xi': 'Xi',
      '\\Pi': 'Pi',
      '\\Sigma': 'Sigma',
      '\\Phi': 'Phi',
      '\\Psi': 'Psi',
      '\\Omega': 'Omega',
  };
  const SPECIAL_OPERATORS$1 = {
      '\\pm': '+-',
      '\\times': 'xx',
      '\\colon': ':',
      '\\vert': '|',
      '\\Vert': '||',
      '\\mid': '|',
      '\\lbrace': '{',
      '\\rbrace': '}',
      '\\langle': '(:',
      '\\rangle': ':)',
  };
  function atomToAsciiMath(atom) {
      var _a, _b, _c, _d;
      if (!atom)
          return '';
      if (isArray(atom)) {
          let result = '';
          if (atom.length === 0)
              return '';
          if (atom[0].type === 'first')
              atom = atom.slice(1);
          if (atom.length === 0)
              return '';
          if (atom[0].mode === 'text') {
              // Text mode... put it in (ASCII) quotes
              let i = 0;
              result = '"';
              while (((_a = atom[i]) === null || _a === void 0 ? void 0 : _a.mode) === 'text') {
                  result += atom[i].body ? atomToAsciiMath(atom[i].body) : atom[i].value;
                  i++;
              }
              result += '"' + atomToAsciiMath(atom.slice(i));
          }
          else if (atom[0].mode === 'math') {
              let i = 0;
              while (atom[i] && atom[i].mode === 'math') {
                  result += atomToAsciiMath(atom[i]);
                  i++;
              }
              result += atomToAsciiMath(atom.slice(i));
          }
          else {
              console.warn('toASCIIMath: Unexpected mode');
          }
          return result.trim();
      }
      if (atom.mode === 'text') {
          return '"' + atom.value + '"'; // Text -- add in (ASCII) quotes
      }
      let result = '';
      const { command } = atom;
      let m;
      switch (atom.type) {
          case 'group':
          case 'root':
              result = atomToAsciiMath(atom.body);
              break;
          case 'array':
              break;
          case 'genfrac':
              {
                  const genfracAtom = atom;
                  if (genfracAtom.leftDelim || genfracAtom.rightDelim) {
                      result +=
                          genfracAtom.leftDelim === '.' || !genfracAtom.leftDelim
                              ? '{:'
                              : genfracAtom.leftDelim;
                  }
                  if (genfracAtom.hasBarLine) {
                      result += '(';
                      result += atomToAsciiMath(genfracAtom.above);
                      result += ')/(';
                      result += atomToAsciiMath(genfracAtom.below);
                      result += ')';
                  }
                  else {
                      // No bar line, i.e. \choose, etc...
                      result += '(' + atomToAsciiMath(genfracAtom.above) + '),';
                      result += '(' + atomToAsciiMath(genfracAtom.below) + ')';
                  }
                  if (genfracAtom.leftDelim || genfracAtom.rightDelim) {
                      result +=
                          genfracAtom.rightDelim === '.' || !genfracAtom.rightDelim
                              ? '{:'
                              : genfracAtom.rightDelim;
                  }
              }
              break;
          case 'surd':
              result += !atom.hasEmptyBranch('above')
                  ? 'root(' +
                      atomToAsciiMath(atom.above) +
                      ')(' +
                      atomToAsciiMath(atom.body) +
                      ')'
                  : 'sqrt(' + atomToAsciiMath(atom.body) + ')';
              break;
          case 'leftright':
              {
                  const leftrightAtom = atom;
                  result +=
                      leftrightAtom.leftDelim === '.' || !leftrightAtom.leftDelim
                          ? '{:'
                          : leftrightAtom.leftDelim;
                  result += atomToAsciiMath(leftrightAtom.body);
                  result +=
                      leftrightAtom.rightDelim === '.' || !leftrightAtom.rightDelim
                          ? ':}'
                          : leftrightAtom.rightDelim;
              }
              break;
          case 'sizeddelim':
          case 'delim':
              // Result += '<mo separator="true"' + makeID(atom.id, options) + '>' + (SPECIAL_OPERATORS[atom.delim] || atom.delim) + '</mo>';
              break;
          case 'overlap':
              break;
          case 'overunder':
              break;
          case 'mord':
              // @todo, deal with some special identifiers: \alpha, etc...
              result = (_c = (_b = SPECIAL_IDENTIFIERS[command]) !== null && _b !== void 0 ? _b : command) !== null && _c !== void 0 ? _c : (typeof atom.value === 'string' ? atom.value : '');
              if (result.startsWith('\\'))
                  result = String(result);
              m = command ? command.match(/{?\\char"([\dabcdefABCDEF]*)}?/) : null;
              if (m) {
                  // It's a \char command
                  result = String.fromCharCode(Number.parseInt('0x' + m[1]));
              }
              else if (result.length > 0 && result.startsWith('\\')) {
                  // Atom is an identifier with no special handling. Use the
                  // Unicode value
                  result =
                      typeof atom.value === 'string' ? atom.value.charAt(0) : atom.command;
              }
              // Result = '<mi' + variant + makeID(atom.id, options) + '>' + xmlEscape(result) + '</mi>';
              break;
          case 'mbin':
          case 'mrel':
          case 'minner':
              if (command && SPECIAL_IDENTIFIERS[command]) {
                  // Some 'textord' are actually identifiers. Check them here.
                  result = SPECIAL_IDENTIFIERS[command];
              }
              else if (command && SPECIAL_OPERATORS$1[command]) {
                  result = SPECIAL_OPERATORS$1[command];
              }
              else {
                  result = atom.value;
              }
              break;
          case 'mopen':
          case 'mclose':
              result += atom.value;
              break;
          case 'mpunct':
              result = SPECIAL_OPERATORS$1[command] || command;
              break;
          case 'mop':
              if (atom.value !== '\u200B') {
                  // Not ZERO-WIDTH
                  result = '';
                  result +=
                      command === '\\operatorname'
                          ? atomToAsciiMath(atom.body)
                          : (_d = atom.value) !== null && _d !== void 0 ? _d : command;
                  result += ' ';
              }
              break;
          case 'box':
              break;
          case 'spacing':
              break;
          case 'enclose':
              break;
          case 'space':
              result = ' ';
              break;
      }
      // Subscripts before superscripts (according to the ASCIIMath spec)
      if (!atom.hasEmptyBranch('subscript')) {
          result += '_';
          const arg = atomToAsciiMath(atom.subscript);
          result +=
              arg.length > 1 && !/^(-)?\d+(\.\d*)?$/.test(arg) ? '(' + arg + ')' : arg;
      }
      if (!atom.hasEmptyBranch('superscript')) {
          result += '^';
          const arg = atomToAsciiMath(atom.superscript);
          result +=
              arg.length > 1 && !/^(-)?\d+(\.\d*)?$/.test(arg) ? '(' + arg + ')' : arg;
      }
      return result;
  }

  // Markup
  // Two common flavor of markups: SSML and 'mac'. The latter is only available
  // when using the native TTS synthesizer on Mac OS.
  // Use SSML in the production rules below. The markup will either be striped
  // off or replaced with the 'mac' markup as necessary.
  //
  // SSML                                             Mac
  // ----                                             ----
  // <emphasis>WORD</emphasis>                        [[emph +]]WORD
  // <break time="150ms"/>                            [[slc 150]]
  // <say-as interpret-as="character">A</say-as>      [[char LTRL] A [[char NORM]]
  // https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/SpeechSynthesisProgrammingGuide/FineTuning/FineTuning.html#//apple_ref/doc/uid/TP40004365-CH5-SW3
  // https://pdfs.semanticscholar.org/8887/25b82b8dbb45dd4dd69b36a65f092864adb0.pdf
  // "<audio src='non_existing_file.au'>File could not be played.</audio>"
  // "I am now <prosody rate='+0.06'>speaking 6% faster.</prosody>"
  const PRONUNCIATION = {
      '\\alpha': 'alpha ',
      '\\mu': 'mew ',
      '\\sigma': 'sigma ',
      '\\pi': 'pie ',
      '\\imaginaryI': 'eye ',
      '\\sum': 'Summation ',
      '\\prod': 'Product ',
      'a': '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
      'A': 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
      '+': 'plus ',
      '-': 'minus ',
      ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
      ',': '<break time="150ms"/> comma  <break time="150ms"/>',
      '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
      '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
      ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
      '=': 'equals ',
      '<': 'is less than ',
      '\\lt': 'is less than ',
      '<=': 'is less than or equal to ',
      '\\le': 'is less than or equal to ',
      '\\gt': 'is greater than ',
      '>': 'is greater than ',
      '\\ge': 'is greater than or equal to ',
      '\\geq': 'is greater than or equal to ',
      '\\leq': 'is less than or equal to ',
      '!': 'factorial ',
      '\\sin': 'sine ',
      '\\cos': 'cosine ',
      '\u200B': '',
      '\u2212': 'minus ',
      ':': '<break time="150ms"/> such that <break time="200ms"/> ',
      '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
      '\\hbar': 'etch bar ',
      '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
      '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
      '\\land': 'and ',
      '\\lor': 'or ',
      '\\neg': 'not ',
      '\\div': 'divided by ',
      '\\forall': 'for all ',
      '\\exists': 'there exists ',
      '\\nexists': 'there does not exists ',
      '\\in': 'element of ',
      '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
      '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
      '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
      '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
      '\\infty': 'infinity ',
      '\\nabla': 'nabla ',
      '\\partial': 'partial derivative of ',
      '\\cdots': 'dot dot dot ',
      '\\Rightarrow': 'implies ',
      '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
      '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
      '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
      '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
      '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
      '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
      '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
      '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
      '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
      '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
      '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
      '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
      '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
      '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
      // '\\lbrack':		'left bracket',
      // '\\rbrack':		'right bracket',
      '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
      '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
      // Need to add code to detect singluar/plural. Until then spoken as plural since that is vastly more common
      // note: need to worry about intervening &InvisibleTimes;.
      // note: need to also do this when in numerator of fraction and number preceeds fraction
      // note: need to do this for <msup>
      'mm': 'millimeters',
      'cm': 'centimeters',
      'km': 'kilometers',
      'kg': 'kilograms',
  };
  function getSpokenName(latex) {
      let result = '';
      if (latex.startsWith('\\')) {
          result = ' ' + latex.replace('\\', '') + ' ';
      }
      return result;
  }
  function platform(p) {
      let result = 'other';
      if ((navigator === null || navigator === void 0 ? void 0 : navigator.platform) && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
          if (/^(mac)/i.test(navigator.platform)) {
              result = 'mac';
          }
          else if (/^(win)/i.test(navigator.platform)) {
              result = 'win';
          }
          else if (/(android)/i.test(navigator.userAgent)) {
              result = 'android';
          }
          else if (/(iphone)/i.test(navigator.userAgent) ||
              /(ipod)/i.test(navigator.userAgent) ||
              /(ipad)/i.test(navigator.userAgent)) {
              result = 'ios';
          }
          else if (/\bcros\b/i.test(navigator.userAgent)) {
              result = 'chromeos';
          }
      }
      return result === p ? p : '!' + p;
  }
  function isAtomic(atoms) {
      let count = 0;
      if (isAtomArray(atoms)) {
          for (const atom of atoms) {
              if (atom.type !== 'first') {
                  count += 1;
              }
          }
      }
      return count === 1;
  }
  function atomicID(atoms) {
      if (isAtomArray(atoms)) {
          for (const atom of atoms) {
              if (atom.type !== 'first' && atom.id) {
                  return atom.id.toString();
              }
          }
      }
      return '';
  }
  function atomicValue(atoms) {
      let result = '';
      if (isAtomArray(atoms)) {
          for (const atom of atoms) {
              if (atom.type !== 'first' && typeof atom.value === 'string') {
                  result += atom.value;
              }
          }
      }
      return result;
  }
  function atomToSpeakableFragment(mode, atom, options) {
      var _a, _b;
      function letter(c) {
          let result = '';
          if (!options.textToSpeechMarkup) {
              if (/[a-z]/.test(c)) {
                  result += " '" + c.toUpperCase() + "'";
              }
              else if (/[A-Z]/.test(c)) {
                  result += " 'capital " + c.toUpperCase() + "'";
              }
              else {
                  result += c;
              }
          }
          else if (/[a-z]/.test(c)) {
              result += ' <say-as interpret-as="character">' + c + '</say-as>';
          }
          else if (/[A-Z]/.test(c)) {
              result += String('capital ' + c.toLowerCase());
          }
          else {
              result += c;
          }
          return result;
      }
      function emph(s) {
          return '<emphasis>' + s + '</emphasis>';
      }
      if (!atom)
          return '';
      let result = '';
      if (isAtomArray(atom)) {
          let isInDigitRun = false; // Need to group sequence of digits
          let isInTextRun = false; // Need to group text
          for (let i = 0; i < atom.length; i++) {
              if (atom[i].mode !== 'text') {
                  isInTextRun = false;
              }
              if (i < atom.length - 2 &&
                  atom[i].type === 'mopen' &&
                  atom[i + 2].type === 'mclose' &&
                  atom[i + 1].type === 'mord') {
                  result += ' of ';
                  result += emph(atomToSpeakableFragment(mode, atom[i + 1], options));
                  i += 2;
              }
              else if (atom[i].mode === 'text') {
                  if (isInTextRun) {
                      result += (_a = atom[i].value) !== null && _a !== void 0 ? _a : ' ';
                  }
                  else {
                      isInTextRun = true;
                      result += atomToSpeakableFragment('text', atom[i], options);
                  }
                  // '.' and ',' should only be allowed if prev/next entry is a digit
                  // However, if that isn't the case, this still works because 'toSpeakableFragment' is called in either case.
                  // Note: the first char in a digit/text run potentially needs to have a 'mark', hence the call to 'toSpeakableFragment'
              }
              else if (atom[i].type === 'mord' &&
                  /[0123456789,.]/.test(atom[i].value)) {
                  if (isInDigitRun) {
                      result += atom[i].value;
                  }
                  else {
                      isInDigitRun = true;
                      result += atomToSpeakableFragment(mode, atom[i], options);
                  }
              }
              else {
                  isInDigitRun = false;
                  result += atomToSpeakableFragment(mode, atom[i], options);
              }
          }
      }
      else if (atom.mode === 'text') {
          if (atom.id && mode === 'math') {
              result += '<mark name="' + atom.id.toString() + '"/>';
          }
          result += atom.value;
      }
      else {
          if (atom.id && mode === 'math') {
              result += '<mark name="' + atom.id.toString() + '"/>';
          }
          let numer = '';
          let denom = '';
          let body = '';
          let supsubHandled = false;
          switch (atom.type) {
              case 'group':
              case 'root':
                  result += atomToSpeakableFragment('math', atom.body, options);
                  break;
              case 'genfrac':
                  numer = atomToSpeakableFragment('math', atom.above, options);
                  denom = atomToSpeakableFragment('math', atom.below, options);
                  if (isAtomic(atom.above) && isAtomic(atom.below)) {
                      const COMMON_FRACTIONS = {
                          '1/2': ' half ',
                          '1/3': ' one third ',
                          '2/3': ' two third',
                          '1/4': ' one quarter ',
                          '3/4': ' three quarter ',
                          '1/5': ' one fifth ',
                          '2/5': ' two fifths ',
                          '3/5': ' three fifths ',
                          '4/5': ' four fifths ',
                          '1/6': ' one sixth ',
                          '5/6': ' five sixths ',
                          '1/8': ' one eight ',
                          '3/8': ' three eights ',
                          '5/8': ' five eights ',
                          '7/8': ' seven eights ',
                          '1/9': ' one ninth ',
                          '2/9': ' two ninths ',
                          '4/9': ' four ninths ',
                          '5/9': ' five ninths ',
                          '7/9': ' seven ninths ',
                          '8/9': ' eight ninths ',
                      };
                      const commonFraction = COMMON_FRACTIONS[atomicValue(atom.above) + '/' + atomicValue(atom.below)];
                      if (commonFraction) {
                          result = commonFraction;
                      }
                      else {
                          result += numer + ' over ' + denom;
                      }
                  }
                  else {
                      result +=
                          ' the fraction <break time="150ms"/>' +
                              numer +
                              ', over <break time="150ms"/>' +
                              denom +
                              '.<break time="150ms"/> End fraction.<break time="150ms"/>';
                  }
                  break;
              case 'surd':
                  body = atomToSpeakableFragment('math', atom.body, options);
                  if (atom.hasEmptyBranch('above')) {
                      result += isAtomic(atom.body)
                          ? ' the square root of ' + body + ' , '
                          : ' the square root of <break time="200ms"/>' +
                              body +
                              '. <break time="200ms"/> End square root';
                  }
                  else {
                      let index = atomToSpeakableFragment('math', atom.above, options);
                      index = index.trim();
                      const index2 = index.replace(/<mark([^/]*)\/>/g, '');
                      if (index2 === '3') {
                          result +=
                              ' the cube root of <break time="200ms"/>' +
                                  body +
                                  '. <break time="200ms"/> End cube root';
                      }
                      else if (index2 === 'n') {
                          result +=
                              ' the nth root of <break time="200ms"/>' +
                                  body +
                                  '. <break time="200ms"/> End root';
                      }
                      else {
                          result +=
                              ' the root with index: <break time="200ms"/>' +
                                  index +
                                  ', of <break time="200ms"/>' +
                                  body +
                                  '. <break time="200ms"/> End root';
                      }
                  }
                  break;
              case 'leftright':
                  {
                      const delimAtom = atom;
                      result += PRONUNCIATION[delimAtom.leftDelim] || delimAtom.leftDelim;
                      result += atomToSpeakableFragment('math', atom.body, options);
                      result += PRONUNCIATION[delimAtom.rightDelim] || delimAtom.rightDelim;
                  }
                  break;
              case 'rule':
                  // @todo
                  break;
              case 'overunder':
                  // @todo
                  break;
              case 'overlap':
                  // @todo
                  break;
              case 'placeholder':
                  result += 'placeholder ';
                  break;
              case 'delim':
              case 'sizeddelim':
              case 'mord':
              case 'minner':
              case 'mbin':
              case 'mrel':
              case 'mpunct':
              case 'mopen':
              case 'mclose': {
                  const { command } = atom;
                  if (command === '\\mathbin' ||
                      command === '\\mathrel' ||
                      command === '\\mathopen' ||
                      command === '\\mathclose' ||
                      command === '\\mathpunct' ||
                      command === '\\mathord' ||
                      command === '\\mathinner') {
                      result = atomToSpeakableFragment(mode, atom.body, options);
                      break;
                  }
                  let atomValue = atom.value;
                  let latexValue = atom.command;
                  if (atom.type === 'delim' || atom.type === 'sizeddelim') {
                      latexValue = atom.value;
                      atomValue = latexValue;
                  }
                  if (mode === 'text') {
                      result += atomValue;
                  }
                  else {
                      if (atom.type === 'mbin') {
                          result += '<break time="150ms"/>';
                      }
                      if (atomValue) {
                          const value = PRONUNCIATION[atomValue] ||
                              (latexValue ? PRONUNCIATION[latexValue.trim()] : '');
                          if (value) {
                              result += ' ' + value;
                          }
                          else {
                              const spokenName = latexValue
                                  ? getSpokenName(latexValue.trim())
                                  : '';
                              result += spokenName ? spokenName : letter(atomValue);
                          }
                      }
                      else {
                          result += atomToSpeakableFragment('math', atom.body, options);
                      }
                      if (atom.type === 'mbin') {
                          result += '<break time="150ms"/>';
                      }
                  }
                  break;
              }
              case 'mop':
                  // @todo
                  if (atom.value !== '\u200B') {
                      // Not ZERO-WIDTH
                      const trimLatex = atom.command;
                      if (trimLatex === '\\sum') {
                          if (!atom.hasEmptyBranch('superscript') &&
                              !atom.hasEmptyBranch('subscript')) {
                              let sup = atomToSpeakableFragment('math', atom.superscript, options);
                              sup = sup.trim();
                              let sub = atomToSpeakableFragment('math', atom.subscript, options);
                              sub = sub.trim();
                              result +=
                                  ' the summation from <break time="200ms"/>' +
                                      sub +
                                      '<break time="200ms"/> to  <break time="200ms"/>' +
                                      sup +
                                      '<break time="200ms"/> of <break time="150ms"/>';
                              supsubHandled = true;
                          }
                          else if (!atom.hasEmptyBranch('subscript')) {
                              let sub = atomToSpeakableFragment('math', atom.subscript, options);
                              sub = sub.trim();
                              result +=
                                  ' the summation from <break time="200ms"/>' +
                                      sub +
                                      '<break time="200ms"/> of <break time="150ms"/>';
                              supsubHandled = true;
                          }
                          else {
                              result += ' the summation of';
                          }
                      }
                      else if (trimLatex === '\\prod') {
                          if (!atom.hasEmptyBranch('superscript') &&
                              !atom.hasEmptyBranch('subscript')) {
                              let sup = atomToSpeakableFragment('math', atom.superscript, options);
                              sup = sup.trim();
                              let sub = atomToSpeakableFragment('math', atom.subscript, options);
                              sub = sub.trim();
                              result +=
                                  ' the product from <break time="200ms"/>' +
                                      sub +
                                      '<break time="200ms"/> to <break time="200ms"/>' +
                                      sup +
                                      '<break time="200ms"/> of <break time="150ms"/>';
                              supsubHandled = true;
                          }
                          else if (!atom.hasEmptyBranch('subscript')) {
                              let sub = atomToSpeakableFragment('math', atom.subscript, options);
                              sub = sub.trim();
                              result +=
                                  ' the product from <break time="200ms"/>' +
                                      sub +
                                      '<break time="200ms"/> of <break time="150ms"/>';
                              supsubHandled = true;
                          }
                          else {
                              result += ' the product  of ';
                          }
                      }
                      else if (trimLatex === '\\int') {
                          if (!atom.hasEmptyBranch('superscript') &&
                              !atom.hasEmptyBranch('subscript')) {
                              let sup = atomToSpeakableFragment('math', atom.superscript, options);
                              sup = sup.trim();
                              let sub = atomToSpeakableFragment('math', atom.subscript, options);
                              sub = sub.trim();
                              result +=
                                  ' the integral from <break time="200ms"/>' +
                                      emph(sub) +
                                      '<break time="200ms"/> to <break time="200ms"/>' +
                                      emph(sup) +
                                      ' <break time="200ms"/> of ';
                              supsubHandled = true;
                          }
                          else {
                              result += ' the integral of <break time="200ms"/> ';
                          }
                      }
                      else if (typeof atom.value === 'string') {
                          const value = (_b = PRONUNCIATION[atom.value]) !== null && _b !== void 0 ? _b : PRONUNCIATION[atom.command];
                          result += value ? value : ' ' + atom.value;
                      }
                      else if (atom.command) {
                          result += atom.command.startsWith('\\')
                              ? ' ' + atom.command.slice(1)
                              : ' ' + atom.command;
                      }
                  }
                  break;
              case 'enclose':
                  body = atomToSpeakableFragment('math', atom.body, options);
                  result += isAtomic(atom.body)
                      ? ' crossed out ' + body + ' , '
                      : ' crossed out ' + body + '. End cross out';
                  break;
          }
          if (!supsubHandled && !atom.hasEmptyBranch('superscript')) {
              let sup = atomToSpeakableFragment(mode, atom.superscript, options);
              sup = sup.trim();
              const sup2 = sup.replace(/<[^>]*>/g, '');
              if (isAtomic(atom.superscript)) {
                  if (mode === 'math') {
                      const id = atomicID(atom.superscript);
                      if (id) {
                          result += '<mark name="' + id + '"/>';
                      }
                  }
                  if (sup2 === '\u2032') {
                      result += ' prime ';
                  }
                  else if (sup2 === '2') {
                      result += ' squared ';
                  }
                  else if (sup2 === '3') {
                      result += ' cubed ';
                  }
                  else if (Number.isNaN(Number.parseInt(sup2))) {
                      result += ' to the ' + sup + '; ';
                  }
                  else {
                      result +=
                          ' to the <say-as interpret-as="ordinal">' +
                              sup2 +
                              '</say-as> power; ';
                  }
              }
              else if (Number.isNaN(Number.parseInt(sup2))) {
                  result += ' raised to the ' + sup + '; ';
              }
              else {
                  result +=
                      ' raised to the <say-as interpret-as="ordinal">' +
                          sup2 +
                          '</say-as> power; ';
              }
          }
          if (!supsubHandled && !atom.hasEmptyBranch('subscript')) {
              let sub = atomToSpeakableFragment('math', atom.subscript, options);
              sub = sub.trim();
              result += isAtomic(atom.subscript)
                  ? ' sub ' + sub
                  : ' subscript ' + sub + '. End subscript. ';
          }
      }
      return result;
  }
  /**
   * @param  atoms The atoms to represent as speakable text.
   */
  function atomToSpeakableText(atoms, speechOptions) {
      var _a;
      const options = {
          ...speechOptions,
          textToSpeechRulesOptions: { ...speechOptions.textToSpeechRulesOptions },
      };
      if (window.sre && options.textToSpeechRules === 'sre') {
          const mathML = atomsToMathML(atoms, options);
          if (mathML) {
              if (options.textToSpeechMarkup) {
                  options.textToSpeechRulesOptions = (_a = options.textToSpeechRulesOptions) !== null && _a !== void 0 ? _a : {};
                  options.textToSpeechRulesOptions.markup = options.textToSpeechMarkup;
                  if (options.textToSpeechRulesOptions.markup === 'ssml') {
                      options.textToSpeechRulesOptions.markup = 'ssml_step';
                  }
                  options.textToSpeechRulesOptions.rate = options.speechEngineRate;
              }
              if (options.textToSpeechRulesOptions) {
                  window.sre.System.getInstance().setupEngine(options.textToSpeechRulesOptions);
              }
              return window.sre.System.getInstance().toSpeech(mathML);
          }
          return '';
      }
      let result = atomToSpeakableFragment('math', atoms, options);
      if (options.textToSpeechMarkup === 'ssml') {
          let prosody = '';
          if (options.speechEngineRate) {
              prosody = '<prosody rate="' + options.speechEngineRate + '">';
          }
          result =
              `<?xml version="1.0"?><speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xml:lang="en-US">` +
                  '<amazon:auto-breaths>' +
                  prosody +
                  '<p><s>' +
                  result +
                  '</s></p>' +
                  (prosody ? '</prosody>' : '') +
                  '</amazon:auto-breaths>' +
                  '</speak>';
      }
      else if (options.textToSpeechMarkup === 'mac' &&
          platform('mac') === 'mac') {
          // Convert SSML to Mac markup
          result = result
              .replace(/<mark([^/]*)\/>/g, '')
              .replace(/<emphasis>/g, '[[emph+]]')
              .replace(/<\/emphasis>/g, '')
              .replace(/<break time="(\d*)ms"\/>/g, '[[slc $1]]')
              .replace(/<say-as[^>]*>/g, '')
              .replace(/<\/say-as>/g, '');
      }
      else {
          // If no markup was requested, or 'mac' markup, but we're not on a mac,
          // remove any that we may have
          // Strip out the SSML markup
          result = result.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
      }
      return result;
  }

  function selectionDidChange(model) {
      var _a;
      if (typeof ((_a = model.listeners) === null || _a === void 0 ? void 0 : _a.onSelectionDidChange) === 'function' &&
          !model.suppressChangeNotifications) {
          model.suppressChangeNotifications = true;
          model.listeners.onSelectionDidChange(model);
          model.suppressChangeNotifications = false;
      }
  }
  function contentDidChange(model) {
      var _a;
      if (typeof ((_a = model.listeners) === null || _a === void 0 ? void 0 : _a.onContentDidChange) === 'function' &&
          !model.suppressChangeNotifications) {
          model.suppressChangeNotifications = true;
          model.listeners.onContentDidChange(model);
          model.suppressChangeNotifications = false;
      }
  }
  /*
  // type User = { name: string };

  // interface UserEvents {
  //     login(user: User): void;
  //     logout(): string;
  // }

  type Filter<T, Cond, U extends keyof T = keyof T> = {
      [K in U]: T[K] extends Cond ? K : never;
  }[U];

  type In<T> = T extends (...args: infer U) => any ? U : [];
  type Out<T> = T extends () => infer U ? U : never;

  // Extract an array type of valid event keys
  type EventKey<T> = Filter<T, Function> & string;

  // Extract the argument/return types of a valid event
  type Arguments<T> = T extends (...args: infer U) => any ? U : [];
  type Result<T> = T extends () => infer U ? U : never;

  type EventIn<T, K extends EventKey<T>> = In<T[K]>;
  type EventOut<T, K extends EventKey<T>> = Out<T[K]> | void;

  export type Listener<T, K extends EventKey<T> = EventKey<T>> = (
      ...args: EventIn<T, K>
  ) => EventOut<T, K>;

  export type ListenerMap<T> = Partial<{ [K in EventKey<T>]: Listener<T, K> }>;

  interface Emitter<T> {
      on<K extends EventKey<T>>(key: K, fn: Listener<T, K>): typeof fn;
  }

  // import { EventEmitter } from 'events';
  // const ee = (new EventEmitter() as unknown) as Emitter<UserEvents>;

  // ee.on('login', (user: string) => {});
  // ee.on('logout', () => {
  //     return 'done';
  // });
  */

  function compareSelection(a, b) {
      if (a.direction === b.direction) {
          const l = a.ranges.length;
          if (b.ranges.length === l) {
              let i = 0;
              while (i < l && compareRange(a.ranges[i], b.ranges[i]) === 'equal') {
                  i++;
              }
              return i === l ? 'equal' : 'different';
          }
      }
      return 'different';
  }
  function compareRange(a, b) {
      if (a[0] === b[0] && a[1] === b[1])
          return 'equal';
      return 'different';
  }
  /**
   * Return the smallest and largest offsets in a selection
   */
  function range(selection) {
      let first = Infinity;
      let last = -Infinity;
      selection.ranges.forEach((x) => {
          first = Math.min(first, x[0], x[1]);
          last = Math.max(last, x[0], x[1]);
      });
      return [first, last];
  }

  class ModelPrivate {
      constructor(options, listeners, hooks, target) {
          this.options = {
              mode: 'math',
              removeExtraneousParentheses: false,
              ...options,
          };
          this.root = new Atom('root', { mode: this.options.mode });
          this.root.body = [];
          this._selection = { ranges: [[0, 0]], direction: 'none' };
          this._anchor = 0;
          this._position = 0;
          this.setListeners(listeners);
          this.setHooks(hooks);
          this.mathfield = target;
          this.suppressChangeNotifications = false;
      }
      get atoms() {
          return this.root.children;
      }
      /**
       * The selection, accounting for the common ancestors
       */
      get selection() {
          return this._selection;
      }
      set selection(value) {
          this.setSelection(value);
      }
      setSelection(arg1, arg2) {
          return this.deferNotifications({ selection: true }, () => {
              //
              // 1/ Normalize the input
              // (account for offset < 0, etc...)
              //
              const value = this.normalizeSelection(arg1, arg2);
              if (value === undefined) {
                  throw new TypeError('Invalid selection');
              }
              //
              // 2/ Short-circuit a common case...
              //
              if (value.ranges.length === 1 &&
                  value.ranges[0][0] === value.ranges[0][1]) {
                  const pos = value.ranges[0][0];
                  console.assert(pos >= 0 && pos <= this.lastOffset);
                  this._position = pos;
                  this._anchor = pos;
                  this._selection = value;
              }
              else {
                  //
                  // 2b/ Determine the anchor and position
                  // (smallest, largest offsets, oriented as per `direction`)
                  //
                  const selRange = range(value);
                  if (value.direction === 'backward') {
                      [this._position, this._anchor] = selRange;
                  }
                  else {
                      [this._anchor, this._position] = selRange;
                  }
                  const first = this.at(selRange[0]);
                  const last = this.at(selRange[1]);
                  const commonAncestor = Atom.commonAncestor(first, last);
                  if ((commonAncestor === null || commonAncestor === void 0 ? void 0 : commonAncestor.type) === 'array' &&
                      first.parent === commonAncestor &&
                      last.parent === commonAncestor) ;
                  else {
                      this._selection = {
                          ranges: [[this.offsetOf(first), this.offsetOf(last)]],
                          direction: value.direction,
                      };
                      // 3b.3/ Adjust the position to match the selection
                      if (value.direction === 'backward') {
                          this._position = this._selection.ranges[0][0];
                      }
                      else {
                          this._position = this._selection.ranges[0][1];
                      }
                      console.assert(this._position >= 0 && this._position <= this.lastOffset);
                  }
              }
          });
      }
      /**
       * The "focus" or "cursor" (i.e. not the anchor) a.k.a the insertion point
       * or caret: where things are going to be inserted next.
       *
       */
      get position() {
          return this._position;
      }
      set position(value) {
          this.setSelection(value, value);
      }
      /**
       * The offset from which the selection is extended
       */
      get anchor() {
          return this._anchor;
      }
      get selectionIsCollapsed() {
          return this._anchor === this._position;
      }
      get selectionIsPlaceholder() {
          if (Math.abs(this._anchor - this._position) === 1) {
              return (this.at(Math.max(this._anchor, this._position)).type === 'placeholder');
          }
          return false;
      }
      collapseSelection(direction = 'forward') {
          if (this._anchor === this._position)
              return false;
          if (direction === 'backward') {
              this.position = Math.min(this._anchor, this._position);
          }
          else {
              this.position = Math.max(this._anchor, this._position);
          }
          return true;
      }
      get lastOffset() {
          return this.atoms.length - 1;
      }
      at(index) {
          return this.atoms[index];
      }
      offsetOf(atom) {
          return this.atoms.indexOf(atom);
      }
      getSiblingsRange(offset) {
          const atom = this.at(offset);
          const { parent } = atom;
          if (!parent)
              return [0, this.lastOffset];
          const branch = atom.parent.branch(atom.treeBranch);
          return [this.offsetOf(branch[0]), this.offsetOf(branch[branch.length - 1])];
      }
      getBranchRange(offset, branchName) {
          const branch = this.at(offset).branch(branchName);
          return [this.offsetOf(branch[0]), this.offsetOf(branch[branch.length - 1])];
      }
      getAtoms(arg1, arg2, arg3) {
          var _a, _b;
          let options = arg3 !== null && arg3 !== void 0 ? arg3 : {};
          if (isSelection(arg1)) {
              options = (_a = arg2) !== null && _a !== void 0 ? _a : {};
              if (arg1.ranges.length > 1) {
                  return arg1.ranges.reduce((acc, range) => [...acc, ...this.getAtoms(range, options)], []);
              }
              arg1 = arg1.ranges[0];
          }
          let start;
          let end;
          if (isOffset(arg1)) {
              start = arg1;
              if (!isOffset(arg2))
                  return [];
              end = arg2;
          }
          else {
              [start, end] = arg1;
              options = (_b = arg2) !== null && _b !== void 0 ? _b : {};
          }
          if (!Number.isFinite(start))
              return [];
          if (options.includeChildren === undefined) {
              options.includeChildren = false;
          }
          if (start < 0)
              start = this.lastOffset - start + 1;
          if (end < 0)
              end = this.lastOffset - end + 1;
          const first = Math.min(start, end) + 1;
          const last = Math.max(start, end);
          let result = [];
          for (let i = first; i <= last; i++) {
              const atom = this.atoms[i];
              if (atomIsInRange(this, atom, first, last)) {
                  result.push(atom);
              }
          }
          if (!options.includeChildren) {
              // Remove any atoms whose ancestor is also included
              result = result.filter((atom) => {
                  let ancestorIncluded = false;
                  let { parent } = atom;
                  while (parent && !ancestorIncluded) {
                      ancestorIncluded = atomIsInRange(this, parent, first, last);
                      parent = parent.parent;
                  }
                  return !ancestorIncluded;
              });
          }
          return result;
      }
      /**
       * Unlike `getAtoms()`, the argument here is an index
       * Return all the atoms, in order, starting at startingIndex
       * then looping back at the beginning
       */
      getAllAtoms(startingIndex) {
          const result = [];
          const last = this.lastOffset;
          for (let i = startingIndex; i <= last; i++) {
              result.push(this.atoms[i]);
          }
          for (let i = 0; i < startingIndex; i++) {
              result.push(this.atoms[i]);
          }
          return result;
      }
      extractAtoms(range) {
          const result = this.getAtoms(range);
          result.forEach((x) => x.parent.removeChild(x));
          return result;
      }
      deleteAtoms(range) {
          this.extractAtoms(range);
          return range[0];
      }
      atomToString(atom, format) {
          format = format !== null && format !== void 0 ? format : 'latex';
          let result = '';
          if (format === 'latex' || format === 'latex-expanded') {
              result = Atom.toLatex(atom, {
                  expandMacro: format === 'latex-expanded',
              });
          }
          else if (format === 'mathML') {
              result = atomsToMathML(atom, this.mathfield.options);
          }
          else if (format === 'spoken') {
              result = atomToSpeakableText(atom, this.mathfield.options);
          }
          else if (format === 'spoken-text') {
              const saveTextToSpeechMarkup = this.mathfield.options.textToSpeechMarkup;
              this.mathfield.options.textToSpeechMarkup = '';
              result = atomToSpeakableText(atom, this.mathfield.options);
              this.mathfield.options.textToSpeechMarkup = saveTextToSpeechMarkup;
          }
          else if (format === 'spoken-ssml' ||
              format === 'spoken-ssml-withHighlighting') {
              const saveTextToSpeechMarkup = this.mathfield.options.textToSpeechMarkup;
              // Const savedAtomIdsSettings = this.config.atomIdsSettings;    // @revisit
              this.mathfield.options.textToSpeechMarkup = 'ssml';
              // If (format === 'spoken-ssml-withHighlighting') {     // @revisit
              //     this.config.atomIdsSettings = { seed: 'random' };
              // }
              result = atomToSpeakableText(atom, this.mathfield.options);
              this.mathfield.options.textToSpeechMarkup = saveTextToSpeechMarkup;
              // This.config.atomIdsSettings = savedAtomIdsSettings;      // @revisit
          }
          else if (format === 'json') {
              console.log('deprecated format. Use MathJSON');
              const json = atomtoMathJson(atom);
              result = JSON.stringify(json);
          }
          else if (format === 'json-2') {
              console.log('deprecated format. Use MathJSON');
              const json = atomtoMathJson(atom);
              // Const json = parseLatex(root.toLatex(true), {
              //     form: 'canonical',
              // });
              result = JSON.stringify(json, null, 2);
          }
          else if (format === 'ASCIIMath') {
              result = atomToAsciiMath(atom);
          }
          else {
              console.warn('Unknown format :', format);
          }
          return result;
      }
      // GetValue(): string;
      // getValue(format: OutputFormat): string;
      // getValue(start: Offset, end: Offset, format?: OutputFormat): string;
      // getValue(range: Range, format?: OutputFormat): string;
      // getValue(selection: Selection, format?: OutputFormat): string;
      getValue(arg1, arg2, arg3) {
          if (arg1 === undefined) {
              // GetValue()
              return this.atomToString(this.root, 'latex');
          }
          if (typeof arg1 === 'string') {
              // GetValue(format): Output format only
              return this.atomToString(this.root, arg1);
          }
          let ranges;
          let format;
          if (isOffset(arg1) && isOffset(arg2)) {
              ranges = [this.normalizeRange([arg1, arg2])];
              format = arg3;
          }
          else if (isRange(arg1)) {
              ranges = [this.normalizeRange(arg1)];
              format = arg2;
          }
          else if (isSelection(arg1)) {
              ranges = arg1.ranges;
              format = arg2;
          }
          format = format !== null && format !== void 0 ? format : 'latex';
          if (format === 'latex' || format === 'latex-expanded') {
              const options = {
                  expandMacro: format === 'latex-expanded',
              };
              return joinLatex(ranges.map((range) => Atom.toLatex(this.getAtoms(range), options)));
          }
          return ranges
              .map((range) => this.getAtoms(range)
              .map((atom) => this.atomToString(atom, format))
              .join(''))
              .join('');
      }
      /**
       * Method called in response to a user interaction
       */
      extendSelection(direction) {
          let anchor = this._anchor;
          // Keep the anchor anchored, move the position forward or back
          if (direction === 'forward') {
              let pos = this._position;
              do {
                  pos++;
              } while (pos <= this.lastOffset && this.at(pos).isFirstSibling);
              if (pos === anchor - 1 && this.at(anchor).type === 'first') {
                  pos = anchor;
              }
              return this.extendSelectionTo(anchor, pos);
          }
          //
          // Extending backward
          //
          let pos = this._position - 1;
          if (pos < 0)
              return false;
          while (pos >= 0 && this.at(pos).isLastSibling) {
              pos--;
          }
          if (pos < 0)
              pos = 0;
          if (pos === anchor + 1 && this.at(pos).type === 'first') {
              anchor = pos;
          }
          return this.extendSelectionTo(anchor, pos);
      }
      /**
       * Unlike `setSelection`, this method is intended to be used in response
       * to a user action, and it performs various adjustments to result
       * in a more intuitive selection.
       * For example:
       * - when all the children of an atom are selected, the atom
       * become selected.
       * - this method will *not* change the anchor, but may result
       * in a selection whose boundary is outside the anchor
       */
      extendSelectionTo(anchor, position) {
          return this.deferNotifications({ selection: true }, () => {
              const range = this.normalizeRange([anchor, position]);
              let [start, end] = range;
              // Include the parent if all the chidlren are selected
              let { parent } = this.at(end);
              while (parent !== this.root &&
                  childrenInRange(this, parent, [start, end])) {
                  end = this.offsetOf(parent);
                  parent = parent.parent;
              }
              parent = this.at(start).parent;
              while (parent !== this.root &&
                  childrenInRange(this, parent, [start, end])) {
                  start = this.offsetOf(parent.leftSibling);
                  parent = parent.parent;
              }
              // Now that the start has potentially changed, check again
              // if end needs to be updated
              parent = this.at(end).parent;
              while (parent !== this.root &&
                  childrenInRange(this, parent, [start, end])) {
                  end = this.offsetOf(parent);
                  console.assert(end >= 0);
                  parent = parent.parent;
              }
              this._position = this.normalizeOffset(position);
              this._selection = {
                  ranges: [[start, end]],
                  direction: 'none',
              };
          });
      }
      setListeners(listeners) {
          this.listeners = listeners;
      }
      setHooks(hooks) {
          this.hooks = {
              announce: (hooks === null || hooks === void 0 ? void 0 : hooks.announce) ? hooks.announce
                  : (_target, _command, _previousPosition, _atoms) => { },
              moveOut: (hooks === null || hooks === void 0 ? void 0 : hooks.moveOut) ? hooks.moveOut : () => true,
              tabOut: (hooks === null || hooks === void 0 ? void 0 : hooks.tabOut) ? hooks.tabOut : () => true,
          };
      }
      /**
       * This method is called to provide feedback when using a screen reader
       * or other assistive device, for example when changing the selection or
       * moving the insertion point.
       *
       * It can also be used with the 'plonk' command to provide an audible
       * feedback when a command is not possible.
       *
       * This method should not be called from other methods of the model
       * (such as `setSelection`) as these methods can also be called
       * programmatically and a feedback in these case would be innapropriate,
       * however they should be called from functions called as a result of a user
       * action, such as the functions in `commands.ts`
       */
      announce(command, previousPosition, atoms = []) {
          this.hooks.announce(this.mathfield, command, previousPosition, atoms);
      }
      // Suppress notification while scope is executed,
      // then notify of content change, and selection change (if actual change)
      deferNotifications(options, f) {
          const oldSelection = this._selection;
          const oldAnchor = this._anchor;
          const oldPosition = this._position;
          let selectionChanged = false;
          const saved = this.suppressChangeNotifications;
          this.suppressChangeNotifications = true;
          const previousCounter = this.root.changeCounter;
          f();
          const contentChanged = this.root.changeCounter !== previousCounter;
          if (oldAnchor !== this._anchor ||
              oldPosition !== this._position ||
              compareSelection(this._selection, oldSelection) === 'different') {
              selectionChanged = true;
          }
          this.suppressChangeNotifications = saved;
          if (!this.suppressChangeNotifications) {
              // Notify of content change, if requested
              if (options.content && contentChanged) {
                  contentDidChange(this);
              }
              // If the selection has effectively changed, notify
              if (options.selection && selectionChanged) {
                  selectionDidChange(this);
              }
          }
          return contentChanged || selectionChanged;
      }
      normalizeOffset(value) {
          if (value > 0) {
              value = Math.min(value, this.lastOffset);
          }
          else if (value < 0) {
              value = this.lastOffset + value + 1;
          }
          return value;
      }
      /**
       * Ensure that the range is valid and canonical, i.e.
       * - start <= end
       * - collapsed = start === end
       * - start >= 0, end >=0
       */
      normalizeRange(range) {
          // 1. Normalize the offsets
          let [start, end] = range;
          start = this.normalizeOffset(start);
          end = this.normalizeOffset(end);
          return start < end ? [start, end] : [end, start];
      }
      normalizeSelection(value, value2) {
          var _a;
          let result;
          if (isOffset(value)) {
              const offset = this.normalizeOffset(value);
              if (isOffset(value2)) {
                  const offset2 = this.normalizeOffset(value2);
                  result =
                      offset <= offset2
                          ? { ranges: [[offset, offset2]], direction: 'none' }
                          : {
                              ranges: [[offset2, offset]],
                              direction: 'backward',
                          };
              }
              else {
                  result = { ranges: [[offset, offset]], direction: 'none' };
              }
          }
          else if (isRange(value)) {
              const start = this.normalizeOffset(value[0]);
              const end = this.normalizeOffset(value[1]);
              result =
                  start <= end
                      ? { ranges: [[start, end]], direction: 'none' }
                      : { ranges: [[end, start]], direction: 'backward' };
          }
          else if (isSelection(value)) {
              result = {
                  ranges: value.ranges.map((x) => this.normalizeRange(x)),
                  direction: (_a = value.direction) !== null && _a !== void 0 ? _a : 'none',
              };
          }
          return result;
      }
  }
  function atomIsInRange(model, atom, first, last) {
      const offset = model.offsetOf(atom);
      if (offset < first || offset > last) {
          return false;
      }
      if (!atom.hasChildren)
          return true;
      const firstOffset = model.offsetOf(atom.firstChild);
      if (firstOffset >= first && firstOffset <= last) {
          const lastOffset = model.offsetOf(atom.lastChild);
          if (lastOffset >= first && lastOffset <= last) {
              return true;
          }
      }
      return false;
  }
  function childrenInRange(model, atom, range) {
      if (!(atom === null || atom === void 0 ? void 0 : atom.hasChildren))
          return false;
      const [start, end] = range;
      const first = model.offsetOf(atom.firstChild);
      const last = model.offsetOf(atom.lastChild);
      if (first >= start && first <= end && last >= first && last <= end) {
          return true;
      }
      return false;
  }

  function on(element, inSelectors, listener, options) {
      const selectors = inSelectors.split(' ');
      for (const sel of selectors) {
          const m = sel.match(/(.*):(.*)/);
          if (m) {
              const options2 = options !== null && options !== void 0 ? options : {};
              if (m[2] === 'active') {
                  options2.passive = false;
              }
              else {
                  options2[m[2]] = true;
              }
              element.addEventListener(m[1], listener, options2);
          }
          else {
              element.addEventListener(sel, listener, options);
          }
      }
  }
  function off(element, inSelectors, listener, options) {
      const selectors = inSelectors.split(' ');
      for (const sel of selectors) {
          const m = sel.match(/(.*):(.*)/);
          if (m) {
              const options2 = options !== null && options !== void 0 ? options : {};
              if (m[2] === 'active') {
                  options2.passive = false;
              }
              else {
                  options2[m[2]] = true;
              }
              element.removeEventListener(m[1], listener, options2);
          }
          else {
              element.removeEventListener(sel, listener, options);
          }
      }
  }
  function getSharedElement(id, cls) {
      let result = document.getElementById(id);
      if (result) {
          result.dataset.refcount = Number(Number.parseInt(result.getAttribute('data-refcount')) + 1).toString();
      }
      else {
          result = document.createElement('div');
          result.setAttribute('aria-hidden', 'true');
          result.dataset.refcount = '1';
          result.className = cls;
          result.id = id;
          document.body.append(result);
      }
      return result;
  }
  // @revisit: check the elements are correctly released
  function releaseSharedElement(element) {
      if (!element)
          return;
      const refcount = Number.parseInt(element.getAttribute('data-refcount'));
      if (refcount <= 1) {
          element.remove();
      }
      else {
          element.dataset.refcount = Number(refcount - 1).toString();
      }
  }
  /**
   * Checks if the argument is a valid Mathfield.
   * After a Mathfield has been destroyed (for example by calling `dispose()`
   * the Mathfield is no longer valid. However, there may be some pending
   * operations invoked via requestAnimationFrame() for example, that would
   * need to ensure the mathfield is still valid by the time they're executed.
   */
  function isValidMathfield(mf) {
      return mf.element && mf.element.mathfield === mf;
  }
  /**
   * Return the element which has the caret
   */
  function findElementWithCaret(element) {
      var _a, _b;
      return ((_b = (_a = element.querySelector('.ML__caret')) !== null && _a !== void 0 ? _a : element.querySelector('.ML__text-caret')) !== null && _b !== void 0 ? _b : element.querySelector('.ML__latex-caret'));
  }
  /**
   * Return the (x,y) client coordinates of the caret
   */
  function getCaretPoint(element) {
      const caret = findElementWithCaret(element);
      if (!caret)
          return null;
      const bounds = caret.getBoundingClientRect();
      return {
          x: bounds.right,
          y: bounds.bottom,
          height: bounds.height,
      };
  }
  function branchId(atom) {
      let result = atom.parent ? atom.parent.id : 'root';
      result +=
          typeof atom.treeBranch === 'string'
              ? '-' + atom.treeBranch
              : `-${atom.treeBranch[0]}/${atom.treeBranch[0]}`;
      return result;
  }
  function adjustForScrolling(mathfield, rect) {
      if (!rect)
          return null;
      const fieldRect = mathfield.field.getBoundingClientRect();
      const w = rect.right - rect.left;
      const h = rect.bottom - rect.top;
      const left = Math.ceil(rect.left - fieldRect.left + mathfield.field.scrollLeft);
      const top = Math.ceil(rect.top - fieldRect.top);
      return {
          left,
          right: left + w,
          top,
          bottom: top + h,
      };
  }
  function getNodeBounds(node) {
      const bounds = node.getBoundingClientRect();
      const result = {
          top: bounds.top,
          bottom: bounds.bottom,
          left: bounds.left,
          right: bounds.right,
      };
      if (node.tagName !== 'SVG') {
          [...node.children].forEach((x) => {
              if (x.nodeType === 1) {
                  const r = getNodeBounds(x);
                  result.left = Math.min(result.left, r.left);
                  result.right = Math.max(result.right, r.right);
                  result.top = Math.min(result.top, r.top);
                  result.bottom = Math.max(result.bottom, r.bottom);
              }
          });
      }
      return result;
  }
  function getAtomBounds(mathfield, atom) {
      const node = mathfield.field.querySelector(`[data-atom-id="${atom.id}"]`);
      if (!node)
          return null;
      return getNodeBounds(node);
  }
  /*
   * Return an array of bounds for the specified branch, at most
   * one rect per branch.
   */
  function getRangeBounds(mathfield, range) {
      // The key of the map is a 'branchId', i.e. "atom id + branch"
      const rects = new Map();
      mathfield.model
          .getAtoms(range, { includeChildren: true })
          .forEach((x) => {
          const bounds = adjustForScrolling(mathfield, getAtomBounds(mathfield, x));
          if (bounds) {
              const id = branchId(x);
              if (rects.has(id)) {
                  const r = rects.get(id);
                  rects.set(id, {
                      top: Math.min(r.top, bounds.top),
                      bottom: Math.max(r.bottom, bounds.bottom),
                      left: Math.min(r.left, bounds.left),
                      right: Math.max(r.right, bounds.right),
                  });
              }
              else {
                  rects.set(id, bounds);
              }
          }
      });
      return [...rects.values()];
  }
  function getSelectionBounds(mathfield) {
      return mathfield.model.selection.ranges.reduce((acc, x) => acc.concat(...getRangeBounds(mathfield, x)), []);
  }
  function validateOrigin(origin, originValidator) {
      if (originValidator === 'none') {
          return true;
      }
      if (originValidator === 'same-origin') {
          return origin === window.origin;
      }
      if (typeof originValidator === 'function') {
          return originValidator(origin);
      }
      return false;
  }

  /* eslint-disable no-new */
  // Each entry indicate the font-name (to be used to calculate font metrics)
  // and the CSS classes (for proper markup styling) for each possible
  // variant combinations.
  const VARIANTS = {
      // Handle some special characters which are only available in "main" font (not "math")
      'main': ['Main-Regular', 'ML__cmr'],
      'main-italic': ['Main-Italic', 'ML__cmr ML__it'],
      'main-bold': ['Main-Bold', 'ML__cmr ML__bold'],
      'main-bolditalic': ['Main-BoldItalic', 'ML__cmr ML_bold ML__it'],
      'normal': ['Main-Regular', 'ML__cmr'],
      'normal-bold': ['Main-Bold', 'ML__mathbf'],
      'normal-italic': ['Math-Italic', 'ML__mathit'],
      'normal-bolditalic': ['Math-BoldItalic', 'ML__mathbfit'],
      // Extended math symbols, arrows, etc.. at their standard Unicode codepoints
      'ams': ['AMS-Regular', 'ML__ams'],
      'ams-bold': ['AMS-Regular', 'ML__ams'],
      'ams-italic': ['AMS-Regular', 'ML__ams'],
      'ams-bolditalic': ['AMS-Regular', 'ML__ams'],
      'sans-serif': ['SansSerif-Regular', 'ML__sans'],
      'sans-serif-bold': ['SansSerif-Regular', 'ML__sans ML__bold'],
      'sans-serif-italic': ['SansSerif-Regular', 'ML__sans'],
      'sans-serif-bolditalic': ['SansSerif-Regular', 'ML__sans'],
      'calligraphic': ['Caligraphic-Regular', 'ML__cal'],
      'calligraphic-bold': ['Caligraphic-Regular', 'ML__cal ML__bold'],
      'calligraphic-italic': ['Caligraphic-Regular', 'ML__cal ML__it'],
      'calligraphic-bolditalic': ['Caligraphic-Regular', 'ML__cal ML__bold ML__it'],
      'script': ['Script-Regular', 'ML__script'],
      'script-bold': ['Script-Regular', 'ML__script ML__bold'],
      'script-italic': ['Script-Regular', 'ML__script ML__it'],
      'script-bolditalic': ['Script-Regular', 'ML__script ML__bold ML__it'],
      'fraktur': ['Fraktur-Regular', 'ML__frak'],
      'fraktur-bold': ['Fraktur-Regular', 'ML__frak'],
      'fraktur-italic': ['Fraktur-Regular', 'ML__frak'],
      'fraktur-bolditalic': ['Fraktur-Regular', 'ML__frak'],
      'monospace': ['Typewriter-Regular', 'ML__tt'],
      'monospace-bold': ['Typewriter-Regular', 'ML__tt ML__bold'],
      'monospace-italic': ['Typewriter-Regular', 'ML__tt ML__it'],
      'monospace-bolditalic': ['Typewriter-Regular', 'ML__tt ML__bold ML__it'],
      // Blackboard characters are 'A-Z' in the AMS font
      'double-struck': ['AMS-Regular', 'ML__bb'],
      'double-struck-bold': ['AMS-Regular', 'ML__bb'],
      'double-struck-italic': ['AMS-Regular', 'ML__bb'],
      'double-struck-bolditalic': ['AMS-Regular', 'ML__bb'],
  };
  const VARIANT_REPERTOIRE = {
      'double-struck': /^[A-Z ]$/,
      'script': /^[A-Z ]$/,
      'calligraphic': /^[\dA-Z ]$/,
      'fraktur': /^[\dA-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^’‘]$/,
      'monospace': /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
      'sans-serif': /^[\dA-Za-z ]$|^[!"&'()*+,\-./:;=?@[\]^_~\u0131\u0237\u0393\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A8\u03A9]$/,
  };
  const GREEK_LOWERCASE = /^[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5]$/;
  const GREEK_UPPERCASE = /^[\u0393|\u0394\u0398\u039B\u039E\u03A0\u03A3\u03A5\u03A6\u03A8\u03A9]$/;
  const LETTER_SHAPE_RANGES = [
      /^[a-z]$/,
      /^[A-Z]$/,
      GREEK_LOWERCASE,
      GREEK_UPPERCASE,
  ];
  // The letterShapeStyle property indicates which characters should be
  // automatically italicized (see LETTER_SHAPE_RANGES)
  const LETTER_SHAPE_MODIFIER = {
      iso: ['it', 'it', 'it', 'it'],
      tex: ['it', 'it', 'it', 'up'],
      french: ['it', 'up', 'up', 'up'],
      upright: ['up', 'up', 'up', 'up'],
  };
  // See http://ctan.math.illinois.edu/macros/latex/base/fntguide.pdf
  class MathMode extends Mode {
      constructor() {
          super('math');
      }
      createAtom(command, style) {
          var _a, _b, _c;
          const info = getInfo(command, 'math');
          const value = (_a = info === null || info === void 0 ? void 0 : info.value) !== null && _a !== void 0 ? _a : command;
          const result = new Atom((_b = info === null || info === void 0 ? void 0 : info.type) !== null && _b !== void 0 ? _b : 'mord', {
              mode: 'math',
              command,
              value,
              style,
          });
          if ((_c = info === null || info === void 0 ? void 0 : info.isFunction) !== null && _c !== void 0 ? _c : false) {
              result.isFunction = true;
          }
          if (command.startsWith('\\')) {
              result.latex = command;
          }
          return result;
      }
      toLatex(run, options) {
          var _a;
          const { parent } = run[0];
          const parentMode = (_a = parent === null || parent === void 0 ? void 0 : parent.mode) !== null && _a !== void 0 ? _a : 'math';
          const contextValue = variantString(parent);
          const contextColor = parent === null || parent === void 0 ? void 0 : parent.computedStyle.color;
          return joinLatex(getPropertyRuns(run, 'color').map((x) => {
              const result = joinLatex(getPropertyRuns(x, 'variant').map((x) => {
                  const value = variantString(x[0]);
                  // Check if all the atoms in this run have a base
                  // variant identical to the current variant
                  // If so, we can skip wrapping them
                  if (x.every((x) => {
                      const info = getInfo(x.command, parentMode, null);
                      if (!info || !info.variant)
                          return false;
                      return variantString(x) === value;
                  })) {
                      return joinLatex(x.map((x) => Atom.toLatex(x, options)));
                  }
                  let command = '';
                  if (value && value !== contextValue) {
                      command = {
                          'calligraphic': '\\mathcal{',
                          'fraktur': '\\mathfrak{',
                          'double-struck': '\\mathbb{',
                          'script': '\\mathscr{',
                          'monospace': '\\mathtt{',
                          'sans-serif': '\\mathsf{',
                          'normal': '\\mathrm{',
                          'normal-italic': '\\mathit{',
                          'normal-bold': '\\mathbf{',
                          'normal-bolditalic': '\\mathbfit{',
                          'ams': '',
                          'ams-italic': '\\mathit{',
                          'ams-bold': '\\mathbf{',
                          'ams-bolditalic': '\\mathbfit{',
                          'main': '',
                          'main-italic': '\\mathit{',
                          'main-bold': '\\mathbf{',
                          'main-bolditalic': '\\mathbfit{',
                      }[value];
                      console.assert(command !== undefined);
                  }
                  return (joinLatex([command, ...x.map((x) => Atom.toLatex(x, options))]) +
                      (command ? '}' : ''));
              }));
              const style = x[0].computedStyle;
              if (style.color && (!parent || contextColor !== style.color)) {
                  return ('\\textcolor{' + colorToString(style.color) + '}{' + result + '}');
              }
              return result;
          }));
      }
      applyStyle(span, style) {
          // If no variant specified, don't change the font
          if (!style.variant)
              return '';
          // LetterShapeStyle will usually be set automatically, except when the
          // locale cannot be determined, in which case its value will be 'auto'
          // which we default to 'tex'
          const letterShapeStyle = style.letterShapeStyle === 'auto' || !style.letterShapeStyle
              ? 'tex'
              : style.letterShapeStyle;
          let { variant } = style;
          let { variantStyle } = style;
          // 1. Remap to "main" font some characters that don't exist
          // in the "math" font
          // There are two fonts that include the roman italic characters, "main-it" and "math"
          // They are similar, but the "math" font has some different kernings ('f')
          // and some slightly different character shape. It doesn't include a few
          // characters, so for those characters, "main" has to be used instead
          // \imath, \jmath and \pound don't exist in "math" font,
          // so use "main" italic instead.
          if (variant === 'normal' &&
              !variantStyle &&
              /[\u00A3\u0131\u0237]/.test(span.value)) {
              variant = 'main';
              variantStyle = 'italic';
          }
          // 2. If no explicit variant style, auto-italicize some symbols,
          // depending on the letterShapeStyle
          if (variant === 'normal' && !variantStyle && span.value.length === 1) {
              LETTER_SHAPE_RANGES.forEach((x, i) => {
                  if (x.test(span.value) &&
                      LETTER_SHAPE_MODIFIER[letterShapeStyle][i] === 'it') {
                      variantStyle = 'italic';
                  }
              });
          }
          // 3. Map the variant + variantStyle to a font
          if (variantStyle === 'up') {
              variantStyle = '';
          }
          const styledVariant = variantStyle ? variant + '-' + variantStyle : variant;
          console.assert(VARIANTS[styledVariant] !== undefined);
          const [fontName, classes] = VARIANTS[styledVariant];
          // 4. If outside the font repertoire, switch to system font
          // (return NULL to use default metrics)
          if (VARIANT_REPERTOIRE[variant] &&
              !VARIANT_REPERTOIRE[variant].test(span.value)) {
              // Map to unicode character
              span.value = mathVariantToUnicode(span.value, variant, variantStyle);
              // Return NULL to use default metrics
              return null;
          }
          // Lowercase greek letters have an incomplete repertoire (no bold)
          // so, for \mathbf to behave correctly, add a 'lcGreek' class.
          if (GREEK_LOWERCASE.test(span.value)) {
              span.classes += ' lcGreek';
          }
          // 5. Assign classes based on the font
          if (classes) {
              span.classes += ' ' + classes;
          }
          return fontName;
      }
  }
  function variantString(atom) {
      if (!atom)
          return '';
      const { style } = atom;
      if (!style.variant)
          return '';
      let result = style.variant;
      if (style.variantStyle && style.variantStyle !== 'up') {
          result += '-' + style.variantStyle;
      }
      return result;
  }
  // Singleton class
  new MathMode();

  function emitStringTextRun(run, options) {
      return joinLatex(run.map((x) => Atom.toLatex(x, options)));
  }
  function emitFontShapeTextRun(run, options) {
      return joinLatex(getPropertyRuns(run, 'fontShape').map((x) => {
          const result = emitStringTextRun(x, options);
          const { fontShape } = x[0].style;
          if (fontShape === 'it') {
              return '\\textit{' + result + '}';
          }
          if (fontShape === 'sl') {
              return '\\textsl{' + result + '}';
          }
          if (fontShape === 'sc') {
              return '\\textsc{' + result + '}';
          }
          if (fontShape === 'n') {
              return '\\textup{' + result + '}';
          }
          if (fontShape) {
              return '\\fontshape{' + x[0].style.fontShape + '}' + result;
          }
          return result;
      }));
  }
  function emitFontSeriesTextRun(run, options) {
      return joinLatex(getPropertyRuns(run, 'fontSeries').map((x) => {
          const result = emitFontShapeTextRun(x, options);
          const { fontSeries } = x[0].style;
          if (fontSeries === 'b') {
              return '\\textbf{' + result + '}';
          }
          if (fontSeries === 'l') {
              return '\\textlf{' + result + '}';
          }
          if (fontSeries === 'm') {
              return '\\textmd{' + result + '}';
          }
          if (fontSeries) {
              return '\\fontseries{' + fontSeries + '}' + result;
          }
          return result;
      }));
  }
  function emitSizeTextRun(run, options) {
      return joinLatex(getPropertyRuns(run, 'fontSize').map((x) => {
          const result = emitFontSeriesTextRun(x, options);
          const command = {
              size1: 'tiny',
              size2: 'scriptsize',
              size3: 'footnotesize',
              size4: 'small',
              size5: 'normalsize',
              size6: 'large',
              size7: 'Large',
              size8: 'LARGE',
              size9: 'huge',
              size10: 'Huge',
          }[x[0].style.fontSize] || '';
          if (command) {
              return `\\${command} ${result}`;
          }
          return result;
      }));
  }
  function emitFontFamilyTextRun(run, options) {
      return joinLatex(getPropertyRuns(run, 'fontFamily').map((x) => {
          const result = emitSizeTextRun(x, options);
          const command = {
              'roman': 'textrm',
              'monospace': 'texttt',
              'sans-serif': 'textsf',
          }[x[0].style.fontFamily] || '';
          if (command)
              return `\\${command}{${result}}`;
          if (x[0].style.fontFamily) {
              return '\\fontfamily{' + x[0].style.fontFamily + '}' + result;
          }
          return result;
      }));
  }
  function emitStyledTextRun(run, options) {
      return emitFontFamilyTextRun(run, options);
  }
  function emitColorRun(run, options) {
      var _a;
      if (!run || run.length === 0)
          return '';
      const parentColor = (_a = run[0].parent) === null || _a === void 0 ? void 0 : _a.style.color;
      return joinLatex(getPropertyRuns(run, 'color').map((x) => {
          const result = emitStyledTextRun(x, options);
          if (x[0].style.color &&
              x[0].style.color !== 'none' &&
              parentColor !== x[0].style.color) {
              // If there is a color specified, and it is different
              // from our context color, output a command
              return ('\\textcolor{' + colorToString(x[0].style.color) + '}{' + result + '}');
          }
          return result;
      }));
  }
  const TEXT_FONT_CLASS = {
      'roman': '',
      'sans-serif': 'ML__sans',
      'monospace': 'ML__tt',
  };
  class TextMode extends Mode {
      constructor() {
          super('text');
      }
      createAtom(command, style) {
          var _a;
          const info = getInfo(command, 'text');
          const value = (_a = info === null || info === void 0 ? void 0 : info.value) !== null && _a !== void 0 ? _a : command;
          return new TextAtom(command, value, style);
      }
      toLatex(run, options) {
          const result = emitColorRun(run, options);
          const allAtomsHaveShapeOrSeriesOrFontFamily = run.every((x) => x.style.fontSeries || x.style.fontShape || x.style.fontFamily);
          if (!allAtomsHaveShapeOrSeriesOrFontFamily) {
              // Wrap in text, only if there isn't a shape or series on
              // all the atoms, because if so, it will be wrapped in a
              // \\textbf, \\textit, etc... and the \\text would be redundant
              return `\\text{${result}}`;
          }
          return result;
      }
      /**
       * Return the font-family name
       */
      applyStyle(span, style) {
          var _a, _b, _c, _d, _e;
          const { fontFamily } = style;
          if (TEXT_FONT_CLASS[fontFamily]) {
              span.classes += ' ' + TEXT_FONT_CLASS[fontFamily];
          }
          else if (fontFamily) {
              // Not a well-known family. Use a style.
              span.setStyle('font-family', fontFamily);
          }
          if (style.fontShape) {
              span.classes += ' ';
              span.classes += (_a = {
                  it: 'ML__it',
                  sl: 'ML__shape_sl',
                  sc: 'ML__shape_sc',
                  ol: 'ML__shape_ol',
              }[style.fontShape]) !== null && _a !== void 0 ? _a : '';
          }
          if (style.fontSeries) {
              const m = style.fontSeries.match(/(.?[lbm])?(.?[cx])?/);
              if (m) {
                  span.classes += ' ';
                  span.classes += (_c = {
                      ul: 'ML__series_ul',
                      el: 'ML__series_el',
                      l: 'ML__series_l',
                      sl: 'ML__series_sl',
                      m: '',
                      sb: 'ML__series_sb',
                      b: 'ML__bold',
                      eb: 'ML__series_eb',
                      ub: 'ML__series_ub',
                  }[(_b = m[1]) !== null && _b !== void 0 ? _b : '']) !== null && _c !== void 0 ? _c : '';
                  span.classes += ' ';
                  span.classes += (_e = {
                      uc: 'ML__series_uc',
                      ec: 'ML__series_ec',
                      c: 'ML__series_c',
                      sc: 'ML__series_sc',
                      n: '',
                      sx: 'ML__series_sx',
                      x: 'ML__series_x',
                      ex: 'ML__series_ex',
                      ux: 'ML__series_ux',
                  }[(_d = m[2]) !== null && _d !== void 0 ? _d : '']) !== null && _e !== void 0 ? _e : '';
              }
          }
          // Always use the metrics of 'Main-Regular' in text mode
          return 'Main-Regular';
      }
      // Given an array of tokens, return an array of atoms
      // options.args
      // options.macros
      // options.smartFence
      // options.style
      // options.parser
      parse(tokens, error, options) {
          let result = [];
          let atom;
          while (tokens.length > 0) {
              const token = tokens.shift();
              if (token === '<space>') {
                  result.push(new TextAtom(' ', ' ', options.style));
              }
              else if (token.startsWith('\\')) {
                  // Invoke the 'main' parser to handle the command
                  tokens.unshift(token);
                  let atoms;
                  [atoms, tokens] = options.parse('text', tokens, options);
                  result = [...result, ...atoms];
              }
              else if (token === '<$>' || token === '<$$>') {
                  // Mode-shift
                  const subtokens = tokens.slice(0, tokens.findIndex((x) => x === token));
                  tokens = tokens.slice(subtokens.length + 1);
                  const [atoms] = options.parse('math', subtokens, options);
                  result = [...result, ...atoms];
              }
              else if (token === '<{>' || token === '<}>') ;
              else {
                  const info = getInfo(token, 'text', options.macros);
                  if (!info || (info.ifMode && !info.ifMode.includes('text'))) {
                      error({ code: 'unexpected-token' });
                  }
                  else {
                      atom = new TextAtom(token, info.value, options.style);
                      atom.latex = charToLatex('text', token);
                      result.push(atom);
                  }
              }
          }
          return [result, tokens];
      }
  }
  // Singleton class
  new TextMode();

  /**
   * Atom for raw latex character, while in Latex editing mode
   */
  class LatexAtom extends Atom {
      constructor(value, options) {
          var _a;
          super('latex', { value, mode: 'latex' });
          this.isSuggestion = (_a = options === null || options === void 0 ? void 0 : options.isSuggestion) !== null && _a !== void 0 ? _a : false;
          this.isError = false;
          this.latex = value;
      }
      get computedStyle() {
          return {};
      }
      render(context) {
          const result = new Span(this.value, this.isSuggestion ? 'ML__suggestion' : this.isError ? 'ML__error' : '', 'latex');
          if (this.caret)
              result.caret = this.caret;
          this.bind(context, result);
          return [result];
      }
  }
  /**
   * A group that represents a raw Latex editing zone.
   * There is only one LatexGroupAtom at a time in an expression.
   */
  class LatexGroupAtom extends Atom {
      constructor(latex) {
          super('group', { mode: 'latex' });
          this.body = [...latex].map((x) => new LatexAtom(x));
          this.skipBoundary = false;
      }
      render(context) {
          const span = new Span(Atom.render(context, this.body), '', 'mord');
          if (this.caret)
              span.caret = this.caret;
          // Need to bind the group so that the DOM element can be matched
          // and the atom iterated recursively. Otherwise, it behaves
          // as if `captureSelection === true`
          this.bind(context, span);
          return [span];
      }
      toLatex(_options) {
          return this.body.map((x) => x.value).join('');
      }
  }

  /* eslint-disable no-new */
  class LatexMode extends Mode {
      constructor() {
          super('latex');
      }
      createAtom(command, _style) {
          return new LatexAtom(command);
      }
      toLatex(run, _options) {
          return run
              .filter((x) => x instanceof LatexAtom && !x.isSuggestion)
              .map((x) => x.value)
              .join('');
      }
  }
  new LatexMode();

  const DEFAULT_KEYBOARD_LAYOUT = platform$1() === 'apple'
      ? {
          id: 'apple.en-intl',
          displayName: 'English (international)',
          virtualLayout: 'qwerty',
          platform: 'apple',
          locale: 'en',
          score: 0,
          mapping: {
              KeyA: ['a', 'A', 'å', 'Å'],
              KeyB: ['b', 'B', '∫', 'ı'],
              KeyC: ['c', 'C', 'ç', 'Ç'],
              KeyD: ['d', 'D', '∂', 'Î'],
              KeyE: ['e', 'E', '´', '´'],
              KeyF: ['f', 'F', 'ƒ', 'Ï'],
              KeyG: ['g', 'G', '©', '˝'],
              KeyH: ['h', 'H', '˙', 'Ó'],
              KeyI: ['i', 'I', 'ˆ', 'ˆ'],
              KeyJ: ['j', 'J', '∆', 'Ô'],
              KeyK: ['k', 'K', '˚', ''],
              KeyL: ['l', 'L', '¬', 'Ò'],
              KeyM: ['m', 'M', 'µ', 'Â'],
              KeyN: ['n', 'N', '˜', '˜'],
              KeyO: ['o', 'O', 'ø', 'Ø'],
              KeyP: ['p', 'P', 'π', '∏'],
              KeyQ: ['q', 'Q', 'œ', 'Œ'],
              KeyR: ['r', 'R', '®', '‰'],
              KeyS: ['s', 'S', 'ß', 'Í'],
              KeyT: ['t', 'T', '†', 'ˇ'],
              KeyU: ['u', 'U', '¨', '¨'],
              KeyV: ['v', 'V', '√', '◊'],
              KeyW: ['w', 'W', '∑', '„'],
              KeyX: ['x', 'X', '≈', '˛'],
              KeyY: ['y', 'Y', '¥', 'Á'],
              KeyZ: ['z', 'Z', 'Ω', '¸'],
              Digit1: ['1', '!', '¡', '⁄'],
              Digit2: ['2', '@', '™', '€'],
              Digit3: ['3', '#', '£', '‹'],
              Digit4: ['4', '$', '¢', '›'],
              Digit5: ['5', '%', '∞', 'ﬁ'],
              Digit6: ['6', 'ˆ', '§', 'ﬂ'],
              Digit7: ['7', '&', '¶', '‡'],
              Digit8: ['8', '*', '•', '°'],
              Digit9: ['9', '(', 'ª', '·'],
              Digit0: ['0', ')', 'º', '‚'],
              Space: [' ', ' ', ' ', ' '],
              Minus: ['-', '_', '–', '—'],
              Equal: ['=', '+', '≠', '±'],
              BracketLeft: ['[', '{', '“', '”'],
              BracketRight: [']', '}', '‘', '’'],
              Backslash: ['\\', '|', '«', '»'],
              Semicolon: [';', ':', '…', 'Ú'],
              Quote: ["'", '"', 'æ', 'Æ'],
              Backquote: ['`', '˜', '`', '`'],
              Comma: [',', '<', '≤', '¯'],
              Period: ['.', '>', '≥', '˘'],
              Slash: ['/', '?', '÷', '¿'],
              NumpadDivide: ['/', '/', '/', '/'],
              NumpadMultiply: ['*', '*', '*', '*'],
              NumpadSubtract: ['-', '-', '-', '-'],
              NumpadAdd: ['+', '+', '+', '+'],
              Numpad1: ['1', '1', '1', '1'],
              Numpad2: ['2', '2', '2', '2'],
              Numpad3: ['3', '3', '3', '3'],
              Numpad4: ['4', '4', '4', '4'],
              Numpad5: ['5', '5', '5', '5'],
              Numpad6: ['6', '6', '6', '6'],
              Numpad7: ['7', '7', '7', '7'],
              Numpad8: ['8', '8', '8', '8'],
              Numpad9: ['9', '9', '9', '9'],
              Numpad0: ['0', '0', '0', '0'],
              NumpadDecimal: ['.', '.', '.', '.'],
              IntlBackslash: ['§', '±', '§', '±'],
              NumpadEqual: ['=', '=', '=', '='],
              AudioVolumeUp: ['', '=', '', '='],
          },
      }
      : platform$1() === 'windows'
          ? {
              id: 'windows.en-intl',
              displayName: 'English (international)',
              platform: 'windows',
              virtualLayout: 'qwerty',
              locale: 'en',
              score: 0,
              mapping: {
                  KeyA: ['a', 'A', 'á', 'Á'],
                  KeyB: ['b', 'B', '', ''],
                  KeyC: ['c', 'C', '©', '¢'],
                  KeyD: ['d', 'D', 'ð', 'Ð'],
                  KeyE: ['e', 'E', 'é', 'É'],
                  KeyF: ['f', 'F', '', ''],
                  KeyG: ['g', 'G', '', ''],
                  KeyH: ['h', 'H', '', ''],
                  KeyI: ['i', 'I', 'í', 'Í'],
                  KeyJ: ['j', 'J', '', ''],
                  KeyK: ['k', 'K', '', ''],
                  KeyL: ['l', 'L', 'ø', 'Ø'],
                  KeyM: ['m', 'M', 'µ', ''],
                  KeyN: ['n', 'N', 'ñ', 'Ñ'],
                  KeyO: ['o', 'O', 'ó', 'Ó'],
                  KeyP: ['p', 'P', 'ö', 'Ö'],
                  KeyQ: ['q', 'Q', 'ä', 'Ä'],
                  KeyR: ['r', 'R', '®', ''],
                  KeyS: ['s', 'S', 'ß', '§'],
                  KeyT: ['t', 'T', 'þ', 'Þ'],
                  KeyU: ['u', 'U', 'ú', 'Ú'],
                  KeyV: ['v', 'V', '', ''],
                  KeyW: ['w', 'W', 'å', 'Å'],
                  KeyX: ['x', 'X', '', ''],
                  KeyY: ['y', 'Y', 'ü', 'Ü'],
                  KeyZ: ['z', 'Z', 'æ', 'Æ'],
                  Digit1: ['1', '!', '¡', '¹'],
                  Digit2: ['2', '@', '²', ''],
                  Digit3: ['3', '#', '³', ''],
                  Digit4: ['4', '$', '¤', '£'],
                  Digit5: ['5', '%', '€', ''],
                  Digit6: ['6', '^', '¼', ''],
                  Digit7: ['7', '&', '½', ''],
                  Digit8: ['8', '*', '¾', ''],
                  Digit9: ['9', '(', '‘', ''],
                  Digit0: ['0', ')', '’', ''],
                  Space: [' ', ' ', '', ''],
                  Minus: ['-', '_', '¥', ''],
                  Equal: ['=', '+', '×', '÷'],
                  BracketLeft: ['[', '{', '«', ''],
                  BracketRight: [']', '}', '»', ''],
                  Backslash: ['\\', '|', '¬', '¦'],
                  Semicolon: [';', ':', '¶', '°'],
                  Quote: ["'", '"', '´', '¨'],
                  Backquote: ['`', '~', '', ''],
                  Comma: [',', '<', 'ç', 'Ç'],
                  Period: ['.', '>', '', ''],
                  Slash: ['/', '?', '¿', ''],
                  NumpadDivide: ['/', '/', '', ''],
                  NumpadMultiply: ['*', '*', '', ''],
                  NumpadSubtract: ['-', '-', '', ''],
                  NumpadAdd: ['+', '+', '', ''],
                  IntlBackslash: ['\\', '|', '', ''],
              },
          }
          : {
              id: 'linux.en',
              displayName: 'English',
              platform: 'linux',
              virtualLayout: 'qwerty',
              locale: 'en',
              score: 0,
              mapping: {
                  KeyA: ['a', 'A', 'a', 'A'],
                  KeyB: ['b', 'B', 'b', 'B'],
                  KeyC: ['c', 'C', 'c', 'C'],
                  KeyD: ['d', 'D', 'd', 'D'],
                  KeyE: ['e', 'E', 'e', 'E'],
                  KeyF: ['f', 'F', 'f', 'F'],
                  KeyG: ['g', 'G', 'g', 'G'],
                  KeyH: ['h', 'H', 'h', 'H'],
                  KeyI: ['i', 'I', 'i', 'I'],
                  KeyJ: ['j', 'J', 'j', 'J'],
                  KeyK: ['k', 'K', 'k', 'K'],
                  KeyL: ['l', 'L', 'l', 'L'],
                  KeyM: ['m', 'M', 'm', 'M'],
                  KeyN: ['n', 'N', 'n', 'N'],
                  KeyO: ['o', 'O', 'o', 'O'],
                  KeyP: ['p', 'P', 'p', 'P'],
                  KeyQ: ['q', 'Q', 'q', 'Q'],
                  KeyR: ['r', 'R', 'r', 'R'],
                  KeyS: ['s', 'S', 's', 'S'],
                  KeyT: ['t', 'T', 't', 'T'],
                  KeyU: ['u', 'U', 'u', 'U'],
                  KeyV: ['v', 'V', 'v', 'V'],
                  KeyW: ['w', 'W', 'w', 'W'],
                  KeyX: ['x', 'X', 'x', 'X'],
                  KeyY: ['y', 'Y', 'y', 'Y'],
                  KeyZ: ['z', 'Z', 'z', 'Z'],
                  Digit1: ['1', '!', '1', '!'],
                  Digit2: ['2', '@', '2', '@'],
                  Digit3: ['3', '#', '3', '#'],
                  Digit4: ['4', '$', '4', '$'],
                  Digit5: ['5', '%', '5', '%'],
                  Digit6: ['6', '^', '6', '^'],
                  Digit7: ['7', '&', '7', '&'],
                  Digit8: ['8', '*', '8', '*'],
                  Digit9: ['9', '(', '9', '('],
                  Digit0: ['0', ')', '0', ')'],
                  Space: [' ', ' ', ' ', ' '],
                  Minus: ['-', '_', '-', '_'],
                  Equal: ['=', '+', '=', '+'],
                  BracketLeft: ['[', '{', '[', '{'],
                  BracketRight: [']', '}', ']', '}'],
                  Backslash: ['\\', '|', '\\', '|'],
                  Semicolon: [';', ':', ';', ':'],
                  Quote: ["'", '"', "'", '"'],
                  Backquote: ['`', '~', '`', '~'],
                  Comma: [',', '<', ',', '<'],
                  Period: ['.', '>', '.', '>'],
                  Slash: ['/', '?', '/', '?'],
                  NumpadDivide: ['/', '/', '/', '/'],
                  NumpadMultiply: ['*', '*', '*', '*'],
                  NumpadSubtract: ['-', '-', '-', '-'],
                  NumpadAdd: ['+', '+', '+', '+'],
                  Numpad1: ['1', '1', '1', '1'],
                  Numpad2: ['2', '2', '2', '2'],
                  Numpad3: ['3', '3', '3', '3'],
                  Numpad4: ['4', '4', '4', '4'],
                  Numpad5: ['5', '5', '5', '5'],
                  Numpad6: ['6', '6', '6', '6'],
                  Numpad7: ['7', '7', '7', '7'],
                  Numpad8: ['8', '8', '8', '8'],
                  Numpad9: ['9', '9', '9', '9'],
                  Numpad0: ['0', '0', '0', '0'],
                  NumpadDecimal: ['', '.', '', '.'],
                  IntlBackslash: ['<', '>', '|', '¦'],
                  NumpadEqual: ['=', '=', '=', '='],
                  NumpadComma: ['.', '.', '.', '.'],
                  NumpadParenLeft: ['(', '(', '(', '('],
                  NumpadParenRight: [')', ')', ')', ')'],
              },
          };
  /* prettier-ignore */
  const BASE_LAYOUT_MAPPING = {
      enter: '[Enter]',
      escape: '[Escape]',
      backspace: '[Backspace]',
      tab: '[Tab]',
      space: '[Space]',
      pausebreak: '[Pause]',
      insert: '[Insert]',
      home: '[Home]',
      pageup: '[PageUp]',
      delete: '[Delete]',
      end: '[End]',
      pagedown: '[PageDown]',
      right: '[ArrowRight]',
      left: '[ArrowLeft]',
      down: '[ArrowDown]',
      up: '[ArrowUp]',
      numpad0: '[Numpad0]',
      numpad1: '[Numpad1]',
      numpad2: '[Numpad2]',
      numpad3: '[Numpad3]',
      numpad4: '[Numpad4]',
      numpad5: '[Numpad5]',
      numpad6: '[Numpad6]',
      numpad7: '[Numpad7]',
      numpad8: '[Numpad8]',
      numpad9: '[Numpad9]',
      'numpad_divide': '[NumpadDivide]',
      'numpad_multiply': '[NumpadMultiply]',
      'numpad_subtract': '[NumpadSubtract]',
      'numpad_add': '[NumpadAdd]',
      'numpad_decimal': '[NumpadDecimal]',
      'numpad_separator': '[NumpadComma]',
      capslock: '[Capslock]',
      f1: '[F1]',
      f2: '[F2]',
      f3: '[F3]',
      f4: '[F4]',
      f5: '[F5]',
      f6: '[F6]',
      f7: '[F7]',
      f8: '[F8]',
      f9: '[F9]',
      f10: '[F10]',
      f11: '[F11]',
      f12: '[F12]',
      f13: '[F13]',
      f14: '[F14]',
      f15: '[F15]',
      f16: '[F16]',
      f17: '[F17]',
      f18: '[F18]',
      f19: '[F19]',
  };
  const gKeyboardLayouts = [];
  let gKeyboardLayout;
  function platform$1() {
      let result = 'linux';
      if ((navigator === null || navigator === void 0 ? void 0 : navigator.platform) && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
          if (/^(mac)/i.test(navigator.platform)) {
              result = 'apple';
          }
          else if (/^(win)/i.test(navigator.platform)) {
              result = 'windows';
          }
          else if (/(android)/i.test(navigator.userAgent)) {
              result = 'linux';
          }
          else if (/(iphone)/i.test(navigator.userAgent) ||
              /(ipod)/i.test(navigator.userAgent) ||
              /(ipad)/i.test(navigator.userAgent)) {
              result = 'apple';
          }
          else if (/\bcros\b/i.test(navigator.userAgent)) {
              result = 'linux';
          }
      }
      return result;
  }
  function register(layout) {
      if (!layout.platform || layout.platform === platform$1()) {
          gKeyboardLayouts.push(layout);
      }
  }
  /** Given the current estimated keyboard layout,
   *  return the unmodified key for the event.
   * For example, on AZERTY option+shift+'A' = 'Æ' -> 'a'
   * (event though the code is KeyQ)
   */
  // export function getUnmodifiedKey(evt: KeyboardEvent): string {
  //     if (!evt.shiftKey && !evt.altKey) {
  //         return evt.key;
  //     }
  //     // @todo: iterate over the entries for the current layout,
  //     // with the alt+shift modifiers set accordingly
  //     // and find the (first) entry that matches
  //     const layout = gKeyboardLayouts[0] ?? DEFAULT_KEYBOARD_LAYOUT;
  //     const index =
  //         evt.shiftKey && evt.altKey ? 3 : evt.altKey ? 2 : evt.shiftKey ? 1 : 0;
  //     for (const [key, value] of Object.entries(layout.mapping)) {
  //         if (key === evt.code && value[index] === evt.key) {
  //             return value[0];
  //         }
  //     }
  //     // We did not find a perfect match...
  //     // Look for an entry even if the keycode doesn't match...
  //     for (const [, value] of Object.entries(layout.mapping)) {
  //         if (value[index] === evt.key) {
  //             return value[0];
  //         }
  //     }
  //     // Really? Nothing matched?! Just return the key...
  //     return evt.key;
  // }
  function getCodeForKey(k) {
      var _a, _b;
      const layout = (_a = getActiveKeyboardLayout()) !== null && _a !== void 0 ? _a : DEFAULT_KEYBOARD_LAYOUT;
      for (const [key, value] of Object.entries(layout.mapping)) {
          if (value[0] === k)
              return '[' + key + ']';
          if (value[1] === k)
              return 'shift+[' + key + ']';
          if (value[2] === k)
              return 'alt+[' + key + ']';
          if (value[3] === k)
              return 'shift+alt+[' + key + ']';
      }
      return (_b = BASE_LAYOUT_MAPPING[k]) !== null && _b !== void 0 ? _b : '';
  }
  function normalizeKeyboardEvent(evt) {
      if (!evt.code) {
          // For virtual keyboards (iOS, Android) and Microsoft Edge (!)
          // the `evt.code`, which represents the physical key pressed, is set
          // to undefined. In that case, map the virtual key ("q") to a
          // pseudo-hardware key ("KeyQ")
          const mapping = Object.entries(getActiveKeyboardLayout().mapping);
          let altKey = false;
          let shiftKey = false;
          let code;
          for (let index = 0; index < 4; index++) {
              for (const [key, value] of mapping) {
                  if (value[index] === evt.key) {
                      code = key;
                      if (index === 3) {
                          altKey = true;
                          shiftKey = true;
                      }
                      else if (index === 2) {
                          altKey = true;
                      }
                      else if (index === 1) {
                          shiftKey = true;
                      }
                      break;
                  }
              }
              if (code)
                  break;
          }
          return new KeyboardEvent(evt.type, { ...evt, altKey, shiftKey, code });
      }
      return new KeyboardEvent(evt.type, evt);
  }
  // Given this keyboard event, and the `code`, `key` and modifiers
  // in it, increase the score of layouts that do match it.
  // Calling repeatedly this function will improve the accuracy of the
  // keyboard layout estimate.
  function validateKeyboardLayout(evt) {
      const index = evt.shiftKey && evt.altKey ? 3 : evt.altKey ? 2 : evt.shiftKey ? 1 : 0;
      if (evt.key === 'Unidentified')
          return;
      // Dead keys do not have enough info to validate the keyboard
      // (we dont' know what char they could produce, only the physical key associated with them )
      if (evt.key === 'Dead')
          return;
      const layouts = gKeyboardLayouts.filter((layout) => { var _a; return ((_a = layout.mapping[evt.code]) === null || _a === void 0 ? void 0 : _a[index]) === evt.key; });
      if (layouts.length === 0)
          return;
      // Increase the score of the layouts that have a mapping compatible with this keyboard event.
      layouts.forEach((x) => {
          x.score += 1;
      });
      gKeyboardLayouts.sort((a, b) => b.score - a.score);
  }
  function setKeyboardLayoutLocale(locale) {
      gKeyboardLayout = gKeyboardLayouts.find((x) => locale.startsWith(x.locale));
  }
  function getActiveKeyboardLayout() {
      return gKeyboardLayout !== null && gKeyboardLayout !== void 0 ? gKeyboardLayout : gKeyboardLayouts[0];
  }
  register(DEFAULT_KEYBOARD_LAYOUT);
  register({
      id: 'apple.french',
      locale: 'fr',
      displayName: 'French',
      platform: 'apple',
      virtualLayout: 'azerty',
      score: 0,
      mapping: {
          KeyA: ['q', 'Q', '‡', 'Ω'],
          KeyB: ['b', 'B', 'ß', '∫'],
          KeyC: ['c', 'C', '©', '¢'],
          KeyD: ['d', 'D', '∂', '∆'],
          KeyE: ['e', 'E', 'ê', 'Ê'],
          KeyF: ['f', 'F', 'ƒ', '·'],
          KeyG: ['g', 'G', 'ﬁ', 'ﬂ'],
          KeyH: ['h', 'H', 'Ì', 'Î'],
          KeyI: ['i', 'I', 'î', 'ï'],
          KeyJ: ['j', 'J', 'Ï', 'Í'],
          KeyK: ['k', 'K', 'È', 'Ë'],
          KeyL: ['l', 'L', '¬', '|'],
          KeyM: [',', '?', '∞', '¿'],
          KeyN: ['n', 'N', '~', 'ı'],
          KeyO: ['o', 'O', 'œ', 'Œ'],
          KeyP: ['p', 'P', 'π', '∏'],
          KeyQ: ['a', 'A', 'æ', 'Æ'],
          KeyR: ['r', 'R', '®', '‚'],
          KeyS: ['s', 'S', 'Ò', '∑'],
          KeyT: ['t', 'T', '†', '™'],
          KeyU: ['u', 'U', 'º', 'ª'],
          KeyV: ['v', 'V', '◊', '√'],
          KeyW: ['z', 'Z', 'Â', 'Å'],
          KeyX: ['x', 'X', '≈', '⁄'],
          KeyY: ['y', 'Y', 'Ú', 'Ÿ'],
          KeyZ: ['w', 'W', '‹', '›'],
          Digit1: ['&', '1', '', '´'],
          Digit2: ['é', '2', 'ë', '„'],
          Digit3: ['"', '3', '“', '”'],
          Digit4: ["'", '4', '‘', '’'],
          Digit5: ['(', '5', '{', '['],
          Digit6: ['§', '6', '¶', 'å'],
          Digit7: ['è', '7', '«', '»'],
          Digit8: ['!', '8', '¡', 'Û'],
          Digit9: ['ç', '9', 'Ç', 'Á'],
          Digit0: ['à', '0', 'ø', 'Ø'],
          Space: [' ', ' ', ' ', ' '],
          Minus: [')', '°', '}', ']'],
          Equal: ['-', '_', '—', '–'],
          BracketLeft: ['^', '¨', 'ô', 'Ô'],
          BracketRight: ['$', '*', '€', '¥'],
          Backslash: ['`', '£', '@', '#'],
          Semicolon: ['m', 'M', 'µ', 'Ó'],
          Quote: ['ù', '%', 'Ù', '‰'],
          Backquote: ['<', '>', '≤', '≥'],
          Comma: [';', '.', '…', '•'],
          Period: [':', '/', '÷', '\\'],
          Slash: ['=', '+', '≠', '±'],
          NumpadDivide: ['/', '/', '/', '/'],
          NumpadMultiply: ['*', '*', '*', '*'],
          NumpadSubtract: ['-', '-', '-', '-'],
          NumpadAdd: ['+', '+', '+', '+'],
          NumpadDecimal: [',', '.', ',', '.'],
          IntlBackslash: ['@', '#', '•', 'Ÿ'],
          NumpadEqual: ['=', '=', '=', '='],
      },
  });
  register({
      id: 'apple.spanish',
      locale: 'es',
      displayName: 'Spanish ISO',
      platform: 'apple',
      virtualLayout: 'qwerty',
      score: 0,
      mapping: {
          KeyA: ['a', 'A', 'å', 'Å'],
          KeyB: ['b', 'B', 'ß', ''],
          KeyC: ['c', 'C', '©', ' '],
          KeyD: ['d', 'D', '∂', '∆'],
          KeyE: ['e', 'E', '€', '€'],
          KeyF: ['f', 'F', 'ƒ', 'ﬁ'],
          KeyG: ['g', 'G', '', 'ﬂ'],
          KeyH: ['h', 'H', '™', ' '],
          KeyI: ['i', 'I', ' ', ' '],
          KeyJ: ['j', 'J', '¶', '¯'],
          KeyK: ['k', 'K', '§', 'ˇ'],
          KeyL: ['l', 'L', ' ', '˘'],
          KeyM: ['m', 'M', 'µ', '˚'],
          KeyN: ['n', 'N', ' ', '˙'],
          KeyO: ['o', 'O', 'ø', 'Ø'],
          KeyP: ['p', 'P', 'π', '∏'],
          KeyQ: ['q', 'Q', 'œ', 'Œ'],
          KeyR: ['r', 'R', '®', ' '],
          KeyS: ['s', 'S', '∫', ' '],
          KeyT: ['t', 'T', '†', '‡'],
          KeyU: ['u', 'U', ' ', ' '],
          KeyV: ['v', 'V', '√', '◊'],
          KeyW: ['w', 'W', 'æ', 'Æ'],
          KeyX: ['x', 'X', '∑', '›'],
          KeyY: ['y', 'Y', '¥', ' '],
          KeyZ: ['z', 'Z', 'Ω', '‹'],
          Digit1: ['1', '!', '|', 'ı'],
          Digit2: ['2', '"', '@', '˝'],
          Digit3: ['3', '·', '#', '•'],
          Digit4: ['4', '$', '¢', '£'],
          Digit5: ['5', '%', '∞', '‰'],
          Digit6: ['6', '&', '¬', ' '],
          Digit7: ['7', '/', '÷', '⁄'],
          Digit8: ['8', '(', '“', '‘'],
          Digit9: ['9', ')', '”', '’'],
          Digit0: ['0', '=', '≠', '≈'],
          Space: [' ', ' ', ' ', ' '],
          Minus: ["'", '?', '´', '¸'],
          Equal: ['¡', '¿', '‚', '˛'],
          BracketLeft: ['`', '^', '[', 'ˆ'],
          BracketRight: ['+', '*', ']', '±'],
          Backslash: ['ç', 'Ç', '}', '»'],
          Semicolon: ['ñ', 'Ñ', '~', '˜'],
          Quote: ['´', '¨', '{', '«'],
          Backquote: ['<', '>', '≤', '≥'],
          Comma: [',', ';', '„', ''],
          Period: ['.', ':', '…', '…'],
          Slash: ['-', '_', '–', '—'],
          NumpadDivide: ['/', '/', '/', '/'],
          NumpadMultiply: ['*', '*', '*', '*'],
          NumpadSubtract: ['-', '-', '-', '-'],
          NumpadAdd: ['+', '+', '+', '+'],
          Numpad1: ['1', '1', '1', '1'],
          Numpad2: ['2', '2', '2', '2'],
          Numpad3: ['3', '3', '3', '3'],
          Numpad4: ['4', '4', '4', '4'],
          Numpad5: ['5', '5', '5', '5'],
          Numpad6: ['6', '6', '6', '6'],
          Numpad7: ['7', '7', '7', '7'],
          Numpad8: ['8', '8', '8', '8'],
          Numpad9: ['9', '9', '9', '9'],
          Numpad0: ['0', '0', '0', '0'],
          NumpadDecimal: [',', ',', ',', ','],
          IntlBackslash: ['º', 'ª', '\\', '°'],
      },
  });
  register({
      id: 'windows.spanish',
      locale: 'es',
      displayName: 'Spanish',
      platform: 'windows',
      virtualLayout: 'qwerty',
      score: 0,
      mapping: {
          KeyA: ['a', 'A', '', ''],
          KeyB: ['b', 'B', '', ''],
          KeyC: ['c', 'C', '', ''],
          KeyD: ['d', 'D', '', ''],
          KeyE: ['e', 'E', '€', ''],
          KeyF: ['f', 'F', '', ''],
          KeyG: ['g', 'G', '', ''],
          KeyH: ['h', 'H', '', ''],
          KeyI: ['i', 'I', '', ''],
          KeyJ: ['j', 'J', '', ''],
          KeyK: ['k', 'K', '', ''],
          KeyL: ['l', 'L', '', ''],
          KeyM: ['m', 'M', '', ''],
          KeyN: ['n', 'N', '', ''],
          KeyO: ['o', 'O', '', ''],
          KeyP: ['p', 'P', '', ''],
          KeyQ: ['q', 'Q', '', ''],
          KeyR: ['r', 'R', '', ''],
          KeyS: ['s', 'S', '', ''],
          KeyT: ['t', 'T', '', ''],
          KeyU: ['u', 'U', '', ''],
          KeyV: ['v', 'V', '', ''],
          KeyW: ['w', 'W', '', ''],
          KeyX: ['x', 'X', '', ''],
          KeyY: ['y', 'Y', '', ''],
          KeyZ: ['z', 'Z', '', ''],
          Digit1: ['1', '!', '|', ''],
          Digit2: ['2', '"', '@', ''],
          Digit3: ['3', '·', '#', ''],
          Digit4: ['4', '$', '~', ''],
          Digit5: ['5', '%', '€', ''],
          Digit6: ['6', '&', '¬', ''],
          Digit7: ['7', '/', '', ''],
          Digit8: ['8', '(', '', ''],
          Digit9: ['9', ')', '', ''],
          Digit0: ['0', '=', '', ''],
          Space: [' ', ' ', '', ''],
          Minus: ["'", '?', '', ''],
          Equal: ['¡', '¿', '', ''],
          BracketLeft: ['`', '^', '[', ''],
          BracketRight: ['+', '*', ']', ''],
          Backslash: ['ç', 'Ç', '}', ''],
          Semicolon: ['ñ', 'Ñ', '', ''],
          Quote: ['´', '¨', '{', ''],
          Backquote: ['º', 'ª', '\\', ''],
          Comma: [',', ';', '', ''],
          Period: ['.', ':', '', ''],
          Slash: ['-', '_', '', ''],
          NumpadDivide: ['/', '/', '', ''],
          NumpadMultiply: ['*', '*', '', ''],
          NumpadSubtract: ['-', '-', '', ''],
          NumpadAdd: ['+', '+', '', ''],
          IntlBackslash: ['<', '>', '', ''],
      },
  });
  register({
      id: 'linux.spanish',
      locale: 'es',
      displayName: 'Spanish',
      platform: 'linux',
      virtualLayout: 'qwerty',
      score: 0,
      mapping: {
          KeyA: ['a', 'A', 'æ', 'Æ'],
          KeyB: ['b', 'B', '”', '’'],
          KeyC: ['c', 'C', '¢', '©'],
          KeyD: ['d', 'D', 'ð', 'Ð'],
          KeyE: ['e', 'E', '€', '¢'],
          KeyF: ['f', 'F', 'đ', 'ª'],
          KeyG: ['g', 'G', 'ŋ', 'Ŋ'],
          KeyH: ['h', 'H', 'ħ', 'Ħ'],
          KeyI: ['i', 'I', '→', 'ı'],
          KeyJ: ['j', 'J', '̉', '̛'],
          KeyK: ['k', 'K', 'ĸ', '&'],
          KeyL: ['l', 'L', 'ł', 'Ł'],
          KeyM: ['m', 'M', 'µ', 'º'],
          KeyN: ['n', 'N', 'n', 'N'],
          KeyO: ['o', 'O', 'ø', 'Ø'],
          KeyP: ['p', 'P', 'þ', 'Þ'],
          KeyQ: ['q', 'Q', '@', 'Ω'],
          KeyR: ['r', 'R', '¶', '®'],
          KeyS: ['s', 'S', 'ß', '§'],
          KeyT: ['t', 'T', 'ŧ', 'Ŧ'],
          KeyU: ['u', 'U', '↓', '↑'],
          KeyV: ['v', 'V', '“', '‘'],
          KeyW: ['w', 'W', 'ł', 'Ł'],
          KeyX: ['x', 'X', '»', '>'],
          KeyY: ['y', 'Y', '←', '¥'],
          KeyZ: ['z', 'Z', '«', '<'],
          Digit1: ['1', '!', '|', '¡'],
          Digit2: ['2', '"', '@', '⅛'],
          Digit3: ['3', '·', '#', '£'],
          Digit4: ['4', '$', '~', '$'],
          Digit5: ['5', '%', '½', '⅜'],
          Digit6: ['6', '&', '¬', '⅝'],
          Digit7: ['7', '/', '{', '⅞'],
          Digit8: ['8', '(', '[', '™'],
          Digit9: ['9', ')', ']', '±'],
          Digit0: ['0', '=', '}', '°'],
          Enter: ['\r', '\r', '\r', '\r'],
          Escape: ['\u001B', '\u001B', '\u001B', '\u001B'],
          Backspace: ['\b', '\b', '\b', '\b'],
          Tab: ['\t', '', '\t', ''],
          Space: [' ', ' ', ' ', ' '],
          Minus: ["'", '?', '\\', '¿'],
          Equal: ['¡', '¿', '̃', '~'],
          BracketLeft: ['̀', '̂', '[', '̊'],
          BracketRight: ['+', '*', ']', '̄'],
          Backslash: ['ç', 'Ç', '}', '̆'],
          Semicolon: ['ñ', 'Ñ', '~', '̋'],
          Quote: ['́', '̈', '{', '{'],
          Backquote: ['º', 'ª', '\\', '\\'],
          Comma: [',', ';', '─', '×'],
          Period: ['.', ':', '·', '÷'],
          Slash: ['-', '_', '̣', '̇'],
          NumpadDivide: ['/', '/', '/', '/'],
          NumpadMultiply: ['*', '*', '*', '*'],
          NumpadSubtract: ['-', '-', '-', '-'],
          NumpadAdd: ['+', '+', '+', '+'],
          NumpadEnter: ['\r', '\r', '\r', '\r'],
          Numpad1: ['', '1', '', '1'],
          Numpad2: ['', '2', '', '2'],
          Numpad3: ['', '3', '', '3'],
          Numpad4: ['', '4', '', '4'],
          Numpad5: ['', '5', '', '5'],
          Numpad6: ['', '6', '', '6'],
          Numpad7: ['', '7', '', '7'],
          Numpad8: ['', '8', '', '8'],
          Numpad9: ['', '9', '', '9'],
          Numpad0: ['', '0', '', '0'],
          NumpadDecimal: ['', '.', '', '.'],
          IntlBackslash: ['<', '>', '|', '¦'],
          NumpadEqual: ['=', '=', '=', '='],
          NumpadComma: ['.', '.', '.', '.'],
          NumpadParenLeft: ['(', '(', '(', '('],
          NumpadParenRight: [')', ')', ')', ')'],
      },
  });
  register({
      id: 'linux.french',
      locale: 'fr',
      displayName: 'French',
      virtualLayout: 'azerty',
      platform: 'apple',
      score: 0,
      mapping: {
          KeyA: ['q', 'Q', '@', 'Ω'],
          KeyB: ['b', 'B', '”', '’'],
          KeyC: ['c', 'C', '¢', '©'],
          KeyD: ['d', 'D', 'ð', 'Ð'],
          KeyE: ['e', 'E', '€', '¢'],
          KeyF: ['f', 'F', 'đ', 'ª'],
          KeyG: ['g', 'G', 'ŋ', 'Ŋ'],
          KeyH: ['h', 'H', 'ħ', 'Ħ'],
          KeyI: ['i', 'I', '→', 'ı'],
          KeyJ: ['j', 'J', '̉', '̛'],
          KeyK: ['k', 'K', 'ĸ', '&'],
          KeyL: ['l', 'L', 'ł', 'Ł'],
          KeyM: [',', '?', '́', '̋'],
          KeyN: ['n', 'N', 'n', 'N'],
          KeyO: ['o', 'O', 'ø', 'Ø'],
          KeyP: ['p', 'P', 'þ', 'Þ'],
          KeyQ: ['a', 'A', 'æ', 'Æ'],
          KeyR: ['r', 'R', '¶', '®'],
          KeyS: ['s', 'S', 'ß', '§'],
          KeyT: ['t', 'T', 'ŧ', 'Ŧ'],
          KeyU: ['u', 'U', '↓', '↑'],
          KeyV: ['v', 'V', '“', '‘'],
          KeyW: ['z', 'Z', '«', '<'],
          KeyX: ['x', 'X', '»', '>'],
          KeyY: ['y', 'Y', '←', '¥'],
          KeyZ: ['w', 'W', 'ł', 'Ł'],
          Digit1: ['&', '1', '¹', '¡'],
          Digit2: ['é', '2', '~', '⅛'],
          Digit3: ['"', '3', '#', '£'],
          Digit4: ["'", '4', '{', '$'],
          Digit5: ['(', '5', '[', '⅜'],
          Digit6: ['-', '6', '|', '⅝'],
          Digit7: ['è', '7', '`', '⅞'],
          Digit8: ['_', '8', '\\', '™'],
          Digit9: ['ç', '9', '^', '±'],
          Digit0: ['à', '0', '@', '°'],
          Enter: ['\r', '\r', '\r', '\r'],
          Escape: ['\u001B', '\u001B', '\u001B', '\u001B'],
          Backspace: ['\b', '\b', '\b', '\b'],
          Tab: ['\t', '', '\t', ''],
          Space: [' ', ' ', ' ', ' '],
          Minus: [')', '°', ']', '¿'],
          Equal: ['=', '+', '}', '̨'],
          BracketLeft: ['̂', '̈', '̈', '̊'],
          BracketRight: ['$', '£', '¤', '̄'],
          Backslash: ['*', 'µ', '̀', '̆'],
          Semicolon: ['m', 'M', 'µ', 'º'],
          Quote: ['ù', '%', '̂', '̌'],
          Backquote: ['²', '~', '¬', '¬'],
          Comma: [';', '.', '─', '×'],
          Period: [':', '/', '·', '÷'],
          Slash: ['!', '§', '̣', '̇'],
          NumpadMultiply: ['*', '*', '*', '*'],
          NumpadSubtract: ['-', '-', '-', '-'],
          NumpadAdd: ['+', '+', '+', '+'],
          NumpadDecimal: ['', '.', '', '.'],
          IntlBackslash: ['<', '>', '|', '¦'],
      },
  });
  register({
      id: 'windows.french',
      locale: 'fr',
      displayName: 'French',
      virtualLayout: 'azerty',
      platform: 'windows',
      score: 0,
      mapping: {
          KeyA: ['q', 'Q', '', ''],
          KeyB: ['b', 'B', '', ''],
          KeyC: ['c', 'C', '', ''],
          KeyD: ['d', 'D', '', ''],
          KeyE: ['e', 'E', '€', ''],
          KeyF: ['f', 'F', '', ''],
          KeyG: ['g', 'G', '', ''],
          KeyH: ['h', 'H', '', ''],
          KeyI: ['i', 'I', '', ''],
          KeyJ: ['j', 'J', '', ''],
          KeyK: ['k', 'K', '', ''],
          KeyL: ['l', 'L', '', ''],
          KeyM: [',', '?', '', ''],
          KeyN: ['n', 'N', '', ''],
          KeyO: ['o', 'O', '', ''],
          KeyP: ['p', 'P', '', ''],
          KeyQ: ['a', 'A', '', ''],
          KeyR: ['r', 'R', '', ''],
          KeyS: ['s', 'S', '', ''],
          KeyT: ['t', 'T', '', ''],
          KeyU: ['u', 'U', '', ''],
          KeyV: ['v', 'V', '', ''],
          KeyW: ['z', 'Z', '', ''],
          KeyX: ['x', 'X', '', ''],
          KeyY: ['y', 'Y', '', ''],
          KeyZ: ['w', 'W', '', ''],
          Digit1: ['&', '1', '', ''],
          Digit2: ['é', '2', '~', ''],
          Digit3: ['"', '3', '#', ''],
          Digit4: ["'", '4', '{', ''],
          Digit5: ['(', '5', '[', ''],
          Digit6: ['-', '6', '|', ''],
          Digit7: ['è', '7', '`', ''],
          Digit8: ['_', '8', '\\', ''],
          Digit9: ['ç', '9', '^', ''],
          Digit0: ['à', '0', '@', ''],
          Space: [' ', ' ', '', ''],
          Minus: [')', '°', ']', ''],
          Equal: ['=', '+', '}', ''],
          BracketLeft: ['^', '¨', '', ''],
          BracketRight: ['$', '£', '¤', ''],
          Backslash: ['*', 'µ', '', ''],
          Semicolon: ['m', 'M', '', ''],
          Quote: ['ù', '%', '', ''],
          Backquote: ['²', '', '', ''],
          Comma: [';', '.', '', ''],
          Period: [':', '/', '', ''],
          Slash: ['!', '§', '', ''],
          NumpadDivide: ['/', '/', '', ''],
          NumpadMultiply: ['*', '*', '', ''],
          NumpadSubtract: ['-', '-', '', ''],
          NumpadAdd: ['+', '+', '', ''],
          IntlBackslash: ['<', '>', '', ''],
      },
  });
  register({
      id: 'windows.german',
      locale: 'de',
      displayName: 'German',
      platform: 'windows',
      virtualLayout: 'qwertz',
      score: 0,
      mapping: {
          KeyA: ['a', 'A', '', ''],
          KeyB: ['b', 'B', '', ''],
          KeyC: ['c', 'C', '', ''],
          KeyD: ['d', 'D', '', ''],
          KeyE: ['e', 'E', '€', ''],
          KeyF: ['f', 'F', '', ''],
          KeyG: ['g', 'G', '', ''],
          KeyH: ['h', 'H', '', ''],
          KeyI: ['i', 'I', '', ''],
          KeyJ: ['j', 'J', '', ''],
          KeyK: ['k', 'K', '', ''],
          KeyL: ['l', 'L', '', ''],
          KeyM: ['m', 'M', 'µ', ''],
          KeyN: ['n', 'N', '', ''],
          KeyO: ['o', 'O', '', ''],
          KeyP: ['p', 'P', '', ''],
          KeyQ: ['q', 'Q', '@', ''],
          KeyR: ['r', 'R', '', ''],
          KeyS: ['s', 'S', '', ''],
          KeyT: ['t', 'T', '', ''],
          KeyU: ['u', 'U', '', ''],
          KeyV: ['v', 'V', '', ''],
          KeyW: ['w', 'W', '', ''],
          KeyX: ['x', 'X', '', ''],
          KeyY: ['z', 'Z', '', ''],
          KeyZ: ['y', 'Y', '', ''],
          Digit1: ['1', '!', '', ''],
          Digit2: ['2', '"', '²', ''],
          Digit3: ['3', '§', '³', ''],
          Digit4: ['4', '$', '', ''],
          Digit5: ['5', '%', '', ''],
          Digit6: ['6', '&', '', ''],
          Digit7: ['7', '/', '{', ''],
          Digit8: ['8', '(', '[', ''],
          Digit9: ['9', ')', ']', ''],
          Digit0: ['0', '=', '}', ''],
          Space: [' ', ' ', '', ''],
          Minus: ['ß', '?', '\\', 'ẞ'],
          Equal: ['´', '`', '', ''],
          BracketLeft: ['ü', 'Ü', '', ''],
          BracketRight: ['+', '*', '~', ''],
          Backslash: ['#', "'", '', ''],
          Semicolon: ['ö', 'Ö', '', ''],
          Quote: ['ä', 'Ä', '', ''],
          Backquote: ['^', '°', '', ''],
          Comma: [',', ';', '', ''],
          Period: ['.', ':', '', ''],
          Slash: ['-', '_', '', ''],
          NumpadDivide: ['/', '/', '', ''],
          NumpadMultiply: ['*', '*', '', ''],
          NumpadSubtract: ['-', '-', '', ''],
          NumpadAdd: ['+', '+', '', ''],
          IntlBackslash: ['<', '>', '|', ''],
      },
  });
  register({
      id: 'apple.german',
      locale: 'de',
      displayName: 'German',
      virtualLayout: 'qwertz',
      platform: 'apple',
      score: 0,
      mapping: {
          KeyA: ['a', 'A', 'å', 'Å'],
          KeyB: ['b', 'B', '∫', '‹'],
          KeyC: ['c', 'C', 'ç', 'Ç'],
          KeyD: ['d', 'D', '∂', '™'],
          KeyE: ['e', 'E', '€', '‰'],
          KeyF: ['f', 'F', 'ƒ', 'Ï'],
          KeyG: ['g', 'G', '©', 'Ì'],
          KeyH: ['h', 'H', 'ª', 'Ó'],
          KeyI: ['i', 'I', '⁄', 'Û'],
          KeyJ: ['j', 'J', 'º', 'ı'],
          KeyK: ['k', 'K', '∆', 'ˆ'],
          KeyL: ['l', 'L', '@', 'ﬂ'],
          KeyM: ['m', 'M', 'µ', '˘'],
          KeyN: ['n', 'N', '~', '›'],
          KeyO: ['o', 'O', 'ø', 'Ø'],
          KeyP: ['p', 'P', 'π', '∏'],
          KeyQ: ['q', 'Q', '«', '»'],
          KeyR: ['r', 'R', '®', '¸'],
          KeyS: ['s', 'S', '‚', 'Í'],
          KeyT: ['t', 'T', '†', '˝'],
          KeyU: ['u', 'U', '¨', 'Á'],
          KeyV: ['v', 'V', '√', '◊'],
          KeyW: ['w', 'W', '∑', '„'],
          KeyX: ['x', 'X', '≈', 'Ù'],
          KeyY: ['z', 'Z', 'Ω', 'ˇ'],
          KeyZ: ['y', 'Y', '¥', '‡'],
          Digit1: ['1', '!', '¡', '¬'],
          Digit2: ['2', '"', '“', '”'],
          Digit3: ['3', '§', '¶', '#'],
          Digit4: ['4', '$', '¢', '£'],
          Digit5: ['5', '%', '[', 'ﬁ'],
          Digit6: ['6', '&', ']', '^'],
          Digit7: ['7', '/', '|', '\\'],
          Digit8: ['8', '(', '{', '˜'],
          Digit9: ['9', ')', '}', '·'],
          Digit0: ['0', '=', '≠', '¯'],
          Space: [' ', ' ', ' ', ' '],
          Minus: ['ß', '?', '¿', '˙'],
          Equal: ['´', '`', "'", '˚'],
          BracketLeft: ['ü', 'Ü', '•', '°'],
          BracketRight: ['+', '*', '±', ''],
          Backslash: ['#', "'", '‘', '’'],
          Semicolon: ['ö', 'Ö', 'œ', 'Œ'],
          Quote: ['ä', 'Ä', 'æ', 'Æ'],
          Backquote: ['<', '>', '≤', '≥'],
          Comma: [',', ';', '∞', '˛'],
          Period: ['.', ':', '…', '÷'],
          Slash: ['-', '_', '–', '—'],
          NumpadDivide: ['/', '/', '/', '/'],
          NumpadMultiply: ['*', '*', '*', '*'],
          NumpadSubtract: ['-', '-', '-', '-'],
          NumpadAdd: ['+', '+', '+', '+'],
          NumpadDecimal: [',', ',', '.', '.'],
          IntlBackslash: ['^', '°', '„', '“'],
          NumpadEqual: ['=', '=', '=', '='],
      },
  });
  register({
      id: 'dvorak',
      locale: 'en',
      displayName: 'Dvorak',
      virtualLayout: 'dvorak',
      platform: '',
      score: 0,
      mapping: {
          KeyA: ['a', 'A', 'å', 'Å'],
          KeyB: ['x', 'X', '≈', '˛'],
          KeyC: ['j', 'J', '∆', 'Ô'],
          KeyD: ['e', 'E', '´', '´'],
          KeyE: ['.', '>', '≥', '˘'],
          KeyF: ['u', 'U', '¨', '¨'],
          KeyG: ['i', 'I', 'ˆ', 'ˆ'],
          KeyH: ['d', 'D', '∂', 'Î'],
          KeyI: ['c', 'C', 'ç', 'Ç'],
          KeyJ: ['h', 'H', '˙', 'Ó'],
          KeyK: ['t', 'T', '†', 'ˇ'],
          KeyL: ['n', 'N', '˜', '˜'],
          KeyM: ['m', 'M', 'µ', 'Â'],
          KeyN: ['b', 'B', '∫', 'ı'],
          KeyO: ['r', 'R', '®', '‰'],
          KeyP: ['l', 'L', '¬', 'Ò'],
          KeyQ: ["'", '"', 'æ', 'Æ'],
          KeyR: ['p', 'P', 'π', '∏'],
          KeyS: ['o', 'O', 'ø', 'Ø'],
          KeyT: ['y', 'Y', '¥', 'Á'],
          KeyU: ['g', 'G', '©', '˝'],
          KeyV: ['k', 'K', '˚', ''],
          KeyW: [',', '<', '≤', '¯'],
          KeyX: ['q', 'Q', 'œ', 'Œ'],
          KeyY: ['f', 'F', 'ƒ', 'Ï'],
          KeyZ: [';', ':', '…', 'Ú'],
          Digit1: ['1', '!', '¡', '⁄'],
          Digit2: ['2', '@', '™', '€'],
          Digit3: ['3', '#', '£', '‹'],
          Digit4: ['4', '$', '¢', '›'],
          Digit5: ['5', '%', '∞', 'ﬁ'],
          Digit6: ['6', '^', '§', 'ﬂ'],
          Digit7: ['7', '&', '¶', '‡'],
          Digit8: ['8', '*', '•', '°'],
          Digit9: ['9', '(', 'ª', '·'],
          Digit0: ['0', ')', 'º', '‚'],
          Space: [' ', ' ', ' ', ' '],
          Minus: ['[', '{', '“', '”'],
          Equal: [']', '}', '‘', '’'],
          BracketLeft: ['/', '?', '÷', '¿'],
          BracketRight: ['=', '+', '≠', '±'],
          Backslash: ['\\', '|', '«', '»'],
          Semicolon: ['s', 'S', 'ß', 'Í'],
          Quote: ['-', '_', '–', '—'],
          Backquote: ['`', '~', '`', '`'],
          Comma: ['w', 'W', '∑', '„'],
          Period: ['v', 'V', '√', '◊'],
          Slash: ['z', 'Z', 'Ω', '¸'],
          NumpadDivide: ['/', '/', '/', '/'],
          NumpadMultiply: ['*', '*', '*', '*'],
          NumpadSubtract: ['-', '-', '-', '-'],
          NumpadAdd: ['+', '+', '+', '+'],
          Numpad1: ['1', '1', '1', '1'],
          Numpad2: ['2', '2', '2', '2'],
          Numpad3: ['3', '3', '3', '3'],
          Numpad4: ['4', '4', '4', '4'],
          Numpad5: ['5', '5', '5', '5'],
          Numpad6: ['6', '6', '6', '6'],
          Numpad7: ['7', '7', '7', '7'],
          Numpad8: ['8', '8', '8', '8'],
          Numpad9: ['9', '9', '9', '9'],
          Numpad0: ['0', '0', '0', '0'],
          NumpadDecimal: ['.', '.', '.', '.'],
          IntlBackslash: ['§', '±', '§', '±'],
          NumpadEqual: ['=', '=', '=', '='],
          AudioVolumeUp: ['', '=', '', '='],
      },
  });

  const DEFAULT_KEYBINDINGS = [
      { key: 'ctrl+alt+e', command: ['insert', '\\text{cmd+alt+e}'] },
      { key: 'cmd+alt+a', command: ['insert', '\\text{cmd+alt+a}'] },
      { key: 'ctrl+alt+a', command: ['insert', '\\text{ctrl+alt+a}'] },
      { key: 'meta+alt+2', command: ['insert', '\\text{meta+alt+2}'] },
      {
          key: 'ctrl+alt+shift+a',
          command: ['insert', '\\text{ctrl+alt+shift+a}'],
      },
      // { key: 'meta+alt+@', command: ['insert', '\\text{cmd+alt+@}'] },
      { key: 'left', command: 'moveToPreviousChar' },
      { key: 'right', command: 'moveToNextChar' },
      { key: 'up', command: 'moveUp' },
      { key: 'down', command: 'moveDown' },
      { key: 'shift+[ArrowLeft]', command: 'extendSelectionBackward' },
      { key: 'shift+[ArrowRight]', command: 'extendSelectionForward' },
      { key: 'shift+[ArrowUp]', command: 'extendSelectionUpward' },
      { key: 'shift+[ArrowDown]', command: 'extendSelectionDownward' },
      { key: '[Backspace]', command: 'deleteBackward' },
      { key: 'alt+[Delete]', command: 'deleteBackward' },
      { key: '[Delete]', command: 'deleteForward' },
      { key: 'alt+[Backspace]', command: 'deleteForward' },
      { key: 'alt+[ArrowLeft]', command: 'moveToPreviousWord' },
      { key: 'alt+[ArrowRight]', command: 'moveToNextWord' },
      { key: 'alt+shift+[ArrowLeft]', command: 'extendToPreviousWord' },
      { key: 'alt+shift+[ArrowRight]', command: 'extendToNextWord' },
      { key: 'ctrl+[ArrowLeft]', command: 'moveToGroupStart' },
      { key: 'ctrl+[ArrowRight]', command: 'moveToGroupEnd' },
      { key: 'ctrl+shift+[ArrowLeft]', command: 'extendToGroupStart' },
      { key: 'ctrl+shift+[ArrowRight]', command: 'extendToGroupEnd' },
      { key: '[Space]', ifMode: 'math', command: 'moveAfterParent' },
      { key: 'shift+[Space]', ifMode: 'math', command: 'moveBeforeParent' },
      { key: '[Home]', command: 'moveToMathFieldStart' },
      { key: 'cmd+[ArrowLeft]', command: 'moveToMathFieldStart' },
      { key: 'shift+[Home]', command: 'extendToMathFieldStart' },
      { key: 'cmd+shift+[ArrowLeft]', command: 'extendToMathFieldStart' },
      { key: '[End]', command: 'moveToMathFieldEnd' },
      { key: 'cmd+[ArrowRight]', command: 'moveToMathFieldEnd' },
      { key: 'shift+[End]', command: 'extendToMathFieldEnd' },
      { key: 'cmd+shift+[ArrowRight]', command: 'extendToMathFieldEnd' },
      { key: '[Pageup]', command: 'moveToGroupStart' },
      { key: '[Pagedown]', command: 'moveToGroupEnd' },
      { key: '[Tab]', ifMode: 'math', command: 'moveToNextPlaceholder' },
      {
          key: 'shift+[Tab]',
          ifMode: 'math',
          command: 'moveToPreviousPlaceholder',
      },
      { key: '[Tab]', ifMode: 'text', command: 'moveToNextPlaceholder' },
      {
          key: 'shift+[Tab]',
          ifMode: 'text',
          command: 'moveToPreviousPlaceholder',
      },
      { key: '[Escape]', ifMode: 'math', command: ['switchMode', 'latex'] },
      { key: '\\', ifMode: 'math', command: ['switchMode', 'latex'] },
      {
          key: 'alt+[Equal]',
          ifMode: 'math',
          command: ['applyStyle', { mode: 'text' }],
      },
      {
          key: 'alt+[Equal]',
          ifMode: 'text',
          command: ['applyStyle', { mode: 'math' }],
      },
      {
          key: '[Escape]',
          ifMode: 'latex',
          command: ['complete', 'complete', { selectItem: 'true' }],
      },
      {
          key: '[Tab]',
          ifMode: 'latex',
          command: ['complete', 'accept-suggestion'],
      },
      { key: '[Return]', ifMode: 'latex', command: 'complete' },
      { key: '[Enter]', ifMode: 'latex', command: 'complete' },
      {
          key: 'shift+[Escape]',
          ifMode: 'latex',
          command: ['complete', 'reject'],
      },
      // this combination, for example in 60% keyboards it is mapped to ~
      { key: '[ArrowDown]', ifMode: 'latex', command: 'nextSuggestion' },
      // { key: 'ios:command:[Tab]', ifMode: 'latex',command: 'nextSuggestion' },
      { key: '[ArrowUp]', ifMode: 'latex', command: 'previousSuggestion' },
      { key: 'ctrl+a', ifPlatform: '!macos', command: 'selectAll' },
      { key: 'cmd+a', command: 'selectAll' },
      // Rare keys on some extended keyboards
      { key: '[Cut]', command: 'cutToClipboard' },
      { key: '[Copy]', command: 'copyToClipboard' },
      { key: '[Paste]', command: 'pasteFromClipboard' },
      { key: '[Clear]', command: 'deleteBackward' },
      { key: 'ctrl+z', ifPlatform: '!macos', command: 'undo' },
      { key: 'cmd+z', command: 'undo' },
      { key: '[Undo]', command: 'undo' },
      { key: 'ctrl+y', ifPlatform: '!macos', command: 'redo' },
      { key: 'cmd+shift+y', command: 'redo' },
      { key: 'ctrl+shift+z', ifPlatform: '!macos', command: 'redo' },
      { key: 'cmd+shift+z', command: 'redo' },
      { key: '[Redo]', command: 'redo' },
      { key: '[EraseEof]', command: 'deleteToGroupEnd' },
      // EMACS/MACOS BINDINGS
      { key: 'ctrl+b', ifPlatform: 'macos', command: 'moveToPreviousChar' },
      { key: 'ctrl+f', ifPlatform: 'macos', command: 'moveToNextChar' },
      { key: 'ctrl+p', ifPlatform: 'macos', command: 'moveUp' },
      { key: 'ctrl+n', ifPlatform: 'macos', command: 'moveDown' },
      { key: 'ctrl+a', ifPlatform: 'macos', command: 'moveToMathFieldStart' },
      { key: 'ctrl+e', ifPlatform: 'macos', command: 'moveToMathFieldEnd' },
      {
          key: 'ctrl+shift+b',
          ifPlatform: 'macos',
          command: 'extendSelectionBackward',
      },
      {
          key: 'ctrl+shift+f',
          ifPlatform: 'macos',
          command: 'extendSelectionForward',
      },
      {
          key: 'ctrl+shift+p',
          ifPlatform: 'macos',
          command: 'extendSelectionUpward',
      },
      {
          key: 'ctrl+shift+n',
          ifPlatform: 'macos',
          command: 'extendSelectionDownward',
      },
      {
          key: 'ctrl+shift+a',
          ifPlatform: 'macos',
          command: 'extendToMathFieldStart',
      },
      {
          key: 'ctrl+shift+e',
          ifPlatform: 'macos',
          command: 'extendToMathFieldEnd',
      },
      { key: 'ctrl+alt+b', ifPlatform: 'macos', command: 'moveToPreviousWord' },
      { key: 'ctrl+alt+f', ifPlatform: 'macos', command: 'moveToNextWord' },
      {
          key: 'ctrl+shift+alt+b',
          ifPlatform: 'macos',
          command: 'extendToPreviousWord',
      },
      {
          key: 'ctrl+shift+alt+f',
          ifPlatform: 'macos',
          command: 'extendToNextWord',
      },
      { key: 'ctrl+h', ifPlatform: 'macos', command: 'deleteBackward' },
      { key: 'ctrl+d', ifPlatform: 'macos', command: 'deleteForward' },
      { key: 'ctrl+l', ifPlatform: 'macos', command: 'scrollIntoView' },
      // { key: 'ctrl+t', ifPlatform: 'macos', command: 'transpose' },
      {
          key: 'shift+[Quote]',
          ifMode: 'math',
          command: ['switchMode', 'text', '', '“'],
      },
      {
          key: 'shift+[Quote]',
          ifMode: 'text',
          command: ['switchMode', 'math', '”', ''],
      },
      // WOLFRAM MATHEMATICA BINDINGS
      {
          key: 'ctrl+[Digit2]',
          ifMode: 'math',
          command: ['insert', '$$\\sqrt{#0}$$'],
      },
      { key: 'ctrl+[Digit5]', ifMode: 'math', command: 'moveToOpposite' },
      { key: 'ctrl+[Digit6]', ifMode: 'math', command: 'moveToSuperscript' },
      { key: 'ctrl+[Minus]', ifMode: 'math', command: 'moveToSubscript' },
      {
          key: 'alt+[BracketLeft]',
          ifMode: 'math',
          command: ['insert', '$$\\left\\lbrack #0 \\right\\rbrack$$'],
      },
      {
          key: 'alt+shift+[BracketLeft]',
          ifMode: 'math',
          command: ['insert', '$$\\left\\lbrace #0 \\right\\rbrace$$'],
      },
      { key: 'ctrl+[Return]', ifMode: 'math', command: 'addRowAfter' },
      { key: 'ctrl+[Enter]', ifMode: 'math', command: 'addRowAfter' },
      { key: 'cmd+[Return]', ifMode: 'math', command: 'addRowAfter' },
      { key: 'cmd+[Enter]', ifMode: 'math', command: 'addRowAfter' },
      { key: 'ctrl+;', ifMode: 'math', command: 'addRowAfter' },
      { key: 'cmd+;', ifMode: 'math', command: 'addRowAfter' },
      { key: 'ctrl+shift+;', ifMode: 'math', command: 'addRowBefore' },
      { key: 'cmd+shift+;', ifMode: 'math', command: 'addRowBefore' },
      { key: 'ctrl+[Comma]', ifMode: 'math', command: 'addColumnAfter' },
      { key: 'cmd+[Comma]', ifMode: 'math', command: 'addColumnAfter' },
      { key: 'ctrl+shift+[Comma]', ifMode: 'math', command: 'addColumnAfter' },
      { key: 'cmd+shift+[Comma]', ifMode: 'math', command: 'addColumnAfter' },
      // Excel keybindings:
      // shift+space: select entire row, ctrl+space: select an entire column
      // ctrl+shift++ or ctrl+numpad+
      // ctrl+- to delete a row or columns
      // MATHLIVE BINDINGS
      // { key: 'alt+a', command: ['insert', '$$\\theta$$'] },
      { key: 'alt+p', ifMode: 'math', command: ['insert', '$$\\pi$$'] },
      { key: 'alt+v', ifMode: 'math', command: ['insert', '$$\\sqrt{#0}$$'] },
      {
          key: 'alt+w',
          ifMode: 'math',
          command: ['insert', '$$\\sum_{i=#?}^{#?}$$'],
      },
      // { key: 'alt+b', command: ['insert', '$$\\int_{#?}^{#?}$$'] },
      { key: 'alt+u', ifMode: 'math', command: ['insert', '$$\\cup$$'] },
      { key: 'alt+n', ifMode: 'math', command: ['insert', '$$\\cap$$'] },
      { key: 'alt+o', ifMode: 'math', command: ['insert', '$$\\emptyset$$'] },
      {
          key: 'alt+d',
          ifMode: 'math',
          command: ['insert', '$$\\differentialD$$'],
      },
      {
          key: 'alt+shift+o',
          ifMode: 'math',
          command: ['insert', '$$\\varnothing$$'],
      },
      {
          key: 'alt+shift+d',
          ifMode: 'math',
          command: ['insert', '$$\\partial$$'],
      },
      {
          key: 'alt+shift+p',
          ifMode: 'math',
          command: ['insert', '$$\\prod_{i=#?}^{#?}$$'],
      },
      { key: 'alt+shift+u', ifMode: 'math', command: ['insert', '$$\\bigcup$$'] },
      { key: 'alt+shift+n', ifMode: 'math', command: ['insert', '$$\\bigcap$$'] },
      { key: 'alt+shift+a', ifMode: 'math', command: ['insert', '$$\\forall$$'] },
      { key: 'alt+shift+e', ifMode: 'math', command: ['insert', '$$\\exists$$'] },
      { key: 'alt+[Digit5]', ifMode: 'math', command: ['insert', '$\\infty$$'] },
      { key: 'alt+[Digit6]', ifMode: 'math', command: ['insert', '$$\\wedge$$'] },
      {
          key: 'alt+shift+[Digit6]',
          ifMode: 'math',
          command: ['insert', '$$\\vee$$'],
      },
      { key: 'alt+[Digit9]', ifMode: 'math', command: ['insert', '('] },
      { key: 'alt+[Digit0]', ifMode: 'math', command: ['insert', ')'] },
      { key: 'alt+shift+[Backslash]', ifMode: 'math', command: ['insert', '|'] },
      {
          key: 'alt+[Backslash]',
          ifMode: 'math',
          command: ['insert', '$$\\backslash$$'],
      },
      {
          key: '/',
          ifMode: 'math',
          command: ['insert', '$$\\frac{#@}{#?}$$'],
      },
      {
          key: 'alt+/',
          ifMode: 'math',
          command: ['insert', '$$\\/$$'],
      },
      {
          key: '[NumpadDivide]',
          ifMode: 'math',
          command: ['insert', '$$\\frac{#@}{#?}$$'],
      },
      {
          key: 'alt+[NumpadDivide]',
          ifMode: 'math',
          command: ['insert', '\\frac{#?}{#@}'],
      },
      {
          key: 'shift+[Backquote]',
          ifMode: 'math',
          command: ['insert', '$$\\~$$'],
      },
      // Accessibility
      { key: 'alt+shift+k', command: 'toggleKeystrokeCaption' },
      { key: 'alt+[Space]', command: 'toggleVirtualKeyboard' },
      // Note: On Mac OS (as of 10.12), there is a bug/behavior that causes
      // a beep to be generated with certain command+control key combinations.
      // The workaround is to create a default binding file to silence them.
      // In ~/Library/KeyBindings/DefaultKeyBinding.dict add these entries:
      /*
         {
            "^@\UF701" = "noop:";
            "^@\UF702" = "noop:";
            "^@\UF703" = "noop:";
        }
        */
      {
          key: 'ctrl+alt+[ArrowUp]',
          command: ['speak', 'parent', { withHighlighting: false }],
      },
      {
          key: 'ctrl+alt+[ArrowDown]',
          command: ['speak', 'all', { withHighlighting: false }],
      },
  ];
  /**
   * Most commands can be associated to their keyboard shortcuts from the
   * DEFAULT_KEYBINDINGS table above, for example 'speakSelection' -> 'ctrl+KeyR'
   * However, those that contain complex commands are more ambiguous.
   * For example, '\sqrt' -> 'math:alt+KeyV'. This table provides the reverse
   * mapping for those more complex commands. It is used when displaying
   * keybindings for specific commands in the popover.
   */
  const REVERSE_KEYBINDINGS = {
      '\\theta': 'alt+q',
      '\\sqrt': ['alt+v', 'ctrl+[Digit2]'],
      '\\pi': 'alt+p',
      '\\prod': 'alt+shift+p',
      '\\sum': 'alt+w',
      '\\int': 'alt+b',
      '\\cup': 'alt+u',
      '\\cap': 'alt+n',
      '\\bigcup': 'alt+shift+u',
      '\\bigcap': 'alt+shift+n',
      '\\forall': 'alt+shift+a',
      '\\exists': 'alt+shift+e',
      '\\infty': 'alt+[Digit5]',
      '\\wedge': 'alt+[Digit5]',
      '\\vee': 'alt+shift+[Digit6]',
      '\\differentialD': 'alt+d',
      '\\partial': 'alt+shift+d',
      '\\frac': 'Slash',
      '\\emptyset': 'alt+o',
      '\\varnothing': 'alt+shift+o',
      '\\~': '~',
  };

  /**
   * @param p The platform to test against.
   */
  function matchPlatform(p) {
      if ((navigator === null || navigator === void 0 ? void 0 : navigator.platform) && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)) {
          let plat;
          if (/^(mac)/i.test(navigator.platform)) {
              plat = 'macos';
          }
          else if (/^(win)/i.test(navigator.platform)) {
              plat = 'windows';
          }
          else if (/(android)/i.test(navigator.userAgent)) {
              plat = 'android';
          }
          else if (/(iphone)/i.test(navigator.userAgent) ||
              /(ipod)/i.test(navigator.userAgent) ||
              /(ipad)/i.test(navigator.userAgent)) {
              plat = 'ios';
          }
          else if (/\bcros\b/i.test(navigator.userAgent)) {
              plat = 'chromeos';
          }
          if (p.startsWith('!') && !p.endsWith(plat))
              return true;
          if (p.endsWith(plat))
              return true;
      }
      return false;
  }
  /**
   * Return the selector matching the keystroke.
   * The keybindings and keystroke should be in normalized form
   * (i.e. using key code, e.g. `[KeyQ]`
   *
   */
  function getCommandForKeybinding(keybindings, mode, keystroke) {
      if (keybindings.length === 0)
          return '';
      // Try to match using a virtual keystroke
      for (let i = keybindings.length - 1; i >= 0; i--) {
          if (keybindings[i].key === keystroke) {
              if (!keybindings[i].ifMode || keybindings[i].ifMode === mode) {
                  return keybindings[i].command;
              }
          }
      }
      return '';
  }
  function commandToString(command) {
      let result = command;
      if (isArray(result)) {
          result =
              result.length > 0 ? result[0] + '(' + result.slice(1).join('') + ')' : '';
      }
      return result;
  }
  function getKeybindingsForCommand(keybindings, command) {
      let result = [];
      if (typeof command === 'string') {
          const candidate = REVERSE_KEYBINDINGS[command];
          if (isArray(candidate)) {
              result = candidate.slice();
          }
          else if (candidate) {
              result.push(candidate);
          }
      }
      // A command can be either a simple selector, or a selector
      // with arguments. Normalize it to a string
      const normalizedCommand = commandToString(command);
      const regex = new RegExp('^' +
          normalizedCommand
              .replace('\\', '\\\\')
              .replace('|', '\\|')
              .replace('*', '\\*')
              .replace('$', '\\$')
              .replace('^', '\\^') +
          '([^*a-zA-Z]|$)');
      keybindings.forEach((keybinding) => {
          if (regex.test(commandToString(keybinding.command))) {
              result.push(keybinding);
          }
      });
      return result.map(getKeybindingMarkup);
  }
  /**
   * Return a human readable representation of a shortcut as a markup string
   * @revisit
   */
  function getKeybindingMarkup(keystroke) {
      var _a;
      const useSymbol = matchPlatform('macos') || matchPlatform('ios');
      const segments = keystroke.split('+');
      let result = '';
      for (const segment of segments) {
          if (!useSymbol && result) {
              result += '<span class="ML__shortcut-join">+</span>';
          }
          if (segment.startsWith('Key')) {
              result += segment.slice(3, 4);
          }
          else if (segment.startsWith('Digit')) {
              result += segment.slice(5, 6);
          }
          else {
              result += (_a = {
                  'cmd': '\u2318',
                  'meta': useSymbol ? '\u2318' : 'command',
                  'shift': useSymbol ? '\u21E7' : 'shift',
                  'alt': useSymbol ? '\u2325' : 'alt',
                  'ctrl': useSymbol ? '\u2303' : 'control',
                  '\n': useSymbol ? '\u23CE' : 'return',
                  '[return]': useSymbol ? '\u23CE' : 'return',
                  '[enter]': useSymbol ? '\u2324' : 'enter',
                  '[tab]': useSymbol ? '\u21E5' : 'tab',
                  // 'Esc':          useSymbol ? '\u238b' : 'esc',
                  '[escape]': 'esc',
                  '[backspace]': useSymbol ? '\u232B' : 'backspace',
                  '[delete]': useSymbol ? '\u2326' : 'del',
                  '[pageup]': useSymbol ? '\u21DE' : 'page up',
                  '[pagedown]': useSymbol ? '\u21DF' : 'page down',
                  '[home]': useSymbol ? '\u2912' : 'home',
                  '[end]': useSymbol ? '\u2913' : 'end',
                  '[space]': 'space',
                  '[equal]': '=',
                  '[minus]': '-',
                  '[comma]': ',',
                  '[backslash]': '\\',
                  '[bracketleft]': '[',
                  '[bracketright]': ']',
                  'semicolon': ';',
                  'period': '.',
                  'comma': ',',
                  'minus': '-',
                  'equal': '=',
                  'quote': "'",
                  'bracketLeft': '[',
                  'bracketRight': ']',
                  'backslash': '\\',
                  'intlbackslash': '\\',
                  'backquote': '`',
                  'slash': '/',
                  'numpadmultiply': '* &#128290;',
                  'numpaddivide': '/ &#128290;',
                  'numpadsubtract': '- &#128290;',
                  'numpadadd': '+ &#128290;',
                  'numpaddecimal': '. &#128290;',
                  'numpadcomma': ', &#128290;',
                  'help': 'help',
                  'left': '\u21E0',
                  'up': '\u21E1',
                  'right': '\u21E2',
                  'down': '\u21E3',
                  '[arrowleft]': '\u21E0',
                  '[arrowup]': '\u21E1',
                  '[arrowright]': '\u21E2',
                  '[arrowdown]': '\u21E3',
                  '[digit0]': '0',
                  '[digit1]': '1',
                  '[digit2]': '2',
                  '[digit3]': '3',
                  '[digit4]': '4',
                  '[digit5]': '5',
                  '[digit6]': '6',
                  '[digit7]': '7',
                  '[digit8]': '8',
                  '[digit9]': '9',
              }[segment.toLowerCase()]) !== null && _a !== void 0 ? _a : segment.toUpperCase();
          }
      }
      return result;
  }
  function normalizeKeybinding(keybinding) {
      if (keybinding.ifPlatform &&
          !/^!?(macos|windows|android|ios|chromeos|other)$/.test(keybinding.ifPlatform)) {
          throw new Error(`Unexpected platform "${keybinding.ifPlatform}" for keybinding ${keybinding.key}`);
      }
      let segments = keybinding.key.split('+');
      const key = segments.pop();
      let platform = keybinding.ifPlatform;
      segments = segments.map((segment) => {
          const x = segment.toLowerCase();
          if (x === 'cmd') {
              if (platform && platform !== 'macos' && platform !== 'ios') {
                  throw new Error('Unexpected "cmd" modifier with platform "' + platform + '"');
              }
              if (!platform) {
                  platform = matchPlatform('ios') ? 'ios' : 'macos';
              }
              return 'meta';
          }
          if (x === 'win') {
              if (platform && platform !== 'windows') {
                  throw new Error('Unexpected "win" modifier with platform "' + platform + '"');
              }
              platform = 'windows';
              return 'meta';
          }
          return x;
      });
      if (platform && !matchPlatform(platform))
          return undefined;
      if (!/^\[(.*)]$/.test(key)) {
          // This is not a key code (e.g. `[KeyQ]`) it's a simple key (e.g. `a`)
          // Convert it to a key code
          const code = getCodeForKey(key);
          if (!code) {
              throw new Error('Invalid keybinding key "' + keybinding.key + '"');
          }
          segments = segments.concat(code.split('+'));
      }
      else {
          segments.push(key);
      }
      return { ...keybinding, ifPlatform: platform, key: segments.join('+') };
  }
  /**
   * Parse the input keybindings and return them normalized:
   * - 'keys' are transformed to 'code' according to the current keyboard layout
   * - keybindings that don't apply to the current platform are removed
   */
  function normalizeKeybindings(keybindings, onError) {
      const result = [];
      const errors = [];
      keybindings.forEach((x) => {
          try {
              const keybinding = normalizeKeybinding(x);
              if (keybinding) {
                  result.push(keybinding);
              }
          }
          catch (error) {
              if (error instanceof Error) {
                  errors.push(error.message);
              }
          }
      });
      if (errors.length > 0) {
          onError(errors);
      }
      return result;
  }

  /**
   * Attach event handlers to an element so that it will react by executing
   * a command when pressed.
   * `"command"` can be:
   * - a string, a single selector
   * - an array, whose first element is a selector followed by one or more arguments.
   * - an object, with the following keys:
   *    * 'default': command performed on up, with a down + up sequence with no
   *      delay between down and up
   *    * 'alt', 'shift', 'altshift' keys: command performed on up with
   *      one of these modifiers pressed
   *    * 'pressed': command performed on 'down'
   *    * 'pressAndHoldStart': command performed after a tap/down followed by a
   * delay (optional)
   *    * 'pressAndHoldEnd': command performed on up, if there was a delay
   *     between down and up, if absent, 'default' is performed
   * The value of the keys specify which selector (string
   * or array) to perform depending on the keyboard state when the button is
   * pressed.
   *
   * The 'pressed' and 'active' classes will get added to
   * the element, as the :hover and :active pseudo-classes are not reliable
   * (at least on Chrome Android).
   *
   */
  function attachButtonHandlers(executeCommand, element, command) {
      if (typeof command === 'object' && (command.default || command.pressed)) {
          // Attach the default (no modifiers pressed) command to the element
          if (command.default) {
              element.dataset.command = JSON.stringify(command.default);
          }
          if (command.alt) {
              element.dataset.commandAlt = JSON.stringify(command.alt);
          }
          if (command.altshift) {
              element.dataset.commandAltshift = JSON.stringify(command.altshift);
          }
          if (command.shift) {
              element.dataset.commandShift = JSON.stringify(command.shift);
          }
          // .pressed: command to perform when the button is pressed (i.e.
          // on mouse down/touch). Otherwise the command is performed when
          // the button is released
          if (command.pressed) {
              element.dataset.commandPressed = JSON.stringify(command.pressed);
          }
          if (command.pressAndHoldStart) {
              element.dataset.commandPressAndHoldStart = JSON.stringify(command.pressAndHoldStart);
          }
          if (command.pressAndHoldEnd) {
              element.dataset.commandPressAndHoldEnd = JSON.stringify(command.pressAndHoldEnd);
          }
      }
      else {
          // We need to turn the command into a string to attach it to the dataset
          // associated with the button (the command could be an array made of a
          // selector and one or more parameters)
          element.dataset.command = JSON.stringify(command);
      }
      let pressHoldStart;
      let pressHoldElement;
      let touchID;
      let syntheticTarget; // Target while touch move
      let pressAndHoldTimer;
      on(element, 'mousedown touchstart:passive', (ev) => {
          if (ev.type !== 'mousedown' || ev.buttons === 1) {
              // The primary button was pressed or the screen was tapped.
              ev.stopPropagation();
              // Can't preventDefault() in a passive listener
              if (ev.type !== 'touchstart') {
                  ev.preventDefault();
              }
              element.classList.add('pressed');
              pressHoldStart = Date.now();
              // Record the ID of the primary touch point for tracking on touchmove
              if (ev.type === 'touchstart') {
                  touchID = ev.changedTouches[0].identifier;
              }
              // Parse the JSON to get the command (and its optional arguments)
              // and perform it immediately
              const command = element.getAttribute('data-command-pressed');
              if (command) {
                  executeCommand(JSON.parse(command));
              }
              // If there is a `press and hold start` command, perform it
              // after a delay, if we're still pressed by then.
              const pressAndHoldStartCommand = element.getAttribute('data-command-pressAndHoldStart');
              if (pressAndHoldStartCommand) {
                  pressHoldElement = element;
                  if (pressAndHoldTimer) {
                      clearTimeout(pressAndHoldTimer);
                  }
                  pressAndHoldTimer = window.setTimeout(() => {
                      if (element.classList.contains('pressed')) {
                          executeCommand(JSON.parse(pressAndHoldStartCommand));
                      }
                  }, 300);
              }
          }
      });
      on(element, 'mouseleave touchcancel', () => {
          element.classList.remove('pressed');
          // Let command = el.getAttribute('data-' + config.namespace +
          //     'command-pressAndHoldEnd');
          // const now = Date.now();
          // if (command && now > pressHoldStart + 300) {
          //     executeCommand(JSON.parse(command));
          // }
      });
      on(element, 'touchmove:passive', (ev) => {
          // Unlike with mouse tracking, touch tracking only sends events
          // to the target that was originally tapped on. For consistency,
          // we want to mimic the behavior of the mouse interaction by
          // tracking the touch events and dispatching them to potential targets
          // ev.preventDefault(); // can't preventDefault inside a passive event handler
          for (let i = 0; i < ev.changedTouches.length; i++) {
              if (ev.changedTouches[i].identifier === touchID) {
                  // Found a touch matching our primary/tracked touch
                  const target = document.elementFromPoint(ev.changedTouches[i].clientX, ev.changedTouches[i].clientY);
                  if (target !== syntheticTarget && syntheticTarget) {
                      syntheticTarget.dispatchEvent(new MouseEvent('mouseleave'), {
                          bubbles: true,
                      });
                      syntheticTarget = null;
                  }
                  if (target) {
                      syntheticTarget = target;
                      target.dispatchEvent(new MouseEvent('mouseenter', {
                          bubbles: true,
                          buttons: 1,
                      }));
                  }
              }
          }
      });
      on(element, 'mouseenter', (ev) => {
          if (ev.buttons === 1) {
              element.classList.add('pressed');
          }
      });
      on(element, 'mouseup touchend click', (ev) => {
          if (syntheticTarget) {
              ev.stopPropagation();
              ev.preventDefault();
              const target = syntheticTarget;
              syntheticTarget = null;
              target.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
              return;
          }
          element.classList.remove('pressed');
          element.classList.add('active');
          if (ev.type === 'click' && ev.detail !== 0) {
              // This is a click event triggered by a mouse interaction
              // (and not a keyboard interaction)
              // Ignore it, we'll handle the mouseup (or touchend) instead.
              ev.stopPropagation();
              ev.preventDefault();
              return;
          }
          // Since we want the active state to be visible for a while,
          // use a timer to remove it after a short delay
          window.setTimeout(() => {
              element.classList.remove('active');
          }, 150);
          let command = element.getAttribute('data-command-pressAndHoldEnd');
          const now = Date.now();
          // If the button has not been pressed for very long or if we were
          // not the button that started the press and hold, don't consider
          // it a press-and-hold.
          if (element !== pressHoldElement || now < pressHoldStart + 300) {
              command = undefined;
          }
          if (!command && ev.altKey && ev.shiftKey) {
              command = element.getAttribute('data-command-altshift');
          }
          if (!command && ev.altKey) {
              command = element.getAttribute('data-command-alt');
          }
          if (!command && ev.shiftKey) {
              command = element.getAttribute('data-command-shift');
          }
          if (!command) {
              command = element.getAttribute('data-command');
          }
          if (command) {
              // Parse the JSON to get the command (and its optional arguments)
              // and perform it
              executeCommand(JSON.parse(command));
          }
          ev.stopPropagation();
          ev.preventDefault();
      });
  }

  // A textual description of a LaTeX command.
  // The value can be either a single string, or an array of string
  // in order to provide alternatives or additional context.
  // In that case, the first string in the array should be appropriate
  // to be spoken for accessibility.
  const NOTES = {
      '\\text': 'roman text',
      '\\textrm': 'roman text',
      '\\textnormal': 'roman text',
      '\\textit': 'italic text',
      '\\textbf': 'bold text',
      '\\texttt': 'monospaced text',
      '\\textsf': 'sans-serif text',
      '\\mathrm': ['roman', '(upright)'],
      '\\mathbf': 'bold',
      '\\bf': 'bold',
      '\\bold': 'bold',
      '\\mathit': 'italic',
      '\\mathbb': 'blackboard',
      '\\mathscr': 'script',
      '\\mathtt': ['typewriter', '(monospaced)'],
      '\\mathsf': 'sans-serif',
      '\\mathcal': 'caligraphic',
      '\\frak': ['fraktur', '(gothic)'],
      '\\mathfrak': ['fraktur', '(gothic)'],
      '\\textcolor': 'text color',
      '\\color': 'color',
      '\\forall': 'for all',
      '\\exists': 'there exists',
      '\\nexists': 'there does not exist',
      '\\frac': 'fraction',
      '\\dfrac': 'display fraction',
      '\\cfrac': 'continuous fraction',
      '\\tfrac': 'text fraction',
      '\\binom': 'binomial coefficient',
      '\\dbinom': 'display binomial coefficient',
      '\\tbinom': 'text binomial coefficient',
      '\\pdiff': 'partial differential',
      '\\vec': 'vector',
      '\\check': 'caron',
      '\\acute': 'acute',
      '\\breve': 'breve',
      '\\tilde': 'tilde',
      '\\dot': 'dot',
      '\\hat': ['hat', 'circumflex'],
      '\\ddot': 'double dot',
      '\\bar': 'bar',
      '\\prime': 'prime',
      '\\doubleprime': 'double prime',
      '\\varnothing': 'empty set',
      '\\emptyset': 'empty set',
      '\\subseteq': 'subset of or <br>equal to',
      '\\supseteq': 'superset of or <br>equal to',
      '\\supset': 'superset of',
      '\\subset': 'subset of',
      '\\partial': 'partial derivative',
      '\\bigcup': 'union',
      '\\bigcap': 'intersection',
      '\\approx': 'approximately equal to',
      '\\notin': 'not an element of',
      '\\in': ['element of', 'included in'],
      '\\infty': 'infinity',
      '\\land': 'logical and',
      '\\sqrt': 'square root',
      '\\prod': 'product',
      '\\sum': 'summation',
      '\\amalg': ['amalgamation', 'coproduct', 'free product', 'disjoint union'],
      '\\cup': 'union with',
      '\\cap': 'intersection with',
      '\\int': 'integral',
      '\\iint': 'surface integral',
      '\\oint': 'curve integral',
      '\\iiint': 'volume integral',
      '\\iff': 'if and only if',
      '\\ln': 'natural logarithm',
      '\\boldsymbol': 'bold',
      '\\setminus': 'set subtraction',
      '\\stackrel': 'relation with symbol above',
      '\\stackbin': 'operator with symbol above',
      '\\underset': 'symbol with annotation below',
      '\\overset': 'symbol with annotation above',
      '\\hslash': ['h-bar', 'Planck constant'],
      '\\gtrsim': 'greater than or <br>similar to',
      '\\propto': 'proportional to',
      '\\equiv': 'equivalent to',
      '\\!': ['negative thin space', '(-3 mu)'],
      '\\ ': ['space', '(6 mu)'],
      '\\,': ['thin space', '(3 mu)'],
      '\\:': ['medium space', '(4 mu)'],
      '\\;': ['thick space', '(5 mu)'],
      '\\quad': ['1 em space', '(18 mu)'],
      '\\qquad': ['2 em space', '(36 mu)'],
      '\\enskip': ['&#189; em space', '(9 mu)'],
      '\\mp': 'minus or plus',
      '\\pm': 'plus or minus',
      '\\Im': 'Imaginary part of',
      '\\Re': 'Real part of',
      '\\gothicCapitalR': 'Real part of',
      '\\gothicCapitalI': 'Imaginary part part of',
      '\\differentialD': 'differential d',
      '\\aleph': [
          'aleph',
          'infinite cardinal',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Cardinal_number">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\beth': [
          'beth',
          'beth number',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Beth_number">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\gimel': [
          'gimel',
          'gimel function',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Gimel_function">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\O': 'empty set',
      '\\N': 'set of <br>natural numbers',
      '\\Z': 'set of <br>integers',
      '\\Q': 'set of <br>rational numbers',
      '\\C': 'set of <br>complex numbers',
      '\\R': 'set of <br>real numbers',
      '\\P': 'set of <br>prime numbers',
      '\\lesseqqgtr': 'less than, equal to or<br> greater than',
      '\\gnapprox': 'greater than and <br>not approximately',
      '\\lnapprox': 'lesser than and <br>not approximately',
      '\\j': 'dotless j',
      '\\i': 'dotless i',
      '\\cdot': 'centered dot',
      '\\lmoustache': 'left moustache',
      '\\rmoustache': 'right moustache',
      '\\nabla': ['nabla', 'del', 'differential vector operator'],
      '\\square': [
          'square',
          'd’Alembert operator',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/D%27Alembert_operator">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\blacksquare': [
          'black square',
          'end of proof',
          'tombstone',
          'Halmos symbol',
      ],
      '\\Box': 'end of proof',
      '\\colon': ['such that', 'ratio'],
      '\\coloneq': ['is defined by', 'is assigned'],
      '\\Colon': ['is defined by', 'as'],
      '\\_': ['underbar', 'underscore'],
      '\\ll': 'much less than',
      '\\gg': 'much greater than',
      '\\doteq': 'approximately equal to',
      '\\Doteq': 'approximately equal to',
      '\\doteqdot': 'approximately equal to',
      '\\cong': ['isomorphism of', '(for algebras, modules...)'],
      '\\det': ['determinant of', '(of a matrix)'],
      '\\dotplus': 'Cartesian product algebra',
      '\\otimes': [
          'tensor product',
          '(of algebras)',
          'Kronecker product',
          '(of matrices)',
      ],
      '\\oplus': ['direct sum', '(of modules)'],
      '\\lb': 'base-2 logarithm',
      '\\lg': 'base-10 logarithm',
      '\\wp': [
          'Weierstrass P',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Weierstrass%27s_elliptic_functions">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\wr': [
          'wreath product',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Wreath_product">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\top': ['tautology', 'Proposition P is universally true'],
      '\\bot': ['contradiction', 'Proposition P is contradictory'],
      '\\mid': ['probability', 'of event A given B'],
      '\\mho': [
          'Siemens',
          'electrical conductance in SI unit',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Siemens_(unit)">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\Longrightarrow': 'implies',
      '\\Longleftrightarrow': 'if, and only if,',
      '\\prec': 'precedes',
      '\\preceq': 'precedes or is equal to',
      '\\succ': 'succeedes',
      '\\succeq': 'succeedes or is equal to',
      '\\perp': ['is perpendicular to', 'is independent of'],
      '\\models': [
          'entails',
          'double-turnstyle, models',
          'is a semantic consequence of',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Double_turnstile">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\vdash': [
          'satisfies',
          'turnstyle, assertion sign',
          'syntactic inference',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Turnstile_(symbol)">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\implies': ['implies', 'logical consequence'],
      '\\impliedby': ['implied by', 'logical consequence'],
      '\\surd': ['surd', 'root of', 'checkmark'],
      '\\ltimes': [
          'semi direct product',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\rtimes': [
          'semi direct product',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\leftthreetimes': [
          'semi direct product',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\rightthreetimes': [
          'semi direct product',
          '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>',
      ],
      '\\divideontimes': ['divide on times'],
      '\\curlywedge': 'nor',
      '\\curlyvee': 'nand',
      '\\simeq': 'is group isomorphic with',
      '\\vartriangleleft': ['is a normal subgroup of', 'is an ideal ring of'],
      '\\circ': ['circle', 'ring', 'function composition'],
      '\\rlap': ['overlap right', '\\rlap{x}o'],
      '\\llap': ['overlap left', 'o\\llap{/}'],
      '\\colorbox': ['color box', '\\colorbox{#fbc0bd}{...}'],
      '\\ast': ['asterisk', 'reflexive closure (as a superscript)'],
      '\\bullet': 'bullet',
      '\\lim': 'limit',
  };
  function getNote(symbol) {
      let result = NOTES[symbol] || '';
      if (isArray(result)) {
          result = result.join('<br>');
      }
      return result;
  }
  function latexToMarkup(latex, mf) {
      const parse = parseLatex(latex, 'math', null, mf.options.macros);
      const spans = Atom.render({
          mathstyle: MATHSTYLES.displaystyle,
          macros: mf.options.macros,
      }, parse);
      const wrapper = makeStruts(new Span(spans, 'ML__base'), 'ML__mathlive');
      return wrapper.toMarkup();
  }
  function showPopoverWithLatex(mf, latex, displayArrows) {
      if (!latex || latex.length === 0) {
          hidePopover(mf);
          return;
      }
      const command = latex;
      const commandMarkup = latexToMarkup(latex, mf);
      const commandNote = getNote(command);
      const keybinding = getKeybindingsForCommand(mf.keybindings, command).join('<br>');
      let template = displayArrows
          ? '<div class="ML__popover__prev-shortcut" role="button" aria-label="Previous suggestion"><span><span>&#x25B2;</span></span></div>'
          : '';
      template += '<span class="ML__popover__content" role="button">';
      template += '<div class="ML__popover__command">' + commandMarkup + '</div>';
      if (commandNote) {
          template += '<div class="ML__popover__note">' + commandNote + '</div>';
      }
      if (keybinding) {
          template += '<div class="ML__popover__shortcut">' + keybinding + '</div>';
      }
      template += '</span>';
      template += displayArrows
          ? '<div class="ML__popover__next-shortcut" role="button" aria-label="Next suggestion"><span><span>&#x25BC;</span></span></div>'
          : '';
      mf.popover.innerHTML = mf.options.createHTML(template);
      let element = mf.popover.querySelectorAll('.ML__popover__content');
      if (element && element.length > 0) {
          attachButtonHandlers((command) => mf.executeCommand(command), element[0], {
              default: ['complete', 'accept-suggestion'],
          });
      }
      element = mf.popover.querySelectorAll('.ML__popover__prev-shortcut');
      if (element && element.length > 0) {
          attachButtonHandlers((command) => mf.executeCommand(command), element[0], 'previousSuggestion');
      }
      element = mf.popover.querySelectorAll('.ML__popover__next-shortcut');
      if (element && element.length > 0) {
          attachButtonHandlers((command) => mf.executeCommand(command), element[0], 'nextSuggestion');
      }
      setTimeout(() => {
          const caretPoint = getCaretPoint(mf.field);
          if (caretPoint)
              setPopoverPosition(mf, caretPoint);
          mf.popover.classList.add('is-visible');
      }, 32);
  }
  function updatePopoverPosition(mf, options) {
      var _a;
      // Check that the mathfield is still valid
      // (we're calling ourselves from requestAnimationFrame() and the mathfield
      // could have gotten destroyed
      if (!mf.element || mf.element.mathfield !== mf)
          return;
      // If the popover pane is visible...
      if (!mf.popover.classList.contains('is-visible'))
          return;
      if (options === null || options === void 0 ? void 0 : options.deferred) {
          // Call ourselves again later, typically after the
          // rendering/layout of the DOM has been completed
          // (don't do it on next frame, it might be too soon)
          window.setTimeout(() => updatePopoverPosition(mf), 100);
          return;
      }
      if (((_a = mf.model.at(mf.model.position)) === null || _a === void 0 ? void 0 : _a.type) !== 'latex') {
          hidePopover(mf);
      }
      else {
          // ... get the caret position
          const caretPoint = getCaretPoint(mf.field);
          if (caretPoint)
              setPopoverPosition(mf, caretPoint);
      }
  }
  function setPopoverPosition(mf, position) {
      // Get screen width & height (browser compatibility)
      const screenHeight = window.innerHeight ||
          document.documentElement.clientHeight ||
          document.body.clientHeight;
      const screenWidth = window.innerWidth ||
          document.documentElement.clientWidth ||
          document.body.clientWidth;
      // Get scrollbar size. This would be 0 in mobile device (also no needed).
      const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
      const scrollbarHeight = window.innerHeight - document.documentElement.clientHeight;
      const virtualkeyboardHeight = mf.virtualKeyboard.height;
      // Prevent screen overflow horizontal.
      if (position.x + mf.popover.offsetWidth / 2 > screenWidth - scrollbarWidth) {
          mf.popover.style.left = `${screenWidth - mf.popover.offsetWidth - scrollbarWidth}px`;
      }
      else if (position.x - mf.popover.offsetWidth / 2 < 0) {
          mf.popover.style.left = '0';
      }
      else {
          mf.popover.style.left = `${position.x - mf.popover.offsetWidth / 2}px`;
      }
      // And position the popover right below or above the caret
      if (position.y + mf.popover.offsetHeight + 5 >
          screenHeight - scrollbarHeight - virtualkeyboardHeight) {
          mf.popover.classList.add('ML__popover--reverse-direction');
          mf.popover.style.top = `${position.y - position.height - mf.popover.offsetHeight - 5}px`;
      }
      else {
          mf.popover.classList.remove('ML__popover--reverse-direction');
          mf.popover.style.top = `${position.y + 5}px`;
      }
  }
  function hidePopover(mf) {
      mf.suggestionIndex = 0;
      if (mf.popover) {
          mf.popover.classList.remove('is-visible');
          mf.popover.innerHTML = '';
      }
  }

  /*
   * Return a hash (32-bit integer) representing the content of the mathfield
   * (but not the selection state)
   */
  function hash(latex) {
      let result = 0;
      for (let i = 0; i < latex.length; i++) {
          result = result * 31 + latex.charCodeAt(i);
          result = Math.trunc(result); // Force it to a 32-bit integer
      }
      return Math.abs(result);
  }
  function requestUpdate(mathfield) {
      if (!mathfield.dirty) {
          mathfield.dirty = true;
          requestAnimationFrame(() => {
              if (isValidMathfield(mathfield) && mathfield.dirty) {
                  render(mathfield);
              }
          });
      }
  }
  /**
   * Lay-out the mathfield and generate the DOM.
   *
   * This is usually done automatically, but if the font-size, or other geometric
   * attributes are modified, outside of MathLive, this function may need to be
   * called explicitly.
   *
   */
  function render(mathfield, renderOptions) {
      renderOptions = renderOptions !== null && renderOptions !== void 0 ? renderOptions : {};
      mathfield.dirty = false;
      const { model } = mathfield;
      //
      // 1. Stop and reset read aloud state
      //
      if (window.mathlive === undefined) {
          window.mathlive = {};
      }
      //
      // 2. Update selection state and blinking cursor (caret)
      //
      model.root.caret = undefined;
      model.root.isSelected = false;
      model.root.containsCaret = false;
      model.atoms.forEach((a) => {
          a.caret = undefined;
          a.isSelected = false;
          a.containsCaret = false;
      });
      const hasFocus = mathfield.hasFocus() && !mathfield.options.readOnly;
      if (model.selectionIsCollapsed) {
          model.at(model.position).caret = hasFocus ? mathfield.mode : '';
      }
      else {
          model.getAtoms(model.selection, { includeChildren: true }).forEach((x) => {
              x.isSelected = true;
          });
      }
      if (hasFocus) {
          let ancestor = model.at(model.position).parent;
          let done = false;
          while (ancestor && !done) {
              // The `surd` and `leftright` types of atom have a special display,
              // mark the first of them in the path from the caret (`position`) to
              // the root  as such.
              if (ancestor.type === 'surd' || ancestor.type === 'leftright') {
                  ancestor.containsCaret = true;
                  done = true;
              }
              ancestor = ancestor.parent;
          }
      }
      //
      // 3. Render spans
      //
      const spans = model.root.render(new Context({
          mathstyle: MATHSTYLES.displaystyle,
          letterShapeStyle: mathfield.options.letterShapeStyle,
          atomIdsSettings: {
              // Using the hash as a seed for the ID
              // keeps the IDs the same until the content of the field changes.
              seed: hash(Atom.toLatex(model.root, { expandMacro: false })),
              // The `groupNumbers` flag indicates that extra spans should be generated
              // to represent group of atoms, for example, a span to group
              // consecutive digits to represent a number.
              groupNumbers: renderOptions.forHighlighting,
          },
          smartFence: mathfield.options.smartFence,
          macros: mathfield.options.macros,
      }));
      //
      // 4. Construct struts around the spans
      //
      const base = new Span(spans, 'ML__base');
      const wrapper = makeStruts(base, 'ML__mathlive');
      wrapper.attributes = {
          // Sometimes Google Translate kicks in an attempts to 'translate' math
          // This doesn't work very well, so turn off translate
          'translate': 'no',
          // Hint to screen readers to not attempt to read this <span>.
          // They should use instead the 'aria-label' attribute.
          'aria-hidden': 'true',
      };
      //
      // 5. Generate markup and accessible node
      //
      const isFocused = mathfield.field.classList.contains('ML__focused');
      if (isFocused && !hasFocus) {
          mathfield.field.classList.remove('ML__focused');
      }
      else if (!isFocused && hasFocus) {
          mathfield.field.classList.add('ML__focused');
      }
      mathfield.field.innerHTML = mathfield.options.createHTML(wrapper.toMarkup({
          hskip: 0,
          hscale: mathfield.options.horizontalSpacingScale,
      }));
      mathfield.fieldContent = mathfield.field.querySelector('.ML__mathlive');
      mathfield.accessibleNode.innerHTML = mathfield.options.createHTML('<math xmlns="http://www.w3.org/1998/Math/MathML">' +
          atomsToMathML(model.root, mathfield.options) +
          '</math>');
      //
      // 6. Render the selection
      //
      if (!model.selectionIsCollapsed) {
          renderSelection(mathfield);
          // (re-render a bit later because the layout, sometimes, is not
          // up to date by now)
          setTimeout(() => renderSelection(mathfield), 32);
      }
      else {
          // The popover is relative to the location of the caret
          setTimeout(() => updatePopoverPosition(mathfield), 32);
      }
  }
  function renderSelection(mathfield) {
      mathfield.field.querySelectorAll('.ML__selection').forEach((x) => {
          x.remove();
      });
      const selectionRects = getSelectionBounds(mathfield);
      selectionRects.forEach((x) => {
          const selectionElement = document.createElement('div');
          selectionElement.classList.add('ML__selection');
          selectionElement.style.position = 'absolute';
          selectionElement.style.left = `${x.left}px`;
          selectionElement.style.top = `${x.top}px`;
          selectionElement.style.width = `${Math.ceil(x.right - x.left)}px`;
          selectionElement.style.height = `${Math.ceil(x.bottom - x.top - 1)}px`;
          mathfield.field.insertBefore(selectionElement, mathfield.field.childNodes[0]);
      });
  }

  class ModeEditor {
      constructor(name) {
          ModeEditor._registry[name] = this;
      }
      static onPaste(mode, mathfield, ev) {
          return ModeEditor._registry[mode].onPaste(mathfield, ev);
      }
      static onCopy(mode, mathfield, ev) {
          ModeEditor._registry[mode].onCopy(mathfield, ev);
      }
      static insert(mode, model, text, options = {}) {
          return ModeEditor._registry[mode].insert(model, text, options);
      }
      // eslint-disable-next-line @typescript-eslint/no-empty-function
      onCopy(_mathfield, _ev) { }
      onPaste(_mathfield, _ev) {
          return false;
      }
      insert(_model, _text, _options) {
          return false;
      }
  }
  ModeEditor._registry = {};

  class LatexModeEditor extends ModeEditor {
      constructor() {
          super('latex');
      }
      createAtom(command, _style) {
          return new LatexAtom(command);
      }
      onPaste(mathfield, ev) {
          const text = ev.clipboardData.getData('text/plain');
          if (text) {
              if (this.insert(mathfield.model, text)) {
                  requestUpdate(mathfield);
              }
              ev.preventDefault();
              ev.stopPropagation();
              return true;
          }
          return false;
      }
      onCopy(mathfield, ev) {
          const value = mathfield.model.selectionIsCollapsed
              ? [0, mathfield.model.lastOffset]
              : range(mathfield.selection);
          ev.clipboardData.setData('text/plain', mathfield.getValue(value, 'latex-expanded'));
          // Prevent the current document selection from being written to the clipboard.
          ev.preventDefault();
      }
      insert(model, text, options) {
          if (!options)
              options = {};
          if (!options.insertionMode)
              options.insertionMode = 'replaceSelection';
          if (!options.selectionMode)
              options.selectionMode = 'placeholder';
          const { suppressChangeNotifications } = model;
          if (options.suppressChangeNotifications) {
              model.suppressChangeNotifications = true;
          }
          const savedSuppressChangeNotifications = model.suppressChangeNotifications;
          model.suppressChangeNotifications = true;
          // Delete any selected items
          if (options.insertionMode === 'replaceSelection' &&
              !model.selectionIsCollapsed) {
              model.position = model.deleteAtoms(range(model.selection));
          }
          else if (options.insertionMode === 'replaceAll') {
              model.root.setChildren([], 'body');
              model.position = 0;
          }
          else if (options.insertionMode === 'insertBefore') {
              model.collapseSelection('backward');
          }
          else if (options.insertionMode === 'insertAfter') {
              model.collapseSelection('forward');
          }
          const newAtoms = [];
          // Short-circuit the tokenizer and parser if in command mode
          for (const c of text) {
              if (COMMAND_MODE_CHARACTERS.test(c)) {
                  newAtoms.push(new LatexAtom(c));
              }
          }
          //
          // Insert the new atoms
          //
          const cursor = model.at(model.position);
          const lastNewAtom = cursor.parent.addChildrenAfter(newAtoms, cursor);
          // Prepare to dispatch notifications
          model.suppressChangeNotifications = savedSuppressChangeNotifications;
          if (options.selectionMode === 'before') ;
          else if (options.selectionMode === 'item') {
              model.setSelection(model.anchor, model.offsetOf(lastNewAtom));
          }
          else if (lastNewAtom) {
              model.position = model.offsetOf(lastNewAtom);
          }
          contentDidChange(model);
          model.suppressChangeNotifications = suppressChangeNotifications;
          return true;
      }
  }
  function getLatexGroup(model) {
      return model.atoms.find((x) => x instanceof LatexGroupAtom);
  }
  function getLatexGroupBody(model) {
      var _a, _b;
      return ((_b = (_a = model.atoms
          .find((x) => x instanceof LatexGroupAtom)) === null || _a === void 0 ? void 0 : _a.body.filter((x) => x instanceof LatexAtom)) !== null && _b !== void 0 ? _b : []);
  }
  function getCommandSuggestionRange(model, options) {
      let start = 0;
      let found = false;
      const last = Number.isFinite(options === null || options === void 0 ? void 0 : options.before)
          ? options.before
          : model.lastOffset;
      while (start <= last && !found) {
          const atom = model.at(start);
          found = atom instanceof LatexAtom && atom.isSuggestion;
          if (!found)
              start++;
      }
      if (!found)
          return [undefined, undefined];
      let end = start;
      let done = false;
      while (end <= last && !done) {
          const atom = model.at(end);
          done = !(atom instanceof LatexAtom && atom.isSuggestion);
          if (!done)
              end++;
      }
      return [start - 1, end - 1];
  }
  new LatexModeEditor();

  function updateAutocomplete(mathfield, options) {
      var _a;
      const { model } = mathfield;
      // Remove any error indicator and any suggestions
      getLatexGroupBody(model).forEach((x) => {
          if (x.isSuggestion) {
              x.parent.removeChild(x);
          }
          else {
              x.isError = false;
          }
      });
      if (!model.selectionIsCollapsed) {
          hidePopover(mathfield);
          return;
      }
      // The current command is the sequence of atom around the insertion point
      // that ends on the left with a '\\' and on the right with a non-command
      // character.
      const command = [];
      let atom = model.at(model.position);
      while (atom && atom instanceof LatexAtom && /[a-zA-Z*]$/.test(atom.value)) {
          command.unshift(atom);
          atom = atom.leftSibling;
      }
      if (atom && atom instanceof LatexAtom && atom.value === '\\') {
          // We found the beginning of a command, include the atoms after the
          // insertion point
          command.unshift(atom);
          atom = model.at(model.position).rightSibling;
          while (atom && atom instanceof LatexAtom && /[a-zA-Z*]$/.test(atom.value)) {
              command.push(atom);
              atom = atom.rightSibling;
          }
      }
      const commandString = command.map((x) => x.value).join('');
      const suggestions = commandString ? suggest(commandString) : [];
      if (suggestions.length === 0) {
          if (/^\\[a-zA-Z\\*]+$/.test(commandString)) {
              // This looks like a command name, but not a known one
              command.forEach((x) => {
                  x.isError = true;
              });
          }
          hidePopover(mathfield);
          return;
      }
      mathfield.suggestionIndex = (_a = options === null || options === void 0 ? void 0 : options.atIndex) !== null && _a !== void 0 ? _a : 0;
      if (mathfield.suggestionIndex < 0) {
          mathfield.suggestionIndex = suggestions.length - 1;
      }
      const suggestion = suggestions[mathfield.suggestionIndex % suggestions.length].match;
      if (suggestion !== commandString) {
          const lastAtom = command[command.length - 1];
          lastAtom.parent.addChildrenAfter([...suggestion.slice(commandString.length - suggestion.length)].map((x) => new LatexAtom(x, { isSuggestion: true })), lastAtom);
          requestUpdate(mathfield);
      }
      showPopoverWithLatex(mathfield, suggestion, suggestions.length > 1);
  }
  function acceptCommandSuggestion(model) {
      model
          .getAtoms(getCommandSuggestionRange(model, { before: model.position }))
          .forEach((x) => {
          x.isSuggestion = false;
      });
  }
  /**
   * When in latex mode, insert the latex being edited and leave latex mode
   *
   */
  function complete(mathfield, completion = 'accept', options) {
      var _a, _b;
      hidePopover(mathfield);
      const latexGroup = getLatexGroup(mathfield.model);
      if (!latexGroup)
          return false;
      if (completion === 'accept-suggestion') {
          const suggestion = getLatexGroupBody(mathfield.model).filter((x) => x.isSuggestion);
          if (suggestion.length === 0)
              return false;
          suggestion.forEach((x) => {
              x.isSuggestion = false;
          });
          mathfield.model.position = mathfield.model.offsetOf(suggestion[suggestion.length - 1]);
          return true;
      }
      const body = getLatexGroupBody(mathfield.model).filter((x) => !x.isSuggestion);
      const latex = body.map((x) => x.value).join('');
      const newPos = latexGroup.leftSibling;
      latexGroup.parent.removeChild(latexGroup);
      mathfield.model.position = mathfield.model.offsetOf(newPos);
      mathfield.mode = (_a = options === null || options === void 0 ? void 0 : options.mode) !== null && _a !== void 0 ? _a : 'math';
      if (completion === 'reject')
          return true;
      ModeEditor.insert('math', mathfield.model, latex, {
          macros: mathfield.options.macros,
          selectionMode: ((_b = options === null || options === void 0 ? void 0 : options.selectItem) !== null && _b !== void 0 ? _b : false) ? 'item' : 'placeholder',
      });
      mathfield.snapshot();
      mathfield.model.announce('replacement');
      return true;
  }

  // @revisit: move to mathfield.vibrate()
  const HAPTIC_FEEDBACK_DURATION = 3; // In ms
  const COMMANDS = {};
  /**
   * Register one or more selectors.
   * The selector function return true to request a render update of the expression.
   */
  function register$1(commands, options) {
      options = options !== null && options !== void 0 ? options : { target: 'mathfield', canUndo: false };
      Object.keys(commands).forEach((selector) => {
          console.assert(!COMMANDS[selector], 'Selector already defined: ', selector);
          COMMANDS[selector] = { ...options, fn: commands[selector] };
      });
  }
  function getCommandTarget(command) {
      var _a;
      let selector;
      selector = isArray(command) ? command[0] : command;
      // Convert kebab case (like-this) to camel case (likeThis).
      selector = selector.replace(/-\w/g, (m) => m[1].toUpperCase());
      return (_a = COMMANDS[selector]) === null || _a === void 0 ? void 0 : _a.target;
  }
  function perform(mathfield, command) {
      var _a;
      if (!command) {
          return false;
      }
      let selector;
      let args = [];
      let handled = false;
      let dirty = false;
      if (isArray(command)) {
          selector = command[0];
          args = command.slice(1);
      }
      else {
          selector = command;
      }
      // Convert kebab case (like-this) to camel case (likeThis).
      selector = selector.replace(/-\w/g, (m) => m[1].toUpperCase());
      const commandTarget = (_a = COMMANDS[selector]) === null || _a === void 0 ? void 0 : _a.target;
      // TODO Refactor this method
      // Actually using commands by this way increase code complexity,
      //  ideally all code must be moved under command code, maybe it is
      //  a good idea to implement new Command API with additional hooks
      //  and callbacks to make command code more transparent. Now logic of
      //  commands are splitted between command function, registration options
      //  and there.
      if (commandTarget === 'model') {
          if (/^(delete|transpose|add)/.test(selector)) {
              if (selector !== 'deleteBackward') {
                  mathfield.resetKeystrokeBuffer();
              }
          }
          if (/^(delete|transpose|add)/.test(selector) &&
              mathfield.mode !== 'latex') {
              // Update the undo state to account for the current selection
              mathfield.popUndoStack();
              mathfield.snapshot();
          }
          COMMANDS[selector].fn(mathfield.model, ...args);
          if (/^(delete|transpose|add)/.test(selector) &&
              mathfield.mode !== 'latex') {
              mathfield.snapshot();
          }
          if (mathfield.mode === 'latex') {
              updateAutocomplete(mathfield);
          }
          dirty = true;
          handled = true;
      }
      else if (commandTarget === 'virtual-keyboard') {
          dirty = mathfield.virtualKeyboard.executeCommand(command);
          handled = true;
      }
      else if (COMMANDS[selector]) {
          dirty = COMMANDS[selector].fn(mathfield, ...args);
          handled = true;
      }
      else {
          throw new Error('Unknown command "' + selector + '"');
      }
      // Virtual keyboard commands do not update mathfield state
      if (commandTarget !== 'virtual-keyboard') {
          // If the command changed the selection so that it is no longer
          // collapsed, or if it was an editing command, reset the inline
          // shortcut buffer and the user style
          if (!mathfield.model.selectionIsCollapsed ||
              /^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(selector)) {
              mathfield.resetKeystrokeBuffer();
              mathfield.style = {};
          }
      }
      // Render the mathlist
      if (dirty) {
          requestUpdate(mathfield);
      }
      return handled;
  }
  /**
   * Perform a command, but:
   * * focus the mathfield
   * * provide haptic and audio feedback
   * This is used by the virtual keyboard when command keys (delete, arrows, etc..)
   * are pressed.
   */
  function performWithFeedback(mathfield, selector) {
      var _a, _b, _c;
      // @revisit: have a registry of commands -> sound
      mathfield.focus();
      if (mathfield.options.keypressVibration && (navigator === null || navigator === void 0 ? void 0 : navigator.vibrate)) {
          navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
      }
      // Convert kebab case to camel case.
      selector = selector.replace(/-\w/g, (m) => m[1].toUpperCase());
      if (selector === 'moveToNextPlaceholder' ||
          selector === 'moveToPreviousPlaceholder' ||
          selector === 'complete') {
          (_a = mathfield.returnKeypressSound) === null || _a === void 0 ? void 0 : _a.play().catch(console.warn);
      }
      else if (selector === 'deleteBackward' ||
          selector === 'deleteForward' ||
          selector === 'deletePreviousWord' ||
          selector === 'deleteNextWord' ||
          selector === 'deleteToGroupStart' ||
          selector === 'deleteToGroupEnd' ||
          selector === 'deleteToMathFieldStart' ||
          selector === 'deleteToMathFieldEnd') {
          (_b = mathfield.deleteKeypressSound) === null || _b === void 0 ? void 0 : _b.play().catch(console.warn);
      }
      else {
          (_c = mathfield.keypressSound) === null || _c === void 0 ? void 0 : _c.play().catch(console.warn);
      }
      return mathfield.executeCommand(selector);
  }
  register$1({
      performWithFeedback: (mathfield, command) => performWithFeedback(mathfield, command),
  });
  function nextSuggestion(mathfield) {
      // The modulo of the suggestionIndex is used to determine which suggestion
      // to display, so no need to worry about rolling over.
      updateAutocomplete(mathfield, { atIndex: mathfield.suggestionIndex + 1 });
      return false;
  }
  function previousSuggestion(mathfield) {
      updateAutocomplete(mathfield, { atIndex: mathfield.suggestionIndex - 1 });
      return false;
  }
  register$1({
      complete,
      nextSuggestion,
      previousSuggestion,
  }, { target: 'mathfield', category: 'autocomplete' });

  // Import { getEnvironmentDefinition } from '../core/definitions';
  function addRowAfter(model) {
      contentDidChange(model);
      return true;
  }
  function addRowBefore(model) {
      contentDidChange(model);
      return true;
  }
  function addColumnAfter(model) {
      contentDidChange(model);
      return true;
  }
  function addColumnBefore(model) {
      contentDidChange(model);
      return true;
  }
  register$1({
      addRowAfter,
      addColumnAfter,
      addRowBefore,
      addColumnBefore,
  }, { target: 'model', category: 'array-edit' });

  // Import {
  //     arrayFirstCellByRow,
  //     arrayColRow,
  //     arrayAdjustRow,
  //     arrayIndex,
  //     arrayJoinColumns,
  //     arrayRemoveRow,
  //     arrayColumnCellCount,
  //     arrayRemoveColumn,
  //     arrayJoinRows,
  // } from './model-array';
  // function deleteFirstSiblingInArray(model: ModelPrivate): boolean {
  //     const contentWasChanging = model.suppressChangeNotifications;
  //     model.suppressChangeNotifications = true;
  //     const array = model.parent.array;
  //     if (arrayFirstCellByRow(array) === model.relation) {
  //         // (1) First cell:
  //         // delete array, replace it with linearized content
  //         const atoms = arrayJoinRows(array);
  //         model.path.pop();
  //         model.siblings().splice(model.anchorOffset(), 1, ...atoms);
  //         model._iter = null;
  //         setSelectionOffset(model, model.anchorOffset() - 1, atoms.length);
  //     } else {
  //         const colRow = arrayColRow(array, model.relation);
  //         if (colRow.col === 0) {
  //             // (2) First (non-empty) column (but not first row):
  //             // Move to the end of the last cell of the previous row
  //             const dest = arrayAdjustRow(array, colRow, -1);
  //             dest.col = array[dest.row].length - 1;
  //             model.path[model.path.length - 1].relation = ('cell' +
  //                 arrayIndex(array, dest)) as Relation;
  //             const destLength = array[dest.row][dest.col].length;
  //             // (2.1) Linearize it and merge it with last cell of previous row
  //             // (note that atoms could be empty if there are no non-empty
  //             // cells left in the row)
  //             const atoms = arrayJoinColumns(array[colRow.row]);
  //             array[dest.row][dest.col] = array[dest.row][dest.col].concat(atoms);
  //             setSelectionOffset(model, destLength - 1, atoms.length);
  //             // (2.2) Remove row
  //             arrayRemoveRow(array, colRow.row);
  //         } else {
  //             // (3) Non-first column
  //             // (3.1) If column is empty, remove it
  //             if (arrayColumnCellCount(array, colRow.col) === 0) {
  //                 arrayRemoveColumn(array, colRow.col);
  //                 colRow.col -= 1;
  //                 model.path[model.path.length - 1].relation = ('cell' +
  //                     arrayIndex(array, colRow)) as Relation;
  //                 const destCell = array[colRow.row][colRow.col];
  //                 setSelectionOffset(model, destCell.length - 1, 0);
  //             }
  //             // (3.2) merge cell with cell in previous column
  //         }
  //     }
  //     // Dispatch notifications
  //     model.suppressChangeNotifications = contentWasChanging;
  //     selectionDidChange(model);
  //     contentDidChange(model);
  //     return true;
  // }
  /**
   * Handle special cases when deleting an atom as per the table below
   * - deleting an empty numerator: demote fraction
   * - forward-deleting a square root: demote it
   * - delete last atom inside a square root: delete the square root
   * - delete last atom in a subsup: delete the subsup
   * - etc...
   *
   *
   * @param branch: if deleting inside an atom, the branch being delete
   * (always the first or last atom of the branch). If undefined, the atom
   * itself is about to be deleted.
   *
   * @return true if handled
   */
  function onDelete(model, direction, atom, branch) {
      var _a, _b, _c, _d, _e, _f;
      const { parent } = atom;
      if (atom instanceof LeftRightAtom) {
          //
          // 'leftright': \left\right
          //
          const atStart = (!branch && direction === 'forward') ||
              (branch === 'body' && direction === 'backward');
          const pos = atStart
              ? model.offsetOf(atom) - 1
              : model.offsetOf(atom.lastChild);
          if (!atStart && atom.leftDelim !== '?' && atom.leftDelim !== '.') {
              // Insert open fence
              parent.addChildBefore(new Atom('mopen', { value: atom.leftDelim }), atom);
          }
          else if (atStart && atom.rightDelim !== '?' && atom.rightDelim !== '.') {
              // Insert closing fence
              parent.addChildAfter(new Atom('mclose', { value: atom.rightDelim }), atom);
          }
          // Hoist body
          parent.addChildrenAfter(atom.removeBranch('body'), atom);
          parent.removeChild(atom);
          model.position = pos;
          return true;
      }
      if (atom.type === 'surd') {
          //
          // 'surd': square root
          //
          if ((direction === 'forward' && !branch) ||
              (direction === 'backward' && branch === 'body')) {
              // Before fwd or body 1st bwd: Demote body
              const pos = atom.leftSibling;
              if (atom.hasChildren) {
                  parent.addChildrenAfter(atom.removeBranch('body'), atom);
              }
              parent.removeChild(atom);
              model.position = model.offsetOf(pos);
          }
          else if (direction === 'forward' && branch === 'body') {
              // Body last fwd: move to after
              model.position = model.offsetOf(atom);
          }
          else if (!branch && direction === 'backward') {
              // After bwd: move to last of body
              if (atom.hasChildren) {
                  model.position = model.offsetOf(atom.lastChild);
              }
              else {
                  model.position = Math.max(model.offsetOf(atom) - 1);
                  parent.removeChild(atom);
              }
          }
          else if (branch === 'above') {
              if (atom.hasEmptyBranch('above')) {
                  atom.removeBranch('above');
              }
              if (direction === 'backward') {
                  // Above 1st
                  model.position = model.offsetOf(atom.leftSibling);
              }
              else {
                  // Above last
                  model.position = model.offsetOf(atom.body[0]);
              }
          }
          return true;
      }
      if (atom.type === 'box' || atom.type === 'enclose') {
          //
          // 'box': \boxed, \fbox 'enclose': \cancel
          //
          const pos = (branch && direction === 'backward') ||
              (!branch && direction === 'forward')
              ? atom.leftSibling
              : atom.lastChild;
          parent.addChildrenAfter(atom.removeBranch('body'), atom);
          parent.removeChild(atom);
          model.position = model.offsetOf(pos);
          return true;
      }
      if (atom.type === 'genfrac' || atom.type === 'overunder') {
          //
          // 'genfrac': \frac, \choose, etc...
          //
          if (!branch) {
              // After or before atom
              if (!atom.hasChildren)
                  return false;
              model.position = model.offsetOf(direction === 'forward' ? atom.firstChild : atom.lastChild);
              return true;
          }
          if ((direction === 'forward' && branch === 'above') ||
              (direction === 'backward' && branch === 'below')) {
              // Above last or below first: hoist
              const above = atom.removeBranch('above');
              const below = atom.removeBranch('below');
              parent.addChildrenAfter([...above, ...below], atom);
              parent.removeChild(atom);
              model.position = model.offsetOf(above.length > 0 ? above[above.length - 1] : below[0]);
              return true;
          }
          if (direction === 'backward') {
              // Above first: move to before
              model.position = model.offsetOf(atom.leftSibling);
              return true;
          }
          // Below last: move to after
          model.position = model.offsetOf(atom);
          return true;
      }
      if ((atom instanceof OperatorAtom && atom.isExtensibleSymbol) ||
          atom.type === 'msubsup') {
          //
          // Extensible operator: \sum, \int, etc...
          // Superscript/subscript carrier
          //
          if (!branch && direction === 'forward')
              return false;
          if (!branch) {
              if (atom.subscript || atom.superscript) {
                  const pos = direction === 'forward'
                      ? (_b = (_a = atom.superscript) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : (_c = atom.subscript) === null || _c === void 0 ? void 0 : _c[0] : (_e = (_d = atom.subscript) === null || _d === void 0 ? void 0 : _d[0].lastSibling) !== null && _e !== void 0 ? _e : (_f = atom.superscript) === null || _f === void 0 ? void 0 : _f[0].lastSibling;
                  model.position = model.offsetOf(pos);
                  return true;
              }
              return false;
          }
          if (branch && atom.hasEmptyBranch(branch)) {
              atom.removeBranch(branch);
          }
          if (!atom.hasChildren) {
              // We've removed the last branch of a msubsup
              const pos = direction === 'forward'
                  ? model.offsetOf(atom)
                  : Math.max(0, model.offsetOf(atom) - 1);
              atom.parent.removeChild(atom);
              model.position = pos;
              return true;
          }
          if (branch === 'superscript') {
              if (direction === 'backward') {
                  const pos = model.offsetOf(atom.firstChild) - 1;
                  console.assert(pos >= 0);
                  model.position = pos;
              }
              else if (atom.subscript) {
                  model.position = model.offsetOf(atom.subscript[0]);
              }
              else {
                  model.position = model.offsetOf(atom);
              }
          }
          else if (branch === 'subscript') {
              if (direction === 'backward' && atom.superscript) {
                  // Subscript first: move to superscript end
                  model.position = model.offsetOf(atom.superscript[0].lastSibling);
              }
              else if (direction === 'backward') {
                  // Subscript first: move to before
                  model.position = model.offsetOf(atom.firstChild) - 1;
              }
              else {
                  // Subscript last: move after
                  model.position = model.offsetOf(atom);
              }
          }
          return true;
      }
      return false;
  }
  /**
   * Delete the item at the current position
   */
  function deleteBackward(model) {
      if (!model.selectionIsCollapsed) {
          return deleteRange(model, range(model.selection));
      }
      return model.deferNotifications({ content: true, selection: true }, () => {
          let target = model.at(model.position);
          if (target && onDelete(model, 'backward', target))
              return;
          if (target === null || target === void 0 ? void 0 : target.isFirstSibling) {
              if (onDelete(model, 'backward', target.parent, target.treeBranch)) {
                  return;
              }
              target = null;
          }
          // At the first position: nothing to delete...
          if (!target) {
              model.announce('plonk');
              return;
          }
          const offset = model.offsetOf(target.leftSibling);
          target.parent.removeChild(target);
          model.announce('delete', null, [target]);
          model.position = offset;
      });
  }
  /**
   * Delete the item forward of the current position, update the position and
   * send notifications
   */
  function deleteForward(model) {
      if (!model.selectionIsCollapsed) {
          return deleteRange(model, range(model.selection));
      }
      return model.deferNotifications({ content: true, selection: true }, () => {
          var _a, _b;
          let target = model.at(model.position).rightSibling;
          if (target && onDelete(model, 'forward', target))
              return;
          if (!target) {
              target = model.at(model.position);
              if (target.isLastSibling &&
                  onDelete(model, 'forward', target.parent, target.treeBranch)) {
                  return;
              }
              target = null;
          }
          else if (model.at(model.position).isLastSibling &&
              onDelete(model, 'forward', target.parent, target.treeBranch)) {
              return;
          }
          if (model.position === model.lastOffset || !target) {
              model.announce('plonk');
              return;
          }
          target.parent.removeChild(target);
          let sibling = (_a = model.at(model.position)) === null || _a === void 0 ? void 0 : _a.rightSibling;
          while ((sibling === null || sibling === void 0 ? void 0 : sibling.type) === 'msubsup') {
              sibling.parent.removeChild(sibling);
              sibling = (_b = model.at(model.position)) === null || _b === void 0 ? void 0 : _b.rightSibling;
          }
          model.announce('delete', null, [target]);
      });
  }
  /**
   * Delete the specified range, as a result of a user action: this will
   * account for special cases such as deleting empty denominator, and will
   * provide appropriate feedback to screen readers.
   *
   * Use model.deleteAtoms() for operations that are not a result of
   * user action.
   */
  function deleteRange(model, range) {
      return model.deferNotifications({ content: true, selection: true }, () => {
          model.deleteAtoms(range);
          model.position = range[0];
      });
  }

  class CompositionAtom extends Atom {
      constructor(value, options) {
          var _a;
          super('composition', { mode: (_a = options === null || options === void 0 ? void 0 : options.mode) !== null && _a !== void 0 ? _a : 'math', value });
      }
      get computedStyle() {
          return {};
      }
      render(context) {
          // In theory one would like to be able to draw the clauses
          // in an active composition. Unfortunately, there are
          // no API to give access to those clauses :(
          const result = new Span(this.value, 'ML__composition', 'composition');
          this.bind(context, result);
          if (this.caret)
              result.caret = this.caret;
          return [result];
      }
      toLatex(_options) {
          return '';
      }
  }

  /**
   * Create, remove or update a composition atom at the current location
   */
  function updateComposition(model, s) {
      const cursor = model.at(model.position);
      // We're creating or updating a composition
      if (cursor.type === 'composition') {
          // Composition already in progress, update it
          cursor.value = s;
      }
      else {
          // No composition yet, create one
          // Remove previous caret
          const { caret } = cursor;
          cursor.caret = '';
          // Create 'composition' atom, with caret
          const atom = new CompositionAtom(s, { mode: cursor.mode });
          atom.caret = caret;
          cursor.parent.addChildAfter(atom, cursor);
          // Move cursor one past the composition zone
          model.position += 1;
      }
  }
  /**
   * Remove the composition zone
   */
  function removeComposition(model) {
      const cursor = model.at(model.position);
      if (cursor.type === 'composition') {
          cursor.parent.removeChild(cursor);
          model.position -= 1;
      }
  }

  function getMode(model, offset) {
      const atom = model.at(offset);
      let result;
      if (atom) {
          result = atom.mode;
          let ancestor = atom.parent;
          while (!result && ancestor) {
              if (ancestor)
                  result = ancestor.mode;
              ancestor = ancestor.parent;
          }
      }
      return result;
  }

  function applyStyleToUnstyledAtoms(atom, style) {
      if (!atom || !style)
          return;
      if (isAtomArray(atom)) {
          // Apply styling options to each atom
          atom.forEach((x) => applyStyleToUnstyledAtoms(x, style));
      }
      else if (typeof atom === 'object') {
          if (!atom.style.color &&
              !atom.style.backgroundColor &&
              !atom.style.fontFamily &&
              !atom.style.fontShape &&
              !atom.style.fontSeries &&
              !atom.style.fontSize &&
              !atom.style.variant &&
              !atom.style.variantStyle) {
              atom.applyStyle(style);
              applyStyleToUnstyledAtoms(atom.body, style);
              applyStyleToUnstyledAtoms(atom.above, style);
              applyStyleToUnstyledAtoms(atom.below, style);
              applyStyleToUnstyledAtoms(atom.subscript, style);
              applyStyleToUnstyledAtoms(atom.superscript, style);
          }
      }
  }
  /**
   * Apply a style (color, background) to the selection.
   *
   * If the style is already applied to the selection, remove it. If the selection
   * has the style partially applied (i.e. only some sections), remove it from
   * those sections, and apply it to the entire selection.
   */
  function applyStyle(model, range, style, options) {
      function everyStyle(property, value) {
          let result = true;
          atoms.forEach((x) => {
              result = result && x.style[property] === value;
          });
          return result;
      }
      range = model.normalizeRange(range);
      if (range[0] === range[1])
          return false;
      const atoms = model.getAtoms(range, { includeChildren: true });
      if (options.operation === 'toggle') {
          if (style.color && everyStyle('color', style.color)) {
              // If the selection already has this color, turn it off
              style.color = 'none';
          }
          if (style.backgroundColor &&
              everyStyle('backgroundColor', style.backgroundColor)) {
              // If the selection already has this color, turn it off
              style.backgroundColor = 'none';
          }
          if (style.fontFamily && everyStyle('fontFamily', style.fontFamily)) {
              // If the selection already has this font family, turn it off
              style.fontFamily = 'none';
          }
          // If (style.series) style.fontSeries = style.series;
          if (style.fontSeries && everyStyle('fontSeries', style.fontSeries)) {
              // If the selection already has this series (weight), turn it off
              style.fontSeries = 'auto';
          }
          // If (style.shape) style.fontShape = style.shape;
          if (style.fontShape && everyStyle('fontShape', style.fontShape)) {
              // If the selection already has this shape (italic), turn it off
              style.fontShape = 'auto';
          }
          // If (style.size) style.fontSize = style.size;
          if (style.fontSize && everyStyle('fontSize', style.fontSize)) {
              // If the selection already has this size, reset it to default size
              style.fontSize = 'size5';
          }
      }
      atoms.forEach((x) => x.applyStyle(style));
      return true;
  }

  /*
   * Calculates the offset of the "next word".
   * This is inspired by the behavior of text editors on macOS, namely:
      blue   yellow
        ^-
           ^-------
   * That is:

   * (1) If starts with an alphanumerical character, find the first alphanumerical
   * character which is followed by a non-alphanumerical character
   *
   * The behavior regarding non-alphanumeric characters is less consistent.
   * Here's the behavior we use:
   *
   *   +=-()_:”     blue
   * ^---------
   *   +=-()_:”     blue
   *      ^---------
   *   +=-()_:”blue
   *      ^--------
   *
   * (2) If starts in whitespace, skip whitespace, then find first non-whitespace*
   *    followed by whitespace
   * (*) Pages actually uses the character class of the first non-whitespace
   * encountered.
   *
   * (3) If starts in a non-whitespace, non alphanumerical character, find the first
   *      whitespace
   *
   */
  function wordBoundaryOffset(model, offset, direction) {
      if (model.at(offset).mode !== 'text')
          return offset;
      const dir = direction === 'backward' ? -1 : +1;
      let result;
      if (LETTER_AND_DIGITS.test(model.at(offset).value)) {
          // (1) We start with an alphanumerical character
          let i = offset;
          let match;
          do {
              match =
                  model.at(i).mode === 'text' &&
                      LETTER_AND_DIGITS.test(model.at(i).value);
              i += dir;
          } while (model.at(i) && match);
          result = model.at(i) ? i - 2 * dir : i - dir;
      }
      else if (/\s/.test(model.at(offset).value)) {
          // (2) We start with whitespace
          // Skip whitespace
          let i = offset;
          while (model.at(i) &&
              model.at(i).mode === 'text' &&
              /\s/.test(model.at(i).value)) {
              i += dir;
          }
          if (!model.at(i)) {
              // We've reached the end
              result = i - dir;
          }
          else {
              let match = true;
              do {
                  match = model.at(i).mode === 'text' && !/\s/.test(model.at(i).value);
                  i += dir;
              } while (model.at(i) && match);
              result = model.at(i) ? i - 2 * dir : i - dir;
          }
      }
      else {
          // (3)
          let i = offset;
          // Skip non-whitespace
          while (model.at(i) &&
              model.at(i).mode === 'text' &&
              !/\s/.test(model.at(i).value)) {
              i += dir;
          }
          result = model.at(i) ? i : i - dir;
          let match = true;
          while (model.at(i) && match) {
              match = model.at(i).mode === 'text' && /\s/.test(model.at(i).value);
              if (match)
                  result = i;
              i += dir;
          }
          result = model.at(i) ? i - 2 * dir : i - dir;
      }
      return result - (dir > 0 ? 0 : 1);
  }
  /**
   * Keyboard navigation with alt/option:
   * Move the insertion point to the next/previous point of interest.
   * A point of interest is an atom of a different type (mbin, mord, etc...)
   * than the current focus.
   * If `extend` is true, the selection will be extended. Otherwise, it is
   * collapsed, then moved.
   * @todo array
   */
  function skip(model, direction, options) {
      var _a, _b, _c, _d, _e, _f, _g;
      const previousPosition = model.position;
      if (!((_a = options === null || options === void 0 ? void 0 : options.extend) !== null && _a !== void 0 ? _a : false)) {
          model.collapseSelection(direction);
      }
      let atom = model.at(model.position);
      if (direction === 'forward') {
          if (atom.type === 'msubsup') {
              atom = atom.rightSibling;
              if (!atom) {
                  atom = model.at(model.position + 1);
              }
          }
          else {
              atom = model.at(model.position + 1);
          }
      }
      if (!atom) {
          model.announce('plonk');
          return false;
      }
      let offset = model.offsetOf(atom);
      if (atom instanceof TextAtom) {
          //
          // We're in a text zone, skip word by word
          //
          offset = wordBoundaryOffset(model, offset, direction);
      }
      else if (atom instanceof LatexAtom) {
          //
          // We're in a command zone, skip suggestion
          //
          if (atom.isSuggestion) {
              // Since suggestions are always at the end, this must be forward
              console.assert(direction === 'forward');
              while (atom && atom instanceof LatexAtom) {
                  atom.isSuggestion = false;
                  offset = model.offsetOf(atom);
                  atom = atom.rightSibling;
              }
          }
          else if (direction === 'forward') {
              atom = atom.rightSibling;
              if (!atom || !(atom instanceof LatexAtom)) {
                  // At the end of the command
                  model.announce('plonk');
                  return false;
              }
              while (atom &&
                  atom instanceof LatexAtom &&
                  /[a-zA-Z*]/.test(atom.value)) {
                  offset = model.offsetOf(atom);
                  atom = atom.rightSibling;
              }
          }
          else {
              atom = atom.leftSibling;
              if (!atom || !(atom instanceof LatexAtom)) {
                  // At the start of the command
                  model.announce('plonk');
                  return false;
              }
              while (atom &&
                  atom instanceof LatexAtom &&
                  /[a-zA-Z*]/.test(atom.value)) {
                  offset = model.offsetOf(atom);
                  atom = atom.leftSibling;
              }
          }
      }
      else if (direction === 'forward' && atom.type === 'mopen') {
          //
          // Right before a 'mopen', skip to the corresponding balanced fence
          //
          let level = 0;
          do {
              if (atom.type === 'mopen') {
                  level += 1;
              }
              else if (atom.type === 'mclose') {
                  level -= 1;
              }
              atom = atom.rightSibling;
          } while (!atom.isLastSibling && level !== 0);
          offset = model.offsetOf(atom.leftSibling);
      }
      else if (direction === 'backward' && atom.type === 'mclose') {
          //
          // Right after a 'mclose', skip to the corresponding balanced fence
          //
          let level = 0;
          do {
              if (atom.type === 'mopen') {
                  level += 1;
              }
              else if (atom.type === 'mclose') {
                  level -= 1;
              }
              atom = atom.leftSibling;
          } while (!atom.isFirstSibling && level !== 0);
          offset = model.offsetOf(atom);
      }
      else if (direction === 'backward') {
          //
          // We're in a regular math zone (not before/after a fence)
          //
          if (atom.type === 'first') {
              while (offset > 0 && atom.type === 'first') {
                  offset -= 1;
                  atom = model.at(offset);
              }
          }
          else {
              const type = atom instanceof SubsupAtom ? atom.baseType : atom.type;
              if (atom.type === 'msubsup') {
                  // If we're after a 'msubsup', skip to its left sibling
                  // (the base of the super/subscript)
                  offset = model.offsetOf(model.at(offset).leftSibling);
              }
              offset -= 1;
              let nextType = (_b = model.at(offset)) === null || _b === void 0 ? void 0 : _b.type;
              // If (nextType === 'msubsup') {
              //     offset = model.offsetOf(model.at(offset).leftSibling);
              // }
              while (offset >= 0 && nextType === type) {
                  if (((_c = model.at(offset)) === null || _c === void 0 ? void 0 : _c.type) === 'msubsup') {
                      offset = model.offsetOf(model.at(offset).leftSibling);
                  }
                  else {
                      offset -= 1;
                  }
                  nextType = model.at(offset).type;
              }
          }
      }
      else {
          const { type } = atom;
          // If (atom.type === 'msubsup') {
          //     offset = model.offsetOf(model.at(offset).rightSibling);
          // }
          let nextType = (_d = model.at(offset)) === null || _d === void 0 ? void 0 : _d.type;
          const { lastOffset } = model;
          while (offset <= lastOffset &&
              (nextType === type || nextType === 'msubsup')) {
              while (((_e = model.at(offset).rightSibling) === null || _e === void 0 ? void 0 : _e.type) === 'msubsup') {
                  offset = model.offsetOf(model.at(offset).rightSibling);
              }
              offset += 1;
              nextType = (_f = model.at(offset)) === null || _f === void 0 ? void 0 : _f.type;
          }
          offset -= 1;
      }
      if ((_g = options === null || options === void 0 ? void 0 : options.extend) !== null && _g !== void 0 ? _g : false) {
          if (!model.setSelection(model.anchor, offset)) {
              model.announce('plonk');
              return false;
          }
      }
      else {
          if (offset === model.position) {
              model.announce('plonk');
              return false;
          }
          model.position = offset;
      }
      model.announce('move', previousPosition);
      return true;
  }
  /**
   * Handle keyboard navigation (arrow keys)
   */
  function move(model, direction, options) {
      var _a, _b, _c, _d;
      options = options !== null && options !== void 0 ? options : { extend: false };
      if (direction !== 'forward') {
          model.deleteAtoms(getCommandSuggestionRange(model));
      }
      if (direction === 'upward')
          return moveUpward(model, options);
      if (direction === 'downward')
          return moveDownward(model, options);
      const previousPosition = model.position;
      if (options.extend) {
          return model.extendSelection(direction);
      }
      if (model.selectionIsPlaceholder) {
          model.collapseSelection(direction);
          return move(model, direction);
      }
      if (!model.collapseSelection(direction)) {
          let pos = model.position + (direction === 'forward' ? +1 : -1);
          //
          // 1. Handle `captureSelection` and `skipBoundary`
          //
          if (direction === 'forward') {
              const atom = model.at(model.position + 1);
              if ((_a = atom === null || atom === void 0 ? void 0 : atom.parent) === null || _a === void 0 ? void 0 : _a.captureSelection) {
                  // When going forward, if in a capture selection, jump to
                  // after
                  pos = model.offsetOf(atom === null || atom === void 0 ? void 0 : atom.parent.lastChild) + 1;
              }
              else if (atom === null || atom === void 0 ? void 0 : atom.skipBoundary) {
                  // When going forward if next is skipboundary, move 2
                  pos += 1;
              }
              else if (atom instanceof LatexAtom && atom.isSuggestion) {
                  atom.isSuggestion = false;
              }
          }
          else if (direction === 'backward') {
              const atom = model.at(model.position - 1);
              if ((_b = atom === null || atom === void 0 ? void 0 : atom.parent) === null || _b === void 0 ? void 0 : _b.captureSelection) {
                  // When going backward, if in a capture selection, jump to
                  // before
                  pos = Math.max(0, model.offsetOf(atom === null || atom === void 0 ? void 0 : atom.parent.firstChild) - 1);
              }
              else if ((atom === null || atom === void 0 ? void 0 : atom.isFirstSibling) && ((_c = atom.parent) === null || _c === void 0 ? void 0 : _c.skipBoundary)) {
                  // When going backward, if land on first of group and previous is
                  // skipbounday,  move -2
                  pos -= 1;
              }
          }
          //
          // 2. Handle out of bounds
          //
          if (pos < 0 || pos > model.lastOffset) {
              // We're going out of bounds
              let result = true; // True => perform default handling
              if (!model.suppressChangeNotifications) {
                  result = (_d = model.hooks) === null || _d === void 0 ? void 0 : _d.moveOut(model, direction);
              }
              if (result)
                  model.announce('plonk');
              return result;
          }
          //
          // 3. Handle placeholder
          //
          setPositionHandlingPlaceholder(model, pos);
      }
      model.announce('move', previousPosition);
      return true;
  }
  function setPositionHandlingPlaceholder(model, pos) {
      var _a, _b, _c;
      if (((_a = model.at(pos)) === null || _a === void 0 ? void 0 : _a.type) === 'placeholder') {
          // We're going right of a placeholder: select it
          model.setSelection(pos - 1, pos);
      }
      else if (((_c = (_b = model.at(pos)) === null || _b === void 0 ? void 0 : _b.rightSibling) === null || _c === void 0 ? void 0 : _c.type) === 'placeholder') {
          // We're going left of a placeholder: select it
          model.setSelection(pos, pos + 1);
      }
      else {
          model.position = pos;
      }
  }
  function moveUpward(model, options) {
      var _a, _b, _c, _d;
      const extend = (_a = options === null || options === void 0 ? void 0 : options.extend) !== null && _a !== void 0 ? _a : false;
      model.collapseSelection('backward');
      // Find a target branch
      // This is to handle the case: `\frac{x}{\sqrt{y}}`. If we're at `y`
      // we'd expectto move to `x`, even though `\sqrt` doesn't have an 'above'
      // branch, but one of its ancestor does.
      let atom = model.at(model.position);
      while (atom && atom.treeBranch !== 'below') {
          atom = atom.parent;
      }
      if (atom) {
          if (extend) {
              model.setSelection(model.offsetOf(atom.parent.leftSibling), model.offsetOf(atom.parent));
          }
          else {
              // If branch doesn't exist, create it
              const branch = (_b = atom.parent.branch('above')) !== null && _b !== void 0 ? _b : atom.parent.createBranch('above');
              // Move to the last atom of the branch
              setPositionHandlingPlaceholder(model, model.offsetOf(branch[branch.length - 1]));
          }
          model.announce('move up');
          // } else if (model.parent.array) {
          //     // In an array
          //     let colRow = arrayColRow(model.parent.array, relation);
          //     colRow = arrayAdjustRow(model.parent.array, colRow, -1);
          //     if (colRow && arrayCell(model.parent.array, colRow)) {
          //         model.path[model.path.length - 1].relation = ('cell' +
          //             arrayIndex(model.parent.array, colRow)) as Relation;
          //         setSelectionOffset(model, model.anchorOffset());
          //         model.announce('moveUp');
          //     } else {
          //         move(model, 'backward', options);
          //     }
      }
      else if (!((_c = model.at(model.position).parent) === null || _c === void 0 ? void 0 : _c.parent)) {
          let result = true; // True => perform default handling
          if (!model.suppressChangeNotifications) {
              result = (_d = model.hooks) === null || _d === void 0 ? void 0 : _d.moveOut(model, 'upward');
          }
          model.announce(result ? 'plonk' : 'line');
          return result;
      }
      return true;
  }
  function moveDownward(model, options) {
      var _a, _b, _c, _d;
      const extend = (_a = options === null || options === void 0 ? void 0 : options.extend) !== null && _a !== void 0 ? _a : false;
      model.collapseSelection('forward');
      let atom = model.at(model.position);
      while (atom && atom.treeBranch !== 'above') {
          atom = atom.parent;
      }
      if (atom) {
          if (extend) {
              model.setSelection(model.offsetOf(atom.parent.leftSibling), model.offsetOf(atom.parent));
          }
          else {
              // If branch doesn't exist, create it
              const branch = (_b = atom.parent.branch('below')) !== null && _b !== void 0 ? _b : atom.parent.createBranch('below');
              // Move to the last atom of the branch
              setPositionHandlingPlaceholder(model, model.offsetOf(branch[branch.length - 1]));
          }
          model.announce('move down');
          //     // In an array
          //     let colRow = arrayColRow(model.parent.array, relation);
          //     colRow = arrayAdjustRow(model.parent.array, colRow, +1);
          //     // @revisit: validate this codepath
          //     if (colRow && arrayCell(model.parent.array, colRow)) {
          //         model.path[model.path.length - 1].relation = ('cell' +
          //             arrayIndex(model.parent.array, colRow)) as Relation;
          //         setSelectionOffset(model, model.anchorOffset());
          //         model.announce('moveDown');
          //     } else {
          //         move(model, 'forward', options);
          //     }
      }
      else if (!((_c = model.at(model.position).parent) === null || _c === void 0 ? void 0 : _c.parent)) {
          let result = true; // True => perform default handling
          if (!model.suppressChangeNotifications) {
              result = (_d = model.hooks) === null || _d === void 0 ? void 0 : _d.moveOut(model, 'downward');
          }
          model.announce(result ? 'plonk' : 'line');
          return result;
      }
      return true;
  }

  register$1({
      deleteAll: (model) => {
          return deleteRange(model, [0, -1]);
      },
      deleteForward: (model) => deleteForward(model),
      deleteBackward: (model) => deleteBackward(model),
      deleteNextWord: (model) => deleteRange(model, [
          model.anchor,
          wordBoundaryOffset(model, model.position, 'forward'),
      ]),
      deletePreviousWord: (model) => deleteRange(model, [
          model.anchor,
          wordBoundaryOffset(model, model.position, 'backward'),
      ]),
      deleteToGroupStart: (model) => deleteRange(model, [
          model.anchor,
          model.offsetOf(model.at(model.position).firstSibling),
      ]),
      deleteToGroupEnd: (model) => deleteRange(model, [
          model.anchor,
          model.offsetOf(model.at(model.position).lastSibling),
      ]),
      deleteToMathFieldStart: (model) => deleteRange(model, [model.anchor, 0]),
      deleteToMathFieldEnd: (model) => deleteRange(model, [model.anchor, -1]),
  }, { target: 'model', category: 'delete' });

  function moveAfterParent(model) {
      const previousPosition = model.position;
      if (!model.at(previousPosition).parent) {
          model.announce('plonk');
          return false;
      }
      model.position = model.offsetOf(model.at(model.position).parent);
      model.announce('move', previousPosition);
      return true;
  }
  function superscriptDepth(model) {
      let result = 0;
      let atom = model.at(model.position);
      let wasSuperscript = false;
      while (atom) {
          if (!atom.hasEmptyBranch('superscript') ||
              !atom.hasEmptyBranch('subscript')) {
              result += 1;
          }
          if (!atom.hasEmptyBranch('superscript')) {
              wasSuperscript = true;
          }
          else if (!atom.hasEmptyBranch('subscript')) {
              wasSuperscript = false;
          }
          atom = atom.parent;
      }
      return wasSuperscript ? result : 0;
  }
  function subscriptDepth(model) {
      let result = 0;
      let atom = model.at(model.position);
      let wasSubscript = false;
      while (atom) {
          if (!atom.hasEmptyBranch('superscript') ||
              !atom.hasEmptyBranch('subscript')) {
              result += 1;
          }
          if (!atom.hasEmptyBranch('superscript')) {
              wasSubscript = false;
          }
          else if (!atom.hasEmptyBranch('subscript')) {
              wasSubscript = true;
          }
          atom = atom.parent;
      }
      return wasSubscript ? result : 0;
  }
  /**
   * Switch the cursor to the superscript and select it. If there is no subscript
   * yet, create one.
   */
  function moveToSuperscript(model) {
      var _a;
      model.collapseSelection();
      if (superscriptDepth(model) >= model.mathfield.options.scriptDepth[1]) {
          model.announce('plonk');
          return false;
      }
      let target = model.at(model.position);
      if (target.limits !== 'limits' && target.limits !== 'auto') {
          // This atom can't have a superscript/subscript:
          // add an adjacent `msubsup` atom instead.
          if (((_a = model.at(model.position + 1)) === null || _a === void 0 ? void 0 : _a.type) !== 'msubsup') {
              target.parent.addChildAfter(new SubsupAtom({
                  baseType: target.type,
                  style: model.at(model.position).computedStyle,
              }), target);
          }
          target = model.at(model.position + 1);
      }
      // Ensure there is a superscript branch
      target.createBranch('superscript');
      model.setSelection(model.getSiblingsRange(model.offsetOf(target.superscript[0])));
      return true;
  }
  /**
   * Switch the cursor to the subscript and select it. If there is no subscript
   * yet, create one.
   */
  function moveToSubscript(model) {
      var _a;
      model.collapseSelection();
      if (subscriptDepth(model) >= model.mathfield.options.scriptDepth[0]) {
          model.announce('plonk');
          return false;
      }
      let target = model.at(model.position);
      if (target.limits !== 'limits' && target.limits !== 'auto') {
          // This atom can't have a superscript/subscript:
          // add an adjacent `msubsup` atom instead.
          if (((_a = model.at(model.position + 1)) === null || _a === void 0 ? void 0 : _a.type) !== 'msubsup') {
              target.parent.addChildAfter(new Atom('msubsup', {
                  mode: target.mode,
                  value: '\u200B',
                  style: model.at(model.position).computedStyle,
              }), target);
          }
          target = model.at(model.position + 1);
      }
      // Ensure there is a subscript branch
      target.createBranch('subscript');
      model.setSelection(model.getSiblingsRange(model.offsetOf(target.subscript[0])));
      return true;
  }
  /**
   * Return an array of tabbable elements, approximately in the order a browser
   * would (the browsers are inconsistent), which is first by accounting
   * for non-null tabIndex, then null tabIndex, then document order of focusable
   * elements.
   */
  function getTabbableElements() {
      // Const focussableElements = `a[href]:not([disabled]),
      // button:not([disabled]),
      // textarea:not([disabled]),
      // input[type=text]:not([disabled]),
      // select:not([disabled]),
      // [contentEditable="true"],
      // [tabindex]:not([disabled]):not([tabindex="-1"])`;
      // // Get all the potentially focusable elements
      // // and exclude (1) those that are invisible (width and height = 0)
      // // (2) not the active element
      // // (3) the ancestor of the active element
      // return Array.prototype.filter.call(
      //     document.querySelectorAll(focussableElements),
      //     (element) =>
      //         ((element.offsetWidth > 0 || element.offsetHeight > 0) &&
      //             !element.contains(document.activeElement)) ||
      //         element === document.activeElement
      // );
      function tabbable(element) {
          const regularTabbables = [];
          const orderedTabbables = [];
          const candidates = [
              ...element.querySelectorAll(`input, select, textarea, a[href], button, 
        [tabindex], audio[controls], video[controls],
        [contenteditable]:not([contenteditable="false"]), details>summary`),
          ].filter(isNodeMatchingSelectorTabbable);
          candidates.forEach((candidate, i) => {
              const candidateTabindex = getTabindex(candidate);
              if (candidateTabindex === 0) {
                  regularTabbables.push(candidate);
              }
              else {
                  orderedTabbables.push({
                      documentOrder: i,
                      tabIndex: candidateTabindex,
                      node: candidate,
                  });
              }
          });
          return orderedTabbables
              .sort((a, b) => a.tabIndex === b.tabIndex
              ? a.documentOrder - b.documentOrder
              : a.tabIndex - b.tabIndex)
              .map((a) => a.node)
              .concat(regularTabbables);
      }
      function isNodeMatchingSelectorTabbable(element) {
          if (!isNodeMatchingSelectorFocusable(element) ||
              isNonTabbableRadio(element) ||
              getTabindex(element) < 0) {
              return false;
          }
          return true;
      }
      function isNodeMatchingSelectorFocusable(node) {
          if (node.disabled ||
              (node.tagName === 'INPUT' && node.type === 'hidden') ||
              isHidden(node)) {
              return false;
          }
          return true;
      }
      function getTabindex(node) {
          const tabindexAttr = Number.parseInt(node.getAttribute('tabindex'), 10);
          if (!Number.isNaN(tabindexAttr)) {
              return tabindexAttr;
          }
          // Browsers do not return `tabIndex` correctly for contentEditable nodes;
          // so if they don't have a tabindex attribute specifically set, assume it's 0.
          if (node.contentEditable === 'true') {
              return 0;
          }
          // In Chrome, <audio controls/> and <video controls/> elements get a default
          //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
          //  yet they are still part of the regular tab order; in FF, they get a default
          //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
          //  order, consider their tab index to be 0
          if ((node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO') &&
              node.getAttribute('tabindex') === null) {
              return 0;
          }
          return node.tabIndex;
      }
      function isNonTabbableRadio(node) {
          return (node.tagName === 'INPUT' &&
              node.type === 'radio' &&
              !isTabbableRadio(node));
      }
      function getCheckedRadio(nodes, form) {
          for (const node of nodes) {
              if (node.checked && node.form === form) {
                  return node;
              }
          }
          return null;
      }
      function isTabbableRadio(node) {
          if (!node.name) {
              return true;
          }
          const radioScope = node.form || node.ownerDocument;
          const radioSet = radioScope.querySelectorAll('input[type="radio"][name="' + node.name + '"]');
          const checked = getCheckedRadio(radioSet, node.form);
          return !checked || checked === node;
      }
      function isHidden(element) {
          if (element === document.activeElement ||
              element.contains(document.activeElement)) {
              return false;
          }
          if (getComputedStyle(element).visibility === 'hidden')
              return true;
          // Note that browsers generally don't consider the bounding rect
          // as a criteria to determine if an item is focusable, but we want
          // to exclude the invisible textareas used to capture keyoard input.
          const bounds = element.getBoundingClientRect();
          if (bounds.width === 0 || bounds.height === 0)
              return true;
          while (element) {
              if (getComputedStyle(element).display === 'none')
                  return true;
              element = element.parentElement;
          }
          return false;
      }
      return tabbable(document.body);
  }
  /**
   * Move to the next/previous placeholder or empty child list.
   * @return False if no placeholder found and did not move
   */
  function leap(model, dir, callHooks = true) {
      var _a, _b;
      const dist = dir === 'forward' ? 1 : -1;
      if (model.at(model.anchor).type === 'placeholder') {
          // If we're already at a placeholder, move by one more (the placeholder
          // is right after the insertion point)
          move(model, dir);
      }
      // Candidate placeholders are atom of type 'placeholder'
      // or empty children list (except for the root: if the root is empty,
      // it is not a valid placeholder)
      const atoms = model.getAllAtoms(model.position + dist);
      if (dir === 'backward')
          atoms.reverse();
      const placeholders = atoms.filter((atom) => atom.type === 'placeholder' ||
          (atom.treeDepth > 0 && atom.isFirstSibling && atom.isLastSibling));
      // If no placeholders were found, call handler or move to the next focusable
      // element in the document
      if (placeholders.length === 0) {
          const handled = !callHooks || !((_b = (_a = model.hooks).tabOut) === null || _b === void 0 ? void 0 : _b.call(_a, model, dir));
          if (handled) {
              model.announce('plonk');
              return false;
          }
          const tabbable = getTabbableElements();
          if (!document.activeElement || tabbable.length === 1) {
              model.announce('plonk');
              return false;
          }
          let index = tabbable.indexOf(document.activeElement) + dist;
          if (index < 0)
              index = tabbable.length - 1;
          if (index >= tabbable.length)
              index = 0;
          tabbable[index].focus();
          if (index === 0) {
              model.announce('plonk');
              return false;
          }
          return true;
      }
      // Set the selection to the next placeholder
      const previousPosition = model.position;
      const newPosition = model.offsetOf(placeholders[0]);
      if (placeholders[0].type === 'placeholder') {
          model.setSelection(newPosition - 1, newPosition);
      }
      else {
          model.position = newPosition;
      }
      model.announce('move', previousPosition);
      return true;
  }
  /**
   * If cursor is currently in:
   * - superscript: move to subscript, creating it if necessary
   * - subscript: move to superscript, creating it if necessary
   * - numerator: move to denominator
   * - denominator: move to numerator
   * - otherwise: move to superscript
   */
  register$1({
      moveToOpposite: (model) => {
          const OPPOSITE_RELATIONS = {
              superscript: 'subscript',
              subscript: 'superscript',
              above: 'below',
              below: 'above',
          };
          const cursor = model.at(model.position);
          const { parent } = cursor;
          if (!parent) {
              model.announce('plonk');
              return false;
          }
          const relation = cursor.treeBranch;
          let oppositeRelation;
          if (typeof relation === 'string') {
              oppositeRelation = OPPOSITE_RELATIONS[relation];
          }
          if (!oppositeRelation) {
              if (!cursor.limits) {
                  return moveToSuperscript(model);
              }
              return moveToSubscript(model);
          }
          if (!parent.branch(oppositeRelation)) {
              // Don't have children of the opposite relation yet
              // Add them
              parent.createBranch(oppositeRelation);
          }
          return model.setSelection(model.getBranchRange(model.offsetOf(parent), oppositeRelation));
      },
      moveBeforeParent: (model) => {
          const { parent } = model.at(model.position);
          if (!parent) {
              model.announce('plonk');
              return false;
          }
          model.position = model.offsetOf(parent);
          return true;
      },
      moveAfterParent: (model) => moveAfterParent(model),
      moveToNextPlaceholder: (model) => leap(model, 'forward'),
      moveToPreviousPlaceholder: (model) => leap(model, 'backward'),
      moveToNextChar: (model) => move(model, 'forward'),
      moveToPreviousChar: (model) => move(model, 'backward'),
      moveUp: (model) => move(model, 'upward'),
      moveDown: (model) => move(model, 'downward'),
      moveToNextWord: (model) => skip(model, 'forward'),
      moveToPreviousWord: (model) => skip(model, 'backward'),
      moveToGroupStart: (model) => {
          const pos = model.offsetOf(model.at(model.position).firstSibling);
          if (pos === model.position) {
              model.announce('plonk');
              return false;
          }
          model.position = pos;
          return true;
      },
      moveToGroupEnd: (model) => {
          const pos = model.offsetOf(model.at(model.position).lastSibling);
          if (pos === model.position) {
              model.announce('plonk');
              return false;
          }
          model.position = pos;
          return true;
      },
      moveToMathFieldStart: (model) => {
          if (model.position === 0) {
              model.announce('plonk');
              return false;
          }
          model.position = 0;
          return true;
      },
      moveToMathFieldEnd: (model) => {
          if (model.position === model.lastOffset) {
              model.announce('plonk');
              return false;
          }
          model.position = model.lastOffset;
          return true;
      },
      moveToSuperscript: (model) => moveToSuperscript(model),
      moveToSubscript: (model) => moveToSubscript(model),
  }, { target: 'model', category: 'selection-anchor' });

  /**
   * Return true if the atom could be a part of a number
   * i.e. "-12354.568"
   */
  function isNumber$1(atom) {
      if (!atom)
          return false;
      return ((atom.type === 'mord' && /[\d.]/.test(atom.value)) ||
          (atom.type === 'mpunct' && atom.value === ','));
  }
  /**
   * Select all the atoms in the current group, that is all the siblings.
   * When the selection is in a numerator, the group is the numerator. When
   * the selection is a superscript or subscript, the group is the supsub.
   * When the selection is in a text zone, the "group" is a word.
   */
  function selectGroup(model) {
      if (getMode(model, model.position) === 'text') {
          let start = Math.min(model.anchor, model.position);
          let end = Math.max(model.anchor, model.position);
          //
          let done = false;
          while (!done && start > 0) {
              const atom = model.at(start);
              if (atom.mode === 'text' && LETTER_AND_DIGITS.test(atom.value)) {
                  start -= 1;
              }
              else {
                  done = true;
              }
          }
          done = false;
          while (!done && end <= model.lastOffset) {
              const atom = model.at(end);
              if (atom.mode === 'text' && LETTER_AND_DIGITS.test(atom.value)) {
                  end += 1;
              }
              else {
                  done = true;
              }
          }
          if (done) {
              end -= 1;
          }
          if (start >= end) {
              // No word found. Select a single character
              model.setSelection(end - 1, end);
              return true;
          }
          model.setSelection(start, end);
      }
      else {
          const atom = model.at(model.position);
          // In a math zone, select all the sibling nodes
          if (isNumber$1(atom)) {
              // In a number, select all the digits
              let start = Math.min(model.anchor, model.position);
              let end = Math.max(model.anchor, model.position);
              //
              while (isNumber$1(model.at(start)))
                  start -= 1;
              while (isNumber$1(model.at(end)))
                  end += 1;
              model.setSelection(start, end - 1);
          }
          else {
              model.setSelection(model.offsetOf(atom.firstSibling), model.offsetOf(atom.lastSibling));
          }
      }
      return true;
  }
  register$1({
      selectGroup: (model) => {
          const result = selectGroup(model);
          if (!result)
              model.announce('plonk');
          return result;
      },
      selectAll: (model) => model.setSelection(0, model.lastOffset),
      extendSelectionForward: (model) => {
          const result = model.extendSelection('forward');
          if (!result)
              model.announce('plonk');
          return result;
      },
      extendSelectionBackward: (model) => {
          const result = model.extendSelection('backward');
          if (!result)
              model.announce('plonk');
          return result;
      },
      extendToNextWord: (model) => skip(model, 'forward', { extend: true }),
      extendToPreviousWord: (model) => skip(model, 'backward', { extend: true }),
      extendSelectionUpward: (model) => move(model, 'upward', { extend: true }),
      extendSelectionDownward: (model) => move(model, 'downward', { extend: true }),
      /**
       * Extend the selection until the next boundary is reached. A boundary
       * is defined by an atom of a different type (mbin, mord, etc...)
       * than the current focus. For example, in "1234+x=y", if the focus is between
       * "1" and "2", invoking `extendToNextBoundary_` would extend the selection
       * to "234".
       */
      extendToNextBoundary: (model) => skip(model, 'forward', { extend: true }),
      /**
       * Extend the selection until the previous boundary is reached. A boundary
       * is defined by an atom of a different type (mbin, mord, etc...)
       * than the current focus. For example, in "1+23456", if the focus is between
       * "5" and "6", invoking `extendToPreviousBoundary` would extend the selection
       * to "2345".
       */
      extendToPreviousBoundary: (model) => skip(model, 'backward', { extend: true }),
      extendToGroupStart: (model) => {
          const result = model.setSelection(model.anchor, model.offsetOf(model.at(model.position).firstSibling));
          if (!result)
              model.announce('plonk');
          return result;
      },
      extendToGroupEnd: (model) => {
          const result = model.setSelection(model.anchor, model.offsetOf(model.at(model.position).lastSibling));
          if (!result)
              model.announce('plonk');
          return result;
      },
      extendToMathFieldStart: (model) => {
          const result = model.setSelection(model.anchor, 0);
          if (!result)
              model.announce('plonk');
          return result;
      },
      extendToMathFieldEnd: (model) => {
          const result = model.setSelection(model.anchor, model.lastOffset);
          if (!result)
              model.announce('plonk');
          return result;
      },
  }, { target: 'model', category: 'selection-extend' });

  /**
   * This modules handles low-level keyboard events and normalize them across
   * browsers.
   *
   * See https://dvcs.w3.org/hg/d4e/raw-file/tip/key-event-test.html
   * (also at https://w3c.github.io/uievents/tools/key-event-viewer.html)
   *
   *
   * - **KeyboardEvent.key** (the printable value associated with the key or a string
   * for special keys)
   *  https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
   *  https://www.w3.org/TR/uievents-key/
   *
   * - **KeyboardEvent.code** (the physical key being pressed. On an AZERTY keyboard
   * the key labelled "A" is KeyQ)
   *  https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values
   *  https://www.w3.org/TR/uievents-code/
   *
   * Note:
   * - `charCode`, `keyCode` and `which` are deprecated
   *
   * For background, see this info regarding keybinding in VSCode:
   * - https://github.com/microsoft/vscode/tree/master/src/vs/workbench/services/keybinding
   * - https://github.com/microsoft/vscode/wiki/Keybinding-Issues
   */
  const PRINTABLE_KEYCODE = new Set([
      'Backquote',
      'Digit0',
      'Digit1',
      'Digit2',
      'Digit3',
      'Digit4',
      'Digit5',
      'Digit6',
      'Digit7',
      'Digit8',
      'Digit9',
      'Minus',
      'Equal',
      'IntlYen',
      'KeyQ',
      'KeyW',
      'KeyE',
      'KeyR',
      'KeyT',
      'KeyY',
      'KeyU',
      'KeyI',
      'KeyO',
      'KeyP',
      'BracketLeft',
      'BracketRight',
      'Backslash',
      'KeyA',
      'KeyS',
      'KeyD',
      'KeyF',
      'KeyG',
      'KeyH',
      'KeyJ',
      'KeyK',
      'KeyL',
      'Semicolon',
      'Quote',
      'IntlBackslash',
      'KeyZ',
      'KeyX',
      'KeyC',
      'KeyV',
      'KeyB',
      'KeyN',
      'KeyM',
      'Comma',
      'Period',
      'Slash',
      'IntlRo',
      'Space',
      'Numpad0',
      'Numpad1',
      'Numpad2',
      'Numpad3',
      'Numpad4',
      'Numpad5',
      'Numpad6',
      'Numpad7',
      'Numpad8',
      'Numpad9',
      'NumpadAdd',
      'NumpadComma',
      'NumpadDecimal',
      'NumpadDivide',
      'NumpadEqual',
      'NumpadHash',
      'NumpadMultiply',
      'NumpadParenLeft',
      'NumpadParenRight',
      'NumpadStar',
      'NumpadSubstract',
  ]);
  function mightProducePrintableCharacter(evt) {
      if (evt.ctrlKey || evt.metaKey) {
          // ignore ctrl/cmd-combination but not shift/alt-combinations
          return false;
      }
      // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
      if (evt.key === 'Dead')
          return false;
      // When issued via a composition, the `code` field is empty
      if (evt.code === '')
          return true;
      return PRINTABLE_KEYCODE.has(evt.code);
  }
  /**
   * Create a normalized representation of a keyboard event,
   * i.e., key code and modifier keys. For example:
   * - `ctrl+Shift+alt+[KeyF]`
   *
   * Note: the key code corresponds to a physical key, e.g. 'KeyQ' is
   * the key labeled 'A' on a French keyboard
   *
   */
  function keyboardEventToString(evt) {
      evt = normalizeKeyboardEvent(evt);
      const modifiers = [];
      if (evt.ctrlKey)
          modifiers.push('ctrl');
      if (evt.metaKey)
          modifiers.push('meta');
      if (evt.altKey)
          modifiers.push('alt');
      if (evt.shiftKey)
          modifiers.push('shift');
      // If no modifiers, simply return the key name
      if (modifiers.length === 0)
          return '[' + evt.code + ']';
      modifiers.push('[' + evt.code + ']');
      return modifiers.join('+');
  }
  /**
   * Setup to capture the keyboard events from a `TextArea` and redispatch them to
   * handlers.
   *
   * In general, commands (arrows, delete, etc..) should be handled
   * in the `keystroke()` handler while text input should be handled in
   * `typedtext()`.
   *
   * @param {HTMLElement} textarea A `TextArea` element that will capture the keyboard
   * events. While this element will usually be a `TextArea`, it could be any
   * element that is focusable and can receive keyboard events.
   * @param {Object.<string, any>} handlers
   * @param {function} handlers.keystroke invoked on a key down event, including
   * for special keys such as ESC, arrow keys, tab, etc... and their variants
   * with modifiers.
   * @param {function} handlers.typedtext invoked on a keypress or other events
   * when a key corresponding to a character has been pressed. This include `a-z`,
   * `0-9`, `{}`, `^_()`, etc...
   * This does not include arrow keys, tab, etc... but does include 'space'
   * When a 'character' key is pressed, both `keystroke()` and `typedtext()` will
   * be invoked. When a control/function key is pressed, only `keystroke()` will
   * be invoked. In some cases, for example when using input methods or entering
   * emoji, only `typedtext()` will be invoked.
   */
  function delegateKeyboardEvents(textarea, handlers) {
      let keydownEvent = null;
      let keypressEvent = null;
      let compositionInProgress = false;
      let focusInProgress = false;
      let blurInProgress = false;
      // This callback is invoked after a keyboard event has been processed
      // by the textarea
      let callbackTimeoutID;
      function defer(cb) {
          clearTimeout(callbackTimeoutID);
          callbackTimeoutID = setTimeout(() => {
              clearTimeout(callbackTimeoutID);
              cb();
          });
      }
      function handleTypedText() {
          // Some browsers (Firefox, Opera) fire a keypress event for commands
          // such as cmd+C where there might be a non-empty selection.
          // We need to ignore these.
          if (textarea.selectionStart !== textarea.selectionEnd)
              return;
          const text = textarea.value;
          textarea.value = '';
          if (text.length > 0)
              handlers.typedText(text);
      }
      const target = textarea;
      target.addEventListener('keydown', (event) => {
          // "Process" key indicates commit of IME session (on Firefox)
          // It's handled with compositionEnd so it can be safely ignored
          if (compositionInProgress ||
              event.key === 'Process' ||
              event.code === 'CapsLock' ||
              /(Control|Meta|Alt|Shift)(Left|Right)/.test(event.code)) {
              keydownEvent = null;
              return;
          }
          keydownEvent = event;
          keypressEvent = null;
          if (!handlers.keystroke(keyboardEventToString(event), event)) {
              keydownEvent = null;
              textarea.value = '';
          }
      }, true);
      target.addEventListener('keypress', (event) => {
          if (compositionInProgress)
              return;
          // If this is not the first keypress after a keydown, that is,
          // if this is a repeated keystroke, call the keystroke handler.
          if (!compositionInProgress) {
              if (keydownEvent && keypressEvent) {
                  handlers.keystroke(keyboardEventToString(keydownEvent), keydownEvent);
              }
              keypressEvent = event;
              defer(handleTypedText);
          }
      }, true);
      target.addEventListener('keyup', () => {
          if (compositionInProgress)
              return;
          // If we've received a keydown, but no keypress, check what's in the
          // textarea field.
          if (keydownEvent && !keypressEvent) {
              handleTypedText();
          }
      }, true);
      target.addEventListener('paste', (event) => {
          // In some cases (Linux browsers), the text area might not be focused
          // when doing a middle-click paste command.
          textarea.focus();
          textarea.value = '';
          handlers.paste(event);
      }, true);
      target.addEventListener('cut', (ev) => handlers.cut(ev), true);
      target.addEventListener('copy', (ev) => handlers.copy(ev), true);
      target.addEventListener('blur', (event) => {
          // If the relatedTarget (the element that is gaining the focus)
          // is contained in our shadow host, ignore the blur event
          if (event.relatedTarget ===
              event.target.getRootNode()
                  .host) {
              event.preventDefault();
              event.stopPropagation();
              return;
          }
          if (blurInProgress || focusInProgress)
              return;
          blurInProgress = true;
          keydownEvent = null;
          keypressEvent = null;
          if (handlers.blur)
              handlers.blur();
          blurInProgress = false;
      }, true);
      target.addEventListener('focus', (_ev) => {
          if (blurInProgress || focusInProgress)
              return;
          focusInProgress = true;
          if (handlers.focus)
              handlers.focus();
          focusInProgress = false;
      }, true);
      target.addEventListener('compositionstart', (event) => {
          compositionInProgress = true;
          textarea.value = '';
          if (handlers.compositionStart) {
              handlers.compositionStart(event.data);
          }
      }, true);
      target.addEventListener('compositionupdate', (ev) => {
          if (!compositionInProgress)
              return;
          if (handlers.compositionUpdate)
              handlers.compositionUpdate(ev.data);
      }, true);
      target.addEventListener('compositionend', (ev) => {
          textarea.value = '';
          if (!compositionInProgress)
              return;
          compositionInProgress = false;
          if (handlers.compositionEnd)
              handlers.compositionEnd(ev.data);
      }, true);
      // The `input` handler gets called when the field is changed,
      // but no other relevant events have been triggered
      // for example with emoji input...
      target.addEventListener('input', (ev) => {
          if (compositionInProgress)
              return;
          // If this was an `input` event sent as a result of a commit of
          // IME, ignore it.
          // (This is what FireFox does, even though the spec says it shouldn't happen)
          // See https://github.com/w3c/uievents/issues/202
          if (ev.inputType === 'insertCompositionText')
              return;
          // Paste is handled in paste handler
          if (ev.inputType === 'insertFromPaste') {
              ev.preventDefault();
              ev.stopPropagation();
              return;
          }
          defer(handleTypedText);
      });
      return {
          cancelComposition: () => {
              const savedBlur = handlers.blur;
              const savedFocus = handlers.focus;
              handlers.blur = null;
              handlers.focus = null;
              textarea.blur();
              textarea.focus();
              handlers.blur = savedBlur;
              handlers.focus = savedFocus;
          },
          blur: () => {
              if (typeof textarea.blur === 'function') {
                  textarea.blur();
              }
          },
          focus: () => {
              if (typeof textarea.focus === 'function') {
                  textarea.focus();
              }
          },
          hasFocus: () => {
              return deepActiveElement() === textarea;
          },
          setValue: (value) => {
              if (value) {
                  textarea.value = value;
                  // The textarea may be a span (on mobile, for example), so check that
                  // it has a select() before calling it.
                  if (deepActiveElement() === textarea && textarea.select) {
                      textarea.select();
                  }
              }
              else {
                  textarea.value = '';
                  textarea.setAttribute('aria-label', '');
              }
          },
          setAriaLabel: (value) => {
              textarea.setAttribute('aria-label', 'after: ' + value);
          },
          moveTo: (x, y) => {
              textarea.style.top = `${y}px`;
              textarea.style.left = `${x}px`;
          },
      };
  }
  function deepActiveElement() {
      var _a;
      let a = document.activeElement;
      while ((_a = a === null || a === void 0 ? void 0 : a.shadowRoot) === null || _a === void 0 ? void 0 : _a.activeElement) {
          a = a.shadowRoot.activeElement;
      }
      return a;
  }
  function eventToChar(evt) {
      var _a;
      if (!evt)
          return '';
      let result;
      if (evt.key === 'Unidentified') {
          // On Android, the evt.key seems to always be 'Unidentified'.
          // Get the value entered in the event target
          if (evt.target) {
              result = evt.target.value;
          }
      }
      result = (_a = result !== null && result !== void 0 ? result : evt.key) !== null && _a !== void 0 ? _a : evt.code;
      if (/^(Dead|Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(result)) {
          result = '';
      }
      return result;
  }

  class UndoManager {
      constructor(model) {
          this.record = false;
          this.canCoalesce = false;
          this.model = model;
          this.reset();
      }
      get maximumDepth() {
          return 1000;
      } // Maximum number of undo/redo states
      reset() {
          this.stack = [];
          this.index = -1;
      }
      startRecording() {
          this.record = true;
      }
      canUndo() {
          return this.index > 0;
      }
      canRedo() {
          return this.index !== this.stack.length - 1;
      }
      undo(options) {
          if (this.canUndo()) {
              if (typeof (options === null || options === void 0 ? void 0 : options.onUndoStateWillChange) === 'function') {
                  options.onUndoStateWillChange(this.model.mathfield, 'undo');
              }
              this.restore(this.stack[this.index - 1], options);
              this.index -= 1;
              if (options && typeof options.onUndoStateDidChange === 'function') {
                  options.onUndoStateDidChange(this.model.mathfield, 'undo');
              }
              this.canCoalesce = false;
          }
      }
      redo(options) {
          if (this.canRedo()) {
              if (typeof (options === null || options === void 0 ? void 0 : options.onUndoStateWillChange) === 'function') {
                  options.onUndoStateWillChange(this.model.mathfield, 'redo');
              }
              this.index += 1;
              this.restore(this.stack[this.index], options);
              if (options && typeof options.onUndoStateDidChange === 'function') {
                  options.onUndoStateDidChange(this.model.mathfield, 'redo');
              }
              this.canCoalesce = false;
          }
      }
      pop() {
          if (this.canUndo()) {
              this.index -= 1;
              this.stack.pop();
          }
      }
      /**
       * Push a snapshot of the content and selection of the mathfield onto the
       * undo stack so that it can potentially be reverted to later.
       */
      snapshot(options) {
          if (!this.record)
              return;
          if (typeof (options === null || options === void 0 ? void 0 : options.onUndoStateWillChange) === 'function') {
              options.onUndoStateWillChange(this.model.mathfield, 'snapshot');
          }
          // Drop any entries that are part of the redo stack
          this.stack.splice(this.index + 1, this.stack.length - this.index - 1);
          // Add a new entry
          this.stack.push({
              latex: Atom.toLatex(this.model.root, { expandMacro: false }),
              selection: this.model.selection,
          });
          this.index++;
          // If we've reached the maximum number of undo operations, forget the
          // oldest one.
          if (this.stack.length > this.maximumDepth) {
              this.stack.shift();
          }
          if (options && typeof options.onUndoStateDidChange === 'function') {
              options.onUndoStateDidChange(this.model.mathfield, 'snapshot');
          }
          this.canCoalesce = false;
      }
      snapshotAndCoalesce(options) {
          if (this.canCoalesce) {
              this.pop();
          }
          this.snapshot(options);
          this.canCoalesce = true;
      }
      /**
       * Return an object capturing the state of the content and selection of the
       * mathfield. Pass this object to restore() to reset the value of the math
       * field to this saved value. This does not affect the undo stack.
       */
      save() {
          return {
              latex: Atom.toLatex(this.model.root, { expandMacro: false }),
              selection: this.model.selection,
          };
      }
      /**
       * Set the content and selection of the mathfield to a value previously
       * captured with save() or stored in the undo stack.
       * This does not affect the undo stack.
       */
      restore(state, options) {
          const wasSuppressing = this.model.suppressChangeNotifications;
          if (options.suppressChangeNotifications !== undefined) {
              this.model.suppressChangeNotifications =
                  options.suppressChangeNotifications;
          }
          // Restore the content
          ModeEditor.insert('math', this.model, state ? state.latex : '', {
              ...options,
              format: 'latex',
              insertionMode: 'replaceAll',
              selectionMode: 'after',
              smartFence: false,
          });
          // Restore the selection
          this.model.selection = state ? state.selection : { ranges: [[0, 0]] };
          this.model.suppressChangeNotifications = wasSuppressing;
      }
  }

  const STRINGS = {
      en: {
          'keyboard.tooltip.functions': 'Functions',
          'keyboard.tooltip.symbols': 'Symbols',
          'keyboard.tooltip.greek': 'Greek Letters',
          'keyboard.tooltip.command': 'LaTeX Command Mode',
          'keyboard.tooltip.numeric': 'Numeric',
          'keyboard.tooltip.roman': 'Roman Letters',
          'tooltip.copy to clipboard': 'Copy to Clipboard',
          'tooltip.redo': 'Redo',
          'tooltip.toggle virtual keyboard': 'Toggle Virtual Keyboard',
          'tooltip.undo': 'Undo',
      },
      ar: {
          'keyboard.tooltip.functions': 'مهام',
          'keyboard.tooltip.symbols': 'حرف او رمز',
          'keyboard.tooltip.greek': 'حروف يونانية',
          'keyboard.tooltip.command': 'حالة تلقي الأوامر اللاتك',
          'keyboard.tooltip.numeric': 'الرقمية',
          'keyboard.tooltip.roman': 'رموز الاحرف الرومانية',
          'tooltip.copy to clipboard': 'نسخ إلى الحافظة',
          'tooltip.redo': 'الإعادة',
          'tooltip.toggle virtual keyboard': 'تبديل لوحة المفاتيح الإفتراضية',
          'tooltip.undo': 'إلغاء',
      },
      de: {
          'keyboard.tooltip.functions': 'Funktionen',
          'keyboard.tooltip.symbols': 'Symbole',
          'keyboard.tooltip.greek': 'Griechische Buchstaben',
          'keyboard.tooltip.command': 'LaTeX-Befehlsmodus',
          'keyboard.tooltip.numeric': 'Numerisch',
          'keyboard.tooltip.roman': 'Römische Buchstaben',
          'tooltip.copy to clipboard': 'In die Zwischenablage kopieren',
          'tooltip.redo': 'Wiederholen',
          'tooltip.toggle virtual keyboard': 'Virtuelle Tastatur umschalten',
          'tooltip.undo': 'Widerrufen',
      },
      el: {
          'keyboard.tooltip.functions': 'συναρτήσεις',
          'keyboard.tooltip.symbols': 'σύμβολα',
          'keyboard.tooltip.greek': 'ελληνικά γράμματα',
          'keyboard.tooltip.command': 'Λειτουργία εντολών LaTeX',
          'keyboard.tooltip.numeric': 'Αριθμητικός',
          'keyboard.tooltip.roman': 'Ρωμαϊκά γράμματα',
          'tooltip.copy to clipboard': 'Αντιγραφή στο πρόχειρο',
          'tooltip.redo': 'Ξανακάνω',
          'tooltip.toggle virtual keyboard': 'Εναλλαγή εικονικού πληκτρολογίου',
          'tooltip.undo': 'Ξεκάνω',
      },
      es: {
          'keyboard.tooltip.functions': 'Funciones',
          'keyboard.tooltip.symbols': 'Símbolos',
          'keyboard.tooltip.greek': 'Letras griegas',
          'keyboard.tooltip.command': 'Modo Comando LaTeX',
          'keyboard.tooltip.numeric': 'Numérico',
          'keyboard.tooltip.roman': 'Letras romanas',
          'tooltip.copy to clipboard': 'Copiar al portapapeles',
          'tooltip.redo': 'Rehacer',
          'tooltip.toggle virtual keyboard': 'Alternar teclado virtual',
          'tooltip.undo': 'Deshacer',
      },
      fa: {
          'keyboard.tooltip.functions': 'توابع',
          'keyboard.tooltip.symbols': 'نمادها',
          'keyboard.tooltip.greek': 'حروف یونانی',
          'keyboard.tooltip.command': 'حالت دستور لاتک',
          'keyboard.tooltip.numeric': 'عددی',
          'keyboard.tooltip.roman': 'حروف رومی',
          'tooltip.copy to clipboard': 'کپی به کلیپبورد',
          'tooltip.redo': 'بازگشت به بعد',
          'tooltip.toggle virtual keyboard': 'نمایش/نهفتن کیبورد مجازی',
          'tooltip.undo': 'بازگشت به قبل',
      },
      fr: {
          'keyboard.tooltip.functions': 'Fonctions',
          'keyboard.tooltip.symbols': 'Symboles',
          'keyboard.tooltip.greek': 'Lettres grecques',
          'keyboard.tooltip.command': 'Mode de commandes LaTeX',
          'keyboard.tooltip.numeric': 'Numérique',
          'keyboard.tooltip.roman': 'Lettres romaines',
          'tooltip.copy to clipboard': 'Copier dans le presse-papiers',
          'tooltip.redo': 'Rétablir',
          'tooltip.toggle virtual keyboard': 'Afficher/Masquer le clavier virtuel',
          'tooltip.undo': 'Annuler',
      },
      it: {
          'keyboard.tooltip.functions': 'Funzioni',
          'keyboard.tooltip.symbols': 'Simboli',
          'keyboard.tooltip.greek': 'Lettere greche',
          'keyboard.tooltip.command': 'Modalità di comando LaTeX',
          'keyboard.tooltip.numeric': 'Numerico',
          'keyboard.tooltip.roman': 'Lettere romane',
          'tooltip.copy to clipboard': 'Copia negli appunti',
          'tooltip.redo': 'Rifare',
          'tooltip.toggle virtual keyboard': 'Attiva / disattiva la tastiera virtuale',
          'tooltip.undo': 'Disfare',
      },
      ja: {
          'keyboard.tooltip.functions': '関数',
          'keyboard.tooltip.symbols': 'シンボル',
          'keyboard.tooltip.greek': 'ギリシャ文字',
          'keyboard.tooltip.command': 'LaTeXコマンドモード',
          'keyboard.tooltip.numeric': '数値',
          'keyboard.tooltip.roman': 'ローマ字',
          'tooltip.copy to clipboard': 'クリップボードにコピー',
          'tooltip.redo': 'やり直し',
          'tooltip.toggle virtual keyboard': '仮想キーボードの切り替え',
          'tooltip.undo': '元に戻す',
      },
      pl: {
          'keyboard.tooltip.functions': 'Funkcje',
          'keyboard.tooltip.symbols': 'Symbolika',
          'keyboard.tooltip.greek': 'Litery greckie',
          'keyboard.tooltip.command': 'Tryb poleceń LaTeX',
          'keyboard.tooltip.numeric': 'Numeryczne',
          'keyboard.tooltip.roman': 'Litery rzymskie',
          'tooltip.copy to clipboard': 'Kopiuj do Schowka',
          'tooltip.redo': 'Przywróć',
          'tooltip.toggle virtual keyboard': 'Przełącz wirtualną klawiaturę',
          'tooltip.undo': 'Cofnij',
      },
      ru: {
          'keyboard.tooltip.functions': 'Функции',
          'keyboard.tooltip.symbols': 'Символы',
          'keyboard.tooltip.greek': 'Греческие буквы',
          'keyboard.tooltip.command': 'Режим командной строки LaTeX',
          'keyboard.tooltip.numeric': 'числовой',
          'keyboard.tooltip.roman': 'Латинские буквы',
          'tooltip.copy to clipboard': 'Скопировать в буфер обмена',
          'tooltip.redo': 'переделывать',
          'tooltip.toggle virtual keyboard': 'Переключить виртуальную клавиатуру',
          'tooltip.undo': 'расстегивать',
      },
  };

  // Import { Keys } from '../types-utils';
  const l10n = {};
  l10n.plural = function (value, s, options) {
      var _a;
      options = options !== null && options !== void 0 ? options : {};
      options.type = (_a = options.type) !== null && _a !== void 0 ? _a : 'cardinal';
      const language = l10n.locale.slice(0, 2);
      const rules = options.type === 'ordinal' ? l10n._ordinal : l10n._cardinal;
      let rule = options.type === 'ordinal'
          ? l10n._ordinalPluralCategories.indexOf(rules.select(value))
          : l10n._cardinalPluralCategories.indexOf(rules.select(value));
      let result;
      if (l10n.strings[l10n.locale])
          result = l10n.strings[l10n.locale][s];
      if (!result && l10n.strings[language])
          result = l10n.strings[language][s];
      if (!result) {
          result = l10n.strings.en[s];
          if (!result)
              result = s;
          rule =
              options.type === 'ordinal'
                  ? l10n._ordinalPluralCategories.indexOf(l10n._ordinalEnglish.select(value))
                  : l10n._cardinalPluralCategories.indexOf(l10n._cardinalEnglish.select(value));
      }
      return result.split(';')[rule] || result.split(';')[0];
  };
  /*
   * Two forms for this function:
   * - merge(locale, strings)
   * Merge a dictionary of keys -> values for the specified locale
   * - merge(strings)
   * Merge a dictionary of locale code -> dictionary of keys -> values
   *
   */
  l10n.merge = function (locale, strings) {
      if (locale && strings) {
          const savedLocale = l10n._locale;
          l10n.locale = locale; // Load the necessary json file
          l10n.strings[locale] = {
              ...l10n.strings[locale],
              ...strings,
          };
          l10n.locale = savedLocale;
      }
      else if (locale && !strings) {
          Object.keys(locale).forEach((l) => l10n.merge(l, locale[l]));
      }
  };
  // Add getter and setter for the _locale property of l10n
  Object.defineProperty(l10n, 'locale', {
      set(locale) {
          l10n._locale = locale;
          l10n._ordinal = null;
          l10n._cardinal = null;
      },
      get() {
          var _a;
          // Use the browser defined language as the default language,
          // "english" if not running in a browser (node.js)
          if (!l10n._locale) {
              // Use the setter, which will load the necessary .json files.
              l10n._locale = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.language.slice(0, 5)) !== null && _a !== void 0 ? _a : 'en';
          }
          return l10n._locale;
      },
  });
  Object.defineProperty(l10n, 'ordinal', {
      get() {
          if (!l10n._ordinal) {
              l10n._ordinalEnglish = new Intl.PluralRules('en', {
                  type: 'ordinal',
              });
              l10n._ordinalEnglishPluralCategories = l10n._ordinalEnglish.resolvedOptions().pluralCategories;
              l10n._ordinal = new Intl.PluralRules(l10n.locale, {
                  type: 'ordinal',
              });
              l10n._ordinalPluralCategories = l10n._ordinal.resolvedOptions().pluralCategories;
              //    "zero", "one", "two", "few", "many" and "other"
          }
          return l10n._ordinal;
      },
  });
  Object.defineProperty(l10n, 'cardinal', {
      get() {
          if (!l10n._cardinal) {
              l10n._cardinalEnglish = new Intl.PluralRules('en', {
                  type: 'cardinal',
              });
              l10n._cardinalEnglishPluralCategories = l10n._cardinalEnglish.resolvedOptions().pluralCategories;
              l10n._cardinal = new Intl.PluralRules(l10n.locale, {
                  type: 'cardinal',
              });
              l10n._cardinalPluralCategories = l10n._ordinal.resolvedOptions().pluralCategories;
          }
          return l10n._cardinal;
      },
  });
  l10n.strings = STRINGS;
  /**
   * Return a localised string for the `key`.
   */
  function localize(key) {
      const language = l10n.locale.slice(0, 2);
      let result = '';
      // Attempt to find a match for the current locale
      if (l10n.strings[l10n.locale])
          result = l10n.strings[l10n.locale][key];
      // If none is found, attempt to find a match for the language
      if (!result && l10n.strings[language])
          result = l10n.strings[language][key];
      // If none is found, try english
      if (!result)
          result = l10n.strings.en[key];
      // If that didn't work, return undefined
      if (!result)
          return undefined;
      return result;
  }

  function match(pattern, latex) {
      if (typeof pattern === 'string') {
          return pattern === latex;
      }
      return pattern.test(latex);
  }
  function findInBranch(model, atom, branchName, value, options) {
      const branch = atom.branch(branchName);
      if (!branch)
          return [];
      const result = [];
      let { length } = branch;
      // For each length...
      while (length > 0) {
          // Consider each possible position in the branch
          for (let i = 1; i < branch.length - length + 1; i++) {
              const latex = Atom.toLatex(branch.slice(i, i + length), {
                  expandMacro: false,
              });
              if (match(value, latex)) {
                  result.push([
                      model.offsetOf(branch[i].leftSibling),
                      model.offsetOf(branch[i + length - 1]),
                  ]);
                  i += length;
              }
          }
          length--;
      }
      return branch.reduce((acc, x) => [...acc, ...findInAtom(model, x, value, options)], result);
  }
  function findInAtom(model, atom, value, options) {
      if (atom.type === 'first')
          return [];
      // If the mode doesn't match, ignore this atom
      if ((options === null || options === void 0 ? void 0 : options.mode) && options.mode !== atom.mode)
          return [];
      return atom.branches.reduce((acc, x) => {
          return [...acc, ...findInBranch(model, atom, x, value, options)];
      }, []);
  }
  function find(model, value, options) {
      return findInBranch(model, model.root, 'body', value, options).sort((a, b) => {
          if (b[0] === a[0]) {
              return b[1] - a[1];
          }
          return b[0] - a[0];
      });
  }
  function replaceInBranch(model, atom, branchName, pattern, replacement, options) {
      const branch = atom.branch(branchName);
      if (!branch)
          return;
      let i = 1;
      while (i < branch.length) {
          let length = branch.length - i;
          while (length > 0) {
              let matched = false;
              const latex = Atom.toLatex(branch.slice(i, i + length), {
                  expandMacro: false,
              });
              console.log('testing ' + latex);
              const replacementArgs = { latex };
              if (typeof pattern === 'string' && latex === pattern) {
                  matched = true;
              }
              else if (pattern instanceof RegExp) {
                  const match = latex.match(pattern);
                  if (match !== null) {
                      matched = true;
                      if (match.length > 0) {
                          replacementArgs.p = [...match];
                      }
                      replacementArgs.groups = match.groups;
                  }
              }
              if (matched) {
                  // Remove the atoms that matched
                  for (let j = i; j < i + length; j++) {
                      atom.removeChild(branch[j]);
                  }
                  let replacementString;
                  if (typeof replacement === 'string') {
                      replacementString = replacement;
                      if (replacementArgs.p) {
                          replacementArgs.p.forEach((x, index) => {
                              if (typeof x === 'string') {
                                  replacementString = replacementString.replace('$' + Number(index).toString(), x);
                              }
                          });
                      }
                      if (replacementArgs.groups) {
                          Object.keys(replacementArgs.groups).forEach((x) => {
                              if (typeof x === 'string') {
                                  replacementString = replacementString.replace('$' + x, replacementArgs.groups[x]);
                              }
                          });
                      }
                      replacementString = replacementString.replace('$$', '$');
                  }
                  else {
                      replacementString = replacement(replacementArgs);
                  }
                  const lastChild = atom.addChildrenAfter(parseLatex(replacementString, atom.mode), branch[i - 1]);
                  i = branch.indexOf(lastChild) + 1;
                  length = branch.length - i;
              }
              else {
                  length--;
              }
          }
          i++;
      }
      branch.forEach((x) => replaceInAtom(model, x, pattern, replacement, options));
  }
  function replaceInAtom(model, atom, pattern, replacement, options) {
      if (atom.type === 'first')
          return;
      // If the mode doesn't match, ignore this atom
      if ((options === null || options === void 0 ? void 0 : options.mode) && options.mode !== atom.mode)
          return;
      atom.branches.forEach((x) => replaceInBranch(model, atom, x, pattern, replacement, options));
  }
  function replace(model, pattern, replacement, options) {
      replaceInBranch(model, model.root, 'body', pattern, replacement, options);
      model.position = model.normalizeOffset(model.position);
  }

  function speakableText(speechOptions, prefix, atoms) {
      const options = {
          ...speechOptions,
          textToSpeechMarkup: '',
          textToSpeechRulesOptions: {
              ...speechOptions.textToSpeechRulesOptions,
              markup: 'none',
          },
      };
      return prefix + atomToSpeakableText(atoms, options);
  }
  /**
   *
   * Speak some part of the expression, either with or without synchronized highlighting.
   *
   * @param speakOptions.withHighlighting - If true, synchronized
   * highlighting of speech will happen (if possible). Default is false.
   */
  // @revisit: register 'speak' command with mathfield (to get access to SpeechOptions, which need to be passed down)
  register$1({
      speak: (mathfield, scope, options) => {
          return speak(mathfield, scope, options);
      },
  }, { target: 'mathfield', category: 'speech' });
  function speak(mathfield, scope, speakOptions) {
      speakOptions = speakOptions !== null && speakOptions !== void 0 ? speakOptions : { withHighlighting: false };
      const { model } = mathfield;
      function getAtoms(mathfield, scope) {
          let result = null;
          switch (scope) {
              case 'all':
                  result = model.root;
                  break;
              case 'selection':
                  result = model.getAtoms(model.selection);
                  break;
              case 'left': {
                  result = model.getAtoms(model.offsetOf(model.at(model.position).firstSibling), model.position);
                  break;
              }
              case 'right': {
                  result = model.getAtoms(model.position, model.offsetOf(model.at(model.position).lastSibling));
                  break;
              }
              case 'group':
                  result = model.getAtoms(model.getSiblingsRange(model.position));
                  break;
              case 'parent': {
                  const { parent } = model.at(model.position);
                  if (parent && parent.type !== 'root') {
                      result = parent;
                  }
                  break;
              }
          }
          return result;
      }
      function getFailedSpeech(scope) {
          let result = '';
          switch (scope) {
              case 'all':
                  console.log('Internal failure: speak all failed');
                  break;
              case 'selection':
                  result = 'no selection';
                  break;
              case 'left':
                  result = 'at start';
                  break;
              case 'right':
                  result = 'at end';
                  break;
              case 'group':
                  console.log('Internal failure: speak group failed');
                  break;
              case 'parent':
                  result = 'no parent';
                  break;
              default:
                  console.log('unknown speak_ param value: "' + scope + '"');
                  break;
          }
          return result;
      }
      const atoms = getAtoms(mathfield, scope);
      if (atoms === null) {
          mathfield.options.speakHook(getFailedSpeech(scope), mathfield.options);
          return false;
      }
      const options = { ...mathfield.options };
      if (speakOptions.withHighlighting || options.speechEngine === 'amazon') {
          options.textToSpeechMarkup =
              window.sre && options.textToSpeechRules === 'sre' ? 'ssml_step' : 'ssml';
      }
      const text = atomToSpeakableText(atoms, options);
      if (speakOptions.withHighlighting) {
          window.mathlive.readAloudMathField = mathfield;
          render(mathfield, { forHighlighting: true });
          if (mathfield.options.readAloudHook) {
              mathfield.options.readAloudHook(mathfield.field, text, mathfield.options);
          }
      }
      else if (mathfield.options.speakHook) {
          mathfield.options.speakHook(text, options);
      }
      return false;
  }
  function defaultSpeakHook(text, config) {
      if (!config && (window === null || window === void 0 ? void 0 : window.mathlive)) {
          config = window.mathlive.config;
      }
      config = config !== null && config !== void 0 ? config : {};
      if (!config.speechEngine || config.speechEngine === 'local') {
          // On ChromeOS: chrome.accessibilityFeatures.spokenFeedback
          // See also https://developer.chrome.com/apps/tts
          const utterance = new SpeechSynthesisUtterance(text);
          if (window) {
              window.speechSynthesis.speak(utterance);
          }
          else {
              console.log('Speak:', text);
          }
      }
      else if (config.speechEngine === 'amazon') {
          if (!window || !window.AWS) {
              console.warn('AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk');
          }
          else {
              const polly = new window.AWS.Polly({ apiVersion: '2016-06-10' });
              const parameters = {
                  OutputFormat: 'mp3',
                  VoiceId: config.speechEngineVoice,
                  Engine: [
                      'Amy',
                      'Emma',
                      'Brian',
                      'Ivy',
                      'Joanna',
                      'Kendra',
                      'Kimberly',
                      'Salli',
                      'Joey',
                      'Justin',
                      'Matthew',
                  ].includes(config.speechEngineVoice)
                      ? 'neural'
                      : 'standard',
                  // SampleRate: '24000',
                  Text: text,
                  TextType: 'ssml',
              };
              // https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly.html#synthesizeSpeech-property
              polly.synthesizeSpeech(parameters, (err, data) => {
                  if (err) {
                      console.warn('polly.synthesizeSpeech() error:', err, err.stack);
                      // Announce('plonk');
                  }
                  else if (data === null || data === void 0 ? void 0 : data.AudioStream) {
                      const uInt8Array = new Uint8Array(data.AudioStream);
                      const blob = new Blob([uInt8Array.buffer], {
                          type: 'audio/mpeg',
                      });
                      const url = URL.createObjectURL(blob);
                      const audioElement = new Audio(url);
                      audioElement.play().catch((error) => console.log(error));
                  }
                  else {
                      console.log('polly.synthesizeSpeech():', data);
                  }
              });
              // Can call AWS.Request() on the result of synthesizeSpeech()
          }
      }
      else if (config.speechEngine === 'google') {
          console.warn('The Google speech engine is not supported yet. Please come again.');
          // @todo: implement support for Google Text-to-Speech API,
          // using config.speechEngineToken, config.speechEngineVoice and
          // config.speechEngineAudioConfig
          // curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
          //   -H "Content-Type: application/json; charset=utf-8" \
          //   --data "{
          //     'input':{
          //       'text':'Android is a mobile operating system developed by Google,
          //          based on the Linux kernel and designed primarily for
          //          touchscreen mobile devices such as smartphones and tablets.'
          //     },
          //     'voice':{
          //       'languageCode':'en-gb',
          //       'name':'en-GB-Standard-A',
          //       'ssmlGender':'FEMALE'
          //     },
          //     'audioConfig':{
          //       'audioEncoding':'MP3'
          //     }
          //   }" "https://texttospeech.googleapis.com/v1beta1/text:synthesize" > synthesize-text.txt
      }
  }

  // Import { atomsToMathML } from '../addons/math-ml';
  /**
   * Given an atom, describe the relationship between the atom
   * and its siblings and their parent.
   */
  function relationName(atom) {
      let result;
      if (atom.treeBranch === 'body') {
          result = {
              enclose: 'cross out',
              leftright: 'fence',
              surd: 'square root',
              root: 'math field',
              mop: 'operator',
          }[atom.parent.type];
      }
      else if (atom.parent.type === 'genfrac') {
          if (atom.treeBranch === 'above') {
              return 'numerator';
          }
          if (atom.treeBranch === 'below') {
              return 'denominator';
          }
      }
      else if (atom.parent.type === 'surd') {
          if (atom.treeBranch === 'above') {
              result = 'index';
          }
      }
      else if (atom.treeBranch === 'superscript') {
          result = 'superscript';
      }
      else if (atom.treeBranch === 'subscript') {
          result = 'subscript';
      }
      if (!result) {
          console.log('unknown relationship');
      }
      return result !== null && result !== void 0 ? result : 'parent';
  }
  /**
   * Announce a change in selection or content via the aria-live region.
   *
   * @param action The action that invoked the change.
   * @param previousPosition The position of the insertion point before the change
   */
  function defaultAnnounceHook(mathfield, action, previousPosition, atoms) {
      var _a;
      //* * Fix: the focus is the end of the selection, so it is before where we want it
      let liveText = '';
      // Const action = moveAmount > 0 ? "right" : "left";
      if (action === 'plonk') {
          // Use this sound to indicate minor errors, for
          // example when an action has no effect.
          (_a = mathfield.plonkSound) === null || _a === void 0 ? void 0 : _a.play().catch((error) => console.warn(error));
          // As a side effect, reset the keystroke buffer
          mathfield.resetKeystrokeBuffer();
      }
      else if (action === 'delete') {
          liveText = speakableText(mathfield.options, 'deleted: ', atoms);
          //* ** FIX: could also be moveUp or moveDown -- do something different like provide context???
      }
      else if (action === 'focus' || action.includes('move')) {
          //* ** FIX -- should be xxx selected/unselected */
          liveText =
              getRelationshipAsSpokenText(mathfield.model, previousPosition) +
                  (mathfield.model.selectionIsCollapsed ? '' : 'selected: ') +
                  getNextAtomAsSpokenText(mathfield.model, mathfield.options);
      }
      else if (action === 'replacement') {
          // Announce the contents
          liveText = speakableText(mathfield.options, '', mathfield.model.at(mathfield.model.position));
      }
      else if (action === 'line') {
          // Announce the current line -- currently that's everything
          // mathfield.accessibleNode.innerHTML = mathfield.options.createHTML(
          //     '<math xmlns="http://www.w3.org/1998/Math/MathML">' +
          //         atomsToMathML(mathfield.model.root, mathfield.options) +
          //         '</math>'
          // );
          liveText = speakableText(mathfield.options, '', mathfield.model.root);
          mathfield.keyboardDelegate.setAriaLabel('after: ' + liveText);
          /** * FIX -- testing hack for setting braille ***/
          // mathfield.accessibleNode.focus();
          // console.log("before sleep");
          // sleep(1000).then(() => {
          //     mathfield.textarea.focus();
          //     console.log("after sleep");
          // });
      }
      else {
          liveText = atoms
              ? speakableText(mathfield.options, action + ' ', atoms)
              : action;
      }
      // Aria-live regions are only spoken when it changes; force a change by
      // alternately using nonbreaking space or narrow nonbreaking space
      const ariaLiveChangeHack = mathfield.ariaLiveText.textContent.includes(' ')
          ? ' \u202F '
          : ' \u00A0 ';
      mathfield.ariaLiveText.textContent = liveText + ariaLiveChangeHack;
      // This.textarea.setAttribute('aria-label', liveText + ariaLiveChangeHack);
  }
  function getRelationshipAsSpokenText(model, previousOffset) {
      if (Number.isNaN(previousOffset))
          return '';
      const previous = model.at(previousOffset);
      if (!previous)
          return '';
      if (previous.treeDepth <= model.at(model.position).treeDepth) {
          return '';
      }
      let result = '';
      let ancestor = previous.parent;
      const newParent = model.at(model.position).parent;
      while (ancestor !== model.root && ancestor !== newParent) {
          result += `out of ${relationName(ancestor)};`;
          ancestor = ancestor.parent;
      }
      return result;
  }
  /**
   *
   * Return the spoken text for the atom to the right of the current selection.
   * Take into consideration the position amongst siblings to include 'start of'
   * and 'end of' if applicable.
   */
  function getNextAtomAsSpokenText(model, options) {
      if (!model.selectionIsCollapsed) {
          return speakableText(options, '', model.getAtoms(model.selection));
      }
      let result = '';
      // Announce start of denominator, etc
      const cursor = model.at(model.position);
      const relation = relationName(cursor);
      if (cursor.isFirstSibling) {
          result = (relation ? 'start of ' + relation : 'unknown') + ': ';
      }
      if (cursor.isLastSibling) {
          // Don't say both start and end
          if (!cursor.isFirstSibling) {
              result += relation ? 'end of ' + relation : 'unknown';
          }
      }
      else {
          result += speakableText(options, '', cursor);
      }
      return result;
  }

  /**
   * These shortcut strings are replaced with the corresponding LaTeX expression
   * without requiring an escape sequence or command.
   */
  const INLINE_SHORTCUTS = {
      // Primes
      "''": { mode: 'math', value: '^{\\doubleprime}' },
      // Greek letters
      'alpha': '\\alpha',
      'delta': '\\delta',
      'Delta': '\\Delta',
      'pi': { mode: 'math', value: '\\pi' },
      'pi ': { mode: 'text', value: '\\pi ' },
      'Pi': { mode: 'math', value: '\\Pi' },
      'theta': '\\theta',
      'Theta': '\\Theta',
      // Letter-like
      'ii': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\imaginaryI',
      },
      'jj': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\imaginaryJ',
      },
      'ee': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\exponentialE',
      },
      'nabla': { mode: 'math', value: '\\nabla' },
      'grad': { mode: 'math', value: '\\nabla' },
      'del': { mode: 'math', value: '\\partial' },
      '\u221E': '\\infty',
      // '&infin;': '\\infty',
      // '&#8734;': '\\infty',
      'oo': {
          mode: 'math',
          after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
          value: '\\infty',
      },
      // Big operators
      '∑': { mode: 'math', value: '\\sum' },
      'sum': { mode: 'math', value: '\\sum_{#?}^{#?}' },
      'prod': { mode: 'math', value: '\\prod_{#?}^{#?}' },
      'sqrt': { mode: 'math', value: '\\sqrt{#?}' },
      // '∫':                    '\\int',             // There's a alt-B command for this
      '∆': { mode: 'math', value: '\\differentialD' },
      '∂': { mode: 'math', value: '\\differentialD' },
      // Functions
      'arcsin': { mode: 'math', value: '\\arcsin' },
      'arccos': { mode: 'math', value: '\\arccos' },
      'arctan': { mode: 'math', value: '\\arctan' },
      'sin': { mode: 'math', value: '\\sin' },
      'sinh': { mode: 'math', value: '\\sinh' },
      'cos': { mode: 'math', value: '\\cos' },
      'cosh': { mode: 'math', value: '\\cosh' },
      'tan': { mode: 'math', value: '\\tan' },
      'tanh': { mode: 'math', value: '\\tanh' },
      'sec': { mode: 'math', value: '\\sec' },
      'csc': { mode: 'math', value: '\\csc' },
      'cot': { mode: 'math', value: '\\cot' },
      'log': { mode: 'math', value: '\\log' },
      'ln': { mode: 'math', value: '\\ln' },
      'exp': { mode: 'math', value: '\\exp' },
      'lim': { mode: 'math', value: '\\lim_{#?}' },
      // Differentials
      // According to ISO31/XI (ISO 80000-2), differentials should be upright
      'dx': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\differentialD x',
      },
      'dy': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\differentialD y',
      },
      'dt': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\differentialD t',
      },
      // Logic
      'AA': { mode: 'math', value: '\\forall' },
      'EE': { mode: 'math', value: '\\exists' },
      '!EE': { mode: 'math', value: '\\nexists' },
      '&&': { mode: 'math', value: '\\land' },
      // The shortcut for the greek letter "xi" is interfering with "x in"
      'xin': {
          mode: 'math',
          after: 'nothing+text+relop+punct+openfence+space',
          value: 'x \\in',
      },
      'in': {
          mode: 'math',
          after: 'nothing+letter+closefence',
          value: '\\in',
      },
      '!in': { mode: 'math', value: '\\notin' },
      // Sets
      'NN': '\\N',
      'ZZ': '\\Z',
      'QQ': '\\Q',
      'RR': '\\R',
      'CC': '\\C',
      'PP': '\\P',
      // Operators
      'xx': { mode: 'math', value: '\\times' },
      '+-': { mode: 'math', value: '\\pm' },
      // Relational operators
      '!=': { mode: 'math', value: '\\ne' },
      '>=': { mode: 'math', value: '\\ge' },
      '<=': { mode: 'math', value: '\\le' },
      '<<': { mode: 'math', value: '\\ll' },
      '>>': { mode: 'math', value: '\\gg' },
      '~~': { mode: 'math', value: '\\approx' },
      // More operators
      '≈': { mode: 'math', value: '\\approx' },
      '?=': { mode: 'math', value: '\\questeq' },
      '÷': { mode: 'math', value: '\\div' },
      '¬': { mode: 'math', value: '\\neg' },
      ':=': { mode: 'math', value: '\\coloneq' },
      '::': { mode: 'math', value: '\\Colon' },
      // Fences
      '(:': { mode: 'math', value: '\\langle' },
      ':)': { mode: 'math', value: '\\rangle' },
      // More Greek letters
      'beta': '\\beta',
      'chi': '\\chi',
      'epsilon': '\\epsilon',
      'varepsilon': '\\varepsilon',
      'eta': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\eta',
      },
      'eta ': {
          mode: 'text',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\eta ',
      },
      'gamma': '\\gamma',
      'Gamma': '\\Gamma',
      'iota': '\\iota',
      'kappa': '\\kappa',
      'lambda': '\\lambda',
      'Lambda': '\\Lambda',
      'mu': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\mu',
      },
      'mu ': {
          mode: 'text',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\mu ',
      },
      'nu': {
          mode: 'math',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\nu',
      },
      'nu ': {
          mode: 'text',
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\nu ',
      },
      'µ': '\\mu',
      'phi': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\phi',
      },
      'Phi': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\Phi',
      },
      'varphi': '\\varphi',
      'psi': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\psi',
      },
      'Psi': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\Psi',
      },
      'rho': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\rho',
      },
      'sigma': '\\sigma',
      'Sigma': '\\Sigma',
      'tau': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\tau',
      },
      'vartheta': '\\vartheta',
      'upsilon': '\\upsilon',
      'xi': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\xi',
      },
      'Xi': {
          after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
          value: '\\Xi',
      },
      'zeta': '\\zeta',
      'omega': '\\omega',
      'Omega': '\\Omega',
      'Ω': '\\omega',
      // More Logic
      'forall': { mode: 'math', value: '\\forall' },
      'exists': {
          mode: 'math',
          value: '\\exists',
      },
      '!exists': {
          mode: 'math',
          value: '\\nexists',
      },
      ':.': {
          mode: 'math',
          value: '\\therefore',
      },
      // MORE FUNCTIONS
      // 'arg': '\\arg',
      'liminf': '\\operatorname*{lim~inf}_{#?}',
      'limsup': '\\operatorname*{lim~sup}_{#?}',
      'argmin': '\\operatorname*{arg~min}_{#?}',
      'argmax': '\\operatorname*{arg~max}_{#?}',
      'det': '\\det',
      'mod': {
          mode: 'math',
          value: '\\mod',
      },
      'max': {
          mode: 'math',
          value: '\\max',
      },
      'min': {
          mode: 'math',
          value: '\\min',
      },
      'erf': '\\operatorname{erf}',
      'erfc': '\\operatorname{erfc}',
      'bessel': {
          mode: 'math',
          value: '\\operatorname{bessel}',
      },
      'mean': {
          mode: 'math',
          value: '\\operatorname{mean}',
      },
      'median': {
          mode: 'math',
          value: '\\operatorname{median}',
      },
      'fft': {
          mode: 'math',
          value: '\\operatorname{fft}',
      },
      'lcm': {
          mode: 'math',
          value: '\\operatorname{lcm}',
      },
      'gcd': {
          mode: 'math',
          value: '\\operatorname{gcd}',
      },
      'randomReal': '\\operatorname{randomReal}',
      'randomInteger': '\\operatorname{randomInteger}',
      'Re': {
          mode: 'math',
          value: '\\operatorname{Re}',
      },
      'Im': {
          mode: 'math',
          value: '\\operatorname{Im}',
      },
      // UNITS
      'mm': {
          mode: 'math',
          after: 'nothing+digit',
          value: '\\operatorname{mm}',
      },
      'cm': {
          mode: 'math',
          after: 'nothing+digit',
          value: '\\operatorname{cm}',
      },
      'km': {
          mode: 'math',
          after: 'nothing+digit',
          value: '\\operatorname{km}',
      },
      'kg': {
          mode: 'math',
          after: 'nothing+digit',
          value: '\\operatorname{kg}',
      },
      // '||':                   '\\lor',
      '...': '\\ldots',
      '+...': '+\\cdots',
      '-...': '-\\cdots',
      '->...': '\\to\\cdots',
      '->': '\\to',
      '|->': '\\mapsto',
      '-->': '\\longrightarrow',
      //    '<-':                   '\\leftarrow',
      '<--': '\\longleftarrow',
      '=>': '\\Rightarrow',
      '==>': '\\Longrightarrow',
      // '<=': '\\Leftarrow',     // CONFLICTS WITH LESS THAN OR EQUAL
      '<=>': '\\Leftrightarrow',
      '<->': '\\leftrightarrow',
      '(.)': '\\odot',
      '(+)': '\\oplus',
      '(/)': '\\oslash',
      '(*)': '\\otimes',
      '(-)': '\\ominus',
      // '(-)':                  '\\circleddash',
      '||': '\\Vert',
      '{': '\\{',
      '}': '\\}',
      '*': '\\cdot',
  };

  const AUDIO_FEEDBACK_VOLUME = 0.5; // From 0.0 to 1.0
  const NO_OP_LISTENER = () => { };
  function loadSound(soundDirectory, sound) {
      if (sound instanceof HTMLAudioElement) {
          sound.load();
          return sound;
      }
      const url = new URL((soundDirectory !== null && soundDirectory !== void 0 ? soundDirectory : './sounds') + '/' + sound, gScriptUrl).toString();
      const result = new Audio();
      result.preload = 'auto';
      result.src = url;
      result.volume = AUDIO_FEEDBACK_VOLUME;
      result.load();
      return result;
  }
  function unloadSound(sound) {
      if (sound instanceof HTMLAudioElement) {
          sound.pause();
          sound.removeAttribute('src');
          // Important to properly unload: call load() after removing the
          // `src` attribute
          sound.load();
      }
  }
  function update(current, updates) {
      var _a, _b;
      const soundsDirectory = (_b = (_a = updates.soundsDirectory) !== null && _a !== void 0 ? _a : current.soundsDirectory) !== null && _b !== void 0 ? _b : './sounds';
      const result = get(current, Object.keys(current));
      Object.keys(updates).forEach((key) => {
          var _a, _b, _c, _d, _e;
          switch (key) {
              case 'scriptDepth':
                  if (isArray(updates.scriptDepth)) {
                      result.scriptDepth = [updates.scriptDepth[0], updates.scriptDepth[1]];
                  }
                  else if (typeof updates.scriptDepth === 'number') {
                      result.scriptDepth = [updates.scriptDepth, updates.scriptDepth];
                  }
                  else {
                      throw new TypeError('Unexpected value for scriptDepth');
                  }
                  break;
              case 'namespace':
                  // Validate the namespace (used for `data-` attributes)
                  if (!/^[a-z]*-?$/.test(updates.namespace)) {
                      throw new Error('namespace must be a string of lowercase characters only');
                  }
                  if (!updates.namespace.endsWith('-')) {
                      result.namespace = updates.namespace + '-';
                  }
                  else {
                      result.namespace = updates.namespace;
                  }
                  break;
              case 'locale':
                  result.locale =
                      updates.locale === 'auto'
                          ? (_a = navigator === null || navigator === void 0 ? void 0 : navigator.language.slice(0, 5)) !== null && _a !== void 0 ? _a : 'en' : updates.locale;
                  l10n.locale = result.locale;
                  break;
              case 'strings':
                  l10n.merge(updates.strings);
                  result.strings = l10n.strings;
                  break;
              case 'virtualKeyboardLayout':
                  result.virtualKeyboardLayout = updates.virtualKeyboardLayout;
                  break;
              case 'virtualKeyboardMode':
                  {
                      const isTouchDevice = (_b = window.matchMedia) === null || _b === void 0 ? void 0 : _b.call(window, '(any-pointer: coarse)').matches;
                      if (updates.virtualKeyboardMode === 'auto') {
                          result.virtualKeyboardMode = isTouchDevice ? 'onfocus' : 'off';
                      }
                      else {
                          result.virtualKeyboardMode = updates.virtualKeyboardMode;
                      }
                  }
                  break;
              case 'letterShapeStyle':
                  if (updates.letterShapeStyle === 'auto') {
                      // Letter shape style (locale dependent)
                      if (l10n.locale.startsWith('fr')) {
                          result.letterShapeStyle = 'french';
                      }
                      else {
                          result.letterShapeStyle = 'tex';
                      }
                  }
                  else {
                      result.letterShapeStyle = updates.letterShapeStyle;
                  }
                  break;
              case 'plonkSound':
                  unloadSound(result.plonkSound);
                  result.plonkSound = loadSound(soundsDirectory, updates.plonkSound);
                  break;
              case 'keypressSound':
                  unloadSound(result.keypressSound);
                  if (typeof updates.keypressSound === 'string') {
                      const sound = loadSound(soundsDirectory, updates.keypressSound);
                      result.keypressSound = {
                          delete: sound,
                          return: sound,
                          spacebar: sound,
                          default: sound,
                      };
                  }
                  else if (updates.keypressSound instanceof HTMLAudioElement) {
                      result.keypressSound = {
                          delete: updates.keypressSound,
                          return: updates.keypressSound,
                          spacebar: updates.keypressSound,
                          default: updates.keypressSound,
                      };
                  }
                  else {
                      if (!updates.keypressSound.default) {
                          throw new Error('Missing keypressSound.default');
                      }
                      result.keypressSound = { ...updates.keypressSound };
                      result.keypressSound.default = loadSound(soundsDirectory, result.keypressSound.default);
                      result.keypressSound.delete = (_c = loadSound(soundsDirectory, result.keypressSound.delete)) !== null && _c !== void 0 ? _c : updates.keypressSound.default;
                      result.keypressSound.return = (_d = loadSound(soundsDirectory, result.keypressSound.return)) !== null && _d !== void 0 ? _d : updates.keypressSound.default;
                      result.keypressSound.spacebar = (_e = loadSound(soundsDirectory, result.keypressSound.spacebar)) !== null && _e !== void 0 ? _e : updates.keypressSound.default;
                  }
                  break;
              case 'onBlur':
              case 'onFocus':
              case 'onContentWillChange':
              case 'onContentDidChange':
              case 'onSelectionWillChange':
              case 'onSelectionDidChange':
              case 'onUndoStateWillChange':
              case 'onUndoStateDidChange':
              case 'onModeChange':
              case 'onCommit':
              case 'onReadAloudStatus':
              case 'onError':
                  if (updates[key] === null) {
                      result[key] = NO_OP_LISTENER;
                  }
                  else if (typeof updates[key] !== 'function') {
                      throw new TypeError(key + ' must be a function or null');
                  }
                  result[key] = updates[key];
                  break;
              default:
                  if (isArray(updates[key])) {
                      result[key] = [...updates[key]];
                  }
                  else if (typeof updates[key] === 'object') {
                      result[key] = { ...updates[key] };
                  }
                  else {
                      result[key] = updates[key];
                  }
          }
      });
      // @revisit 1.0: for backward compatibility, interprets the overrideDefaultInlineShortcuts
      // property
      if (updates.overrideDefaultInlineShortcuts !== undefined) {
          if (updates.overrideDefaultInlineShortcuts) {
              result.inlineShortcuts = updates.inlineShortcuts;
          }
          else {
              result.inlineShortcuts = {
                  ...INLINE_SHORTCUTS,
                  ...updates.inlineShortcuts,
              };
          }
      }
      return result;
  }
  function get(config, keys) {
      let resolvedKeys;
      if (typeof keys === 'string') {
          resolvedKeys = [keys];
      }
      else if (keys === undefined) {
          resolvedKeys = Object.keys(config);
      }
      else {
          resolvedKeys = keys;
      }
      const result = {};
      resolvedKeys.forEach((x) => {
          if (isArray(result[x])) {
              result[x] = [...result[x]];
          }
          else if (typeof result[x] === 'object') {
              result[x] = { ...result[x] };
          }
          else {
              result[x] = config[x];
          }
      });
      // If requested a single key, return its value
      if (typeof keys === 'string') {
          return result[keys];
      }
      return result;
  }
  function getDefault() {
      return {
          namespace: '',
          substituteTextArea: undefined,
          readOnly: false,
          createHTML: (s) => s,
          fontsDirectory: './fonts',
          soundsDirectory: './sounds',
          defaultMode: 'math',
          macros: MACROS,
          horizontalSpacingScale: 1,
          letterShapeStyle: 'auto',
          smartMode: false,
          smartFence: true,
          smartSuperscript: true,
          scriptDepth: [Infinity, Infinity],
          removeExtraneousParentheses: true,
          ignoreSpacebarInMathMode: true,
          locale: l10n.locale,
          strings: l10n.strings,
          keybindings: DEFAULT_KEYBINDINGS,
          overrideDefaultInlineShortcuts: false,
          inlineShortcuts: {},
          inlineShortcutTimeout: 0,
          virtualKeyboardToggleGlyph: `<span style="width: 21px; margin-top: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>`,
          virtualKeyboardMode: 'auto',
          virtualKeyboards: 'all',
          virtualKeyboardLayout: 'auto',
          customVirtualKeyboardLayers: {},
          customVirtualKeyboards: {},
          virtualKeyboardTheme: /android|cros/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)
              ? 'material'
              : 'apple',
          keypressVibration: true,
          keypressSound: null,
          plonkSound: null,
          virtualKeyboardToolbar: 'default',
          useSharedVirtualKeyboard: false,
          sharedVirtualKeyboardTargetOrigin: window.origin,
          originValidator: 'same-origin',
          textToSpeechRules: 'mathlive',
          textToSpeechMarkup: '',
          textToSpeechRulesOptions: {},
          speechEngine: 'local',
          speechEngineVoice: 'Joanna',
          speechEngineRate: '100%',
          speakHook: NO_OP_LISTENER,
          readAloudHook: NO_OP_LISTENER,
          onAnnounce: defaultAnnounceHook,
          onKeystroke: () => true,
          onMoveOutOf: () => true,
          onTabOutOf: () => true,
          onBlur: NO_OP_LISTENER,
          onFocus: NO_OP_LISTENER,
          onContentWillChange: NO_OP_LISTENER,
          onContentDidChange: NO_OP_LISTENER,
          onSelectionWillChange: NO_OP_LISTENER,
          onSelectionDidChange: NO_OP_LISTENER,
          onUndoStateWillChange: NO_OP_LISTENER,
          onUndoStateDidChange: NO_OP_LISTENER,
          onModeChange: NO_OP_LISTENER,
          onReadAloudStatus: NO_OP_LISTENER,
          onCommit: NO_OP_LISTENER,
          onError: () => { },
      };
  }

  /**
   * Return an array of potential shortcuts
   */
  function getInlineShortcutsStartingWith(s, config) {
      const result = [];
      const skipDefaultShortcuts = config.overrideDefaultInlineShortcuts;
      for (let i = 0; i <= s.length - 1; i++) {
          const s2 = s.slice(Math.max(0, i));
          if (!skipDefaultShortcuts) {
              Object.keys(INLINE_SHORTCUTS).forEach((key) => {
                  if (key.startsWith(s2) && !result.includes(key)) {
                      result.push(key);
                  }
              });
          }
          const customInlineShortcuts = (config === null || config === void 0 ? void 0 : config.inlineShortcuts) ? config.inlineShortcuts
              : null;
          if (customInlineShortcuts) {
              Object.keys(customInlineShortcuts).forEach((key) => {
                  if (key.startsWith(s2)) {
                      result.push(key);
                  }
              });
          }
      }
      return result;
  }
  /**
   *
   * @param siblings atoms preceding this potential shortcut
   */
  function validateShortcut(siblings, shortcut) {
      if (!shortcut)
          return '';
      // If it's a simple shortcut (no conditional), it's always valid
      if (typeof shortcut === 'string')
          return shortcut;
      // If we have no context, we assume all the shortcuts are valid
      if (!siblings)
          return shortcut.value;
      let nothing = false;
      let letter = false;
      let digit = false;
      let isFunction = false;
      let frac = false;
      let surd = false;
      let binop = false;
      let relop = false;
      let punct = false;
      let array = false;
      let openfence = false;
      let closefence = false;
      let text = false;
      let space = false;
      let sibling = siblings[siblings.length - 1];
      let index = siblings.length - 1;
      while (sibling && /msubsup|placeholder/.test(sibling.type)) {
          index -= 1;
          sibling = siblings[index];
      }
      nothing = !sibling || sibling.type === 'first'; // Start of a group
      if (sibling) {
          if (shortcut.mode !== undefined && sibling.mode !== shortcut.mode) {
              return '';
          }
          text = sibling.mode === 'text';
          letter = !text && sibling.type === 'mord' && LETTER.test(sibling.value);
          digit = !text && sibling.type === 'mord' && /\d+$/.test(sibling.value);
          isFunction = !text && sibling.isFunction;
          frac = sibling.type === 'genfrac';
          surd = sibling.type === 'surd';
          binop = sibling.type === 'mbin';
          relop = sibling.type === 'mrel';
          punct = sibling.type === 'mpunct' || sibling.type === 'minner';
          array = sibling.type === 'array';
          openfence = sibling.type === 'mopen';
          closefence = sibling.type === 'mclose' || sibling.type === 'leftright';
          space = sibling.type === 'space';
      }
      if (shortcut.after !== undefined) {
          // If this is a conditional shortcut, consider the conditions now
          if ((shortcut.after.includes('nothing') && nothing) ||
              (shortcut.after.includes('letter') && letter) ||
              (shortcut.after.includes('digit') && digit) ||
              (shortcut.after.includes('function') && isFunction) ||
              (shortcut.after.includes('frac') && frac) ||
              (shortcut.after.includes('surd') && surd) ||
              (shortcut.after.includes('binop') && binop) ||
              (shortcut.after.includes('relop') && relop) ||
              (shortcut.after.includes('punct') && punct) ||
              (shortcut.after.includes('array') && array) ||
              (shortcut.after.includes('openfence') && openfence) ||
              (shortcut.after.includes('closefence') && closefence) ||
              (shortcut.after.includes('text') && text) ||
              (shortcut.after.includes('space') && space)) {
              return shortcut.value;
          }
          return '';
      }
      return shortcut.value;
  }
  /**
   *
   * @param context - atoms preceding the candidate, potentially used
   * to reduce which shortcuts are applicable. If 'null', no restrictions are
   * applied.
   * @param s - candidate inline shortcuts (e.g. `'pi'`)
   * @return A replacement string matching the shortcut (e.g. `'\pi'`)
   */
  function getInlineShortcut(context, s, shortcuts) {
      var _a;
      return validateShortcut(context, (_a = shortcuts === null || shortcuts === void 0 ? void 0 : shortcuts[s]) !== null && _a !== void 0 ? _a : INLINE_SHORTCUTS[s]);
  }

  /**
   * Convert the atoms before the anchor to 'text' mode
   * @param count - how many atoms back to look at
   * @param {function} until - callback to indicate when to stop
   * @private
   */
  function convertLastAtomsToText(model, count, until) {
      if (typeof count !== 'number') {
          until = count;
          count = Infinity;
      }
      if (count === undefined) {
          count = Infinity;
      }
      let i = model.position;
      let done = false;
      while (!done) {
          const atom = model.at(i);
          done =
              count === 0 ||
                  !atom ||
                  atom.mode !== 'math' ||
                  !(/mord|textord|mpunct/.test(atom.type) ||
                      (atom.type === 'mop' && /[a-zA-Z]+/.test(atom.value))) ||
                  !atom.hasEmptyBranch('superscript') ||
                  !atom.hasEmptyBranch('subscript') ||
                  (until && !until(atom));
          if (!done) {
              atom.mode = 'text';
              atom.command = atom.value;
              atom.latex = undefined;
          }
          i -= 1;
          count -= 1;
      }
      contentDidChange(model);
  }
  /**
   * Convert the atoms before the anchor to 'math' mode 'mord'
   * @param {number} count - how many atoms back to look at
   * @param {function} until - callback to indicate when to stop
   * @private
   */
  function convertLastAtomsToMath(model, count, until) {
      if (typeof count === 'function') {
          until = count;
          count = Infinity;
      }
      if (count === undefined) {
          count = Infinity;
      }
      let i = model.position;
      let done = false;
      while (!done) {
          const atom = model.at(i);
          done =
              count === 0 ||
                  !atom ||
                  atom.isFirstSibling ||
                  atom.mode !== 'text' ||
                  atom.value === ' ' ||
                  (until && !until(atom));
          if (!done) {
              atom.mode = 'math';
          }
          i -= 1;
          count -= 1;
      }
      removeIsolatedSpace(model);
      contentDidChange(model);
  }
  // Export function applyMode(
  //     _mathfield: MathfieldPrivate,
  //     _range: Range,
  //     _mode: ParseMode
  // ): boolean {
  // const model = mathfield.model;
  // There's a mode ('text', 'math', 'command') change
  // if (model.selectionIsCollapsed) {
  //     // Nothing selected
  //     mathfield.switchMode(mode as ParseMode);
  //     return
  // }
  // Convert the selection from one mode to another
  //         const previousMode = mathfield.mode;
  //         const targetMode =
  //             (getMode(model, model.position) ??
  //                 mathfield.options.defaultMode) === 'math'
  //                 ? 'text'
  //                 : 'math';
  //         let convertedSelection = mathfield.getValue(
  //             mathfield.selection,
  //             'ASCIIMath'
  //         );
  //         if (targetMode === 'math' && /^"[^"]+"$/.test(convertedSelection)) {
  //             convertedSelection = convertedSelection.slice(1, -1);
  //         }
  //         mathfield.insert(convertedSelection, {
  //             mode: targetMode,
  //             selectionMode: 'item',
  //             format: targetMode === 'text' ? 'text' : 'ASCIIMath',
  //         });
  //         mathfield.mode = targetMode;
  //         const [groupStart, groupEnd] = model.getSiblingsRange(
  //             model.position
  //         );
  //         const first = Math.min(model.anchor, model.position);
  //         const last = Math.max(model.anchor, model.position);
  //         if (
  //             groupStart >= first &&
  //             groupStart <= last &&
  //             groupEnd >= first &&
  //             groupEnd <= last
  //         ) {
  //             // The entire group was selected. Adjust parent mode if
  //             // appropriate
  //             const parent = model.at(model.position).parent;
  //             if (
  //                 parent &&
  //                 (parent.type === 'group' || parent.type === 'root')
  //             ) {
  //                 parent.mode = targetMode;
  //             }
  //         }
  //         // Notify of mode change
  //         if (
  //             mathfield.mode !== previousMode &&
  //             typeof mathfield.options.onModeChange === 'function'
  //         ) {
  //             mathfield.options.onModeChange(mathfield, mathfield.mode);
  //         }
  // }
  //     return false;
  // }
  /**
   * Going backwards from the anchor, if a text zone consisting of a single
   * space character is found (i.e. it is surrounded by math zone),
   * remove it.
   */
  function removeIsolatedSpace(model) {
      var _a;
      let i = model.position - 1;
      while (i >= 0 && ((_a = model.at(i)) === null || _a === void 0 ? void 0 : _a.mode) === 'math') {
          i -= 1;
      }
      if (i < 0)
          return;
      // If the atom before the last one converted is a
      // text mode space, preceded by a math mode atom,
      // remove the space
      if (model.at(i).mode === 'text' &&
          model.at(i).value === ' ' &&
          model.at(i - 1).mode === 'math') {
          model.at(i - 1).parent.removeChild(model.at(i - 1));
          contentDidChange(model);
          // We need to adjust the selection after doing some surgery on the atoms list
          // But we don't want to receive selection notification changes
          // which could have a side effect of changing the mode :(
          const save = model.suppressChangeNotifications;
          model.suppressChangeNotifications = true;
          model.position -= 1;
          model.suppressChangeNotifications = save;
      }
  }
  /**
   * Return the characters before the insertion point that could potentially be
   * turned into text mode.
   * This excludes things like 'mop' (e.g. \sin)
   */
  function getTextBeforePosition(model) {
      // Going backwards, accumulate
      let result = '';
      let i = model.position;
      let done = false;
      while (!done) {
          const atom = model.at(i);
          done = !(atom &&
              (atom.mode === 'text' ||
                  (atom.mode === 'math' && /mord|textord|mpunct/.test(atom.type))));
          if (!done) {
              result = atom.value + result;
          }
          i -= 1;
      }
      return result;
  }
  /**
   * Consider whether to switch mode give the content before the insertion point
   * and the character being input
   *
   * @param keystroke
   * @param evt - a Event corresponding to the keystroke
   * @return true if the mode should change
   */
  function smartMode(mathfield, keystroke, evt) {
      if (mathfield.smartModeSuppressed) {
          return false;
      }
      const { model } = mathfield;
      // Are we at the end of a group?
      if (!model.at(model.position).isLastSibling) {
          return false;
      }
      // Is there an event that would produce a printable char?
      // (i.e. not an arrow key, etc...)
      if (!evt || !mightProducePrintableCharacter(evt)) {
          return false;
      }
      const c = eventToChar(evt);
      if (!model.selectionIsCollapsed) {
          // There is a selection
          if (mathfield.mode === 'text') {
              // If the character is '/' or '_' or '^', switch to 'math'
              if (/[/_^]/.test(c)) {
                  return true;
              }
          }
          return false;
      }
      const context = getTextBeforePosition(model) + c;
      if (mathfield.mode === 'text') {
          // We're in text mode. Should we switch to math?
          if (keystroke === 'Esc' || /[/\\]/.test(c)) {
              // If this is a command for a fraction,
              // or the '\' command mode key
              // switch to 'math'
              return true;
          }
          if (/[\^_]/.test(c)) {
              // If this is a superscript or subscript
              // switch to 'math'
              if (/(^|\s)[a-zA-Z][^_]$/.test(context)) {
                  // If left hand context is a single letter,
                  // convert it to math
                  convertLastAtomsToMath(model, 1);
              }
              return true;
          }
          // If this is a closing matching fence
          // switch to 'math' mode
          const lFence = { ')': '(', '}': '{', ']': '[' }[c];
          const { parent } = model.at(model.position);
          if (lFence &&
              parent instanceof LeftRightAtom &&
              parent.leftDelim === lFence) {
              return true;
          }
          if (/(^|[^a-zA-Z])(a|I) $/.test(context)) {
              // Single letters that are valid words in the current language
              // Do nothing. @todo: localization
              return false;
          }
          if (/[$€£₤₺¥¤฿¢₡₧₨₹₩₱]/u.test(c)) {
              // A currency symbol.
              // Switch to math mode
              return true;
          }
          if (/(^|[^a-zA-Z'’])[a-zA-Z] $/.test(context)) {
              // An isolated letter, followed by a space:
              // Convert the letter to math, stay in text mode.
              convertLastAtomsToMath(model, 1);
              return false;
          }
          if (/\D\.[^\d\s]$/.test(context)) {
              // A period followed by something other than space or a digit
              // and not preceded by a digit.
              // We thought this was a text period, but turns out it's not
              // Turn it into a \cdot
              convertLastAtomsToMath(model, 1);
              const atom = model.at(model.position);
              atom.value = '⋅'; // Centered dot
              atom.style.variant = 'normal'; // @revisit. Was 'auto'. Check for proper conversion.
              atom.command = '\\cdot';
              atom.latex = undefined;
              contentDidChange(model);
              return true;
          }
          if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(context)) {
              // Single letter (x), followed by a non-letter (>, =...)
              convertLastAtomsToMath(model, 1);
              return true;
          }
          if (/\.\d$/.test(context)) {
              // If the new character is a digit,
              // and it was preceded by a dot (which may have been converted
              // to text)
              // turn the dot back into 'math'
              convertLastAtomsToMath(model, 1);
              return true;
          }
          if (/\([\d+\-.]$/.test(context)) {
              // An open paren followed by a number
              // Turn the paren back to math and switch.
              convertLastAtomsToMath(model, 1);
              return true;
          }
          if (/\([a-z][,;]$/.test(context)) {
              // An open paren followed by a single letter, then a "," or ";"
              // Turn the paren back and letter to math and switch.
              convertLastAtomsToMath(model, 2);
              return true;
          }
          // The tests above can look behind and change what had previously
          // been entered. Now, let's just look at the typed character.
          if (/[\d+\-=><*|]$/.test(c)) {
              // If this new character looks like a number,
              // or a relational operator (=, <, >)
              // or a "*" or "|"
              // (note that <=, >=, etc... are handled separately as shortcuts)
              // switch to 'math'
              removeIsolatedSpace(model);
              return true;
          }
      }
      else {
          // We're in math mode. Should we switch to text?
          if (keystroke === '[Space]') {
              convertLastAtomsToText(model, undefined, (a) => /[a-z][:,;.]$/.test(a.value));
              return true;
          }
          if (/[a-zA-Z]{3,}$/.test(context) && !/(dxd|abc|xyz|uvw)$/.test(context)) {
              // A sequence of three characters
              // (except for some exceptions)
              // Convert them to text.
              convertLastAtomsToText(model, undefined, (a) => /[a-zA-Z]/.test(a.value));
              return true;
          }
          if (/(^|\W)(if)$/i.test(context)) {
              // @todo localization
              convertLastAtomsToText(model, 1);
              return true;
          }
          if (/(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/u.test(context) &&
              !/(αβγ)$/.test(context)) {
              // A sequence of three *greek* characters
              // (except for one exception)
              // Convert them to text.
              convertLastAtomsToText(model, undefined, (a) => /(:|,|;|.|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/u.test(a.value));
              return true;
          }
          if (c === '?') {
              // If the last character is a question mark,
              // turn it to 'text'
              return true;
          }
          if (c === '.' && !/[\d-+]\.$/.test(context)) {
              // A period after something other than a digit (or minus)
              return true;
          }
      }
      return false;
  }

  /**
   * Attempts to parse and interpret a string in an unknown format, possibly
   * ASCIIMath and return a canonical LaTeX string.
   *
   * The format recognized are one of these variations:
   * - ASCIIMath: Only supports a subset
   * (1/2x)
   * 1/2sin x                     -> \frac {1}{2}\sin x
   * 1/2sinx                      -> \frac {1}{2}\sin x
   * (1/2sin x (x^(2+1))          // Unbalanced parentheses
   * (1/2sin(x^(2+1))             -> \left(\frac {1}{2}\sin \left(x^{2+1}\right)\right)
   * alpha + (pi)/(4)             -> \alpha +\frac {\pi }{4}
   * x=(-b +- sqrt(b^2 – 4ac))/(2a)
   * alpha/beta
   * sqrt2 + sqrtx + sqrt(1+a) + sqrt(1/2)
   * f(x) = x^2 "when" x >= 0
   * AA n in QQ
   * AA x in RR "," |x| > 0
   * AA x in RR "," abs(x) > 0
   *
   * - UnicodeMath (generated by Microsoft Word): also only supports a subset
   *      - See https://www.unicode.org/notes/tn28/UTN28-PlainTextMath-v3.1.pdf
   * √(3&x+1)
   * {a+b/c}
   * [a+b/c]
   * _a^b x
   * lim_(n->\infty) n
   * \iint_(a=0)^\infty  a
   *
   * - "JavaScript Latex": a variant that is LaTeX, but with escaped backslashes
   *  \\frac{1}{2} \\sin x
   */
  function parseMathString(s, options) {
      var _a;
      if (!s)
          return ['latex', ''];
      // Nothing to do if a single character
      if (s.length <= 1)
          return ['latex', s];
      if (!options || options.format !== 'ASCIIMath') {
          // This is not explicitly ASCIIMath. Try to infer if this is LaTex...
          // If the strings is surrounded by `$..$` or `$$..$$`, assumes it is LaTeX
          const trimedString = s.trim();
          if ((trimedString.startsWith('$$') && trimedString.endsWith('$$')) ||
              (trimedString.startsWith('\\[') && trimedString.endsWith('\\]')) ||
              (trimedString.startsWith('\\(') && trimedString.endsWith('\\)'))) {
              return ['latex', trimedString.substring(2, trimedString.length - 2)];
          }
          if (trimedString.startsWith('$') && trimedString.endsWith('$')) {
              return ['latex', trimedString.substring(1, trimedString.length - 1)];
          }
          // Replace double-backslash (coming from JavaScript) to a single one
          s = s.replace(/\\\\([^\s\n])/g, '\\$1');
          if (s.includes('\\')) {
              // If the string includes a '\' it's probably a LaTeX string
              // (that's not completely true, it could be a UnicodeMath string, since
              // UnicodeMath supports some LaTeX commands. However, we need to pick
              // one in order to correctly interpret {} (which are argument delimiters
              // in LaTeX, and are fences in UnicodeMath)
              return ['latex', s];
          }
      }
      s = s.replace(/\u2061/gu, ''); // Remove function application
      s = s.replace(/\u3016/gu, '{'); // WHITE LENTICULAR BRACKET (grouping)
      s = s.replace(/\u3017/gu, '}'); // WHITE LENTICULAR BRACKET (grouping)
      s = s.replace(/([^\\])sinx/g, '$1\\sin x'); // Common typo
      s = s.replace(/([^\\])cosx/g, '$1\\cos x '); // Common typo
      s = s.replace(/\u2013/g, '-'); // EN-DASH, sometimes used as a minus sign
      return [
          (_a = options === null || options === void 0 ? void 0 : options.format) !== null && _a !== void 0 ? _a : 'ASCIIMath',
          parseMathExpression(s, options !== null && options !== void 0 ? options : {}),
      ];
  }
  function parseMathExpression(s, options) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j;
      if (!s)
          return '';
      let done = false;
      let m;
      if (!done && (s.startsWith('^') || s.startsWith('_'))) {
          // Superscript and subscript
          m = parseMathArgument(s.slice(1), {
              inlineShortcuts: (_a = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _a !== void 0 ? _a : {},
              noWrap: true,
          });
          s = s[0] + '{' + m.match + '}';
          s += parseMathExpression(m.rest, options);
          done = true;
      }
      if (!done) {
          m = s.match(/^(sqrt|\u221A)(.*)/);
          if (m) {
              // Square root
              m = parseMathArgument(m[2], {
                  inlineShortcuts: (_b = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _b !== void 0 ? _b : {},
                  noWrap: true,
              });
              const sqrtArgument = (_c = m.match) !== null && _c !== void 0 ? _c : '\\placeholder{}';
              s = '\\sqrt{' + sqrtArgument + '}';
              s += parseMathExpression(m.rest, options);
              done = true;
          }
      }
      if (!done) {
          m = s.match(/^(\\cbrt|\u221B)(.*)/);
          if (m) {
              // Cube root
              m = parseMathArgument(m[2], {
                  inlineShortcuts: (_d = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _d !== void 0 ? _d : {},
                  noWrap: true,
              });
              const sqrtArgument = (_e = m.match) !== null && _e !== void 0 ? _e : '\\placeholder{}';
              s = '\\sqrt[3]{' + sqrtArgument + '}';
              s += parseMathExpression(m.rest, options);
              done = true;
          }
      }
      if (!done) {
          m = s.match(/^abs(.*)/);
          if (m) {
              // Absolute value
              m = parseMathArgument(m[1], {
                  inlineShortcuts: (_f = options === null || options === void 0 ? void 0 : options.inlineShortcuts) !== null && _f !== void 0 ? _f : {},
                  noWrap: true,
              });
              s = '\\left|' + m.match + '\\right|';
              s += parseMathExpression(m.rest, options);
              done = true;
          }
      }
      if (!done) {
          m = s.match(/^["”“](.*?)["”“](.*)/);
          if (m) {
              // Quoted text
              s = '\\text{' + m[1] + '}';
              s += parseMathExpression(m[2], options);
              done = true;
          }
      }
      if (!done) {
          m = s.match(/^([^a-zA-Z({[_^\\\s"]+)(.*)/);
          // A string of symbols...
          // Could be a binary or relational operator, etc...
          if (m) {
              s = paddedShortcut(m[1], options);
              s += parseMathExpression(m[2], options);
              done = true;
          }
      }
      if (!done && /^([fgh])[^a-zA-Z]/.test(s)) {
          // This could be a function...
          m = parseMathArgument(s.slice(1), {
              inlineShortcuts: (_g = options.inlineShortcuts) !== null && _g !== void 0 ? _g : {},
              noWrap: true,
          });
          s =
              s[1] === '(' ? s[0] + '\\mleft(' + m.match + '\\mright)' : s[0] + m.match;
          s += parseMathExpression(m.rest, options);
          done = true;
      }
      if (!done) {
          m = s.match(/^([a-zA-Z]+)(.*)/);
          if (m) {
              // Some alphabetical string...
              // Could be a function name (sin) or symbol name (alpha)
              s = paddedShortcut(m[1], options);
              s += parseMathExpression(m[2], options);
              done = true;
          }
      }
      if (!done) {
          m = parseMathArgument(s, {
              inlineShortcuts: (_h = options.inlineShortcuts) !== null && _h !== void 0 ? _h : {},
              noWrap: true,
          });
          if (m.match && m.rest[0] === '/') {
              // Fraction
              const m2 = parseMathArgument(m.rest.slice(1), {
                  inlineShortcuts: (_j = options.inlineShortcuts) !== null && _j !== void 0 ? _j : {},
                  noWrap: true,
              });
              if (m2.match) {
                  s =
                      '\\frac{' +
                          m.match +
                          '}{' +
                          m2.match +
                          '}' +
                          parseMathExpression(m2.rest, options);
              }
              done = true;
          }
          else if (m.match) {
              s = s.startsWith('(')
                  ? '\\left(' +
                      m.match +
                      '\\right)' +
                      parseMathExpression(m.rest, options)
                  : m.match + parseMathExpression(m.rest, options);
              done = true;
          }
      }
      if (!done) {
          m = s.match(/^(\s+)(.*)$/);
          // Whitespace
          if (m) {
              s = ' ' + parseMathExpression(m[2], options);
              done = true;
          }
      }
      return s;
  }
  /**
   * Parse a math argument, as defined by ASCIIMath and UnicodeMath:
   * - Either an expression fenced in (), {} or []
   * - a number (- sign, digits, decimal point, digits)
   * - a single [a-zA-Z] letter (an identifier)
   * - a multi-letter shortcut (e.g., pi)
   * - a LaTeX command (\pi) (for UnicodeMath)
   * @return
   * - match: the parsed (and converted) portion of the string that is an argument
   * - rest: the raw, unconverted, rest of the string
   */
  function parseMathArgument(s, options) {
      let match = '';
      s = s.trim();
      let rest = s;
      let lFence = s.charAt(0);
      let rFence = { '(': ')', '{': '}', '[': ']' }[lFence];
      if (rFence) {
          // It's a fence
          let level = 1;
          let i = 1;
          while (i < s.length && level > 0) {
              if (s[i] === lFence)
                  level++;
              if (s[i] === rFence)
                  level--;
              i++;
          }
          if (level === 0) {
              // We've found the matching closing fence
              if (options.noWrap && lFence === '(') {
                  match = parseMathExpression(s.substring(1, i - 1), options);
              }
              else {
                  if (lFence === '{' && rFence === '}') {
                      lFence = '\\{';
                      rFence = '\\}';
                  }
                  match =
                      '\\left' +
                          lFence +
                          parseMathExpression(s.substring(1, i - 1), options) +
                          '\\right' +
                          rFence;
              }
              rest = s.slice(Math.max(0, i));
          }
          else {
              // Unbalanced fence...
              match = s.substring(1, i);
              rest = '';
          }
      }
      else {
          let m = s.match(/^([a-zA-Z]+)/);
          if (m) {
              // It's a string of letter, maybe a shortcut
              let shortcut = getInlineShortcut(null, s, options.inlineShortcuts);
              if (shortcut) {
                  shortcut = shortcut.replace('_{#?}', '');
                  shortcut = shortcut.replace('^{#?}', '');
                  return { match: shortcut, rest: s.slice(shortcut.length) };
              }
          }
          m = s.match(/^([a-zA-Z])/);
          if (m) {
              // It's a single letter
              return { match: m[1], rest: s.slice(1) };
          }
          m = s.match(/^(-)?\d+(\.\d*)?/);
          if (m) {
              // It's a number
              return { match: m[0], rest: s.slice(m[0].length) };
          }
          if (!/^\\(left|right)/.test(s)) {
              // It's a LaTeX command (but not a \left\right)
              m = s.match(/^(\\[a-zA-Z]+)/);
              if (m) {
                  rest = s.slice(m[1].length);
                  match = m[1];
              }
          }
      }
      return { match, rest };
  }
  function paddedShortcut(s, options) {
      let result = getInlineShortcut(null, s, options);
      if (result) {
          result = result.replace('_{#?}', '');
          result = result.replace('^{#?}', '');
          result += ' ';
      }
      else {
          result = s;
      }
      return result;
  }

  class MathModeEditor extends ModeEditor {
      constructor() {
          super('math');
      }
      onPaste(mathfield, ev) {
          let text = '';
          // Try to get a MathJSON data type
          const json = ev.clipboardData.getData('application/json');
          if (json) {
              try {
                  text = jsonToLatex(JSON.parse(json), {});
              }
              catch {
                  text = '';
              }
          }
          // If that didn't work, try some plain text
          if (!text) {
              text = ev.clipboardData.getData('text/plain');
          }
          if (text) {
              if (this.insert(mathfield.model, text, {
                  smartFence: mathfield.options.smartFence,
              })) {
                  requestUpdate(mathfield);
              }
              ev.preventDefault();
              ev.stopPropagation();
          }
          return true;
      }
      onCopy(mathfield, ev) {
          const value = mathfield.model.selectionIsCollapsed
              ? [0, mathfield.model.lastOffset]
              : range(mathfield.selection);
          ev.clipboardData.setData('text/plain', '$$' + mathfield.getValue(value, 'latex-expanded') + '$$');
          ev.clipboardData.setData('application/json', mathfield.getValue(value, 'json'));
          ev.clipboardData.setData('application/xml', mathfield.getValue(value, 'mathML'));
          // Prevent the current document selection from being written to the clipboard.
          ev.preventDefault();
      }
      insert(model, text, options) {
          var _a, _b, _c;
          if (!options.insertionMode)
              options.insertionMode = 'replaceSelection';
          if (!options.selectionMode)
              options.selectionMode = 'placeholder';
          if (!options.format)
              options.format = 'auto';
          options.macros = (_a = options.macros) !== null && _a !== void 0 ? _a : model.options.macros;
          //
          // Try to insert a smart fence.
          //
          if (!((_b = options.smartFence) !== null && _b !== void 0 ? _b : false)) {
              // When smartFence is turned off, only do a "smart" fence insert
              // if we're inside a `leftright`, at the last char
              const { parent } = model.at(model.position);
              if (parent instanceof LeftRightAtom &&
                  parent.rightDelim === '?' &&
                  model.at(model.position).isLastSibling &&
                  /^[)}\]|]$/.test(text)) {
                  parent.rightDelim = text;
                  model.position += 1;
                  selectionDidChange(model);
                  contentDidChange(model);
                  return true;
              }
          }
          else if (model.selectionIsCollapsed &&
              insertSmartFence(model, text, options.style)) {
              return true;
          }
          const { suppressChangeNotifications } = model;
          if (options.suppressChangeNotifications) {
              model.suppressChangeNotifications = true;
          }
          const contentWasChanging = model.suppressChangeNotifications;
          model.suppressChangeNotifications = true;
          //
          // Save the content of the selection, if any
          //
          const args = [];
          args[0] = model.getValue(model.selection);
          args['?'] = (_c = options.placeholder) !== null && _c !== void 0 ? _c : '\\placeholder{}';
          args['@'] = args['?'];
          //
          // Delete any selected items
          //
          if (options.insertionMode === 'replaceSelection' &&
              !model.selectionIsCollapsed) {
              model.position = model.deleteAtoms(range(model.selection));
          }
          else if (options.insertionMode === 'replaceAll') {
              model.root.setChildren([], 'body');
              model.position = 0;
          }
          else if (options.insertionMode === 'insertBefore') {
              model.collapseSelection('backward');
          }
          else if (options.insertionMode === 'insertAfter') {
              model.collapseSelection('forward');
          }
          //
          // Delete any placeholders before or after the insertion point
          //
          if (!model.at(model.position).isLastSibling &&
              model.at(model.position + 1).type === 'placeholder') {
              // Before a `placeholder`
              model.deleteAtoms([model.position, model.position + 1]);
          }
          else if (model.at(model.position).type === 'placeholder') {
              // After a `placeholder`
              model.deleteAtoms([model.position - 1, model.position]);
              model.position -= 1;
          }
          //
          // Calculate the implicit argument (#@)
          //
          if (args[0]) {
              // There was a selection, we'll use it for #@
              args['@'] = args[0];
          }
          else if (/(^|[^\\])#@/.test(text)) {
              // We'll use the preceding `mord`s or text mode atoms for it (implicit argument)
              const offset = getImplicitArgOffset(model);
              if (offset >= 0) {
                  args['@'] = model.getValue(offset, model.position);
                  model.deleteAtoms([offset, model.position]);
                  model.position = offset;
              }
          }
          if (!args[0])
              args[0] = args['?'];
          const newAtoms = convertStringToAtoms(model, text, args, options);
          if (!newAtoms)
              return false;
          //
          // Insert the new atoms
          //
          const { parent } = model.at(model.position);
          // Are we inserting a fraction inside a lefright?
          if (options.format !== 'latex' &&
              model.options.removeExtraneousParentheses &&
              parent instanceof LeftRightAtom &&
              parent.leftDelim === '(' &&
              parent.hasEmptyBranch('body') &&
              newAtoms.length === 1 &&
              newAtoms[0].type === 'genfrac') {
              // Remove the leftright
              // i.e. `\left(\frac{}{}\right))` -> `\frac{}{}`
              const newParent = parent.parent;
              const branch = parent.treeBranch;
              newParent.removeChild(parent);
              newParent.setChildren(newAtoms, branch);
          }
          else {
              if (options.format === 'latex' && args.length === 1 && !args[0]) {
                  // If we are given a latex string with no arguments, store it verbatim
                  // Caution: we can only do this if the toLatex() for this parent
                  // would return an empty string. If the latex is generated using other
                  // properties than parent.body, for example by adding '\left.' and
                  // '\right.' with a 'leftright' type, we can't use this shortcut.
                  if (parent.type === 'root' && parent.hasEmptyBranch('body')) {
                      parent.latex = text;
                  }
              }
              const cursor = model.at(model.position);
              cursor.parent.addChildrenAfter(newAtoms, cursor);
          }
          // Prepare to dispatch notifications
          // (for selection changes, then content change)
          model.suppressChangeNotifications = contentWasChanging;
          const lastNewAtom = newAtoms[newAtoms.length - 1];
          // Update the anchor's location
          if (options.selectionMode === 'placeholder') {
              // Move to the next placeholder
              const newPlaceholders = newAtoms.reduce((acc, atom) => [
                  ...acc,
                  ...atom.children.filter((x) => x.type === 'placeholder'),
              ], []);
              if (newPlaceholders.length > 0) {
                  const placeholderOffset = model.offsetOf(newPlaceholders[0]);
                  model.setSelection(placeholderOffset - 1, placeholderOffset);
                  model.announce('move'); // Should have placeholder selected
              }
              else if (lastNewAtom) {
                  // No placeholder found, move to right after what we just inserted
                  model.position = model.offsetOf(lastNewAtom);
              }
          }
          else if (options.selectionMode === 'before') ;
          else if (options.selectionMode === 'after') {
              if (lastNewAtom) {
                  model.position = model.offsetOf(lastNewAtom);
              }
          }
          else if (options.selectionMode === 'item') {
              model.setSelection(model.anchor, model.offsetOf(lastNewAtom));
          }
          contentDidChange(model);
          model.suppressChangeNotifications = suppressChangeNotifications;
          return true;
      }
  }
  function convertStringToAtoms(model, s, args, options) {
      var _a;
      let result = [];
      if (options.format === 'ASCIIMath') {
          [, s] = parseMathString(s, { format: 'ASCIIMath' });
          result = parseLatex(s, 'math', null, options === null || options === void 0 ? void 0 : options.macros, false, model.listeners.onError);
          // Simplify result.
          if (model.options.removeExtraneousParentheses) {
              simplifyParen(result);
          }
      }
      else if (options.format === 'auto' || options.format === 'latex') {
          if (options.format === 'auto') {
              [options.format, s] = parseMathString(s);
          }
          // If the whole string is bracketed by a mode shift command, remove it
          if (/^\$\$(.*)\$\$$/.test(s)) {
              s = s.substring(2, s.length - 2);
          }
          result = parseLatex(s, 'math', args, options.macros, (_a = options.smartFence) !== null && _a !== void 0 ? _a : false, model.listeners.onError);
          // Simplify result.
          if (options.format !== 'latex' &&
              model.options.removeExtraneousParentheses) {
              simplifyParen(result);
          }
      }
      // Some atoms may already have a style (for example if there was an
      // argument, i.e. the selection, that this was applied to).
      // So, don't apply style to atoms that are already styled, but *do*
      // apply it to newly created atoms that have no style yet.
      applyStyleToUnstyledAtoms(result, options.style);
      return result;
  }
  function removeParen(atoms) {
      if (!atoms)
          return null;
      console.assert(atoms[0].type === 'first');
      if (atoms.length > 1)
          return null;
      const atom = atoms[0];
      if (atom instanceof LeftRightAtom &&
          atom.leftDelim === '(' &&
          atom.rightDelim === ')') {
          return atom.removeBranch('body');
      }
      return null;
  }
  /**
   * If it's a fraction with a parenthesized numerator or denominator
   * remove the parentheses
   * @revisit: don't need model, only need to know if removeExtraneousParentheses
   *              Check at callsites.
   */
  function simplifyParen(atoms) {
      if (!atoms)
          return;
      for (let i = 0; atoms[i]; i++) {
          const atom = atoms[i];
          if (atom instanceof LeftRightAtom && atom.leftDelim === '(') {
              let genFracCount = 0;
              let genFracIndex = 0;
              let nonGenFracCount = 0;
              for (let j = 0; atom.body[j]; j++) {
                  if (atom.body[j].type === 'genfrac') {
                      genFracCount++;
                      genFracIndex = j;
                  }
                  nonGenFracCount++;
              }
              if (nonGenFracCount === 0 && genFracCount === 1) {
                  // This is a single frac inside a leftright: remove the leftright
                  atoms[i] = atom.body[genFracIndex];
              }
          }
      }
      atoms.forEach((atom) => {
          atom.branches.forEach((branch) => {
              if (!atom.hasEmptyBranch(branch)) {
                  simplifyParen(atom.branch(branch));
                  const newChildren = removeParen(atom.branch(branch));
                  if (newChildren)
                      atom.setChildren(newChildren, branch);
              }
          });
          if (atom instanceof ArrayAtom) {
              atom.cells.forEach((x) => simplifyParen(x));
          }
      });
  }
  /**
   * Locate the offset before the insertion point that would indicate
   * a good place to select as an implicit argument.
   *
   * For example with '1+\sin(x)', if the insertion point is at the
   * end, the implicit arg offset would be after the plus. As a result,
   * inserting a fraction after the sin would yield: '1+\frac{\sin(c)}{\placeholder{}}'
   */
  function getImplicitArgOffset(model) {
      let atom = model.at(model.position);
      if (atom.mode === 'text') {
          while (!atom.isFirstSibling && atom.mode === 'text') {
              atom = atom.leftSibling;
          }
          return model.offsetOf(atom);
      }
      if (!isImplicitArg(atom)) {
          return -1;
      }
      // Find the first 'mrel', etc... to the left of the insertion point
      // until the first sibling
      while (!atom.isFirstSibling && isImplicitArg(atom)) {
          atom = atom.leftSibling;
      }
      return model.offsetOf(atom);
  }
  /**
   *
   * Predicate returns true if the atom should be considered an implicit argument.
   *
   * Used for example when typing "/" to insert a fraction: all the atoms to
   * the left of insertion point that return true for `isImplicitArg()` will
   * be included as the numerator
   */
  function isImplicitArg(atom) {
      if (/^(mord|surd|msubsup|leftright|mop)$/.test(atom.type)) {
          // Exclude `\int`, \`sum`, etc...
          if (atom.isExtensibleSymbol)
              return false;
          return true;
      }
      return false;
  }
  /**
   * Insert a smart fence '(', '{', '[', etc...
   * If not handled (because `fence` wasn't a fence), return false.
   */
  function insertSmartFence(model, fence, style) {
      console.assert(model.selectionIsCollapsed);
      const atom = model.at(model.position);
      const { parent } = atom;
      let delims = parent instanceof LeftRightAtom ? parent.leftDelim + parent.rightDelim : '';
      if (delims === '\\lbrace\\rbrace')
          delims = '{}';
      if (delims === '\\{\\}')
          delims = '{}';
      //
      // 1. Are we inserting a middle fence?
      // ...as in {...|...}
      //
      if (delims === '{}' && /\||\\vert|\\Vert|\\mvert|\\mid/.test(fence)) {
          ModeEditor.insert('math', model, '\\,\\middle' + fence + '\\, ', {
              format: 'latex',
              style,
          });
          return true;
      }
      // Normalize some fences.
      // Note that '{' and '}' are not valid braces.
      // They should be '\{' or '\lbrace' and '\}' or '\rbrace'
      if (fence === '{' || fence === '\\{')
          fence = '\\lbrace';
      if (fence === '}' || fence === '\\}')
          fence = '\\rbrace';
      if (fence === '[')
          fence = '\\lbrack';
      if (fence === ']')
          fence = '\\rbrack';
      //
      // 2. Is it an open fence?
      //
      const rDelim = RIGHT_DELIM[fence];
      if (rDelim &&
          !(parent instanceof LeftRightAtom && parent.leftDelim === '|')) {
          // We have a valid open fence as input
          let s = '';
          // If we're before a function (e.g. `\sin`, or 'f'):  this is an
          // argument list: Use `\mleft...\mright'.
          s = atom.isFunction
              ? `\\mleft${fence}\\mright${rDelim}`
              : `\\left${fence}\\right?`;
          const lastSiblingOffset = model.offsetOf(atom.lastSibling);
          const content = model.extractAtoms([model.position, lastSiblingOffset]);
          ModeEditor.insert('math', model, s, {
              format: 'latex',
              style,
          });
          // Move everything that was after the anchor into the leftright
          model.at(model.position).body = content;
          model.position -= 1;
          return true;
      }
      //
      // 3. Is it a close fence?
      //
      let lDelim;
      Object.keys(RIGHT_DELIM).forEach((delim) => {
          if (fence === RIGHT_DELIM[delim])
              lDelim = delim;
      });
      if (lDelim) {
          // We found a matching open fence, so it was a valid close fence.
          // Note that `lDelim` may not match `fence`. That's OK.
          // If we're the last atom inside a 'leftright',
          // update the parent
          if (parent instanceof LeftRightAtom && atom.isLastSibling) {
              parent.rightDelim = fence;
              model.position += 1;
              contentDidChange(model);
              return true;
          }
          // If we have a `leftright` sibling to our left
          // with an indeterminate right fence,
          // move what's between us and the `leftright` inside the `leftright`
          const firstSibling = model.offsetOf(atom.firstSibling);
          let i;
          for (i = model.position; i >= firstSibling; i--) {
              const atom = model.at(i);
              if (atom instanceof LeftRightAtom && atom.rightDelim === '?') {
                  break;
              }
          }
          const match = model.at(i);
          if (i >= firstSibling && match instanceof LeftRightAtom) {
              match.rightDelim = fence;
              match.addChildren(model.extractAtoms([i, model.position]), atom.treeBranch);
              model.position = i;
              contentDidChange(model);
              return true;
          }
          // If we're inside a `leftright`, but not the last atom,
          // and the `leftright` right delim is indeterminate
          // adjust the body (put everything after the insertion point outside)
          if (parent instanceof LeftRightAtom && parent.rightDelim === '?') {
              parent.rightDelim = fence;
              parent.parent.addChildren(model.extractAtoms([model.position, model.offsetOf(atom.lastSibling)]), parent.treeBranch);
              model.position = model.offsetOf(parent);
              contentDidChange(model);
              return true;
          }
          // Is our grand-parent a 'leftright'?
          // If `\left(\frac{1}{x|}\right?` with the cursor at `|`
          // go up to the 'leftright' and apply it there instead
          const grandparent = parent.parent;
          if (grandparent instanceof LeftRightAtom &&
              grandparent.rightDelim === '?' &&
              model.at(model.position).isLastSibling) {
              model.position = model.offsetOf(grandparent);
              return insertSmartFence(model, fence, style);
          }
          // Meh... We couldn't find a matching open fence. Just insert the
          // closing fence as a regular character
          return false;
      }
      return false;
  }
  new MathModeEditor();

  function showKeystroke(mathfield, keystroke) {
      const vb = mathfield.keystrokeCaption;
      if (vb && mathfield.keystrokeCaptionVisible) {
          const bounds = mathfield.element.getBoundingClientRect();
          vb.style.left = `${bounds.left}px`;
          vb.style.top = `${bounds.top - 64}px`;
          vb.innerHTML = mathfield.options.createHTML('<span>' +
              (getKeybindingMarkup(keystroke) || keystroke) +
              '</span>' +
              vb.innerHTML);
          vb.style.visibility = 'visible';
          setTimeout(() => {
              if (vb.childNodes.length > 0) {
                  vb.childNodes[vb.childNodes.length - 1].remove();
              }
              if (vb.childNodes.length === 0) {
                  vb.style.visibility = 'hidden';
              }
          }, 3000);
      }
  }
  /**
   * @param evt - An Event corresponding to the keystroke.
   */
  function onKeystroke(mathfield, keystroke, evt) {
      const { model } = mathfield;
      // 1. Update the keybindings according to the current keyboard layout
      // 1.1 Possibly update the current keyboard layout based on this event
      validateKeyboardLayout(evt);
      const activeLayout = getActiveKeyboardLayout();
      if (mathfield.keyboardLayout !== activeLayout.id) {
          // Console.log('Switching to keyboard layout ' + activeLayout.id);
          mathfield.keyboardLayout = activeLayout.id;
          mathfield.keybindings = normalizeKeybindings(mathfield.options.keybindings, (error) => {
              if (typeof mathfield.options.onError === 'function') {
                  mathfield.options.onError({
                      code: 'invalid-keybinding',
                      arg: error.join('\n'),
                  });
              }
              console.log(error.join('\n'));
          });
      }
      // 2. Display the keystroke in the keystroke panel (if visible)
      showKeystroke(mathfield, keystroke);
      // 3. Reset the timer for the keystroke buffer reset
      clearTimeout(mathfield.keystrokeBufferResetTimer);
      // 4. Give a chance to the custom keystroke handler to intercept the event
      if (mathfield.options.onKeystroke &&
          !mathfield.options.onKeystroke(mathfield, keystroke, evt)) {
          if (evt === null || evt === void 0 ? void 0 : evt.preventDefault) {
              evt.preventDefault();
              evt.stopPropagation();
          }
          return false;
      }
      // 5. Let's try to find a matching shortcut or command
      let shortcut;
      let stateIndex;
      let selector;
      let resetKeystrokeBuffer = false;
      // 5.1 Check if the keystroke, prefixed with the previously typed keystrokes,
      // would match a long shortcut (i.e. '~~')
      // Ignore the key if command or control is pressed (it may be a keybinding,
      // see 5.3)
      if (mathfield.mode !== 'latex' && (!evt || (!evt.ctrlKey && !evt.metaKey))) {
          if (keystroke === '[Backspace]') {
              // Special case for backspace
              mathfield.keystrokeBuffer = mathfield.keystrokeBuffer.slice(0, -1);
              mathfield.keystrokeBufferStates.pop();
              mathfield.resetKeystrokeBuffer({ defer: true });
          }
          else if (!mightProducePrintableCharacter(evt)) {
              // It was a non-alpha character (PageUp, End, etc...)
              mathfield.resetKeystrokeBuffer();
          }
          else {
              const c = eventToChar(evt);
              // Find the longest substring that matches a shortcut
              const candidate = mathfield.keystrokeBuffer + c;
              let i = 0;
              while (!shortcut && i < candidate.length) {
                  const context = mathfield.keystrokeBufferStates[i]
                      ? parseLatex(mathfield.keystrokeBufferStates[i].latex, mathfield.options.defaultMode, null, mathfield.options.macros)
                      : // The context is from the start of the group to the current position
                          model.getAtoms(model.offsetOf(model.at(model.position).firstSibling), model.position);
                  shortcut = getInlineShortcut(context, candidate.slice(i), mathfield.options.inlineShortcuts);
                  i += 1;
              }
              stateIndex =
                  mathfield.keystrokeBufferStates.length - (candidate.length - i);
              mathfield.keystrokeBuffer += c;
              mathfield.keystrokeBufferStates.push(mathfield.getUndoRecord());
              if (getInlineShortcutsStartingWith(candidate, mathfield.options).length <= 1) {
                  // There's only a single shortcut matching this sequence.
                  // We can confidently reset the keystroke buffer
                  resetKeystrokeBuffer = true;
              }
              else {
                  // There are several potential shortcuts matching this sequence
                  // Don't reset the keystroke buffer yet, in case some
                  // keys typed later disambiguate the desirted shortcut,
                  // but schedule a defered reset. This handles the case if there
                  // was a shortcut for "sin" and "sinh", to avoid the detecting
                  // of the "sin" shortcut from ever having the "sinh" shortcut
                  // triggered.
                  mathfield.resetKeystrokeBuffer({ defer: true });
              }
          }
      }
      // 5.2. Should we switch mode?
      // Need to check this before determing if there's a valid shortcut
      // since if we switch to math mode, we may want to apply the shortcut
      // e.g. "slope = rise/run"
      if (mathfield.options.smartMode) {
          const previousMode = mathfield.mode;
          if (shortcut) {
              // If we found a shortcut (e.g. "alpha"),
              // switch to math mode and insert it
              mathfield.mode = 'math';
          }
          else if (smartMode(mathfield, keystroke, evt)) {
              mathfield.mode = { math: 'text', text: 'math' }[mathfield.mode];
              selector = '';
          }
          // Notify of mode change
          if (mathfield.mode !== previousMode &&
              typeof mathfield.options.onModeChange === 'function') {
              mathfield.options.onModeChange(mathfield, mathfield.mode);
          }
      }
      // 5.3 Check if this matches a keybinding
      // Need to check this **after** checking for inline shortcuts because
      // shift+backquote is a keybinding that inserts "\~"", but "~~" is a
      // shortcut for "\approx" and needs to have priority over shift+backquote
      if (!shortcut && !selector) {
          selector = getCommandForKeybinding(mathfield.keybindings, mathfield.mode, keystroke);
      }
      if (!shortcut &&
          !selector &&
          (keystroke === '[Enter]' || keystroke === '[Return]')) {
          // No matching keybinding: trigger a commit
          if (typeof mathfield.options.onCommit === 'function') {
              mathfield.options.onCommit(mathfield);
              if (evt === null || evt === void 0 ? void 0 : evt.preventDefault) {
                  evt.preventDefault();
                  evt.stopPropagation();
              }
              return false;
          }
      }
      // No shortcut :( We're done.
      if (!shortcut && !selector) {
          return true;
      }
      if (mathfield.options.readOnly && selector[0] === 'insert') {
          return true;
      }
      //
      // 6. Perform the action matching this selector or insert the shortcut
      //
      //
      // 6.1 If we have a `moveAfterParent` selector (usually triggered with
      // `spacebar), and we're at the end of a smart fence, close the fence with
      // an empty (.) right delimiter
      //
      const child = model.at(Math.max(model.position, model.anchor));
      const { parent } = child;
      if (selector === 'moveAfterParent' &&
          parent &&
          parent.type === 'leftright' &&
          child.isLastSibling &&
          mathfield.options.smartFence &&
          insertSmartFence(model, '.', mathfield.style)) {
          // Pressing the space bar (moveAfterParent selector) when at the end
          // of a potential smartFence will close it as a semi-open fence
          selector = '';
          requestUpdate(mathfield); // Re-render the closed smartFence
      }
      //
      // 6.2 If this is the Spacebar and we're just before or right after
      // a text zone, insert the space inside the text zone
      //
      if (mathfield.mode === 'math' && keystroke === '[Spacebar]' && !shortcut) {
          const nextSibling = model.at(model.position + 1);
          const previousSibling = model.at(model.position - 1);
          if ((nextSibling && nextSibling.mode === 'text') ||
              (previousSibling && previousSibling.mode === 'text')) {
              ModeEditor.insert('text', model, ' ');
          }
      }
      //
      // 6.3 If there's a selector, perform it.
      //
      if (selector) {
          mathfield.executeCommand(selector);
      }
      else if (shortcut) {
          //
          // 6.5 Cancel the (upcoming) composition
          // This is to prevent starting a composition when the keyboard event
          // has already been handled.
          // Example: alt+U -> \cup, but could also be diaeresis deak key (¨) which
          // starts a composition
          //
          mathfield.keyboardDelegate.cancelComposition();
          //
          // 6.6 Insert the shortcut
          // If the shortcut is a mandatory escape sequence (\}, etc...)
          // don't make it undoable, this would result in syntactically incorrect
          // formulas
          //
          const style = {
              ...model.at(model.position).computedStyle,
              ...mathfield.style,
          };
          if (!/^(\\{|\\}|\\[|\\]|\\@|\\#|\\$|\\%|\\^|\\_|\\backslash)$/.test(shortcut)) {
              // To enable the substitution to be undoable,
              // insert the character before applying the substitution
              const saveMode = mathfield.mode;
              ModeEditor.insert(mathfield.mode, model, eventToChar(evt), {
                  suppressChangeNotifications: true,
                  style,
              });
              // Create a snapshot with the inserted character
              mathfield.snapshotAndCoalesce();
              // Revert to the state before the beginning of the shortcut
              // (restore doesn't change the undo stack)
              mathfield.restoreToUndoRecord(mathfield.keystrokeBufferStates[stateIndex]);
              mathfield.mode = saveMode;
          }
          model.deferNotifications({ content: true, selection: true }, () => {
              // Insert the substitute, possibly as a smart fence
              ModeEditor.insert(mathfield.mode, model, shortcut, {
                  format: 'latex',
                  style,
                  smartFence: true,
              });
              // Check if as a result of the substitution there is now an isolated
              // (text mode) space (surrounded by math). In which case, remove it.
              removeIsolatedSpace(mathfield.model);
              // Switch (back) to text mode if the shortcut ended with a space
              if (shortcut.endsWith(' ')) {
                  mathfield.mode = 'text';
                  ModeEditor.insert('text', model, ' ', { style });
              }
              return true; // Content changed
          });
          mathfield.snapshot();
          mathfield.dirty = true; // Mark the field as dirty. It will get rendered in scrollIntoView()
          model.announce('replacement');
          // If we're done with the shortcuts (found a unique one), reset it.
          if (resetKeystrokeBuffer) {
              mathfield.resetKeystrokeBuffer();
          }
      }
      //
      // 7. Make sure the insertion point is scrolled into view
      //
      mathfield.scrollIntoView();
      //
      // 8. Keystroke has been handled, if it wasn't caught in the default
      // case, so prevent propagation
      //
      if (evt === null || evt === void 0 ? void 0 : evt.preventDefault) {
          evt.preventDefault();
          evt.stopPropagation();
      }
      return false;
  }
  /**
   * This handler is invoked when text has been typed, pasted in or input with
   * an input method. As a result, `text` can be a sequence of characters to
   * be inserted.
   * @param {object} options
   * @param {boolean} options.focus - If true, the mathfield will be focused
   * @param {boolean} options.feedback - If true, provide audio and haptic feedback
   * @param {boolean} options.simulateKeystroke - If true, generate some synthetic
   * keystrokes (useful to trigger inline shortcuts, for example)
   * @private
   */
  function onTypedText(mathfield, text, options) {
      var _a;
      const { model } = mathfield;
      if (mathfield.options.readOnly) {
          model.announce('plonk');
          return;
      }
      options = options !== null && options !== void 0 ? options : {};
      //
      // 1/ Focus, then provide audio and haptic feedback
      //
      if (options.focus) {
          mathfield.focus();
      }
      if (options.feedback) {
          if (mathfield.options.keypressVibration && (navigator === null || navigator === void 0 ? void 0 : navigator.vibrate)) {
              navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
          }
          (_a = mathfield.keypressSound) === null || _a === void 0 ? void 0 : _a.play().catch(console.warn);
      }
      //
      // 2/ Switch mode if requested
      //
      if (typeof options.mode === 'string' && mathfield.mode !== options.mode) {
          mathfield.switchMode(options.mode);
      }
      //
      // 3/ Simulate keystroke, if requested
      //
      if (options.simulateKeystroke) {
          // For (const c of text) {
          const c = text.charAt(0);
          const ev = new KeyboardEvent('keypress', { key: c });
          if (!onKeystroke(mathfield, c, ev)) {
              return;
          }
          // }
      }
      //
      // 4/ Insert the specified text at the current insertion point.
      // If the selection is not collapsed, the content will be deleted first.
      //
      const style = {
          ...model.at(model.position).computedStyle,
          // Variant: 'main',
          ...mathfield.style,
      };
      if (!model.selectionIsCollapsed) {
          model.position = model.deleteAtoms(range(model.selection));
      }
      // Decompose the string into an array of graphemes.
      // This is necessary to correctly process what is displayed as a single
      // glyph (a grapheme) but which is composed of multiple Unicode
      // codepoints. This is the case in particular for some emojis, such as
      // those with a skin tone modifier, the country flags emojis or
      // compound emojis such as the professional emojis, including the
      // David Bowie emoji: 👨🏻‍🎤
      const graphemes = splitGraphemes(text);
      if (mathfield.mode === 'latex') {
          model.deferNotifications({ content: true, selection: true }, () => {
              for (const c of graphemes) {
                  ModeEditor.insert('latex', model, c);
              }
              updateAutocomplete(mathfield);
          });
      }
      else if (mathfield.mode === 'text') {
          for (const c of graphemes) {
              ModeEditor.insert('text', model, c, { style });
          }
      }
      else if (mathfield.mode === 'math') {
          for (const c of graphemes) {
              // Some characters are mapped to commands. Handle them here.
              // This is important to handle synthetic text input and
              // non-US keyboards, on which, fop example, the '^' key is
              // not mapped to  'Shift-Digit6'.
              const selector = {
                  '^': 'moveToSuperscript',
                  '_': 'moveToSubscript',
                  ' ': 'moveAfterParent',
              }[c];
              if (selector) {
                  mathfield.executeCommand(selector);
              }
              else if (/\d/.test(c) &&
                  mathfield.options.smartSuperscript &&
                  model.at(model.position).treeBranch === 'superscript' &&
                  model.at(model.position).hasNoSiblings) {
                  // We are inserting a digit into an empty superscript
                  // If smartSuperscript is on, insert the digit, and
                  // exit the superscript.
                  ModeEditor.insert('math', model, c, { style });
                  moveAfterParent(model);
              }
              else {
                  ModeEditor.insert('math', model, c, {
                      style,
                      smartFence: mathfield.options.smartFence,
                  });
              }
          }
      }
      //
      // 5/ Take a snapshot for undo stack
      //
      mathfield.snapshotAndCoalesce();
      //
      // 6/ Render the mathfield
      //
      mathfield.dirty = true;
      // Render and make sure the insertion point is visible
      mathfield.scrollIntoView();
  }

  register$1({
      undo: (mathfield) => {
          complete(mathfield, 'accept');
          // Undo to the previous state
          mathfield.undo();
          return true;
      },
      redo: (mathfield) => {
          complete(mathfield, 'accept');
          mathfield.redo();
          return true;
      },
      scrollIntoView: (mathfield) => {
          mathfield.scrollIntoView();
          return true;
      },
      scrollToStart: (mathfield) => {
          mathfield.field.scroll(0, 0);
          return true;
      },
      scrollToEnd: (mathfield) => {
          const fieldBounds = mathfield.field.getBoundingClientRect();
          mathfield.field.scroll(fieldBounds.left - window.scrollX, 0);
          return true;
      },
      enterLatexMode: (mathfield) => {
          mathfield.switchMode('latex');
          return true;
      },
      toggleKeystrokeCaption: (mathfield) => {
          mathfield.keystrokeCaptionVisible = !mathfield.keystrokeCaptionVisible;
          mathfield.keystrokeCaption.innerHTML = '';
          if (!mathfield.keystrokeCaptionVisible) {
              mathfield.keystrokeCaption.style.visibility = 'hidden';
          }
          return false;
      },
      switchMode: (mathfield, mode) => {
          mathfield.switchMode(mode);
          return true;
      },
      insert: (mathfield, s, options) => mathfield.insert(s, options),
      typedText: (mathfield, text, options) => {
          onTypedText(mathfield, text, options);
          return true;
      },
      commit: (mathfield) => {
          if (typeof mathfield.options.onCommit === 'function') {
              mathfield.options.onCommit(mathfield);
          }
          return true;
      },
  });
  register$1({
      copyToClipboard: (mathfield) => {
          mathfield.focus();
          // If the selection is empty, select the entire field before
          // copying it.
          if (mathfield.model.selectionIsCollapsed) {
              mathfield.select();
          }
          document.execCommand('copy');
          return false;
      },
      cutToClipboard: (mathfield) => {
          mathfield.focus();
          document.execCommand('cut');
          return true;
      },
      pasteFromClipboard: (mathfield) => {
          mathfield.focus();
          document.execCommand('paste');
          return true;
      },
  }, { target: 'mathfield', category: 'clipboard' });

  function applyStyle$1(mathfield, inStyle) {
      const style = validateStyle(inStyle);
      mathfield.resetKeystrokeBuffer();
      const { model } = mathfield;
      if (model.selectionIsCollapsed) {
          // No selection, let's update the 'current' style
          if (mathfield.style.fontSeries &&
              style.fontSeries === mathfield.style.fontSeries) {
              style.fontSeries = 'auto';
          }
          if (style.fontShape && style.fontShape === mathfield.style.fontShape) {
              style.fontShape = 'auto';
          }
          if (style.color && style.color === mathfield.style.color) {
              style.color = 'none';
          }
          if (style.backgroundColor &&
              style.backgroundColor === mathfield.style.backgroundColor) {
              style.backgroundColor = 'none';
          }
          if (style.fontSize && style.fontSize === mathfield.style.fontSize) {
              style.fontSize = 'auto';
          }
          // This global style will be used the next time an atom is inserted
          mathfield.style = { ...mathfield.style, ...style };
      }
      else {
          mathfield.model.deferNotifications({ content: true }, () => {
              // Change the style of the selection
              model.selection.ranges.forEach((range) => applyStyle(model, range, style, { operation: 'toggle' }));
              mathfield.snapshot();
          });
      }
      return true;
  }
  register$1({ applyStyle: applyStyle$1 }, { target: 'mathfield' });
  /**
   * Validate a style specification object
   */
  function validateStyle(style) {
      const result = {};
      if (typeof style.color === 'string') {
          result.color = style.color;
      }
      if (typeof style.backgroundColor === 'string') {
          result.backgroundColor = style.backgroundColor;
      }
      if (typeof style.fontFamily === 'string') {
          result.fontFamily = style.fontFamily;
      }
      if (typeof style.series === 'string') {
          result.fontSeries = style.series;
      }
      if (typeof style.fontSeries === 'string') {
          result.fontSeries = style.fontSeries.toLowerCase();
      }
      if (result.fontSeries) {
          result.fontSeries =
              {
                  bold: 'b',
                  medium: 'm',
                  normal: 'm',
              }[result.fontSeries] || result.fontSeries;
      }
      if (typeof style.shape === 'string') {
          result.fontShape = style.shape;
      }
      if (typeof style.fontShape === 'string') {
          result.fontShape = style.fontShape.toLowerCase();
      }
      if (result.fontShape) {
          result.fontShape =
              {
                  italic: 'it',
                  up: 'n',
                  upright: 'n',
                  normal: 'n',
              }[result.fontShape] || result.fontShape;
      }
      if (typeof style.size === 'string') {
          result.fontSize = style.size;
      }
      else if (typeof style.size === 'number') {
          result.fontSize = `size${Math.min(0, Math.max(10, style.size))}`;
      }
      if (typeof style.fontSize === 'string') {
          result.fontSize = style.fontSize.toLowerCase();
      }
      if (result.fontSize) {
          result.fontSize =
              {
                  tiny: 'size1',
                  scriptsize: 'size2',
                  footnotesize: 'size3',
                  small: 'size4',
                  normal: 'size5',
                  normalsize: 'size5',
                  large: 'size6',
                  Large: 'size7',
                  LARGE: 'size8',
                  huge: 'size9',
                  Huge: 'size10',
              }[result.fontSize] || result.fontSize;
      }
      return result;
  }

  let gLastTap;
  let gTapCount = 0;
  function onPointerDown(mathfield, evt) {
      var _a;
      const that = mathfield;
      let anchor;
      let trackingPointer = false;
      let dirty = false;
      // If a mouse button other than the main one was pressed, return.
      // On iOS 12.4 Safari and Firefox on Android (which do not support
      // PointerEvent) the touchstart event is sent with event.buttons = 0
      // which for a mouse event would normally be an invalid button.
      // Accept this button 0.
      if (evt instanceof PointerEvent && evt.buttons !== 1 && evt.buttons !== 0) {
          return;
      }
      let scrollLeft = false;
      let scrollRight = false;
      // Note: evt['touches'] is for touchstart (when PointerEvent is not supported)
      const anchorX = evt instanceof TouchEvent ? evt.touches[0].clientX : evt.clientX;
      const anchorY = evt instanceof TouchEvent ? evt.touches[0].clientY : evt.clientY;
      const anchorTime = Date.now();
      const scrollInterval = setInterval(() => {
          if (scrollLeft) {
              that.field.scroll({ top: 0, left: that.field.scrollLeft - 16 });
          }
          else if (scrollRight) {
              that.field.scroll({ top: 0, left: that.field.scrollLeft + 16 });
          }
      }, 32);
      function endPointerTracking(evt) {
          if (window.PointerEvent) {
              off(that.field, 'pointermove', onPointerMove);
              off(that.field, 'pointerup pointercancel', endPointerTracking);
              if (evt instanceof PointerEvent) {
                  that.field.releasePointerCapture(evt.pointerId);
              }
          }
          else {
              off(that.field, 'touchmove', onPointerMove);
              off(that.field, 'touchcancel touchend', endPointerTracking);
              off(window, 'mousemove', onPointerMove);
              off(window, 'mouseup blur', endPointerTracking);
          }
          trackingPointer = false;
          clearInterval(scrollInterval);
          mathfield.element.classList.remove('tracking');
          if (evt) {
              evt.preventDefault();
              evt.stopPropagation();
          }
      }
      function onPointerMove(evt) {
          // If we've somehow lost focus, end tracking
          if (!that.hasFocus()) {
              endPointerTracking();
              return;
          }
          const x = evt instanceof TouchEvent ? evt.touches[0].clientX : evt.clientX;
          const y = evt instanceof TouchEvent ? evt.touches[0].clientY : evt.clientY;
          // Ignore events that are within small spatial and temporal bounds
          // of the pointer down
          const hysteresis = evt instanceof TouchEvent || evt.pointerType === 'touch' ? 20 : 5;
          if (Date.now() < anchorTime + 500 &&
              Math.abs(anchorX - x) < hysteresis &&
              Math.abs(anchorY - y) < hysteresis) {
              evt.preventDefault();
              evt.stopPropagation();
              return;
          }
          const fieldBounds = that.field.getBoundingClientRect();
          scrollRight = x > fieldBounds.right;
          scrollLeft = x < fieldBounds.left;
          let actualAnchor = anchor;
          if (evt instanceof PointerEvent) {
              if (!evt.isPrimary) {
                  actualAnchor = offsetFromPoint(that, evt.clientX, evt.clientY, {
                      bias: 0,
                  });
              }
          }
          else if (evt.touches && evt.touches.length === 2) {
              actualAnchor = offsetFromPoint(that, evt.touches[1].clientX, evt.touches[1].clientY, { bias: 0 });
          }
          const focus = offsetFromPoint(that, x, y, {
              bias: x <= anchorX ? (x === anchorX ? 0 : -1) : +1,
          });
          if (actualAnchor >= 0 && focus >= 0) {
              that.model.extendSelectionTo(actualAnchor, focus);
              acceptCommandSuggestion(mathfield.model);
              requestUpdate(mathfield);
          }
          // Prevent synthetic mouseMove event when this is a touch event
          evt.preventDefault();
          evt.stopPropagation();
      }
      // Calculate the tap count
      if (gLastTap &&
          Math.abs(gLastTap.x - anchorX) < 5 &&
          Math.abs(gLastTap.y - anchorY) < 5 &&
          Date.now() < gLastTap.time + 500) {
          gTapCount += 1;
          gLastTap.time = anchorTime;
      }
      else {
          gLastTap = {
              x: anchorX,
              y: anchorY,
              time: anchorTime,
          };
          gTapCount = 1;
      }
      const bounds = mathfield.field.getBoundingClientRect();
      if (anchorX >= bounds.left &&
          anchorX <= bounds.right &&
          anchorY >= bounds.top &&
          anchorY <= bounds.bottom) {
          // Focus the mathfield
          if (!mathfield.hasFocus()) {
              dirty = true;
              mathfield.keyboardDelegate.focus();
          }
          // Clicking or tapping the field resets the keystroke buffer and
          // smart mode
          mathfield.resetKeystrokeBuffer();
          mathfield.smartModeSuppressed = false;
          anchor = offsetFromPoint(mathfield, anchorX, anchorY, {
              bias: 0,
          });
          if (anchor >= 0) {
              // Set a `tracking` class to avoid triggering the hover of the virtual
              // keyboard toggle, for example
              mathfield.element.classList.add('tracking');
              if (evt.shiftKey) {
                  // If the Shift key is down, extend the selection
                  // (in that case, 'anchor' is actually the focus
                  mathfield.model.extendSelectionTo(mathfield.model.anchor, anchor);
                  acceptCommandSuggestion(mathfield.model);
              }
              else if (mathfield.model.at(anchor).type === 'placeholder') {
                  mathfield.model.setSelection(anchor - 1, anchor);
              }
              else if (((_a = mathfield.model.at(anchor).rightSibling) === null || _a === void 0 ? void 0 : _a.type) === 'placeholder') {
                  mathfield.model.setSelection(anchor, anchor + 1);
              }
              else {
                  mathfield.model.position = anchor;
                  acceptCommandSuggestion(mathfield.model);
              }
              // The selection has changed, so we'll need to re-render
              dirty = true;
              // Reset any user-specified style
              mathfield.style = {};
              // `evt.detail` contains the number of consecutive clicks
              // for double-click, triple-click, etc...
              // (note that `evt.detail` is not set when using pointerEvent)
              if (evt.detail === 3 || gTapCount > 2) {
                  endPointerTracking(evt);
                  if (evt.detail === 3 || gTapCount === 3) {
                      // This is a triple-click
                      mathfield.model.selection = {
                          ranges: [[0, mathfield.model.lastOffset]],
                      };
                  }
              }
              else if (!trackingPointer) {
                  trackingPointer = true;
                  if (window.PointerEvent) {
                      on(that.field, 'pointermove', onPointerMove);
                      on(that.field, 'pointerup pointercancel', endPointerTracking);
                      if (evt instanceof PointerEvent) {
                          that.field.setPointerCapture(evt.pointerId);
                      }
                  }
                  else {
                      on(window, 'blur', endPointerTracking);
                      if (evt instanceof TouchEvent && evt.touches) {
                          // This is a touchstart event (and PointerEvent is not supported)
                          // To receive the subsequent touchmove/touch, need to
                          // listen to this evt.target.
                          // This was a touch event
                          on(evt.target, 'touchmove', onPointerMove);
                          on(evt.target, 'touchcancel touchend', endPointerTracking);
                      }
                      else {
                          on(window, 'mousemove', onPointerMove);
                          on(window, 'mouseup', endPointerTracking);
                      }
                  }
                  if (evt.detail === 2 || gTapCount === 2) {
                      selectGroup(mathfield.model);
                  }
              }
          }
      }
      else {
          gLastTap = null;
      }
      if (dirty) {
          requestUpdate(mathfield);
      }
      // Prevent the browser from handling. In particular when this is a
      // touch event, prevent the synthetic mouseDown event from being generated
      evt.preventDefault();
  }
  function distance(x, y, r) {
      const dx = x - (r.left + r.right) / 2;
      const dy = y - (r.top + r.bottom) / 2;
      return dx * dx + dy * dy;
  }
  function nearestAtomFromPointRecursive(mathfield, atom, x, y) {
      let result = { distance: Infinity, atom: null };
      const bounds = getAtomBounds(mathfield, atom);
      if (!bounds)
          return result;
      //
      // 1. Consider any children within the horizontal bounds
      //
      if (!atom.captureSelection &&
          x >= bounds.left &&
          x <= bounds.right &&
          atom.hasChildren) {
          atom.children.forEach((atom) => {
              const r = nearestAtomFromPointRecursive(mathfield, atom, x, y);
              console.log('checking', atom);
              if (r.distance < result.distance) {
                  console.log('match');
                  result = r;
              }
          });
      }
      //
      // 2. If no children matched, this atom matches
      //
      if (!result.atom) {
          result.atom = atom;
          result.distance = distance(x, y, bounds);
      }
      return result;
  }
  function nearestAtomFromPoint(mathfield, x, y) {
      return nearestAtomFromPointRecursive(mathfield, mathfield.model.root, x, y)
          .atom;
  }
  /**
   * @param options.bias  if 0, the midpoint of the bounding box
   * is considered to return the sibling. If <0, the left sibling is
   * favored, if >0, the right sibling
   */
  function offsetFromPoint(mathfield, x, y, options) {
      var _a;
      const bounds = mathfield.fieldContent.getBoundingClientRect();
      if (x > bounds.right || y > bounds.bottom + 8) {
          return mathfield.model.lastOffset;
      }
      if (x < bounds.left || y < bounds.top - 8) {
          return 0;
      }
      options = options !== null && options !== void 0 ? options : {};
      options.bias = (_a = options.bias) !== null && _a !== void 0 ? _a : 0;
      // Try to find the deepest element that is near the point that was
      // clicked on (the point could be outside of the element)
      const atom = nearestAtomFromPoint(mathfield, x, y);
      let result = mathfield.model.offsetOf(atom);
      if (result < 0)
          return -1;
      // (There should be exactly one atom that matches this ID...)
      if (options.bias === 0) {
          // If the point clicked is to the left of the vertical midline,
          // adjust the offset to *before* the atom (i.e. after the
          // preceding atom)
          const bounds = getAtomBounds(mathfield, atom);
          if (x < (bounds.left + bounds.right) / 2 && atom.type !== 'placeholder') {
              result = Math.min(mathfield.model.lastOffset, result - 1);
          }
      }
      else if (options.bias < 0) {
          result = Math.max(0, result - 1);
      }
      return result;
  }

  var css_248z = ".ML__keyboard{--keyboard-background:rgba(209,213,217,0.97);--keyboard-text:#000;--keyboard-text-active:var(--primary,hsl(var(--hue,212),40%,50%));--keyboard-background-border:#ddd;--keycap-background:#fff;--keycap-background-active:#e5e5e5;--keycap-background-border:#e5e6e9;--keycap-background-border-bottom:#8d8f92;--keycap-text:#000;--keycap-text-active:#fff;--keycap-secondary-text:#000;--keycap-modifier-background:#b9bdc7;--keycap-modifier-border:#c5c9d0;--keycap-modifier-border-bottom:#989da6;--keyboard-alternate-background:#fff;--keyboard-alternate-background-active:#e5e5e5;--keyboard-alternate-text:#000;--keyboard-alternate-key-length:70px;--keyboard-alternate-key-font-size:30px;--keyboard-alternate-key-aside-font-size:12px;--keycap-height:52px;--keycap-font-size:20px;--keycap-small-font-size:calc(var(--keycap-font-size)*0.9);--keycap-extra-small-font-size:calc(var(--keycap-font-size)/1.42);--keycap-tt-font-size:calc(var(--keycap-font-size)*1.5);position:fixed;left:0;bottom:-267px;width:100vw;z-index:var(--keyboard-zindex,105);padding-top:5px;transform:translate(0);opacity:0;visibility:hidden;transition:.28s cubic-bezier(0,0,.2,1);transition-property:transform,opacity;-webkit-backdrop-filter:grayscale(50%);backdrop-filter:grayscale(50%);background-color:var(--keyboard-background);border:1px solid var(--keyboard-background-border);font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:16px;font-weight:400;margin:0;text-shadow:none;box-sizing:border-box;touch-action:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23)}.ML__keyboard.is-visible{transform:translateY(-267px);opacity:1;visibility:visible;transition-timing-function:cubic-bezier(.4,0,1,1)}.ML__keyboard .tex{font-family:KaTeX_Main,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .tex-math{font-family:KaTeX_Math,Cambria Math,Asana Math,OpenSymbol,Symbola,STIX,Times,serif!important}.ML__keyboard .tt{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace!important;font-size:var(--keycap-tt-font-size,30px);font-weight:400}.ML__keyboard.alternate-keys{visibility:hidden;max-width:286px;background-color:var(--keyboard-alternate-background);text-align:center;border-radius:6px;position:fixed;bottom:auto;top:0;box-sizing:content-box;transform:none;z-index:calc(var(--keyboard-zindex, 105) + 1);display:flex;flex-direction:row;justify-content:center;align-content:center;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);transition:none}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys{max-width:320px}}.ML__keyboard.alternate-keys.is-visible{visibility:visible}.ML__keyboard.alternate-keys.compact{--keyboard-alternate-key-length:50px;--keyboard-alternate-key-font-size:24px;--keyboard-alternate-key-aside-font-size:10px}.ML__keyboard.alternate-keys ul{list-style:none;margin:3px;padding:0;display:flex;flex-flow:row wrap-reverse;justify-content:center}.ML__keyboard.alternate-keys ul>li{display:flex;flex-flow:column;align-items:center;justify-content:center;font-size:var(--keyboard-alternate-key-font-size);height:var(--keyboard-alternate-key-length);width:var(--keyboard-alternate-key-length);box-sizing:border-box;margin:0;background:transparent;border:1px solid transparent;border-radius:5px;pointer-events:all;color:var(--keyboard-alternate-text);fill:currentColor}@media only screen and (max-height:412px){.ML__keyboard.alternate-keys ul>li{font-size:24px;height:50px;width:50px}}.ML__keyboard.alternate-keys ul>li.active,.ML__keyboard.alternate-keys ul>li.pressed,.ML__keyboard.alternate-keys ul>li:hover{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);background:var(--keyboard-alternate-background-active);color:var(--keyboard-text-active)}.ML__keyboard.alternate-keys ul>li.small{font-size:var(--keycap-small-font-size,18px)}.ML__keyboard.alternate-keys ul>li.small-button{width:42px;height:42px;margin:2px;background:#fbfbfb}.ML__keyboard.alternate-keys ul>li.small-button:hover{background:var(--keyboard-alternate-background-active)}.ML__keyboard.alternate-keys ul>li.box>div,.ML__keyboard.alternate-keys ul>li.box>span{border:1px dashed rgba(0,0,0,.24)}.ML__keyboard.alternate-keys ul>li .warning{min-height:60px;min-width:60px;background:#cd0030;color:#fff;padding:5px;display:flex;align-items:center;justify-content:center;border-radius:5px}.ML__keyboard.alternate-keys ul>li .warning.active,.ML__keyboard.alternate-keys ul>li .warning.pressed,.ML__keyboard.alternate-keys ul>li .warning:hover{background:red}.ML__keyboard.alternate-keys ul>li .warning svg{width:50px;height:50px}.ML__keyboard.alternate-keys ul>li aside{font-size:var(--keyboard-alternate-key-aside-font-size);line-height:12px;opacity:.78;padding-top:2px}.ML__keyboard>div.keyboard-layer{display:none;outline:none}.ML__keyboard>div.keyboard-layer.is-visible{display:flex;flex-flow:column}.ML__keyboard>div>div.keyboard-toolbar{align-self:center;display:flex;flex-flow:row;justify-content:space-between;width:736px}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard>div>div.keyboard-toolbar{width:556px}}@media only screen and (max-width:767px){.ML__keyboard>div>div.keyboard-toolbar{width:365px;max-width:100vw}}.ML__keyboard>div>div.keyboard-toolbar svg{height:20px;width:20px}@media only screen and (max-width:767px){.ML__keyboard>div>div.keyboard-toolbar svg{height:13px;width:17px}}.ML__keyboard>div>div.keyboard-toolbar>.left{position:relative;display:flex;justify-content:flex-start;flex-flow:row}.ML__keyboard>div>div.keyboard-toolbar>.right{display:flex;justify-content:flex-end;flex-flow:row}.ML__keyboard>div>div.keyboard-toolbar>div>div{display:flex;align-items:baseline;justify-content:center;pointer-events:all;color:var(--keyboard-text);fill:currentColor;background:0;font-size:110%;cursor:pointer;min-height:0;padding:4px 10px;margin:7px 4px 6px;box-shadow:none;border:none;border-bottom:2px solid transparent}.ML__keyboard>div>div.keyboard-toolbar>div>div.disabled.pressed svg,.ML__keyboard>div>div.keyboard-toolbar>div>div.disabled:hover svg,.ML__keyboard>div>div.keyboard-toolbar>div>div.disabled svg{color:var(--keyboard-text);opacity:.2}@media only screen and (max-width:414px){.ML__keyboard>div>div.keyboard-toolbar>div>div{font-size:100%;padding:0 6px 0 0}}@media only screen and (max-width:767px){.ML__keyboard>div>div.keyboard-toolbar>div>div{padding-left:4px;padding-right:4px;font-size:90%}}.ML__keyboard>div>div.keyboard-toolbar>div>div.active,.ML__keyboard>div>div.keyboard-toolbar>div>div.pressed,.ML__keyboard>div>div.keyboard-toolbar>div>div:active,.ML__keyboard>div>div.keyboard-toolbar>div>div:hover{color:var(--keyboard-text-active)}.ML__keyboard>div>div.keyboard-toolbar>div>div.selected{color:var(--keyboard-text-active);border-bottom:2px solid var(--keyboard-text-active);margin-bottom:8px;padding-bottom:0}.ML__keyboard div .rows{border:0;border-collapse:separate;clear:both;margin:auto;display:flex;flex-flow:column;align-items:center}.ML__keyboard div .rows>ul{list-style:none;height:40px;margin:0 0 3px;padding:0}.ML__keyboard div .rows>ul>li{display:flex;flex-flow:column;align-items:center;justify-content:center;width:34px;margin-right:2px;height:40px;box-sizing:border-box;padding:8px 0;vertical-align:top;text-align:center;float:left;color:var(--keycap-text);fill:currentColor;font-size:var(--keycap-font-size,20px);background:var(--keycap-background);border:1px solid var(--keycap-background-border);border-bottom-color:var(--keycap-background-border-bottom);border-radius:5px;pointer-events:all;position:relative;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.ML__keyboard div .rows>ul>li:last-child{margin-right:0}.ML__keyboard div .rows>ul>li.small{font-size:var(--keycap-small-font-size,16px)}.ML__keyboard div .rows>ul>li.tt{color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.bottom{justify-content:flex-end}.ML__keyboard div .rows>ul>li.left{align-items:flex-start;padding-left:4px}.ML__keyboard div .rows>ul>li.right{align-items:flex-end;padding-right:4px}.ML__keyboard div .rows>ul>li svg{width:20px;height:20px}.ML__keyboard div .rows>ul>li .warning{height:25px;width:25px;min-height:25px;min-width:25px;background:#cd0030;color:#fff;border-radius:100%;padding:5px;display:flex;align-items:center;justify-content:center;margin-bottom:-2px}.ML__keyboard div .rows>ul>li .warning svg{width:16px;height:16px}@media only screen and (max-width:768px){.ML__keyboard div .rows>ul>li .warning{height:16px;width:16px;min-height:16px;min-width:16px}.ML__keyboard div .rows>ul>li .warning svg{width:14px;height:14px}}.ML__keyboard div .rows>ul>li>.w0{width:0}.ML__keyboard div .rows>ul>li>.w5{width:16px}.ML__keyboard div .rows>ul>li>.w15{width:52px}.ML__keyboard div .rows>ul>li>.w20{width:70px}.ML__keyboard div .rows>ul>li>.w50{width:178px}.ML__keyboard div .rows>ul>li.separator{background:transparent;border:none;pointer-events:none}@media only screen and (max-width:560px){.ML__keyboard div .rows>ul>li.if-wide{display:none}}.ML__keyboard div .rows>ul>li.tex-math{font-size:25px}.ML__keyboard div .rows>ul>li.pressed,.ML__keyboard div .rows>ul>li:hover{background:var(--keycap-background-active);color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.action.active,.ML__keyboard div .rows>ul>li.action:active,.ML__keyboard div .rows>ul>li.keycap.active,.ML__keyboard div .rows>ul>li.keycap:active{transform:translateY(-20px) scale(1.4);z-index:calc(var(--keyboard-zindex, 105) - 5);color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.modifier.active,.ML__keyboard div .rows>ul>li.modifier:active{background:var(--keyboard-text-active);color:var(--keycap-text-active)}.ML__keyboard div .rows>ul>li.action.font-glyph,.ML__keyboard div .rows>ul>li.modifier.font-glyph{font-size:18px}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li.action.font-glyph,.ML__keyboard div .rows>ul>li.modifier.font-glyph{font-size:16px}}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li.fnbutton{font-size:12px}}.ML__keyboard div .rows>ul>li.bigfnbutton{font-size:var(--keycap-extra-small-font-size,14px)}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li.bigfnbutton{font-size:calc(var(--keycap-extra-small-font-size, 14px)/1.55)}}.ML__keyboard div .rows>ul>li.action,.ML__keyboard div .rows>ul>li.modifier{background-color:var(--keycap-modifier-background);border-bottom-color:var(--keycap-modifier-border);border-color:var(--keycap-modifier-border) var(--keycap-modifier-border) var(--keycap-modifier-border-bottom);font-size:65%;font-weight:100}.ML__keyboard div .rows>ul>li.action.selected,.ML__keyboard div .rows>ul>li.modifier.selected{color:var(--keyboard-text-active)}.ML__keyboard div .rows>ul>li.action.selected.active,.ML__keyboard div .rows>ul>li.action.selected.pressed,.ML__keyboard div .rows>ul>li.action.selected:active,.ML__keyboard div .rows>ul>li.action.selected:hover,.ML__keyboard div .rows>ul>li.modifier.selected.active,.ML__keyboard div .rows>ul>li.modifier.selected.pressed,.ML__keyboard div .rows>ul>li.modifier.selected:active,.ML__keyboard div .rows>ul>li.modifier.selected:hover{color:#fff}.ML__keyboard div .rows>ul>li.keycap.w50{font-size:80%;padding-top:10px;font-weight:100}.ML__keyboard div .rows>ul>li small{color:#555}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li small{font-size:9px}}.ML__keyboard div .rows>ul>li aside{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:10px;line-height:10px;color:#666}@media only screen and (max-width:767px){.ML__keyboard div .rows>ul>li aside{display:none}}@media only screen and (max-width:414px){.ML__keyboard div .rows>ul>li{width:calc(10vw - 2px);margin-right:2px}.ML__keyboard div .rows>ul>.w5{width:calc(5vw - 2px)}.ML__keyboard div .rows>ul>.w15{width:calc(15vw - 2px)}.ML__keyboard div .rows>ul>.w20{width:calc(20vw - 2px)}.ML__keyboard div .rows>ul>.w50{width:calc(50vw - 2px)}}@media only screen and (min-width:415px) and (max-width:768px){.ML__keyboard div .rows>ul>li{width:37px;margin-right:3px}.ML__keyboard div .rows>ul>.w5{width:17px}.ML__keyboard div .rows>ul>.w15{width:57px}.ML__keyboard div .rows>ul>.w20{width:77px}.ML__keyboard div .rows>ul>.w50{width:197px}}@media only screen and (min-width:768px) and (max-width:1024px){.ML__keyboard div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard div .rows>ul>li{height:var(--keycap-height,52px);width:51px;margin-right:4px}.ML__keyboard div .rows>ul>.w5{width:23.5px}.ML__keyboard div .rows>ul>.w15{width:78.5px}.ML__keyboard div .rows>ul>.w20{width:106px}.ML__keyboard div .rows>ul>.w50{width:271px}}@media only screen and (min-width:1025px){.ML__keyboard div .rows>ul{height:var(--keycap-height,52px)}.ML__keyboard div .rows>ul>li{height:var(--keycap-height,52px);width:66px;margin-right:6px}.ML__keyboard div .rows>ul>.action,.ML__keyboard div .rows>ul>.modifier{font-size:80%}.ML__keyboard div .rows>ul>.w5{width:30px}.ML__keyboard div .rows>ul>.w15{width:102px}.ML__keyboard div .rows>ul>.w20{width:138px}.ML__keyboard div .rows>ul>.w50{width:354px}}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue,212),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue,212),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue,212),25%,39%);--keycap-background-active:hsl(var(--hue,212),35%,42%);--keycap-background-border:hsl(var(--hue,212),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue,212),35%,40%);--keycap-modifier-border:hsl(var(--hue,212),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue,212),35%,42%);--keyboard-alternate-background:hsl(var(--hue,212),19%,38%);--keyboard-alternate-background-active:hsl(var(--hue,212),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] .ML__keyboard{--hue:206;--keyboard-background:hsl(var(--hue,212),19%,38%);--keyboard-text:#f0f0f0;--keyboard-text-active:hsl(var(--hue,212),100%,60%);--keyboard-background-border:#333;--keycap-background:hsl(var(--hue,212),25%,39%);--keycap-background-active:hsl(var(--hue,212),35%,42%);--keycap-background-border:hsl(var(--hue,212),25%,35%);--keycap-background-border-bottom:#426b8a;--keycap-text:#d0d0d0;--keycap-text-active:#000;--keycap-secondary-text:#fff;--keycap-modifier-background:hsl(var(--hue,212),35%,40%);--keycap-modifier-border:hsl(var(--hue,212),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue,212),35%,42%);--keyboard-alternate-background:hsl(var(--hue,212),19%,38%);--keyboard-alternate-background-active:hsl(var(--hue,212),35%,42%);--keyboard-alternate-text:#d1d1d1}div.ML__keyboard.material{--keyboard-background:rgba(209,213,217,0.9);--keyboard-background-border:#ddd;--keycap-background:transparent;--keycap-background-active:#cccfd1;--keycap-background-border:transparent;--keyboard-alternate-background:#efefef;--keyboard-alternate-text:#000;font-family:Roboto,sans-serif}div.ML__keyboard.material.alternate-keys{background:var(--keyboard-alternate-background);border:1px solid transparent;border-radius:5px;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22)}div.ML__keyboard.material.alternate-keys ul li.active,div.ML__keyboard.material.alternate-keys ul li.pressed,div.ML__keyboard.material.alternate-keys ul li:active,div.ML__keyboard.material.alternate-keys ul li:hover{border:1px solid transparent;background:#5f97fc;color:#fff;fill:currentColor}div.ML__keyboard.material .keyboard-toolbar>div>div{font-size:16px}div.ML__keyboard.material .keyboard-toolbar div.div.active,div.ML__keyboard.material .keyboard-toolbar div.div.pressed,div.ML__keyboard.material .keyboard-toolbar div div:active,div.ML__keyboard.material .keyboard-toolbar div div:hover{color:#5f97fc;fill:currentColor}div.ML__keyboard.material .keyboard-toolbar>div>.selected{color:#5f97fc;fill:currentColor;border-bottom:2px solid #5f97fc;margin-bottom:8px;padding-bottom:0}div.ML__keyboard.material div>.rows>ul>.keycap{background:transparent;border:1px solid transparent;border-radius:5px;color:var(--keycap-text);fill:currentColor;transition:none}div.ML__keyboard.material div>.rows>ul>.keycap.tt{color:#5f97fc}div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"]{margin-top:10px;margin-bottom:10px;height:20px;background:#e0e0e0}div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"].active,div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"].pressed,div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"]:active,div.ML__keyboard.material div>.rows>ul>.keycap[data-key=\" \"]:hover{background:#d0d0d0;box-shadow:none;transform:none}div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):hover{border:1px solid transparent;background:var(--keycap-background-active);box-shadow:none}div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).active,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).pressed,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):active{background:var(--keyboard-alternate-background);color:var(--keyboard-alternate-text);box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23)}@media only screen and (max-width:767px){div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).active,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).pressed,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):active{box-shadow:0 10px 20px rgba(0,0,0,.19),0 6px 6px rgba(0,0,0,.23);font-size:10px;vertical-align:top;width:19.5px;margin-right:10px;margin-left:10px;transform:translateY(-20px) scale(2);transition:none;justify-content:flex-start;padding:2px 0 0;z-index:calc(var(--ML_keyboard-zindex, 105) - 5)}}@media only screen and (max-width:414px){div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).active,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]).pressed,div.ML__keyboard.material div>.rows>ul>.keycap:not([data-key=\" \"]):active{width:16.5px}}@media only screen and (max-width:767px){div.ML__keyboard.material div>.rows>ul>.keycap:last-child.active,div.ML__keyboard.material div>.rows>ul>.keycap:last-child:active{margin-right:0;margin-left:14px}}div.ML__keyboard.material div div.rows ul li.action,div.ML__keyboard.material div div.rows ul li.modifier{background:transparent;border:0;color:#869096;fill:currentColor;font-size:16px;transition:none}div.ML__keyboard.material div div.rows ul li.action.selected,div.ML__keyboard.material div div.rows ul li.modifier.selected{color:#5f97fc;border-radius:0;border-bottom:2px solid #5f97fc}div.ML__keyboard.material div div.rows ul li.action.active,div.ML__keyboard.material div div.rows ul li.action.pressed,div.ML__keyboard.material div div.rows ul li.action:active,div.ML__keyboard.material div div.rows ul li.action:hover,div.ML__keyboard.material div div.rows ul li.modifier.active,div.ML__keyboard.material div div.rows ul li.modifier.pressed,div.ML__keyboard.material div div.rows ul li.modifier:active,div.ML__keyboard.material div div.rows ul li.modifier:hover{border:0;color:var(--keycap-text);background:var(--keycap-background-active);box-shadow:none}div.ML__keyboard.material div div.rows ul li.bigfnbutton,div.ML__keyboard.material div div.rows ul li.fnbutton{background:transparent;border:0}div.ML__keyboard.material div div.rows ul li.bigfnbutton.selected,div.ML__keyboard.material div div.rows ul li.fnbutton.selected{color:#5f97fc;fill:currentColor;border-radius:0;border-bottom:2px solid #5f97fc}div.ML__keyboard.material div div.rows ul li.bigfnbutton.active,div.ML__keyboard.material div div.rows ul li.bigfnbutton.pressed,div.ML__keyboard.material div div.rows ul li.bigfnbutton:active,div.ML__keyboard.material div div.rows ul li.bigfnbutton:hover,div.ML__keyboard.material div div.rows ul li.fnbutton.active,div.ML__keyboard.material div div.rows ul li.fnbutton.pressed,div.ML__keyboard.material div div.rows ul li.fnbutton:active,div.ML__keyboard.material div div.rows ul li.fnbutton:hover{border:0;color:#5f97fc;fill:currentColor;background:var(--keycap-background-active);box-shadow:none}@media (prefers-color-scheme:dark){body:not([theme=light]) div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue,212),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue,212),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue,212),35%,40%);--keycap-modifier-border:hsl(var(--hue,212),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue,212),35%,42%);--keyboard-alternate-background:hsl(var(--hue,212),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue,212),35%,42%);--keyboard-alternate-text:#d1d1d1}}body[theme=dark] div.ML__keyboard.material{--hue:198;--keyboard-background:hsl(var(--hue,212),19%,18%);--keyboard-text:#d4d6d7;--keyboard-text-active:#5f97fc;--keyboard-background-border:#333;--keycap-background:hsl(var(--hue,212),25%,39%);--keycap-background-active:#5f97fc;--keycap-background-border:transparent;--keycap-background-border-bottom:transparent;--keycap-text:#d0d0d0;--keycap-text-active:#d4d6d7;--keycap-secondary-text:#5f97fc;--keycap-modifier-background:hsl(var(--hue,212),35%,40%);--keycap-modifier-border:hsl(var(--hue,212),35%,35%);--keycap-modifier-border-bottom:hsl(var(--hue,212),35%,42%);--keyboard-alternate-background:hsl(var(--hue,212),8%,2%);--keyboard-alternate-background-active:hsl(var(--hue,212),35%,42%);--keyboard-alternate-text:#d1d1d1}";

  var css_248z$1 = ".ML__sr-only{position:absolute;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}body.ML__fonts-loading .ML__base{visibility:hidden}.ML__base{visibility:inherit;display:inline-block;position:relative;cursor:text}.ML__strut,.ML__strut--bottom{display:inline-block;min-height:.5em}.ML__small-delim{font-family:KaTeX_Main}.ML__text{font-family:var(--text-font-family,system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",\"Roboto\",\"Oxygen\",\"Ubuntu\",\"Cantarell\",\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif);white-space:pre}.ML__cmr{font-family:KaTeX_Main;font-style:normal}.ML__mathit{font-family:KaTeX_Math;font-style:italic}.ML__mathbf{font-family:KaTeX_Main;font-weight:700}.lcGreek.ML__mathbf{font-family:KaTeX_Math;font-weight:400}.ML__mathbfit{font-family:KaTeX_Math;font-weight:700;font-style:italic}.ML__ams,.ML__bb{font-family:KaTeX_AMS}.ML__cal{font-family:KaTeX_Caligraphic}.ML__frak{font-family:KaTeX_Fraktur}.ML__tt{font-family:KaTeX_Typewriter}.ML__script{font-family:KaTeX_Script}.ML__sans{font-family:KaTeX_SansSerif}.ML__series_el,.ML__series_ul{font-weight:100}.ML__series_l{font-weight:200}.ML__series_sl{font-weight:300}.ML__series_sb{font-weight:500}.ML__bold,.ML__boldsymbol{font-weight:700}.ML__series_eb{font-weight:800}.ML__series_ub{font-weight:900}.ML__series_uc{font-stretch:ultra-condensed}.ML__series_ec{font-stretch:extra-condensed}.ML__series_c{font-stretch:condensed}.ML__series_sc{font-stretch:semi-condensed}.ML__series_sx{font-stretch:semi-expanded}.ML__series_x{font-stretch:expanded}.ML__series_ex{font-stretch:extra-expanded}.ML__series_ux{font-stretch:ultra-expanded}.ML__it{font-style:italic}.ML__shape_ol{-webkit-text-stroke:1px #000;text-stroke:1px #000;color:transparent}.ML__shape_sc{font-variant:small-caps}.ML__shape_sl{font-style:oblique}.ML__emph{color:#bc2612}.ML__emph .ML__emph{color:#0c7f99}.ML__highlight{color:#007cb2;background:#edd1b0}.ML__mathlive{display:inline-block;line-height:0;direction:ltr;text-align:left;text-indent:0;text-rendering:auto;font-family:KaTeX_Main;font-style:normal;font-size-adjust:none;letter-spacing:normal;word-wrap:normal;word-spacing:normal;white-space:nowrap;text-shadow:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:-webkit-min-content;width:-moz-min-content;width:min-content;transform:translateZ(0)}.ML__mathlive .reset-textstyle.scriptstyle{font-size:.7em}.ML__mathlive .reset-textstyle.scriptscriptstyle{font-size:.5em}.ML__mathlive .reset-scriptstyle.textstyle{font-size:1.42857em}.ML__mathlive .reset-scriptstyle.scriptscriptstyle{font-size:.71429em}.ML__mathlive .reset-scriptscriptstyle.textstyle{font-size:2em}.ML__mathlive .reset-scriptscriptstyle.scriptstyle{font-size:1.4em}.ML__mathlive .style-wrap{position:relative}.ML__mathlive .vlist{display:inline-block}.ML__mathlive .vlist>span{display:block;height:0;position:relative;line-height:0}.ML__mathlive .vlist>span>span{display:inline-block}.ML__mathlive .msubsup{text-align:left}.ML__mathlive .mfrac>span{text-align:center}.ML__mathlive .mfrac .frac-line{width:100%}.ML__mathlive .mfrac .frac-line:after{content:\"\";display:block;margin-top:-.04em;min-height:.04em;background:currentColor;box-sizing:content-box;transform:translate(0)}.ML__mathlive .rspace.negativethinspace{margin-right:-.16667em}.ML__mathlive .rspace.thinspace{margin-right:.16667em}.ML__mathlive .rspace.negativemediumspace{margin-right:-.22222em}.ML__mathlive .rspace.mediumspace{margin-right:.22222em}.ML__mathlive .rspace.thickspace{margin-right:.27778em}.ML__mathlive .rspace.sixmuspace{margin-right:.333333em}.ML__mathlive .rspace.eightmuspace{margin-right:.444444em}.ML__mathlive .rspace.enspace{margin-right:.5em}.ML__mathlive .rspace.twelvemuspace{margin-right:.666667em}.ML__mathlive .rspace.quad{margin-right:1em}.ML__mathlive .rspace.qquad{margin-right:2em}.ML__mathlive .mspace{display:inline-block}.ML__mathlive .mspace.negativethinspace{margin-left:-.16667em}.ML__mathlive .mspace.thinspace{width:.16667em}.ML__mathlive .mspace.negativemediumspace{margin-left:-.22222em}.ML__mathlive .mspace.mediumspace{width:.22222em}.ML__mathlive .mspace.thickspace{width:.27778em}.ML__mathlive .mspace.sixmuspace{width:.333333em}.ML__mathlive .mspace.eightmuspace{width:.444444em}.ML__mathlive .mspace.enspace{width:.5em}.ML__mathlive .mspace.twelvemuspace{width:.666667em}.ML__mathlive .mspace.quad{width:1em}.ML__mathlive .mspace.qquad{width:2em}.ML__mathlive .llap,.ML__mathlive .rlap{width:0;position:relative}.ML__mathlive .llap>.inner,.ML__mathlive .rlap>.inner{position:absolute}.ML__mathlive .llap>.fix,.ML__mathlive .rlap>.fix{display:inline-block}.ML__mathlive .llap>.inner{right:0}.ML__mathlive .rlap>.inner{left:0}.ML__mathlive .rule{display:inline-block;border:0 solid;position:relative}.ML__mathlive .overline .overline-line,.ML__mathlive .underline .underline-line{width:100%}.ML__mathlive .overline .overline-line:before,.ML__mathlive .underline .underline-line:before{border-bottom-style:solid;border-bottom-width:.04em;content:\"\";display:block}.ML__mathlive .overline .overline-line:after,.ML__mathlive .underline .underline-line:after{border-bottom-style:solid;border-bottom-width:.04em;min-height:thin;content:\"\";display:block;margin-top:-1px}.ML__mathlive .stretchy{display:block;position:absolute;width:100%;left:0;overflow:hidden}.ML__mathlive .stretchy:after,.ML__mathlive .stretchy:before{content:\"\"}.ML__mathlive .stretchy svg{display:block;position:absolute;width:100%;height:inherit;fill:currentColor;stroke:currentColor;fill-rule:nonzero;fill-opacity:1;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1}.ML__mathlive .slice-1-of-2{left:0}.ML__mathlive .slice-1-of-2,.ML__mathlive .slice-2-of-2{display:inline-flex;position:absolute;width:50.2%;overflow:hidden}.ML__mathlive .slice-2-of-2{right:0}.ML__mathlive .slice-1-of-3{display:inline-flex;position:absolute;left:0;width:25.1%;overflow:hidden}.ML__mathlive .slice-2-of-3{display:inline-flex;position:absolute;left:25%;width:50%;overflow:hidden}.ML__mathlive .slice-3-of-3{display:inline-flex;position:absolute;right:0;width:25.1%;overflow:hidden}.ML__mathlive .slice-1-of-1{display:inline-flex;position:absolute;width:100%;left:0;overflow:hidden}.ML__mathlive .sqrt{display:inline-block}.ML__mathlive .sqrt>.sqrt-sign{font-family:KaTeX_Main;position:relative}.ML__mathlive .sqrt .sqrt-line{height:.04em;width:100%}.ML__mathlive .sqrt .sqrt-line:before{content:\"\";display:block;margin-top:-.04em;min-height:.04em;background:currentColor}.ML__mathlive .sqrt .sqrt-line:after{border-bottom-width:1px;content:\" \";display:block;margin-top:-.1em;transform:translate(0)}.ML__mathlive .sqrt>.root{margin-left:.27777778em;margin-right:-.55555556em}.ML__mathlive .fontsize-ensurer,.ML__mathlive .sizing{display:inline-block}.ML__mathlive .fontsize-ensurer.reset-size1.size1,.ML__mathlive .sizing.reset-size1.size1{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size1.size2,.ML__mathlive .sizing.reset-size1.size2{font-size:1.4em}.ML__mathlive .fontsize-ensurer.reset-size1.size3,.ML__mathlive .sizing.reset-size1.size3{font-size:1.6em}.ML__mathlive .fontsize-ensurer.reset-size1.size4,.ML__mathlive .sizing.reset-size1.size4{font-size:1.8em}.ML__mathlive .fontsize-ensurer.reset-size1.size5,.ML__mathlive .sizing.reset-size1.size5{font-size:2em}.ML__mathlive .fontsize-ensurer.reset-size1.size6,.ML__mathlive .sizing.reset-size1.size6{font-size:2.4em}.ML__mathlive .fontsize-ensurer.reset-size1.size7,.ML__mathlive .sizing.reset-size1.size7{font-size:2.88em}.ML__mathlive .fontsize-ensurer.reset-size1.size8,.ML__mathlive .sizing.reset-size1.size8{font-size:3.46em}.ML__mathlive .fontsize-ensurer.reset-size1.size9,.ML__mathlive .sizing.reset-size1.size9{font-size:4.14em}.ML__mathlive .fontsize-ensurer.reset-size1.size10,.ML__mathlive .sizing.reset-size1.size10{font-size:4.98em}.ML__mathlive .fontsize-ensurer.reset-size2.size1,.ML__mathlive .sizing.reset-size2.size1{font-size:.71428571em}.ML__mathlive .fontsize-ensurer.reset-size2.size2,.ML__mathlive .sizing.reset-size2.size2{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size2.size3,.ML__mathlive .sizing.reset-size2.size3{font-size:1.14285714em}.ML__mathlive .fontsize-ensurer.reset-size2.size4,.ML__mathlive .sizing.reset-size2.size4{font-size:1.28571429em}.ML__mathlive .fontsize-ensurer.reset-size2.size5,.ML__mathlive .sizing.reset-size2.size5{font-size:1.42857143em}.ML__mathlive .fontsize-ensurer.reset-size2.size6,.ML__mathlive .sizing.reset-size2.size6{font-size:1.71428571em}.ML__mathlive .fontsize-ensurer.reset-size2.size7,.ML__mathlive .sizing.reset-size2.size7{font-size:2.05714286em}.ML__mathlive .fontsize-ensurer.reset-size2.size8,.ML__mathlive .sizing.reset-size2.size8{font-size:2.47142857em}.ML__mathlive .fontsize-ensurer.reset-size2.size9,.ML__mathlive .sizing.reset-size2.size9{font-size:2.95714286em}.ML__mathlive .fontsize-ensurer.reset-size2.size10,.ML__mathlive .sizing.reset-size2.size10{font-size:3.55714286em}.ML__mathlive .fontsize-ensurer.reset-size3.size1,.ML__mathlive .sizing.reset-size3.size1{font-size:.625em}.ML__mathlive .fontsize-ensurer.reset-size3.size2,.ML__mathlive .sizing.reset-size3.size2{font-size:.875em}.ML__mathlive .fontsize-ensurer.reset-size3.size3,.ML__mathlive .sizing.reset-size3.size3{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size3.size4,.ML__mathlive .sizing.reset-size3.size4{font-size:1.125em}.ML__mathlive .fontsize-ensurer.reset-size3.size5,.ML__mathlive .sizing.reset-size3.size5{font-size:1.25em}.ML__mathlive .fontsize-ensurer.reset-size3.size6,.ML__mathlive .sizing.reset-size3.size6{font-size:1.5em}.ML__mathlive .fontsize-ensurer.reset-size3.size7,.ML__mathlive .sizing.reset-size3.size7{font-size:1.8em}.ML__mathlive .fontsize-ensurer.reset-size3.size8,.ML__mathlive .sizing.reset-size3.size8{font-size:2.1625em}.ML__mathlive .fontsize-ensurer.reset-size3.size9,.ML__mathlive .sizing.reset-size3.size9{font-size:2.5875em}.ML__mathlive .fontsize-ensurer.reset-size3.size10,.ML__mathlive .sizing.reset-size3.size10{font-size:3.1125em}.ML__mathlive .fontsize-ensurer.reset-size4.size1,.ML__mathlive .sizing.reset-size4.size1{font-size:.55555556em}.ML__mathlive .fontsize-ensurer.reset-size4.size2,.ML__mathlive .sizing.reset-size4.size2{font-size:.77777778em}.ML__mathlive .fontsize-ensurer.reset-size4.size3,.ML__mathlive .sizing.reset-size4.size3{font-size:.88888889em}.ML__mathlive .fontsize-ensurer.reset-size4.size4,.ML__mathlive .sizing.reset-size4.size4{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size4.size5,.ML__mathlive .sizing.reset-size4.size5{font-size:1.11111111em}.ML__mathlive .fontsize-ensurer.reset-size4.size6,.ML__mathlive .sizing.reset-size4.size6{font-size:1.33333333em}.ML__mathlive .fontsize-ensurer.reset-size4.size7,.ML__mathlive .sizing.reset-size4.size7{font-size:1.6em}.ML__mathlive .fontsize-ensurer.reset-size4.size8,.ML__mathlive .sizing.reset-size4.size8{font-size:1.92222222em}.ML__mathlive .fontsize-ensurer.reset-size4.size9,.ML__mathlive .sizing.reset-size4.size9{font-size:2.3em}.ML__mathlive .fontsize-ensurer.reset-size4.size10,.ML__mathlive .sizing.reset-size4.size10{font-size:2.76666667em}.ML__mathlive .fontsize-ensurer.reset-size5.size1,.ML__mathlive .sizing.reset-size5.size1{font-size:.5em}.ML__mathlive .fontsize-ensurer.reset-size5.size2,.ML__mathlive .sizing.reset-size5.size2{font-size:.7em}.ML__mathlive .fontsize-ensurer.reset-size5.size3,.ML__mathlive .sizing.reset-size5.size3{font-size:.8em}.ML__mathlive .fontsize-ensurer.reset-size5.size4,.ML__mathlive .sizing.reset-size5.size4{font-size:.9em}.ML__mathlive .fontsize-ensurer.reset-size5.size5,.ML__mathlive .sizing.reset-size5.size5{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size5.size6,.ML__mathlive .sizing.reset-size5.size6{font-size:1.2em}.ML__mathlive .fontsize-ensurer.reset-size5.size7,.ML__mathlive .sizing.reset-size5.size7{font-size:1.44em}.ML__mathlive .fontsize-ensurer.reset-size5.size8,.ML__mathlive .sizing.reset-size5.size8{font-size:1.73em}.ML__mathlive .fontsize-ensurer.reset-size5.size9,.ML__mathlive .sizing.reset-size5.size9{font-size:2.07em}.ML__mathlive .fontsize-ensurer.reset-size5.size10,.ML__mathlive .sizing.reset-size5.size10{font-size:2.49em}.ML__mathlive .fontsize-ensurer.reset-size6.size1,.ML__mathlive .sizing.reset-size6.size1{font-size:.41666667em}.ML__mathlive .fontsize-ensurer.reset-size6.size2,.ML__mathlive .sizing.reset-size6.size2{font-size:.58333333em}.ML__mathlive .fontsize-ensurer.reset-size6.size3,.ML__mathlive .sizing.reset-size6.size3{font-size:.66666667em}.ML__mathlive .fontsize-ensurer.reset-size6.size4,.ML__mathlive .sizing.reset-size6.size4{font-size:.75em}.ML__mathlive .fontsize-ensurer.reset-size6.size5,.ML__mathlive .sizing.reset-size6.size5{font-size:.83333333em}.ML__mathlive .fontsize-ensurer.reset-size6.size6,.ML__mathlive .sizing.reset-size6.size6{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size6.size7,.ML__mathlive .sizing.reset-size6.size7{font-size:1.2em}.ML__mathlive .fontsize-ensurer.reset-size6.size8,.ML__mathlive .sizing.reset-size6.size8{font-size:1.44166667em}.ML__mathlive .fontsize-ensurer.reset-size6.size9,.ML__mathlive .sizing.reset-size6.size9{font-size:1.725em}.ML__mathlive .fontsize-ensurer.reset-size6.size10,.ML__mathlive .sizing.reset-size6.size10{font-size:2.075em}.ML__mathlive .fontsize-ensurer.reset-size7.size1,.ML__mathlive .sizing.reset-size7.size1{font-size:.34722222em}.ML__mathlive .fontsize-ensurer.reset-size7.size2,.ML__mathlive .sizing.reset-size7.size2{font-size:.48611111em}.ML__mathlive .fontsize-ensurer.reset-size7.size3,.ML__mathlive .sizing.reset-size7.size3{font-size:.55555556em}.ML__mathlive .fontsize-ensurer.reset-size7.size4,.ML__mathlive .sizing.reset-size7.size4{font-size:.625em}.ML__mathlive .fontsize-ensurer.reset-size7.size5,.ML__mathlive .sizing.reset-size7.size5{font-size:.69444444em}.ML__mathlive .fontsize-ensurer.reset-size7.size6,.ML__mathlive .sizing.reset-size7.size6{font-size:.83333333em}.ML__mathlive .fontsize-ensurer.reset-size7.size7,.ML__mathlive .sizing.reset-size7.size7{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size7.size8,.ML__mathlive .sizing.reset-size7.size8{font-size:1.20138889em}.ML__mathlive .fontsize-ensurer.reset-size7.size9,.ML__mathlive .sizing.reset-size7.size9{font-size:1.4375em}.ML__mathlive .fontsize-ensurer.reset-size7.size10,.ML__mathlive .sizing.reset-size7.size10{font-size:1.72916667em}.ML__mathlive .fontsize-ensurer.reset-size8.size1,.ML__mathlive .sizing.reset-size8.size1{font-size:.28901734em}.ML__mathlive .fontsize-ensurer.reset-size8.size2,.ML__mathlive .sizing.reset-size8.size2{font-size:.40462428em}.ML__mathlive .fontsize-ensurer.reset-size8.size3,.ML__mathlive .sizing.reset-size8.size3{font-size:.46242775em}.ML__mathlive .fontsize-ensurer.reset-size8.size4,.ML__mathlive .sizing.reset-size8.size4{font-size:.52023121em}.ML__mathlive .fontsize-ensurer.reset-size8.size5,.ML__mathlive .sizing.reset-size8.size5{font-size:.57803468em}.ML__mathlive .fontsize-ensurer.reset-size8.size6,.ML__mathlive .sizing.reset-size8.size6{font-size:.69364162em}.ML__mathlive .fontsize-ensurer.reset-size8.size7,.ML__mathlive .sizing.reset-size8.size7{font-size:.83236994em}.ML__mathlive .fontsize-ensurer.reset-size8.size8,.ML__mathlive .sizing.reset-size8.size8{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size8.size9,.ML__mathlive .sizing.reset-size8.size9{font-size:1.19653179em}.ML__mathlive .fontsize-ensurer.reset-size8.size10,.ML__mathlive .sizing.reset-size8.size10{font-size:1.43930636em}.ML__mathlive .fontsize-ensurer.reset-size9.size1,.ML__mathlive .sizing.reset-size9.size1{font-size:.24154589em}.ML__mathlive .fontsize-ensurer.reset-size9.size2,.ML__mathlive .sizing.reset-size9.size2{font-size:.33816425em}.ML__mathlive .fontsize-ensurer.reset-size9.size3,.ML__mathlive .sizing.reset-size9.size3{font-size:.38647343em}.ML__mathlive .fontsize-ensurer.reset-size9.size4,.ML__mathlive .sizing.reset-size9.size4{font-size:.43478261em}.ML__mathlive .fontsize-ensurer.reset-size9.size5,.ML__mathlive .sizing.reset-size9.size5{font-size:.48309179em}.ML__mathlive .fontsize-ensurer.reset-size9.size6,.ML__mathlive .sizing.reset-size9.size6{font-size:.57971014em}.ML__mathlive .fontsize-ensurer.reset-size9.size7,.ML__mathlive .sizing.reset-size9.size7{font-size:.69565217em}.ML__mathlive .fontsize-ensurer.reset-size9.size8,.ML__mathlive .sizing.reset-size9.size8{font-size:.83574879em}.ML__mathlive .fontsize-ensurer.reset-size9.size9,.ML__mathlive .sizing.reset-size9.size9{font-size:1em}.ML__mathlive .fontsize-ensurer.reset-size9.size10,.ML__mathlive .sizing.reset-size9.size10{font-size:1.20289855em}.ML__mathlive .fontsize-ensurer.reset-size10.size1,.ML__mathlive .sizing.reset-size10.size1{font-size:.20080321em}.ML__mathlive .fontsize-ensurer.reset-size10.size2,.ML__mathlive .sizing.reset-size10.size2{font-size:.2811245em}.ML__mathlive .fontsize-ensurer.reset-size10.size3,.ML__mathlive .sizing.reset-size10.size3{font-size:.32128514em}.ML__mathlive .fontsize-ensurer.reset-size10.size4,.ML__mathlive .sizing.reset-size10.size4{font-size:.36144578em}.ML__mathlive .fontsize-ensurer.reset-size10.size5,.ML__mathlive .sizing.reset-size10.size5{font-size:.40160643em}.ML__mathlive .fontsize-ensurer.reset-size10.size6,.ML__mathlive .sizing.reset-size10.size6{font-size:.48192771em}.ML__mathlive .fontsize-ensurer.reset-size10.size7,.ML__mathlive .sizing.reset-size10.size7{font-size:.57831325em}.ML__mathlive .fontsize-ensurer.reset-size10.size8,.ML__mathlive .sizing.reset-size10.size8{font-size:.69477912em}.ML__mathlive .fontsize-ensurer.reset-size10.size9,.ML__mathlive .sizing.reset-size10.size9{font-size:.8313253em}.ML__mathlive .fontsize-ensurer.reset-size10.size10,.ML__mathlive .sizing.reset-size10.size10{font-size:1em}.ML__mathlive .delimsizing.size1{font-family:KaTeX_Size1}.ML__mathlive .delimsizing.size2{font-family:KaTeX_Size2}.ML__mathlive .delimsizing.size3{font-family:KaTeX_Size3}.ML__mathlive .delimsizing.size4{font-family:KaTeX_Size4}.ML__mathlive .delimsizing.mult .delim-size1{font-family:KaTeX_Size1;vertical-align:top}.ML__mathlive .delimsizing.mult .delim-size4{font-family:KaTeX_Size4;vertical-align:top}.ML__mathlive .nulldelimiter{width:1.2em/10}.ML__mathlive .op-symbol{position:relative}.ML__mathlive .op-symbol.small-op{font-family:KaTeX_Size1}.ML__mathlive .op-symbol.large-op{font-family:KaTeX_Size2}.ML__mathlive .op-limits .vlist>span{text-align:center}.ML__mathlive .op-over-under{position:relative}.ML__mathlive .op-over-under>.vlist>span:first-child,.ML__mathlive .op-over-under>.vlist>span:last-child{text-align:center}.ML__mathlive .accent>.vlist>span{text-align:center}.ML__mathlive .accent .accent-body>span{font-family:KaTeX_Main;width:0}.ML__mathlive .accent .accent-body.accent-vec>span{position:relative;left:.326em}.ML__mathlive .mtable .vertical-separator{display:inline-block;margin:0 -.025em;border-right:.05em solid}.ML__mathlive .mtable .arraycolsep{display:inline-block}.ML__mathlive .mtable .col-align-m>.vlist{text-align:center}.ML__mathlive .mtable .col-align-c>.vlist{text-align:center}.ML__mathlive .mtable .col-align-l>.vlist{text-align:left}.ML__mathlive .mtable .col-align-r>.vlist{text-align:right}.ML__error{background-image:radial-gradient(ellipse at center,#cc0041,transparent 70%);background-repeat:repeat-x;background-size:3px 3px;background-position:0 98%}.ML__composition{background:#fff1c2;color:#000;-webkit-text-decoration:underline var(--caret,hsl(var(--hue,212),40%,49%));text-decoration:underline var(--caret,hsl(var(--hue,212),40%,49%))}@media (prefers-color-scheme:dark){.ML__composition{background:#69571c;color:#fff}}.ML__placeholder{opacity:.7;padding-left:.4ex;padding-right:.4ex;padding-top:.4ex}";

  class VirtualKeyboard {
      constructor(options, alt) {
          this.options = options;
          this.visible = false;
          this._executeCommand = alt === null || alt === void 0 ? void 0 : alt.executeCommand;
          // Listen to know when the mouse has been released without being
          // captured to remove the alternate keys panel and the shifted state of the
          // keyboard.
          // Note that we need to listen on the window to capture events happening
          // outside the virtual keyboard.
          // @todo should use a scrim instead (to prevent elements underneat the alt
          // layer from reacting while the alt layer is up)
          window.addEventListener('mouseup', this);
          window.addEventListener('blur', this);
          window.addEventListener('touchend', this);
          window.addEventListener('touchcancel', this);
      }
      get height() {
          var _a, _b;
          return (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetHeight) !== null && _b !== void 0 ? _b : 0;
      }
      handleEvent(evt) {
          if (!this.element) {
              return;
          }
          switch (evt.type) {
              case 'mouseup':
              case 'blur':
              case 'touchend':
              case 'touchcancel':
                  unshiftKeyboardLayer(this);
                  break;
          }
      }
      focusMathfield() { }
      blurMathfield() { }
      enable() { }
      disable() { }
      stateChanged() { }
      executeCommand(command) {
          var _a, _b, _c;
          let selector;
          let args = [];
          if (isArray(command)) {
              selector = command[0];
              args = command.slice(1);
          }
          else {
              selector = command;
          }
          // Convert kebab case (like-this) to camel case (likeThis).
          selector = selector.replace(/-\w/g, (m) => m[1].toUpperCase());
          if (((_a = COMMANDS[selector]) === null || _a === void 0 ? void 0 : _a.target) === 'virtual-keyboard') {
              return COMMANDS[selector].fn(this, ...args);
          }
          return (_c = (_b = this._executeCommand) === null || _b === void 0 ? void 0 : _b.call(this, command)) !== null && _c !== void 0 ? _c : false;
      }
      dispose() {
          var _a;
          releaseSharedElement(document.querySelector('#mathlive-alternate-keys-panel'));
          window.removeEventListener('mouseup', this);
          window.removeEventListener('blur', this);
          window.removeEventListener('touchend', this);
          window.removeEventListener('touchcancel', this);
          (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();
      }
  }
  const KEYBOARDS = {
      numeric: {
          tooltip: 'keyboard.tooltip.numeric',
          layer: 'math',
          label: '123',
          layers: ['math'],
      },
      roman: {
          tooltip: 'keyboard.tooltip.roman',
          layer: 'lower-roman',
          label: 'ABC',
          layers: ['lower-roman', 'upper-roman'],
      },
      greek: {
          tooltip: 'keyboard.tooltip.greek',
          layer: 'lower-greek',
          label: '&alpha;&beta;&gamma;',
          classes: 'tex-math',
          layers: ['lower-greek', 'upper-greek'],
      },
      functions: {
          tooltip: 'keyboard.tooltip.functions',
          layer: 'functions',
          label: '<i>f</i>&thinsp;()',
          classes: 'tex',
          layers: ['functions'],
      },
      symbols: {
          tooltip: 'keyboard.tooltip.symbols',
          layer: 'symbols',
          label: '&infin;≠∈',
          classes: 'tex',
          layers: ['symbols'],
      },
      latex: {
          tooltip: 'keyboard.tooltip.command',
          // For the latex keyboard, perform a command rather than
          // doing a simple layer switch, as we want to enter latex mode
          // when the keyboard is activated
          command: ['switchMode', 'latex'],
          label: `<svg><use xlink:href='#svg-command' /></svg>`,
          layers: ['latex-lower', 'latex-upper', 'latex-symbols'],
      },
      style: {
          tooltip: 'keyboard.tooltip.style',
          layer: 'style',
          label: '<b>b</b><i>i</i>𝔹',
      },
  };
  const SHIFTED_KEYS = {
      '\\varphi ': ['&Phi;', '\\Phi '],
      '\\varsigma ': ['&Sigma;', '\\Sigma '],
      '\\epsilon ': ['&#x0190;', '{\\char"0190}'],
      '\\rho ': ['&#x3A1', '{\\char"3A1}'],
      '\\tau ': ['&#x3A4;', '{\\char"3A4}'],
      '\\upsilon ': ['&Upsilon;', '\\Upsilon '],
      '\\theta ': ['&Theta;', '\\Theta '],
      '\\iota ': ['&Iota;', '{\\char"399}'],
      '\\omicron ': ['&#x039F;', '{\\char"39F}'],
      '\\pi ': ['&Pi;', '\\Pi '],
      '\\alpha ': ['&Alpha;', '{\\char"391}'],
      '\\sigma ': ['&Sigma;', '\\Sigma '],
      '\\delta ': ['&Delta;', '\\Delta '],
      '\\phi ': ['&#x03a6;', '\\Phi '],
      '\\gamma ': ['&Gamma;', '\\Gamma '],
      '\\eta ': ['&Eta;', '{\\char"397}'],
      '\\xi ': ['&Xi;', '\\Xi '],
      '\\kappa ': ['&Kappa;', '{\\char"39A}'],
      '\\lambda ': ['&Lambda;', '\\Lambda '],
      '\\zeta ': ['&Zeta;', '{\\char"396}'],
      '\\chi ': ['&Chi;', '{\\char"3A7}'],
      '\\psi ': ['&Psi;', '\\Psi '],
      '\\omega ': ['&Omega;', '\\Omega '],
      '\\beta ': ['&Beta;', '{\\char"392}'],
      '\\nu ': ['&Nu;', '{\\char"39D}'],
      '\\mu ': ['&Mu;', '{\\char"39C}'],
  };
  // Const FUNCTIONS = [
  //     'Basic',
  //         ['\\sin', '\\cos', '\\tan', '\\min', '\\max', '\\gcd', '\\lcm', '\\repeat', 'encapsulate', 'recognize'],
  //     'Operators',
  //         ['\\sum', '\\prod', '\\bigcup_x']
  // ]
  const ALT_KEYS_BASE = {
      '0': [
          '\\emptyset',
          '\\varnothing',
          '\\infty',
          { latex: '#?_0', insert: '#@_0' },
          '\\circ',
          '\\bigcirc',
          '\\bullet',
      ],
      '2': ['\\frac{1}{2}', { latex: '#?^2', insert: '#@^2' }],
      '3': ['\\frac{1}{3}', { latex: '#?^3', insert: '#@^3' }],
      '.': [
          ',',
          ';',
          '\\colon',
          { latex: ':', aside: 'ratio' },
          { latex: '\\cdotp', aside: 'center dot', classes: 'box' },
          { latex: '\\cdots', aside: 'center ellipsis', classes: 'box' },
          { latex: '\\ldotp', aside: 'low dot', classes: 'box' },
          { latex: '\\ldots', aside: 'low ellipsis', classes: 'box' },
          { latex: '\\vdots', aside: '', classes: 'box' },
          { latex: '\\ddots', aside: '', classes: 'box' },
          '\\odot',
          '\\oslash',
          '\\circledcirc',
      ],
      '*': [
          '\\cdot',
          '\\ast',
          '\\star',
          '\\bigstar',
          '\\ltimes',
          '\\rtimes',
          '\\rightthreetimes',
          '\\leftthreetimes',
          '\\intercal',
          '\\prod',
          { latex: '\\prod_{n\\mathop=0}^{\\infty}', classes: 'small' },
      ],
      '+': [
          '\\pm',
          '\\mp',
          '\\sum',
          { latex: '\\sum_{n\\mathop=0}^{\\infty}', classes: 'small' },
          '\\dotplus',
          '\\oplus',
      ],
      '-': ['\\pm', '\\mp', '\\ominus', '\\vert #0  \\vert'],
      '/': ['\\divideontimes', '/', '\\div'],
      '(': [
          '\\left( #0\\right)',
          '\\left[ #0\\right]',
          '\\left\\{ #0\\right\\}',
          '\\left\\langle #0\\right\\rangle',
          '\\lfloor',
          '\\llcorner',
          '(',
          '\\lbrack',
          '\\lvert',
          '\\lVert',
          '\\lgroup',
          '\\langle',
          '\\lceil',
          '\\ulcorner',
          '\\lmoustache',
          '\\lbrace',
      ],
      ')': [
          '\\rfloor',
          '\\lrcorner',
          ')',
          '\\rbrack',
          '\\rvert',
          '\\rVert',
          '\\rgroup',
          '\\rangle',
          '\\rceil',
          '\\urcorner',
          '\\rmoustache',
          '\\rbrace',
      ],
      '=': [
          '\\cong',
          '\\asymp',
          '\\equiv',
          '\\differencedelta',
          '\\varpropto',
          '\\thickapprox',
          '\\approxeq',
          '\\thicksim',
          '\\backsim',
          '\\eqsim',
          '\\simeq',
          '\\Bumpeq',
          '\\bumpeq',
          '\\doteq',
          '\\Doteq',
          '\\fallingdotseq',
          '\\risingdotseq',
          '\\coloneq',
          '\\eqcirc',
          '\\circeq',
          '\\triangleq',
          '\\between',
      ],
      '!=': ['\\neq', '\\ncong', '', '\\nsim'],
      '<': [
          '\\leq',
          '\\leqq',
          '\\lneqq',
          '\\ll',
          '\\nless',
          '\\nleq',
          '\\precsim',
          '\\lesssim',
          '\\lessgtr',
          '\\prec',
          '\\preccurlyeq',
          '\\lessdot',
          '\\nprec',
      ],
      '>': [
          '\\geq',
          '\\geqq',
          '\\gneqq',
          '\\gg',
          '\\ngtr',
          '\\ngeq',
          '\\succsim',
          '\\gtrsim',
          '\\gtrless',
          '\\succ',
          '\\succcurlyeq',
          '\\gtrdot',
          '\\nsucc',
      ],
      'set': ['\\in', '\\owns', '\\subset', '\\nsubset', '\\supset', '\\nsupset'],
      '!set': ['\\notin', '\\backepsilon'],
      'subset': [],
      'supset': [],
      'infinity': ['\\aleph_0', '\\aleph_1', '\\omega', '\\mathfrak{m}'],
      'numeric-pi': ['\\prod', '\\theta', '\\rho', '\\sin', '\\cos', '\\tan'],
      'ee': ['\\times 10^{#?}', '\\ln', '\\ln_{10}', '\\log'],
      '^': ['_{#?}'],
      // Integrals
      'int': [
          { latex: '\\int_{#?}^{#?}', classes: 'small' },
          { latex: '\\int', classes: 'small' },
          { latex: '\\smallint', classes: 'small' },
          { latex: '\\iint', classes: 'small' },
          { latex: '\\iiint', classes: 'small' },
          { latex: '\\oint', classes: 'small' },
          { latex: '\\dfrac{\\rd}{\\rd x}', classes: 'small' },
          { latex: '\\frac{\\partial}{\\partial x}', classes: 'small' },
          '\\capitalDifferentialD',
          '\\rd',
          '\\partial',
      ],
      'nabla': ['\\nabla\\times', '\\nabla\\cdot', '\\nabla^{2}'],
      '!': ['!!', '\\Gamma', '\\Pi'],
      'accents': [
          '\\bar{#@}',
          '\\vec{#@}',
          '\\hat{#@}',
          '\\check{#@}',
          '\\dot{#@}',
          '\\ddot{#@}',
          '\\mathring{#@}',
          '\\breve{#@}',
          '\\acute{#@}',
          '\\tilde{#@}',
          '\\grave{#@}',
      ],
      // 'absnorm': [{latex:'\\lVert #@ \\rVert', aside:'norm'},
      //     {latex:'\\lvert #@ \\rvert', aside:'determinant'},
      //     {latex:'\\begin{cardinality} #@ \\end{cardinality}', aside:'cardinality'},
      //     {latex:'\\lvert #@ \\rvert', aside:'length'},
      //     {latex:'\\lvert #@ \\rvert', aside:'order'},
      // ],
      'A': [
          { latex: '\\aleph', aside: 'aleph' },
          { latex: '\\forall', aside: 'for all' },
      ],
      'a': [
          { latex: '\\aleph', aside: 'aleph' },
          { latex: '\\forall', aside: 'for all' },
      ],
      'b': [{ latex: '\\beth', aside: 'beth' }],
      'B': [{ latex: '\\beth', aside: 'beth' }],
      'c': [{ latex: '\\C', aside: 'set of complex numbers' }],
      'd': [{ latex: '\\daleth', aside: 'daleth' }],
      'D': [{ latex: '\\daleth', aside: 'daleth' }],
      'e': [
          { latex: '\\exponentialE', aside: 'exponential e' },
          { latex: '\\exists', aside: 'there is' },
          { latex: '\\nexists', aside: 'there isn’t' },
      ],
      'g': [{ latex: '\\gimel', aside: 'gimel' }],
      'G': [{ latex: '\\gimel', aside: 'gimel' }],
      'h': [
          { latex: '\\hbar', aside: 'h bar' },
          { latex: '\\hslash', aside: 'h slash' },
      ],
      'i': [{ latex: '\\imaginaryI', aside: 'imaginary i' }],
      'j': [{ latex: '\\imaginaryJ', aside: 'imaginary j' }],
      'l': [{ latex: '\\ell', aside: 'ell' }],
      'n': [{ latex: '\\N', aside: 'set of natural numbers' }],
      'p': [{ latex: '\\P', aside: 'set of primes' }],
      'q': [{ latex: '\\Q', aside: 'set of rational numbers' }],
      'r': [{ latex: '\\R', aside: 'set of real numbers' }],
      'z': [{ latex: '\\Z', aside: 'set of integers' }],
      'x-var': [
          'y',
          'z',
          't',
          'r',
          { latex: 'f(#?)', classes: 'small' },
          { latex: 'g(#?)', classes: 'small' },
          'x^2',
          'x^n',
          'x_n',
          'x_{n+1}',
          'x_i',
          'x_{i+1}',
      ],
      'n-var': ['i', 'j', 'p', 'k', 'a', 'u'],
      'ii': ['\\Re', '\\Im', '\\imaginaryJ', '\\Vert #0 \\Vert'],
      'logic': [
          { latex: '\\exists', aside: 'there is' },
          { latex: '\\nexists', aside: 'there isn’t' },
          { latex: '\\ni', aside: 'such that' },
          { latex: '\\Colon', aside: 'such that' },
          { latex: '\\implies', aside: 'implies' },
          { latex: '\\impliedby', aside: 'implied by' },
          { latex: '\\iff', aside: 'if and only if' },
          { latex: '\\land', aside: 'and' },
          { latex: '\\lor', aside: 'or' },
          { latex: '\\oplus', aside: 'xor' },
          { latex: '\\lnot', aside: 'not' },
          { latex: '\\downarrow', aside: 'nor' },
          { latex: '\\uparrow', aside: 'nand' },
          { latex: '\\curlywedge', aside: 'nor' },
          { latex: '\\bar\\curlywedge', aside: 'nand' },
          // {latex:'\\barwedge', aside:'bar wedge'},
          // {latex:'\\curlyvee', aside:'curly vee'},
          // {latex:'\\veebar', aside:'vee bar'},
          { latex: '\\therefore', aside: 'therefore' },
          { latex: '\\because', aside: 'because' },
          { latex: '^\\biconditional', aside: 'biconditional' },
          '\\leftrightarrow',
          '\\Leftrightarrow',
          '\\to',
          '\\models',
          '\\vdash',
          '\\gets',
          '\\dashv',
          '\\roundimplies',
      ],
      'set-operators': [
          '\\cap',
          '\\cup',
          '\\setminus',
          '\\smallsetminus',
          '\\complement',
      ],
      'set-relations': [
          '\\in',
          '\\notin',
          '\\ni',
          '\\owns',
          '\\subset',
          '\\supset',
          '\\subseteq',
          '\\supseteq',
          '\\subsetneq',
          '\\supsetneq',
          '\\varsubsetneq',
          '\\subsetneqq',
          '\\nsubset',
          '\\nsupset',
          '\\nsubseteq',
          '\\nsupseteq',
      ],
      'space': [
          {
              latex: '\\char"203A\\!\\char"2039',
              insert: '\\!',
              aside: 'negative thin space<br>⁻³⧸₁₈ em',
          },
          {
              latex: '\\unicode{"203A}\\,\\unicode{"2039}',
              insert: '\\,',
              aside: 'thin space<br>³⧸₁₈ em',
          },
          {
              latex: '\\unicode{"203A}\\:\\unicode{"2039}',
              insert: '\\:',
              aside: 'medium space<br>⁴⧸₁₈ em',
          },
          {
              latex: '\\unicode{"203A}\\;\\unicode{"2039}',
              insert: '\\;',
              aside: 'thick space<br>⁵⧸₁₈ em',
          },
          {
              latex: '\\unicode{"203A}\\ \\unicode{"2039}',
              insert: '\\ ',
              aside: '⅓ em',
          },
          {
              latex: '\\unicode{"203A}\\enspace\\unicode{"2039}',
              insert: '\\enspace',
              aside: '½ em',
          },
          {
              latex: '\\unicode{"203A}\\quad\\unicode{"2039}',
              insert: '\\quad',
              aside: '1 em',
          },
          {
              latex: '\\unicode{"203A}\\qquad\\unicode{"2039}',
              insert: '\\qquad',
              aside: '2 em',
          },
      ],
      // @todo could also delete to end
      'delete': [
          {
              label: '<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>',
              command: '"deleteAll"',
          },
      ],
      // @todo Tab: could turn on speech, visible keyboard...
      '->|': [],
  };
  let ALT_KEYS = {};
  const LAYERS = {
      'math': `
        <div class='rows'>
            <ul>
                <li class='keycap tex' data-alt-keys='x-var'><i>x</i></li>
                <li class='keycap tex' data-alt-keys='n-var'><i>n</i></li>
                <li class='separator w5'></li>
                <row name='numpad-1'/>
                <li class='separator w5'></li>
                <li class='keycap tex' data-insert='$$\\exponentialE$$' data-alt-keys='ee'>e</li>
                <li class='keycap tex' data-insert='$$\\imaginaryI$$' data-alt-keys='ii'>i</li>
                <li class='keycap tex' data-latex='\\pi' data-alt-keys='numeric-pi'></li>
            </ul>
            <ul>
                <li class='keycap tex' data-key='<' data-alt-keys='<'>&lt;</li>
                <li class='keycap tex' data-key='>' data-alt-keys='>'>&gt;</li>
                <li class='separator w5'></li>
                <row name='numpad-2'/>
                <li class='separator w5'></li>
                <li class='keycap tex' data-alt-keys='x2' data-insert='$$#@^{2}$$'><span><i>x</i>&thinsp;²</span></li>
                <li class='keycap tex' data-alt-keys='^' data-insert='$$#@^{#?}$$'><span><i>x</i><sup>&thinsp;<small>&#x2b1a;</small></sup></span></li>
                <li class='keycap tex' data-alt-keys='sqrt' data-insert='$$\\sqrt{#0}$$' data-latex='\\sqrt{#0}'></li>
            </ul>
            <ul>
                <li class='keycap tex' data-alt-keys='(' >(</li>
                <li class='keycap tex' data-alt-keys=')' >)</li>
                <li class='separator w5'></li>
                <row name='numpad-3'/>
                <li class='separator w5'></li>
                <li class='keycap tex small' data-alt-keys='int' data-latex='\\int_0^\\infty'><span></span></li>
                <li class='keycap tex' data-latex='\\forall' data-alt-keys='logic' ></li>
                <li class='action font-glyph bottom right' data-alt-keys='delete' data-command='["performWithFeedback","deleteBackward"]'>&#x232b;</li></ul>
            </ul>
            <ul>
                <li class='keycap' data-alt-keys='foreground-color' data-command='["applyStyle",{"color":"#cc2428"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box'></span></li>
                <li class='keycap' data-alt-keys='background-color' data-command='["applyStyle",{"backgroundColor":"#fff590"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box'></span></li>
                <li class='separator w5'></li>
                <row name='numpad-4'/>
                <li class='separator w5'></li>
                <arrows/>
            </ul>
        </div>
    `,
      'lower-roman': `
        <div class='rows'>
            <ul>
                <row name='numpad-1' class='if-wide'/>
                <row name='lower-1' shift-layer='upper-roman'/>
            </ul>
            <ul>
                <row name='numpad-2' class='if-wide'/>
                <row name='lower-2'  shift-layer='upper-roman''/>
            </ul>
            <ul>
                <row name='numpad-3' class='if-wide'/>
                <row name='lower-3'  shift-layer='upper-roman''/>
            </ul>
            <ul>
                <row name='numpad-4' class='if-wide'/>
                <li class='keycap' >;</li>
                <li class='keycap' data-alt-keys=','>,</li>
                <li class='keycap w50' data-key=' ' data-alt-keys='space'>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'upper-roman': `
        <div class='rows'>
            <ul>
                <row name='numpad-1' class='if-wide'/>
                <row name='upper-1'  shift-layer='lower-roman'/>
            </ul>
            <ul>
                <row name='numpad-2' class='if-wide'/>
                <row name='upper-2' shift-layer='lower-roman'/>
            </ul>
            <ul>
                <row name='numpad-3' class='if-wide'/>
                <row name='upper-3' shift-layer='lower-roman'/>
            </ul>
            <ul>
                <row name='numpad-4' class='if-wide'/>
                <li class='keycap' >;</li>
                <li class='keycap' data-alt-keys='.'>;</li>
                <li class='keycap w50' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'symbols': `
        <div class='rows'>
            <ul>
                <row name='numpad-1' class='if-wide'/>
                <li class='keycap tex' data-alt-keys='(' data-insert='\\lbrace '>{</li>
                <li class='keycap tex' data-alt-keys=')' data-insert='\\rbrace '>}</li>
                <li class='separator w5'></li>
                <li class='keycap tex' data-alt-keys='set' data-insert='\\in '>&#x2208;</li>
                <li class='keycap tex' data-alt-keys='!set' data-insert='\\notin '>&#x2209;</li>
                <li class='keycap tex' data-insert='\\Re '>&#x211c;<aside>Real</aside></li>
                <li class='keycap tex' data-insert='\\Im '>&#x2111;<aside>Imaginary</aside></li>
                <li class='keycap w15' data-insert='\\ulcorner#0\\urcorner '><span><sup>&#x250c;</sup><span><span style='color:#ddd'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>
                <li class='keycap tex' data-alt-keys='nabla' data-insert='\\nabla '>&#x2207;<aside>nabla</aside></li>
                <li class='keycap tex' data-alt-keys='infinity' data-insert='\\infty '>&#x221e;</li>

            </ul>
            <ul>
                <row name='numpad-2' class='if-wide'/>
                <li class='keycap tex' data-alt-keys='(' data-insert='\\lbrack '>[</li>
                <li class='keycap tex' data-alt-keys=')' data-insert='\\rbrack '>]</li>
                <li class='separator w5'></li>
                <li class='keycap tex' data-alt-keys='subset' data-insert='\\subset '>&#x2282;</li>
                <li class='keycap tex' data-alt-keys='supset' data-insert='\\supset '>&#x2283;</li>
                <li class='keycap tex' data-key='!' data-alt-keys='!'>!<aside>factorial</aside></li>
                <li class='keycap' data-insert='$$^{\\prime} $$'><span><sup><span><span style='color:#ddd'>o</span>&#x2032</sup></span><aside>prime</aside></li>
                <li class='keycap w15' data-insert='\\llcorner#0\\lrcorner '><span><sub>&#x2514;</sub><span style='color:#ddd'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>
                <li class='keycap tex' data-insert='\\partial '>&#x2202;<aside>partial<br>derivative</aside></li>
                <li class='keycap tex' data-insert='\\emptyset '>&#x2205;<aside>empty set</aside></li>

            </ul>
            <ul>
                <row name='numpad-3' class='if-wide'/>
                <li class='keycap tex' data-alt-keys='(' data-insert='\\langle '>&#x27e8;</li>
                <li class='keycap tex' data-alt-keys=')' data-insert='\\rangle '>&#x27e9;</li>
                <li class='separator w5'></li>
                <li class='keycap tex' data-insert='\\subseteq '>&#x2286;</li>
                <li class='keycap tex' data-insert='\\supseteq '>&#x2287;</li>
                <li class='keycap tex' data-alt-keys='accents' data-insert='$$\\vec{#@}$$' data-latex='\\vec{#?}' data-aside='vector'></li>
                <li class='keycap tex' data-alt-keys='accents' data-insert='$$\\bar{#@}$$' data-latex='\\bar{#?}' data-aside='bar'></li>
                <li class='keycap tex' data-alt-keys='absnorm' data-insert='$$\\left| #0 \\right|$$' data-latex='\\left| #? \\right|' data-aside='abs'></li>
                <li class='keycap tex' data-insert='\\ast '>&#x2217;<aside>asterisk</aside></li>

                <li class='action font-glyph bottom right w15'
                    data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                    data-shifted-command='"deleteAll"'
                    data-alt-keys='delete' data-command='["performWithFeedback","deleteBackward"]'
                >&#x232b;</li>
            </ul>
            <ul>
                <row name='numpad-4' class='if-wide'/>
                <li class='keycap tex' data-insert=','>,</li>
                <li class='keycap tex' data-insert='\\cdot '>&#x22c5;<aside>centered dot</aside></li>
                <li class='keycap tex' data-insert='\\colon '>:<aside>colon</aside></li>
                <li class='keycap tex' data-insert='\\circ '>&#x2218;<aside>circle</aside></li>
                <li class='keycap tex' data-insert='\\approx '>&#x2248;<aside>approx.</aside></li>
                <li class='keycap tex' data-insert='\\ne '>&#x2260;</li>
                <li class='keycap tex' data-insert='\\pm '>&#x00b1;</li>
                <arrows/>
            </ul>
        </div>`,
      'lower-greek': `
        <div class='rows'>
            <ul><li class='keycap tex' data-insert='\\varphi '><i>&#x03c6;</i><aside>phi var.</aside></li>
                <li class='keycap tex' data-insert='\\varsigma '><i>&#x03c2;</i><aside>sigma var.</aside></li>
                <li class='keycap tex' data-insert='\\epsilon '><i>&#x03f5;</i></li>
                <li class='keycap tex' data-insert='\\rho '><i>&rho;</i></li>
                <li class='keycap tex' data-insert='\\tau '><i>&tau;</i></li>
                <li class='keycap tex' data-insert='\\upsilon '><i>&upsilon;</i></li>
                <li class='keycap tex' data-insert='\\theta '><i>&theta;</i></li>
                <li class='keycap tex' data-insert='\\iota '><i>&iota;</i></li>
                <li class='keycap tex' data-insert='\\omicron '>&omicron;</i></li>
                <li class='keycap tex' data-insert='\\pi '><i>&pi;</i></li>
            </ul>
            <ul><li class='keycap tex' data-insert='\\alpha ' data-shifted='&Alpha;' data-shifted-command='["insert","{\\\\char\\"391}"]'><i>&alpha;</i></li>
                <li class='keycap tex' data-insert='\\sigma '><i>&sigma;</i></li>
                <li class='keycap tex' data-insert='\\delta '><i>&delta;</i></li>
                <li class='keycap tex' data-insert='\\phi '><i>&#x03d5;</i></i></li>
                <li class='keycap tex' data-insert='\\gamma '><i>&gamma;</i></li>
                <li class='keycap tex' data-insert='\\eta '><i>&eta;</i></li>
                <li class='keycap tex' data-insert='\\xi '><i>&xi;</i></li>
                <li class='keycap tex' data-insert='\\kappa '><i>&kappa;</i></li>
                <li class='keycap tex' data-insert='\\lambda '><i>&lambda;</i></li>
            </ul>
            <ul><li class='shift modifier font-glyph bottom left w15 layer-switch' data-layer='upper-greek'>&#x21e7;</li>
                <li class='keycap tex' data-insert='\\zeta '><i>&zeta;</i></li>
                <li class='keycap tex' data-insert='\\chi '><i>&chi;</i></li>
                <li class='keycap tex' data-insert='\\psi '><i>&psi;</i></li>
                <li class='keycap tex' data-insert='\\omega '><i>&omega;</i></li>
                <li class='keycap tex' data-insert='\\beta '><i>&beta;</i></li>
                <li class='keycap tex' data-insert='\\nu '><i>&nu;</i></li>
                <li class='keycap tex' data-insert='\\mu '><i>&mu;</i></li>
                <li class='action font-glyph bottom right w15'
                    data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                    data-shifted-command='"deleteAll"'
                    data-alt-keys='delete' data-command='["performWithFeedback","deleteBackward"]'
                >&#x232b;</li>
            </ul>
            <ul>
                <li class='keycap ' data-key=' '>&nbsp;</li>
                <li class='keycap'>,</li>
                <li class='keycap tex' data-insert='\\varepsilon '><i>&#x03b5;</i><aside>epsilon var.</aside></li>
                <li class='keycap tex' data-insert='\\vartheta '><i>&#x03d1;</i><aside>theta var.</aside></li>
                <li class='keycap tex' data-insert='\\varkappa '><i>&#x3f0;</i><aside>kappa var.</aside></li>
                <li class='keycap tex' data-insert='\\varpi '><i>&#x03d6;<aside>pi var.</aside></i></li>
                <li class='keycap tex' data-insert='\\varrho '><i>&#x03f1;</i><aside>rho var.</aside></li>
                <arrows/>
            </ul>
        </div>`,
      'upper-greek': `
        <div class='rows'>
            <ul><li class='keycap tex' data-insert='\\Phi '>&Phi;<aside>phi</aside></li>
                <li class='keycap tex' data-insert='\\Sigma '>&Sigma;<aside>sigma</aside></li>
                <li class='keycap tex' data-insert='{\\char"0190}'>&#x0190;<aside>epsilon</aside></li>
                <li class='keycap tex' data-insert='{\\char"3A1}'>&#x3A1;<aside>rho</aside></li>
                <li class='keycap tex' data-insert='{\\char"3A4}'>&#x3A4;<aside>tau</aside></li>
                <li class='keycap tex' data-insert='\\Upsilon '>&Upsilon;<aside>upsilon</aside></li>
                <li class='keycap tex' data-insert='\\Theta '>&Theta;<aside>theta</aside></li>
                <li class='keycap tex' data-insert='{\\char"399}'>&Iota;<aside>iota</aside></li>
                <li class='keycap tex' data-insert='{\\char"39F}'>&#x039F;<aside>omicron</aside></li>
                <li class='keycap tex' data-insert='\\Pi '>&Pi;<aside>pi</aside></li></ul>
            <ul><li class='keycap tex' data-insert='{\\char"391}'>&#x391;<aside>alpha</aside></li>
                <li class='keycap tex' data-insert='\\Sigma '>&Sigma;<aside>sigma</aside></li>
                <li class='keycap tex' data-insert='\\Delta '>&Delta;<aside>delta</aside></li>
                <li class='keycap tex' data-insert='\\Phi '>&#x03a6;<aside>phi</aside></li>
                <li class='keycap tex' data-insert='\\Gamma '>&Gamma;<aside>gamma</aside></li>
                <li class='keycap tex' data-insert='{\\char"397}'>&Eta;<aside>eta</aside></li>
                <li class='keycap tex' data-insert='\\Xi '>&Xi;<aside>xi</aside></li>
                <li class='keycap tex' data-insert='{\\char"39A}'>&Kappa;<aside>kappa</aside></li>
                <li class='keycap tex' data-insert='\\Lambda '>&Lambda;<aside>lambda</aside></li></ul>
            <ul><li class='shift modifier font-glyph bottom left selected w15 layer-switch' data-layer='lower-greek'>&#x21e7;</li>
                <li class='keycap tex' data-insert='{\\char"396}'>&Zeta;<aside>zeta</aside></li>
                <li class='keycap tex' data-insert='{\\char"3A7}'>&Chi;<aside>chi</aside></li>
                <li class='keycap tex' data-insert='\\Psi '>&Psi;<aside>psi</aside></li>
                <li class='keycap tex' data-insert='\\Omega '>&Omega;<aside>omega</aside></li>
                <li class='keycap tex' data-insert='{\\char"392}'>&Beta;<aside>beta</aside></li>
                <li class='keycap tex' data-insert='{\\char"39D}'>&Nu;<aside>nu</aside></li>
                <li class='keycap tex' data-insert='{\\char"39C}'>&Mu;<aside>mu</aside></li>
                <li class='action font-glyph bottom right w15' data-command='["performWithFeedback","deleteBackward"]'>&#x232b;</li></ul>
            <ul>
                <li class='separator w10'>&nbsp;</li>
                <li class='keycap'>.</li>
                <li class='keycap w50' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'latex-lower': `
        <div class='rows'>
            <ul><row name='lower-1' class='tt' shift-layer='latex-upper'/></ul>
            <ul><row name='lower-2' class='tt' shift-layer='latex-upper'/></ul>
            <ul><row name='lower-3' class='tt' shift-layer='latex-upper'/></ul>
            <ul>
                <li class='layer-switch font-glyph modifier bottom left' data-layer='latex-symbols'>01#</li>
                <li class='keycap tt' data-shifted='[' data-shifted-command='["insertAndUnshiftKeyboardLayer", "["]'>{</li>
                <li class='keycap tt' data-shifted=']' data-shifted-command='["insertAndUnshiftKeyboardLayer", "]"]'>}</li>
                <li class='keycap tt' data-shifted='(' data-shifted-command='["insertAndUnshiftKeyboardLayer", "("]'>^</li>
                <li class='keycap tt' data-shifted=')' data-shifted-command='["insertAndUnshiftKeyboardLayer", ")"]'>_</li>
                <li class='keycap w20' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'latex-upper': `
        <div class='rows'>
            <ul><row name='upper-1' class='tt' shift-layer='latex-lower'/></ul>
            <ul><row name='upper-2' class='tt' shift-layer='latex-lower'/></ul>
            <ul><row name='upper-3' class='tt' shift-layer='latex-lower'/></ul>
            <ul>
                <li class='layer-switch font-glyph modifier bottom left' data-layer='latex-symbols'01#</li>
                <li class='keycap tt'>[</li>
                <li class='keycap tt'>]</li>
                <li class='keycap tt'>(</li>
                <li class='keycap tt'>)</li>
                <li class='keycap w20' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'latex-symbols': `
        <div class='rows'>
            <ul><li class='keycap tt'>1</li><li class='keycap tt'>2</li><li class='keycap tt'>3</li><li class='keycap tt'>4</li><li class='keycap tt'>5</li><li class='keycap tt'>6</li><li class='keycap tt'>7</li><li class='keycap tt'>8</li><li class='keycap tt'>9</li><li class='keycap tt'>0</li></ul>
            <ul><li class='keycap tt'>!</li><li class='keycap tt'>@</li><li class='keycap tt'>#</li><li class='keycap tt'>$</li><li class='keycap tt'>%</li><li class='keycap tt'>^</li><li class='keycap tt'>&</li><li class='keycap tt'>*</li><li class='keycap tt'>+</li><li class='keycap tt'>=</li></ul>
            <ul>
                <li class='keycap tt'>\\</li>
                <li class='keycap tt'>|</li>
                <li class='keycap tt'>/</li>
                <li class='keycap tt'>\`</li>
                <li class='keycap tt'>;</li>
                <li class='keycap tt'>:</li>
                <li class='keycap tt'>?</li>
                <li class='keycap tt'>'</li>
                <li class='keycap tt'>"</li>
                <li class='action font-glyph bottom right'
                    data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                    data-shifted-command='"deleteAll"'
                    data-alt-keys='delete' data-command='["performWithFeedback","deleteBackward"]'
                >&#x232b;</li>
            </ul>
            <ul>
                <li class='layer-switch font-glyph modifier bottom left' data-layer='latex-lower'>abc</li>
                <li class='keycap tt'>&lt;</li>
                <li class='keycap tt'>&gt;</li>
                <li class='keycap tt'>~</li>
                <li class='keycap tt'>,</li>
                <li class='keycap tt'>.</li>
                <li class='keycap' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'functions': `
        <div class='rows'>
            <ul><li class='separator'></li>
                <li class='fnbutton' data-insert='\\sin'></li>
                <li class='fnbutton' data-insert='\\sin^{-1}'></li>
                <li class='fnbutton' data-insert='\\ln'></li>
                <li class='fnbutton' data-insert='\\exponentialE^{#?}'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{lcm}(#?)$$' data-latex='\\operatorname{lcm}()'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{ceil}(#?)$$' data-latex='\\operatorname{ceil}()'></li>
                <li class='bigfnbutton' data-insert='$$\\lim_{n\\to\\infty}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\int$$'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{abs}(#?)$$' data-latex='\\operatorname{abs}()'></li>
            </ul>
            <ul><li class='separator'></li>
                <li class='fnbutton' data-insert='\\cos'></li>
                <li class='fnbutton' data-insert='\\cos^{-1}'></li>
                <li class='fnbutton' data-insert='\\ln_{10}'></li>
                <li class='fnbutton' data-insert='$$10^{#?}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{gcd}(#?)$$' data-latex='\\operatorname{gcd}()'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{floor}(#?)$$' data-latex='\\operatorname{floor}()'></li>
                <li class='bigfnbutton' data-insert='$$\\sum_{n\\mathop=0}^{\\infty}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\int_{0}^{\\infty}$$'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{sign}(#?)$$' data-latex='\\operatorname{sign}()'></li>
            </ul>
            <ul><li class='separator'></li>
                <li class='fnbutton' data-insert='\\tan'></li>
                <li class='fnbutton' data-insert='\\tan^{-1}'></li>
                <li class='fnbutton' data-insert='$$\\log_{#?}$$'></li>
                <li class='fnbutton' data-insert='$$\\sqrt[#?]{#0}$$'></li>
                <li class='bigfnbutton' data-insert='$$#0 \\mod$$' data-latex='\\mod'></li>
                <li class='bigfnbutton' data-insert='$$\\operatorname{round}(#?) $$' data-latex='\\operatorname{round}()'></li>
                <li class='bigfnbutton' data-insert='$$\\prod_{n\\mathop=0}^{\\infty}$$' data-latex='{\\scriptstyle \\prod_{n=0}^{\\infty}}'></li>
                <li class='bigfnbutton' data-insert='$$\\frac{\\differentialD #0}{\\differentialD x}$$'></li>
                <li class='action font-glyph bottom right' data-command='["performWithFeedback","deleteBackward"]'>&#x232b;</li></ul>
            <ul><li class='separator'></li>
                <li class='fnbutton'>(</li>
                <li class='fnbutton'>)</li>
                <li class='fnbutton' data-insert='$$^{#?} $$' data-latex='x^{#?} '></li>
                <li class='fnbutton' data-insert='$$_{#?} $$' data-latex='x_{#?} '></li>
                <li class='keycap w20 ' data-key=' '>&nbsp;</li>
                <arrows/>
            </ul>
        </div>`,
      'style': `
        <div class='rows'>
            <ul>
                <li class='keycap' data-alt-keys='foreground-color' data-command='["applyStyle",{"color":"#cc2428"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428'></span></li>
                <li class='keycap' data-alt-keys='background-color' data-command='["applyStyle",{"backgroundColor":"#fff590"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590'></span></li>
                <li class='separator w5'></li>
                <li class='keycap' data-command='["applyStyle",{"size":"size3"}]' data-latex='\\scriptsize\\text{small}'></li>
                <li class='keycap' data-command='["applyStyle",{"size":"size5"}]' data-latex='\\scriptsize\\text{normal}'></li>
                <li class='keycap' data-command='["applyStyle",{"size":"size9"}]' data-latex='\\huge\\text{big}'></li>
                <li class='separator w5'></li>
                <li class='keycap' data-latex='\\langle' data-command='["insert", "\\\\langle", {"smartFence":true}]'></li>
            </ul>
            <ul>
                <li class='keycap' data-command='["applyStyle",{"series":"l"}]' data-latex='\\fontseries{l}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"m"}]' data-latex='\\fontseries{m}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"b"}]' data-latex='\\fontseries{b}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"bx"}]' data-latex='\\fontseries{bx}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"sb"}]' data-latex='\\fontseries{sb}\\text{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"series":"c"}]' data-latex='\\fontseries{c}\\text{Ab}'></li>
            </ul>
            <ul>
                <li class='keycap' data-command='["applyStyle",{"shape":"up"}]' data-latex='\\textup{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"shape":"it"}]' data-latex='\\textit{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"shape":"sl"}]' data-latex='\\textsl{Ab}'></li>
                <li class='keycap' data-command='["applyStyle",{"shape":"sc"}]' data-latex='\\textsc{Ab}'></li>
                <li class='separator w5'></li>
                <li class='keycap' data-insert='$$\\emph{#?} $$' data-latex='\\text{\\emph{emph}}'></li>
            </ul>
            <ul>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cmr"}]' data-latex='\\textrm{Az}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cmtt"}]' data-latex='\\texttt{Az}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cmss"}]' data-latex='\\textsf{Az}'></li>

                <li class='keycap' data-command='["applyStyle",{"fontFamily":"bb"}]'  data-latex='\\mathbb{AZ}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"scr"}]'  data-latex='\\mathscr{AZ}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"cal"}]' data-latex='\\mathcal{A1}'></li>
                <li class='keycap' data-command='["applyStyle",{"fontFamily":"frak"}]' data-latex='\\mathfrak{Az}'></li>
            </ul>
        </div>`,
  };
  function latexToMarkup$1(latex, arg) {
      // Since we don't have preceding atoms, we'll interpret #@ as a placeholder
      latex = latex.replace(/(^|[^\\])#@/g, '$1#?');
      return makeStruts(new Span(Atom.render({ mathstyle: MATHSTYLES.displaystyle }, parseLatex(latex, 'math', arg)), 'ML__base'), 'ML__mathlive').toMarkup();
  }
  /**
   * Return a markup string for the keyboard toolbar for the specified layer.
   */
  function makeKeyboardToolbar(options, keyboardIDs, currentKeyboard) {
      var _a, _b;
      // The left hand side of the toolbar has a list of all the available keyboards
      let result = "<div class='left'>";
      const keyboardList = keyboardIDs.replace(/\s+/g, ' ').split(' ');
      if (keyboardList.length > 1) {
          const keyboards = {
              ...KEYBOARDS,
              ...((_a = options.customVirtualKeyboards) !== null && _a !== void 0 ? _a : {}),
          };
          for (const keyboard of keyboardList) {
              if (!keyboards[keyboard]) {
                  console.error('Unknown virtual keyboard "', keyboard, '"');
                  break;
              }
              result += "<div class='";
              if (keyboard === currentKeyboard) {
                  result += 'selected ';
              }
              else if (keyboards[keyboard].command) {
                  result += 'action ';
              }
              else {
                  result += 'layer-switch ';
              }
              result += ((_b = keyboards[keyboard].classes) !== null && _b !== void 0 ? _b : '') + "'";
              if (keyboards[keyboard].tooltip) {
                  result +=
                      "data-ML__tooltip='" + localize(keyboards[keyboard].tooltip) + "' ";
                  result += "data-placement='top' data-delay='1s'";
              }
              if (keyboard !== currentKeyboard) {
                  if (typeof keyboards[keyboard].command === 'string') {
                      result += `data-command='"${keyboards[keyboard].command}"'`;
                  }
                  else if (Array.isArray(keyboards[keyboard].command)) {
                      result += `data-command='"${keyboards[keyboard]
                        .command.join('')}"'`;
                  }
                  if (keyboards[keyboard].layer) {
                      result += "data-layer='" + keyboards[keyboard].layer + "'";
                  }
              }
              result += '>' + keyboards[keyboard].label + '</div>';
          }
      }
      result += '</div>';
      const toolbarOptions = options.virtualKeyboardToolbar;
      const availableActions = toolbarOptions === 'default' ? ['copyToClipboard', 'undo', 'redo'] : [];
      const actionsMarkup = {
          copyToClipboard: `
            <div class='action'
                data-command='"copyToClipboard"'
                data-ML__tooltip='${localize('tooltip.copy to clipboard')}' data-placement='top' data-delay='1s'>
                <svg><use xlink:href='#svg-copy' /></svg>
            </div>
        `,
          undo: `
            <div class='action disabled'
                data-command='"undo"'
                data-ML__tooltip='${localize('tooltip.undo')}' data-placement='top' data-delay='1s'>
                <svg><use xlink:href='#svg-undo' /></svg>
            </div>
        `,
          redo: `
            <div class='action disabled'
                data-command='"redo"'
                data-ML__tooltip='${localize('tooltip.redo')}' data-placement='top' data-delay='1s'>
                <svg><use xlink:href='#svg-redo' /></svg>
            </div>
        `,
      };
      // The right hand side of the toolbar, with the copy/undo/redo commands
      if (availableActions.length > 0) {
          result += `
            <div class='right'>
                ${availableActions
            .map((action) => actionsMarkup[action])
            .join('')}
            </div>
        `;
      }
      return "<div class='keyboard-toolbar' role='toolbar'>" + result + '</div>';
  }
  function makeKeycap(keyboard, elementList, chainedCommand) {
      var _a;
      for (const element of elementList) {
          let html;
          // Display
          if (element.getAttribute('data-latex')) {
              html = latexToMarkup$1(element.getAttribute('data-latex').replace(/&quot;/g, '"'), { '?': '{\\color{#555}{\\scriptstyle \\char"2B1A}}' });
          }
          else if (element.getAttribute('data-insert') &&
              element.innerHTML === '') {
              html = latexToMarkup$1(element.getAttribute('data-insert').replace(/&quot;/g, '"'), { '?': '{\\color{#555}{\\scriptstyle \\char"2B1A}}' });
          }
          else if (element.getAttribute('data-content')) {
              html = element.getAttribute('data-content').replace(/&quot;/g, '"');
          }
          if (element.getAttribute('data-aside')) {
              html =
                  (html !== null && html !== void 0 ? html : '') +
                      '<aside>' +
                      element.getAttribute('data-aside').replace(/&quot;/g, '"') +
                      '</aside>';
          }
          if (html !== undefined) {
              element.innerHTML = keyboard.options.createHTML(html);
          }
          if (element.getAttribute('data-classes')) {
              element.classList.add(element.getAttribute('data-classes'));
          }
          const key = (_a = element.getAttribute('data-insert')) === null || _a === void 0 ? void 0 : _a.replace(/&quot;/g, '"');
          if (key && SHIFTED_KEYS[key]) {
              element.dataset.shifted = SHIFTED_KEYS[key][0];
              element.dataset.shiftedCommand = JSON.stringify([
                  'insertAndUnshiftKeyboardLayer',
                  SHIFTED_KEYS[key][1],
              ]);
          }
          // Commands
          let handlers;
          if (element.getAttribute('data-command')) {
              handlers = JSON.parse(element.getAttribute('data-command'));
          }
          else if (element.getAttribute('data-insert')) {
              handlers = [
                  'insert',
                  element.getAttribute('data-insert'),
                  {
                      focus: true,
                      feedback: true,
                      mode: 'math',
                      format: 'latex',
                      resetStyle: true,
                  },
              ];
          }
          else if (element.getAttribute('data-latex')) {
              handlers = [
                  'insert',
                  element.getAttribute('data-latex'),
                  {
                      focus: true,
                      feedback: true,
                      mode: 'math',
                      format: 'latex',
                      resetStyle: true,
                  },
              ];
          }
          else {
              handlers = [
                  'typedText',
                  element.getAttribute('data-key') || element.textContent,
                  { focus: true, feedback: true, simulateKeystroke: true },
              ];
          }
          if (chainedCommand) {
              handlers = [chainedCommand, handlers];
          }
          if (element.getAttribute('data-alt-keys')) {
              const altKeys = ALT_KEYS[element.getAttribute('data-alt-keys')];
              if (altKeys) {
                  handlers = {
                      default: handlers,
                      pressAndHoldStart: [
                          'showAlternateKeys',
                          element.getAttribute('data-alt-keys'),
                          altKeys,
                      ],
                      pressAndHoldEnd: 'hideAlternateKeys',
                  };
              }
              else {
                  console.warn('Unknown alt key set: "' + element.getAttribute('data-alt-keys'));
              }
          }
          attachButtonHandlers((command) => keyboard.executeCommand(command), element, handlers);
      }
  }
  /**
   * Expand the shortcut tags (e.g. <row>) inside a layer.
   */
  function expandLayerMarkup(options, layer) {
      var _a, _b, _c;
      const ROWS = {
          // First row should be 10 key wide
          // Second row should be 10 key wide
          // Third row should be 8.5 key wide
          // One row should have ^ (shift key) which is 1.5 key wide
          // One row should have ~ (delete key) which is .5 or 1.5 key wide
          qwerty: {
              'lower-1': 'qwertyuiop',
              'lower-2': ' asdfghjkl ',
              'lower-3': '^zxcvbnm~',
              'upper-1': 'QWERTYUIOP',
              'upper-2': ' ASDFGHJKL ',
              'upper-3': '^ZXCVBNM~',
              'numpad-1': '789/',
              'numpad-2': '456*',
              'numpad-3': '123-',
              'numpad-4': '0.=+',
          },
          azerty: {
              'lower-1': 'azertyuiop',
              'lower-2': 'qsdfghjklm',
              'lower-3': '^ wxcvbn ~',
              'upper-1': 'AZERTYUIOP',
              'upper-2': 'QSDFGHJKLM',
              'upper-3': '^ WXCVBN ~',
          },
          qwertz: {
              'lower-1': 'qwertzuiop',
              'lower-2': ' asdfghjkl ',
              'lower-3': '^yxcvbnm~',
              'upper-1': 'QWERTZUIOP',
              'upper-2': ' ASDFGHJKL',
              'upper-3': '^YXCVBNM~',
          },
          dvorak: {
              'lower-1': '^  pyfgcrl ',
              'lower-2': 'aoeuidhtns',
              'lower-3': 'qjkxbmwvz~',
              'upper-1': '^  PYFGCRL ',
              'upper-2': 'AOEUIDHTNS',
              'upper-3': 'QJKXBMWVZ~',
          },
          colemak: {
              'lower-1': ' qwfpgjluy ',
              'lower-2': 'arstdhneio',
              'lower-3': '^zxcvbkm~',
              'upper-1': ' QWFPGNLUY ',
              'upper-2': 'ARSTDHNEIO',
              'upper-3': '^ZXCVBKM~',
          },
      };
      // Determine the layout of the virtual keyboard based on a
      // detected physical keyboard layout, or the current locale
      let layoutName = options.virtualKeyboardLayout;
      if (layoutName === 'auto') {
          const activeLayout = getActiveKeyboardLayout();
          if (activeLayout) {
              layoutName = activeLayout.virtualLayout;
          }
          if (!layoutName || layoutName === 'auto') {
              layoutName = (_a = {
                  fr: 'azerty',
                  be: 'azerty',
                  al: 'qwertz',
                  ba: 'qwertz',
                  cz: 'qwertz',
                  de: 'qwertz',
                  hu: 'qwertz',
                  sk: 'qwertz',
                  ch: 'qwertz',
              }[l10n.locale.slice(0, 2)]) !== null && _a !== void 0 ? _a : 'qwerty';
          }
      }
      const layout = (_b = ROWS[layoutName]) !== null && _b !== void 0 ? _b : ROWS.qwerty;
      let result = layer;
      let row;
      result = result.replace(/<arrows\/>/g, `
        <li class='action' data-command='["performWithFeedback","moveToPreviousChar"]'
            data-shifted='<svg><use xlink:href="#svg-angle-double-left" /></svg>'
            data-shifted-command='["performWithFeedback","extendToPreviousChar"]'>
            <svg><use xlink:href='#svg-arrow-left' /></svg>
        </li>
        <li class='action' data-command='["performWithFeedback","moveToNextChar"]'
            data-shifted='<svg><use xlink:href="#svg-angle-double-right" /></svg>'
            data-shifted-command='["performWithFeedback","extendToNextChar"]'>
            <svg><use xlink:href='#svg-arrow-right' /></svg>
        </li>
        <li class='action' data-command='["performWithFeedback","moveToNextPlaceholder"]'>
        <svg><use xlink:href='#svg-tab' /></svg></li>`);
      let m = result.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
      while (m) {
          row = '';
          const attributesArray = m[2].match(/[a-zA-Z][a-zA-Z\d-]*=(['"])(.*?)\1/g);
          const attributes = {};
          for (const attribute of attributesArray) {
              const m2 = attribute.match(/([a-zA-Z][a-zA-Z\d-]*)=(['"])(.*?)\2/);
              attributes[m2[1]] = m2[3];
          }
          let keys = layout[attributes.name];
          if (!keys)
              keys = ROWS.qwerty[attributes.name];
          if (!keys) {
              console.warn('Unknown roman keyboard row:', attributes.name);
          }
          else {
              for (const c of keys) {
                  let cls = (_c = attributes.class) !== null && _c !== void 0 ? _c : '';
                  if (cls)
                      cls = ` ${cls}`;
                  if (c === '~') {
                      row += `<li class='action font-glyph bottom right `;
                      row +=
                          keys.length - (keys.match(/ /g) || []).length / 2 === 10
                              ? 'w10'
                              : 'w15';
                      row += `' data-shifted='<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>'
                        data-shifted-command='"deleteAll"'
                        data-alt-keys='delete' data-command='["performWithFeedback","deleteBackward"]'
                        >&#x232b;</li>`;
                  }
                  else if (c === ' ') {
                      // Separator
                      row += "<li class='separator w5'></li>";
                  }
                  else if (c === '^') {
                      // Shift key
                      row +=
                          `<li class='shift modifier font-glyph bottom left w15 layer-switch' data-layer='` +
                              attributes['shift-layer'] +
                              `'>&#x21e7;</li>`;
                  }
                  else if (c === '/') {
                      row +=
                          "<li class='keycap" +
                              cls +
                              "' data-alt-keys='/' data-insert='\\frac{#@}{#?}'>&divide;</li>";
                  }
                  else if (c === '*') {
                      row +=
                          "<li class='keycap" +
                              cls +
                              "' data-alt-keys='*' data-insert='\\times '>&times;</li>";
                  }
                  else if (c === '-') {
                      row +=
                          "<li class='keycap" +
                              cls +
                              "' data-alt-keys='-' data-key='-' data-alt-keys='-'>&#x2212;</li>";
                  }
                  else if (cls.includes('tt')) {
                      row +=
                          `<li class='keycap${cls}' data-alt-keys='${c}' ` +
                              `data-command='["typedText","${c}",{"mode":"command", "focus":true, "feedback":true}]'` +
                              `>${c}</li>`;
                  }
                  else {
                      row +=
                          "<li class='keycap" +
                              cls +
                              "' data-alt-keys='" +
                              c +
                              "'>" +
                              c +
                              '</li>';
                  }
              }
          }
          result = result.replace(new RegExp(m[1] + m[2] + m[3]), row);
          m = result.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
      }
      return result;
  }
  /**
   * Construct a virtual keyboard element based on the config options in the
   * mathfield and an optional theme.
   */
  function makeKeyboardElement(keyboard, theme) {
      var _a, _b, _c;
      const svgIcons = `<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">

            <symbol id="svg-command" viewBox="0 0 640 512">
                <path d="M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z"/>
            </symbol>

            <symbol id="svg-undo" viewBox="0 0 512 512">
                <path d="M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z"/>
            </symbol>
            <symbol id="svg-redo" viewBox="0 0 512 512">
                <path d="M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z"/>
            </symbol>
            <symbol id="svg-arrow-left" viewBox="0 0 192 512">
                <path d="M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z"/>
            </symbol>
            <symbol id="svg-arrow-right" viewBox="0 0 192 512">
                    <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z"/>
            </symbol>
            <symbol id="svg-tab" viewBox="0 0 448 512">
                    <path d="M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z"/>
            </symbol>
            <symbol id="svg-copy" viewBox="0 0 448 512">
                <path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z"/>
            </symbol>
            <symbol id="svg-angle-double-right" viewBox="0 0 320 512">
                <path d="M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z"/>
            </symbol>
            <symbol id="svg-angle-double-left" viewBox="0 0 320 512">
                <path d="M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z"/>
            </symbol>
            <symbol id="svg-trash" viewBox="0 0 448 512">
                <path d="M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z"/>
            </symbol>
        </svg>
        `;
      // <symbol id="svg-wikipedia" viewBox="0 0 640 512">
      //         <path d="M640 51.2l-.3 12.2c-28.1.8-45 15.8-55.8 40.3-25 57.8-103.3 240-155.3 358.6H415l-81.9-193.1c-32.5 63.6-68.3 130-99.2 193.1-.3.3-15 0-15-.3C172 352.3 122.8 243.4 75.8 133.4 64.4 106.7 26.4 63.4.2 63.7c0-3.1-.3-10-.3-14.2h161.9v13.9c-19.2 1.1-52.8 13.3-43.3 34.2 21.9 49.7 103.6 240.3 125.6 288.6 15-29.7 57.8-109.2 75.3-142.8-13.9-28.3-58.6-133.9-72.8-160-9.7-17.8-36.1-19.4-55.8-19.7V49.8l142.5.3v13.1c-19.4.6-38.1 7.8-29.4 26.1 18.9 40 30.6 68.1 48.1 104.7 5.6-10.8 34.7-69.4 48.1-100.8 8.9-20.6-3.9-28.6-38.6-29.4.3-3.6 0-10.3.3-13.6 44.4-.3 111.1-.3 123.1-.6v13.6c-22.5.8-45.8 12.8-58.1 31.7l-59.2 122.8c6.4 16.1 63.3 142.8 69.2 156.7L559.2 91.8c-8.6-23.1-36.4-28.1-47.2-28.3V49.6l127.8 1.1.2.5z"/>
      // </symbol>
      // <symbol id="svg-link" viewBox="0 0 512 512">
      //         <path d="M301.148 394.702l-79.2 79.19c-50.778 50.799-133.037 50.824-183.84 0-50.799-50.778-50.824-133.037 0-183.84l79.19-79.2a132.833 132.833 0 0 1 3.532-3.403c7.55-7.005 19.795-2.004 20.208 8.286.193 4.807.598 9.607 1.216 14.384.481 3.717-.746 7.447-3.397 10.096-16.48 16.469-75.142 75.128-75.3 75.286-36.738 36.759-36.731 96.188 0 132.94 36.759 36.738 96.188 36.731 132.94 0l79.2-79.2.36-.36c36.301-36.672 36.14-96.07-.37-132.58-8.214-8.214-17.577-14.58-27.585-19.109-4.566-2.066-7.426-6.667-7.134-11.67a62.197 62.197 0 0 1 2.826-15.259c2.103-6.601 9.531-9.961 15.919-7.28 15.073 6.324 29.187 15.62 41.435 27.868 50.688 50.689 50.679 133.17 0 183.851zm-90.296-93.554c12.248 12.248 26.362 21.544 41.435 27.868 6.388 2.68 13.816-.68 15.919-7.28a62.197 62.197 0 0 0 2.826-15.259c.292-5.003-2.569-9.604-7.134-11.67-10.008-4.528-19.371-10.894-27.585-19.109-36.51-36.51-36.671-95.908-.37-132.58l.36-.36 79.2-79.2c36.752-36.731 96.181-36.738 132.94 0 36.731 36.752 36.738 96.181 0 132.94-.157.157-58.819 58.817-75.3 75.286-2.651 2.65-3.878 6.379-3.397 10.096a163.156 163.156 0 0 1 1.216 14.384c.413 10.291 12.659 15.291 20.208 8.286a131.324 131.324 0 0 0 3.532-3.403l79.19-79.2c50.824-50.803 50.799-133.062 0-183.84-50.802-50.824-133.062-50.799-183.84 0l-79.2 79.19c-50.679 50.682-50.688 133.163 0 183.851z"/>
      // </symbol>
      //     <symbol id="svg-external-link" viewBox="0 0 448 512">
      //     <path d="M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zM99.515 374.828c-4.686-4.686-4.686-12.284 0-16.971l195.15-195.15-.707-.707-89.958.342c-6.627 0-12-5.373-12-12v-9.999c0-6.628 5.372-12 12-12L340 128c6.627 0 12 5.372 12 12l-.343 136c0 6.627-5.373 12-12 12h-9.999c-6.627 0-12-5.373-12-12l.342-89.958-.707-.707-195.15 195.15c-4.686 4.686-12.284 4.686-16.971 0l-5.657-5.657z"/>
      // </symbol>
      // <symbol id="svg-external-link" viewBox="0 0 512 512">
      //     <path d="M256 40c118.621 0 216 96.075 216 216 0 119.291-96.61 216-216 216-119.244 0-216-96.562-216-216 0-119.203 96.602-216 216-216m0-32C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm-36 344h12V232h-12c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h48c6.627 0 12 5.373 12 12v140h12c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12h-72c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12zm36-240c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"/>
      // </symbol>
      let markup = svgIcons;
      inject(null, css_248z);
      void loadFonts(keyboard.options.fontsDirectory);
      inject(null, css_248z$1);
      // Auto-populate the ALT_KEYS table
      ALT_KEYS_BASE['foreground-color'] = [];
      for (const color of LINE_COLORS) {
          ALT_KEYS_BASE['foreground-color'].push({
              classes: 'small-button',
              content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' +
                  color +
                  '"></span>',
              command: '["applyStyle",{"color":"' + color + '"}]',
          });
      }
      ALT_KEYS_BASE['background-color'] = [];
      for (const color of AREA_COLORS) {
          ALT_KEYS_BASE['background-color'].push({
              classes: 'small-button',
              content: '<span style="border-radius:50%;width:32px;height:32px; background:' +
                  color +
                  '"></span>',
              command: '["applyStyle",{"backgroundColor":"' + color + '"}]',
          });
      }
      ALT_KEYS = { ...ALT_KEYS_BASE };
      Object.keys(ALT_KEYS).forEach((key) => {
          ALT_KEYS[key] = ALT_KEYS[key].slice();
      });
      const UPPER_ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      const LOWER_ALPHA = 'abcdefghijklmnopqrstuvwxyz';
      const DIGITS = '0123456789';
      // Define the alternate set for uppercase keys
      for (let i = 0; i < 26; i++) {
          const key = UPPER_ALPHA[i];
          if (!ALT_KEYS[key])
              ALT_KEYS[key] = [];
          ALT_KEYS[key].unshift({
              latex: '\\mathbb{' + key + '}',
              aside: 'blackboard',
              insert: '\\mathbb{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathbf{' + key + '}',
              aside: 'bold',
              insert: '\\mathbf{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathsf{' + key + '}',
              aside: 'sans',
              insert: '\\mathsf{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathtt{' + key + '}',
              aside: 'monospace',
              insert: '\\mathtt{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathcal{' + key + '}',
              aside: 'calligraphy',
              insert: '\\mathcal{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathfrak{' + key + '}',
              aside: 'fraktur',
              insert: '\\mathfrak{' + key + '}',
          });
      }
      // Define the alternate set for lowercase keys
      for (let i = 0; i <= 26; i++) {
          const key = LOWER_ALPHA[i];
          if (!ALT_KEYS[key])
              ALT_KEYS[key] = [];
          ALT_KEYS[key].unshift({
              latex: '\\mathsf{' + key + '}',
              aside: 'sans',
              insert: '\\mathsf{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathbf{' + key + '}',
              aside: 'bold',
              insert: '\\mathbf{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathtt{' + key + '}',
              aside: 'monospace',
              insert: '\\mathtt{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathfrak{' + key + '}',
              aside: 'fraktur',
              insert: '\\mathfrak{' + key + '}',
          });
      }
      for (let i = 0; i < 10; i++) {
          const key = DIGITS[i];
          if (!ALT_KEYS[key])
              ALT_KEYS[key] = [];
          // The mathbb font does not appear to include digits,
          // although it's supposed to.
          // ALT_KEYS[key].push({
          //         latex: '\\underset{\\textsf{\\footnotesize blackboard}}{\\mathbb{' + key + '}}',
          //         insert: '\\mathbb{' + key + '}}'});
          ALT_KEYS[key].unshift({
              latex: '\\mathbf{' + key + '}',
              aside: 'bold',
              insert: '\\mathbf{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathsf{' + key + '}',
              aside: 'sans',
              insert: '\\mathsf{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathtt{' + key + '}',
              aside: 'monospace',
              insert: '\\mathtt{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathcal{' + key + '}',
              aside: 'script',
              insert: '\\mathcal{' + key + '}',
          });
          ALT_KEYS[key].unshift({
              latex: '\\mathfrak{' + key + '}',
              aside: 'fraktur',
              insert: '\\mathfrak{' + key + '}',
          });
      }
      let keyboardIDs = keyboard.options.virtualKeyboards;
      if (!keyboardIDs) {
          keyboardIDs = 'all';
      }
      keyboardIDs = keyboardIDs.replace(/\ball\b/i, 'numeric functions symbols roman  greek');
      const layers = {
          ...LAYERS,
          ...((_a = keyboard.options.customVirtualKeyboardLayers) !== null && _a !== void 0 ? _a : {}),
      };
      const keyboards = {
          ...KEYBOARDS,
          ...((_b = keyboard.options.customVirtualKeyboards) !== null && _b !== void 0 ? _b : {}),
      };
      const keyboardList = keyboardIDs.replace(/\s+/g, ' ').split(' ');
      for (const keyboardName of keyboardList) {
          if (!keyboards[keyboardName]) {
              console.error('Unknown virtual keyboard "' + keyboardName + '"');
              break;
          }
          // Add the default layer to the list of layers,
          // and make sure the list of layers is uniquified.
          let keyboardLayers = (_c = keyboards[keyboardName].layers) !== null && _c !== void 0 ? _c : [];
          if (keyboards[keyboardName].layer) {
              keyboardLayers.push(keyboards[keyboardName].layer);
          }
          keyboardLayers = [...new Set(keyboardLayers)];
          for (const layerName of keyboardLayers) {
              if (!layers[layerName]) {
                  console.error('Unknown virtual keyboard layer: "', layerName, '"');
                  break;
              }
              if (typeof layers[layerName] === 'object') {
                  const layer = layers[layerName];
                  // Process JSON layer to web element based layer.
                  let temporaryLayer = '';
                  if (layer.styles) {
                      temporaryLayer += `<style>${layer.styles}</style>`;
                  }
                  if (layer.backdrop) {
                      temporaryLayer += `<div class='${layer.backdrop}'>`;
                  }
                  if (layer.container) {
                      temporaryLayer += `<div class='${layer.container}'>`;
                  }
                  if (layer.rows) {
                      temporaryLayer += `<div class='rows'>`;
                      for (const row of layer.rows) {
                          temporaryLayer += `<ul>`;
                          for (const keycap of row) {
                              temporaryLayer += `<li`;
                              if (keycap.class) {
                                  temporaryLayer += ` class="${keycap.class}"`;
                              }
                              if (keycap.key) {
                                  temporaryLayer += ` data-key="${keycap.key}"`;
                              }
                              if (keycap.command) {
                                  if (typeof keycap.command === 'string') {
                                      temporaryLayer += ` data-command='"${keycap.command}"'`;
                                  }
                                  else {
                                      temporaryLayer += ` data-command='`;
                                      temporaryLayer += JSON.stringify(keycap.command);
                                      temporaryLayer += `'`;
                                  }
                              }
                              if (keycap.insert) {
                                  temporaryLayer += ` data-insert="${keycap.insert}"`;
                              }
                              if (keycap.latex) {
                                  temporaryLayer += ` data-latex="${keycap.latex}"`;
                              }
                              if (keycap.aside) {
                                  temporaryLayer += ` data-aside="${keycap.aside}"`;
                              }
                              if (keycap.altKeys) {
                                  temporaryLayer += ` data-alt-keys="${keycap.altKeys}"`;
                              }
                              if (keycap.shifted) {
                                  temporaryLayer += ` data-shifted="${keycap.shifted}"`;
                              }
                              if (keycap.shiftedCommand) {
                                  temporaryLayer += ` data-shifted-command="${keycap.shiftedCommand}"`;
                              }
                              temporaryLayer += `>${keycap.label ? keycap.label : ''}</li>`;
                          }
                          temporaryLayer += `</ul>`;
                      }
                      temporaryLayer += `</div>`;
                  }
                  if (layer.container) {
                      temporaryLayer += '</div>';
                  }
                  if (layer.backdrop) {
                      temporaryLayer += '</div>';
                  }
                  layers[layerName] = temporaryLayer;
              }
              markup += `<div tabindex="-1" class='keyboard-layer' data-layer='${layerName}'>`;
              markup += makeKeyboardToolbar(keyboard.options, keyboardIDs, keyboard);
              const layerMarkup = layers[layerName];
              // A layer can contain 'shortcuts' (i.e. <row> tags) that need to
              // be expanded
              markup += expandLayerMarkup(keyboard.options, layerMarkup);
              markup += '</div>';
          }
      }
      const result = document.createElement('div');
      result.className = 'ML__keyboard';
      if (theme) {
          result.classList.add(theme);
      }
      else if (keyboard.options.virtualKeyboardTheme) {
          result.classList.add(keyboard.options.virtualKeyboardTheme);
      }
      result.innerHTML = keyboard.options.createHTML(markup);
      // Attach the element handlers
      makeKeycap(keyboard, [
          ...result.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton'),
      ]);
      const elementList = result.querySelectorAll('.layer-switch');
      for (const element of elementList) {
          if (element.classList.contains('shift')) {
              // This is a potential press-and-hold layer switch
              attachButtonHandlers((command) => keyboard.executeCommand(command), element, {
                  // When the modifier is initially pressed, we will shift the labels
                  // (if available)
                  pressed: ['shiftKeyboardLayer', 'shift'],
                  // If the key is released before a delay, we switch to the target layer
                  default: ['switchKeyboardLayer', element.getAttribute('data-layer')],
                  // If the key is released after a longer delay, we restore the
                  // shifted labels
                  pressAndHoldEnd: 'unshiftKeyboardLayer',
              });
          }
          else {
              // This is a simple layer switch
              attachButtonHandlers((command) => keyboard.executeCommand(command), element, {
                  default: ['switchKeyboardLayer', element.getAttribute('data-layer')],
              });
          }
      }
      // Select the first keyboard as the initial one.
      const layerElements = result.querySelectorAll('.keyboard-layer');
      [...layerElements].forEach((x) => {
          x.addEventListener('mousedown', (evt) => {
              evt.preventDefault();
              evt.stopPropagation();
          });
          x.addEventListener('touchstart', (evt) => {
              evt.preventDefault();
              evt.stopPropagation();
          }, { passive: false });
      });
      layerElements[0].classList.add('is-visible');
      return result;
  }
  function hideAlternateKeys() {
      const altContainer = document.querySelector('#mathlive-alternate-keys-panel');
      if (altContainer) {
          altContainer.classList.remove('is-visible');
          altContainer.innerHTML = '';
          releaseSharedElement(altContainer);
      }
      return false;
  }
  /*
   * Restore the key labels and commands to the state before a modifier key
   * was pressed.
   *
   */
  function unshiftKeyboardLayer(keyboard) {
      hideAlternateKeys();
      const keycaps = keyboard.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
      if (keycaps) {
          for (const keycap of keycaps) {
              const content = keycap.getAttribute('data-unshifted-content');
              if (content) {
                  keycap.innerHTML = keyboard.options.createHTML(content);
              }
              const command = keycap.getAttribute('data-unshifted-command');
              if (command) {
                  keycap.dataset.command = command;
              }
          }
      }
      return false;
  }
  function onUndoStateChanged(keyboard, canUndoState, canRedoState) {
      var _a;
      const toolbar = (_a = keyboard.element) === null || _a === void 0 ? void 0 : _a.querySelector('.keyboard-toolbar');
      if (!toolbar)
          return false;
      const undoButton = toolbar.querySelector('[data-command=\'"undo"\']');
      const redoButton = toolbar.querySelector('[data-command=\'"redo"\']');
      if (redoButton) {
          if (canRedoState) {
              redoButton.classList.remove('disabled');
          }
          else {
              redoButton.classList.add('disabled');
          }
      }
      if (undoButton) {
          if (canUndoState) {
              undoButton.classList.remove('disabled');
          }
          else {
              undoButton.classList.add('disabled');
          }
      }
      return false;
  }

  function showAlternateKeys(keyboard, keycap, altKeys) {
      const altContainer = getSharedElement('mathlive-alternate-keys-panel', 'ML__keyboard alternate-keys');
      if (keyboard.element.classList.contains('material')) {
          altContainer.classList.add('material');
      }
      if (altKeys.length >= 7) {
          // Width 4
          altContainer.style.width = '286px';
      }
      else if (altKeys.length === 4 || altKeys.length === 2) {
          // Width 2
          altContainer.style.width = '146px';
      }
      else if (altKeys.length === 1) {
          // Width 1
          altContainer.style.width = '86px';
      }
      else {
          // Width 3
          altContainer.style.width = '146px';
      }
      // Reset container height
      altContainer.style.height = 'auto';
      let markup = '';
      for (const altKey of altKeys) {
          markup += '<li';
          if (typeof altKey === 'string') {
              markup += ' data-latex="' + altKey.replace(/"/g, '&quot;') + '"';
          }
          else {
              if (altKey.latex) {
                  markup += ' data-latex="' + altKey.latex.replace(/"/g, '&quot;') + '"';
              }
              if (altKey.content) {
                  markup +=
                      ' data-content="' + altKey.content.replace(/"/g, '&quot;') + '"';
              }
              if (altKey.insert) {
                  markup +=
                      ' data-insert="' + altKey.insert.replace(/"/g, '&quot;') + '"';
              }
              if (altKey.command) {
                  markup +=
                      " data-command='" + altKey.command.replace(/"/g, '&quot;') + "'";
              }
              if (altKey.aside) {
                  markup += ' data-aside="' + altKey.aside.replace(/"/g, '&quot;') + '"';
              }
              if (altKey.classes) {
                  markup += ' data-classes="' + altKey.classes + '"';
              }
          }
          markup += '>';
          markup += altKey.label || '';
          markup += '</li>';
      }
      markup = '<ul>' + markup + '</ul>';
      altContainer.innerHTML = keyboard.options.createHTML(markup);
      makeKeycap(keyboard, [].slice.call(altContainer.querySelectorAll('li')), 'performAlternateKeys');
      const keycapElement = keyboard === null || keyboard === void 0 ? void 0 : keyboard.element.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' +
          keycap +
          '"]');
      const position = keycapElement.getBoundingClientRect();
      if (position) {
          if (position.top - altContainer.clientHeight < 0) {
              // AltContainer.style.maxWidth = '320px';  // Up to six columns
              altContainer.style.width = 'auto';
              if (altKeys.length <= 6) {
                  altContainer.style.height = '56px'; // 1 row
              }
              else if (altKeys.length <= 12) {
                  altContainer.style.height = '108px'; // 2 rows
              }
              else if (altKeys.length <= 18) {
                  altContainer.style.height = '205px'; // 3 rows
              }
              else {
                  altContainer.classList.add('compact');
              }
          }
          const top = (position.top - altContainer.clientHeight + 5).toString() + 'px';
          const left = Math.max(0, Math.min(window.innerWidth - altContainer.offsetWidth, (position.left + position.right - altContainer.offsetWidth) / 2)) + 'px';
          altContainer.style.transform = 'translate(' + left + ',' + top + ')';
          altContainer.classList.add('is-visible');
      }
      return false;
  }
  /*
   * Alternate options are displayed when a key on the virtual keyboard is pressed
   * and held.
   *
   */
  register$1({
      showAlternateKeys,
  }, { target: 'virtual-keyboard' });
  function switchKeyboardLayer(keyboard, layer) {
      // TODO This check are really required?
      if (keyboard.options.virtualKeyboardMode !== 'off') {
          if (layer !== 'lower-command' &&
              layer !== 'upper-command' &&
              layer !== 'symbols-command') {
              // If we switch to a non-command keyboard layer, first exit command mode.
              keyboard.executeCommand('complete');
          }
          showVirtualKeyboard(keyboard);
          // If the alternate keys panel was visible, hide it
          hideAlternateKeys();
          // If we were in a temporarily shifted state (shift-key held down)
          // restore our state before switching to a new layer.
          unshiftKeyboardLayer(keyboard);
          const layers = keyboard === null || keyboard === void 0 ? void 0 : keyboard.element.querySelectorAll('.keyboard-layer');
          // Search for the requested layer
          let found = false;
          for (const layer_ of layers) {
              if (layer_.dataset.layer === layer) {
                  found = true;
                  break;
              }
          }
          // We did find the layer, switch to it.
          // If we didn't find it, do nothing and keep the current layer
          if (found) {
              for (const layer_ of layers) {
                  if (layer_.dataset.layer === layer) {
                      layer_.classList.add('is-visible');
                  }
                  else {
                      layer_.classList.remove('is-visible');
                  }
              }
          }
          keyboard.focusMathfield();
      }
      return true;
  }
  function shiftKeyboardLayer(keyboard) {
      const keycaps = keyboard === null || keyboard === void 0 ? void 0 : keyboard.element.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');
      if (keycaps) {
          for (const keycap of keycaps) {
              let shiftedContent = keycap.getAttribute('data-shifted');
              if (shiftedContent || /^[a-z]$/.test(keycap.innerHTML)) {
                  keycap.dataset.unshiftedContent = keycap.innerHTML;
                  if (!shiftedContent) {
                      shiftedContent = keycap.innerHTML.toUpperCase();
                  }
                  keycap.innerHTML = keyboard.options.createHTML(shiftedContent);
                  const command = keycap.getAttribute('data-command');
                  if (command) {
                      keycap.dataset.unshiftedCommand = command;
                      const shifteCommand = keycap.getAttribute('data-shifted-command');
                      if (shifteCommand) {
                          keycap.dataset.command = shifteCommand;
                      }
                      else {
                          const commandObject = JSON.parse(command);
                          if (isArray(commandObject)) {
                              commandObject[1] = commandObject[1].toUpperCase();
                          }
                          keycap.dataset.command = JSON.stringify(commandObject);
                      }
                  }
              }
          }
      }
      return false;
  }
  /*
   * Temporarily change the labels and the command of the keys
   * (for example when a modifier key is held down.)
   */
  register$1({
      shiftKeyboardLayer,
  }, { target: 'virtual-keyboard' });
  function performAlternateKeys(keyboard, command) {
      hideAlternateKeys();
      return keyboard.executeCommand(command);
  }
  function insertAndUnshiftKeyboardLayer(keyboard, c) {
      keyboard.executeCommand(['insert', c]);
      unshiftKeyboardLayer(keyboard);
      return true;
  }
  register$1({
      hideAlternateKeys: () => hideAlternateKeys(),
      /*
       * The command invoked when an alternate key is pressed.
       * We need to hide the Alternate Keys panel, then perform the
       * command.
       */
      performAlternateKeys,
      switchKeyboardLayer: (keyboard, layer) => switchKeyboardLayer(keyboard, layer),
      unshiftKeyboardLayer: (keyboard) => unshiftKeyboardLayer(keyboard),
      insertAndUnshiftKeyboardLayer,
  }, { target: 'virtual-keyboard' });
  function toggleVirtualKeyboardAlt(keyboard) {
      let hadAltTheme = false;
      if (keyboard === null || keyboard === void 0 ? void 0 : keyboard.element) {
          hadAltTheme = keyboard === null || keyboard === void 0 ? void 0 : keyboard.element.classList.contains('material');
          keyboard.dispose();
      }
      showVirtualKeyboard(keyboard, hadAltTheme ? '' : 'material');
      return false;
  }
  function toggleVirtualKeyboardShift(keyboard) {
      var _a;
      keyboard.options.virtualKeyboardLayout = {
          qwerty: 'azerty',
          azerty: 'qwertz',
          qwertz: 'dvorak',
          dvorak: 'colemak',
          colemak: 'qwerty',
      }[keyboard.options.virtualKeyboardLayout];
      const layer = (_a = keyboard === null || keyboard === void 0 ? void 0 : keyboard.element.querySelector('div.keyboard-layer.is-visible').id) !== null && _a !== void 0 ? _a : '';
      if (keyboard) {
          keyboard.dispose();
      }
      showVirtualKeyboard(keyboard);
      if (layer) {
          switchKeyboardLayer(keyboard, layer);
      }
      return false;
  }
  register$1({
      /* Toggle the virtual keyboard, but switch to the alternate theme if available */
      toggleVirtualKeyboardAlt,
      /** Toggle the virtual keyboard, but switch another keyboard layout */
      toggleVirtualKeyboardShift,
  }, { target: 'virtual-keyboard' });
  function showVirtualKeyboard(keyboard, theme = '') {
      keyboard.visible = false;
      toggleVirtualKeyboard(keyboard, theme);
      return false;
  }
  function hideVirtualKeyboard(keyboard) {
      keyboard.visible = true;
      toggleVirtualKeyboard(keyboard);
      return false;
  }
  function toggleVirtualKeyboard(keyboard, theme) {
      keyboard.visible = !keyboard.visible;
      if (keyboard.visible) {
          keyboard.focusMathfield();
          if (keyboard.element) {
              keyboard.element.classList.add('is-visible');
          }
          else {
              // Construct the virtual keyboard
              keyboard.element = makeKeyboardElement(keyboard, theme);
              // Let's make sure that tapping on the keyboard focuses the field
              on(keyboard.element, 'touchstart:passive mousedown', () => keyboard.focusMathfield());
              document.body.append(keyboard.element);
          }
          // For the transition effect to work, the property has to be changed
          // after the insertion in the DOM. Use setTimeout
          window.setTimeout(() => {
              keyboard === null || keyboard === void 0 ? void 0 : keyboard.element.classList.add('is-visible');
          }, 1);
      }
      else if (keyboard === null || keyboard === void 0 ? void 0 : keyboard.element) {
          keyboard.element.classList.remove('is-visible');
          keyboard.element.dispatchEvent(new Event('virtual-keyboard-toggle', {
              bubbles: true,
              cancelable: false,
          }));
      }
      keyboard.stateChanged();
      return false;
  }
  register$1({
      toggleVirtualKeyboard: (keyboard, theme) => toggleVirtualKeyboard(keyboard, theme),
      hideVirtualKeyboard: (keyboard) => hideVirtualKeyboard(keyboard),
      showVirtualKeyboard: (keyboard, theme) => showVirtualKeyboard(keyboard, theme),
      onUndoStateChanged: (keyboard, canUndoState, canRedoState) => onUndoStateChanged(keyboard, canUndoState, canRedoState),
  }, { target: 'virtual-keyboard' });

  var css_248z$2 = "@-webkit-keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}@keyframes ML__caret-blink{0%,to{opacity:1}50%{opacity:0}}.ML__caret:after{content:\"\";border:none;border-radius:2px;border-right:2px solid var(--caret,hsl(var(--hue,212),40%,49%));margin-right:-2px;position:relative;left:-1px;-webkit-animation:ML__caret-blink 1.05s step-end infinite forwards;animation:ML__caret-blink 1.05s step-end infinite forwards}.ML__text-caret:after{content:\"\";border:none;border-radius:1px;border-right:1px solid var(--caret,hsl(var(--hue,212),40%,49%));margin-right:-1px;position:relative;left:0;-webkit-animation:ML__caret-blink 1.05s step-end infinite forwards;animation:ML__caret-blink 1.05s step-end infinite forwards}.ML__latex-caret:after{content:\"_\";border:none;margin-right:calc(-1ex - 2px);position:relative;color:var(--caret,hsl(var(--hue,212),40%,49%));-webkit-animation:ML__caret-blink 1.05s step-end infinite forwards;animation:ML__caret-blink 1.05s step-end infinite forwards}.ML__fieldcontainer{display:flex;flex-flow:row;justify-content:space-between;align-items:flex-end;min-height:39px;touch-action:none;width:100%;--hue:212;--secondary:hsl(var(--hue,212),19%,26%);--on-secondary:hsl(var(--hue,212),19%,26%)}.ML__fieldcontainer__field{align-self:center;position:relative;overflow:hidden;line-height:0;padding:2px;width:100%}.ML__virtual-keyboard-toggle{display:flex;align-self:center;align-items:center;flex-shrink:0;flex-direction:column;justify-content:center;width:34px;height:34px;padding:0;margin-right:4px;cursor:pointer;box-sizing:border-box;border-radius:8px;border:1px solid transparent;transition:background .2s cubic-bezier(.64,.09,.08,1);color:var(--primary,hsl(var(--hue,212),40%,50%));fill:currentColor;background:transparent}.ML__virtual-keyboard-toggle:hover{background:hsla(0,0%,70%,.5);color:#333;fill:currentColor;border-radius:8px;border:1px solid hsla(0,0%,100%,.5)}.ML__textarea__textarea{transform:scale(0);resize:none;outline:none;border:none;position:absolute;clip:rect(0 0 0 0);width:1px;height:1px;font-size:1em;font-family:KaTeX_Main}.ML__focused .ML__text{background:hsla(var(--hue,212),40%,50%,.1)}.ML__smart-fence__close{opacity:.5}.ML__selection{background:var(--highlight-inactive,#ccc);box-sizing:border-box}.ML__focused .ML__selection{background:var(--highlight,hsl(var(--hue,212),97%,85%))!important;color:var(--on-highlight)}.ML__contains-caret.ML__close,.ML__contains-caret.ML__open,.ML__contains-caret>.ML__close,.ML__contains-caret>.ML__open,.sqrt.ML__contains-caret>.sqrt-sign,.sqrt.ML__contains-caret>.vlist>span>.sqrt-line{color:var(--caret,hsl(var(--hue,212),40%,49%))}.ML__latex{font-family:IBM Plex Mono,Source Code Pro,Consolas,Roboto Mono,Menlo,Bitstream Vera Sans Mono,DejaVu Sans Mono,Monaco,Courier,monospace;font-weight:400;color:var(--primary,hsl(var(--hue,212),40%,50%))}:not(.ML__latex)+.ML__latex{margin-left:.25em}.ML__latex+:not(.ML__latex){padding-left:.25em}.ML__suggestion{opacity:.5}.ML__virtual-keyboard-toggle.pressed{background:hsl(var(--hue,212),25%,35%);color:#fafafa;fill:currentColor}.ML__virtual-keyboard-toggle:focus{outline:none;border-radius:8px;border:2px solid var(--primary,hsl(var(--hue,212),40%,50%))}.ML__virtual-keyboard-toggle.active,.ML__virtual-keyboard-toggle.active:hover{background:hsl(var(--hue,212),25%,35%);color:#fafafa;fill:currentColor}.ML__scroller{position:fixed;z-index:1;top:0;height:100vh;width:200px}[data-ML__tooltip]{position:relative}[data-ML__tooltip][data-placement=top]:after{top:inherit;bottom:100%}[data-ML__tooltip]:after{position:absolute;display:none;content:attr(data-ML__tooltip);top:110%;width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:200px;padding:8px;background:#616161;color:#fff;text-align:center;z-index:2;box-shadow:0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12),0 3px 1px -2px rgba(0,0,0,.2);border-radius:2px;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-weight:400;font-size:12px;opacity:0;transform:scale(.5);transition:all .15s cubic-bezier(.4,0,1,1)}@media only screen and (max-width:767px){[data-ML__tooltip]:after{padding:8px 16px;font-size:14px}}:not(.tracking) [data-ML__tooltip]:hover{position:relative}:not(.tracking) [data-ML__tooltip]:hover:after{visibility:visible;display:inline-table;opacity:1;transform:scale(1)}[data-ML__tooltip][data-delay]:after{transition-delay:0s}[data-ML__tooltip][data-delay]:hover:after{transition-delay:1s}";

  var css_248z$3 = ".ML__popover{visibility:hidden;min-width:160px;background-color:rgba(97,97,97,.95);color:#fff;text-align:center;border-radius:6px;position:fixed;z-index:1;display:flex;flex-direction:column;justify-content:center;box-shadow:0 14px 28px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.22);transition:all .2s cubic-bezier(.64,.09,.08,1)}.ML__popover:after{content:\"\";position:absolute;top:-5px;left:calc(50% - 3px);width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;font-size:1rem;border-bottom:5px solid rgba(97,97,97,.9)}.ML__popover--reverse-direction:after{top:auto;bottom:-5px;border-top:5px solid rgba(97,97,97,.9);border-bottom:0}div.ML__popover.is-visible{visibility:inherit;-webkit-animation:ML__fade-in .15s cubic-bezier(0,0,.2,1);animation:ML__fade-in .15s cubic-bezier(0,0,.2,1)}@-webkit-keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}@keyframes ML__fade-in{0%{opacity:0}to{opacity:1}}.ML__popover__content{border-radius:6px;padding:2px;cursor:pointer;min-height:100px;display:flex;flex-direction:column;justify-content:center;margin-left:8px;margin-right:8px}.ML__popover__content a{color:#5ea6fd;padding-top:.3em;margin-top:.4em;display:block}.ML__popover__content a:hover{color:#5ea6fd;text-decoration:underline}.ML__popover__content.active,.ML__popover__content.pressed,.ML__popover__content:hover{background:hsla(0,0%,100%,.1)}.ML__popover__command{font-size:1.6rem;font-family:KaTeX_Main}.ML__popover__prev-shortcut{height:31px;opacity:.1;cursor:pointer;margin-left:8px;margin-right:8px;padding-top:4px;padding-bottom:2px}.ML__popover__next-shortcut:hover,.ML__popover__prev-shortcut:hover{opacity:.3}.ML__popover__next-shortcut.active,.ML__popover__next-shortcut.pressed,.ML__popover__prev-shortcut.active,.ML__popover__prev-shortcut.pressed{opacity:1}.ML__popover__next-shortcut>span,.ML__popover__prev-shortcut>span{padding:5px;border-radius:8px;width:20px;height:20px;display:inline-block}.ML__popover__prev-shortcut>span>span{margin-top:-2px;display:block}.ML__popover__next-shortcut>span>span{margin-top:2px;display:block}.ML__popover__next-shortcut:hover>span,.ML__popover__prev-shortcut:hover>span{background:hsla(0,0%,100%,.1)}.ML__popover__next-shortcut{height:34px;opacity:.1;cursor:pointer;margin-left:8px;margin-right:8px;padding-top:2px;padding-bottom:4px}.ML__popover__shortcut{font-size:.8em;margin-top:.25em}.ML__popover__note,.ML__popover__shortcut{font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;opacity:.7;padding-top:.25em}.ML__popover__note{font-size:.8rem;line-height:1em;padding-left:.5em;padding-right:.5em}.ML__shortcut-join{opacity:.5}";

  var css_248z$4 = ".ML__keystroke-caption{visibility:hidden;background:var(--secondary);border-color:var(--secondary-border);box-shadow:0 3px 6px rgba(0,0,0,.16),0 3px 6px rgba(0,0,0,.23);text-align:center;border-radius:6px;padding:16px;position:absolute;z-index:1;display:flex;flex-direction:row;justify-content:center;--keystroke:#fff;--on-keystroke:#555;--keystroke-border:#f7f7f7}@media (prefers-color-scheme:dark){body:not([theme=light]) .ML__keystroke-caption{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}}body[theme=dark] .ML__keystroke-caption{--keystroke:hsl(var(--hue,212),50%,30%);--on-keystroke:#fafafa;--keystroke-border:hsl(var(--hue,212),50%,25%)}.ML__keystroke-caption>span{min-width:14px;margin:0 8px 0 0;padding:4px;background-color:var(--keystroke);color:var(--on-keystroke);fill:currentColor;font-family:system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;font-size:1em;border-radius:6px;border:2px solid var(--keystroke-border)}";

  class TextModeEditor extends ModeEditor {
      constructor() {
          super('text');
      }
      onPaste(mathfield, ev) {
          const text = ev.clipboardData.getData('text/plain');
          if (text) {
              if (this.insert(mathfield.model, text)) {
                  requestUpdate(mathfield);
              }
              ev.preventDefault();
              ev.stopPropagation();
              return true;
          }
          return false;
      }
      onCopy(mathfield, ev) {
          const r = mathfield.model.selectionIsCollapsed
              ? [0, mathfield.model.lastOffset]
              : range(mathfield.selection);
          ev.clipboardData.setData('text/plain', mathfield.model
              .getAtoms(r)
              .filter((x) => x instanceof TextAtom)
              .map((x) => x.value)
              .join(''));
          // Prevent the current document selection from being written to the clipboard.
          ev.preventDefault();
      }
      insert(model, text, options = {}) {
          var _a;
          if (!options.insertionMode)
              options.insertionMode = 'replaceSelection';
          if (!options.selectionMode)
              options.selectionMode = 'placeholder';
          if (!options.format)
              options.format = 'auto';
          options.macros = (_a = options.macros) !== null && _a !== void 0 ? _a : model.options.macros;
          const { suppressChangeNotifications } = model;
          if (options.suppressChangeNotifications) {
              model.suppressChangeNotifications = true;
          }
          const contentWasChanging = model.suppressChangeNotifications;
          model.suppressChangeNotifications = true;
          //
          // Delete any selected items
          //
          if (options.insertionMode === 'replaceSelection' &&
              !model.selectionIsCollapsed) {
              model.position = model.deleteAtoms(range(model.selection));
          }
          else if (options.insertionMode === 'replaceAll') {
              model.root.setChildren([], 'body');
              model.position = 0;
          }
          else if (options.insertionMode === 'insertBefore') {
              model.collapseSelection('backward');
          }
          else if (options.insertionMode === 'insertAfter') {
              model.collapseSelection('forward');
          }
          const newAtoms = convertStringToAtoms$1(text);
          // Some atoms may already have a style (for example if there was an
          // argument, i.e. the selection, that this was applied to).
          // So, don't apply style to atoms that are already styled, but *do*
          // apply it to newly created atoms that have no style yet.
          applyStyleToUnstyledAtoms(newAtoms, options.style);
          if (!newAtoms)
              return false;
          const cursor = model.at(model.position);
          const lastNewAtom = cursor.parent.addChildrenAfter(newAtoms, cursor);
          // Prepare to dispatch notifications
          // (for selection changes, then content change)
          model.suppressChangeNotifications = contentWasChanging;
          if (options.selectionMode === 'before') ;
          else if (options.selectionMode === 'item') {
              model.setSelection(model.anchor, model.offsetOf(lastNewAtom));
          }
          else if (lastNewAtom) {
              model.position = model.offsetOf(lastNewAtom);
          }
          contentDidChange(model);
          model.suppressChangeNotifications = suppressChangeNotifications;
          return true;
      }
  }
  function convertStringToAtoms$1(s) {
      // Map special TeX characters to alternatives
      // Must do this one first, since other replacements include backslash
      s = s.replace(/\\/g, '\\textbackslash ');
      s = s.replace(/#/g, '\\#');
      s = s.replace(/\$/g, '\\$');
      s = s.replace(/%/g, '\\%');
      s = s.replace(/&/g, '\\&');
      // S = s.replace(/:/g, '\\colon');     // text colon?
      // s = s.replace(/\[/g, '\\lbrack');
      // s = s.replace(/]/g, '\\rbrack');
      s = s.replace(/_/g, '\\_');
      s = s.replace(/{/g, '\\textbraceleft ');
      s = s.replace(/}/g, '\\textbraceright ');
      s = s.replace(/\^/g, '\\textasciicircum ');
      s = s.replace(/~/g, '\\textasciitilde ');
      s = s.replace(/£/g, '\\textsterling ');
      return parseLatex(s, 'text');
  }
  new TextModeEditor();

  const POST_MESSAGE_TYPE = 'ml#systemPostMessage';
  /**
   * Must be used on frame with mathfield editor
   */
  class VirtualKeyboardDelegate {
      /**
       * @param targetOrigin only virtual keyboards in a frame (or document) with this
       * origin will be able to receive messages.
       * Specify a value other than '*' to improve security and prevent malicious
       * sites from intercepting content.
       */
      constructor(options) {
          var _a, _b;
          this.targetOrigin = (_a = options.targetOrigin) !== null && _a !== void 0 ? _a : window.origin;
          this.originValidator = (_b = options.originValidator) !== null && _b !== void 0 ? _b : 'same-origin';
          this._focus = options.focus;
          this._blur = options.blur;
          this._executeCommand = options.executeCommand;
          this.enable();
      }
      dispose() {
          this.disable();
      }
      executeCommand(command) {
          if (getCommandTarget(command) === 'virtual-keyboard') {
              this.sendMessage('executeCommand', { command });
              return false;
          }
          return this._executeCommand(command);
      }
      enable() {
          if (!this.enabled) {
              this.enabled = true;
              window.addEventListener('message', this);
          }
      }
      disable() {
          if (this.enabled) {
              window.removeEventListener('message', this);
              this.enabled = false;
          }
      }
      focusMathfield() { }
      blurMathfield() { }
      stateChanged() { }
      handleEvent(event) {
          if (event.type === 'message' &&
              event.data &&
              event.data.type === POST_MESSAGE_TYPE) {
              if (!validateOrigin(event.origin, this.originValidator)) {
                  throw new Error(`Message from unknown origin (${event.origin}) can not be handled`);
              }
              const { action } = event.data;
              if (action === 'executeCommand') {
                  this.executeCommand(event.data.command);
              }
              else if (action === 'updateState') {
                  this.visible = event.data.state.visible;
                  this.height = event.data.state.height;
              }
              else if (action === 'focus') {
                  this._focus();
              }
              else if (action === 'blur') {
                  this._blur();
              }
          }
      }
      sendMessage(action, payload = {}) {
          if (window.parent) {
              window.parent.postMessage({
                  type: POST_MESSAGE_TYPE,
                  action,
                  ...payload,
              }, this.targetOrigin);
              return true;
          }
          return false;
      }
  }
  /**
   * Must be used on parent frame where virtual keyboard will be rendered
   */
  class RemoteVirtualKeyboard extends VirtualKeyboard {
      constructor(options) {
          super({
              ...RemoteVirtualKeyboard.defaultOptions,
              ...(options !== null && options !== void 0 ? options : {}),
          });
          window.addEventListener('message', this);
      }
      static get defaultOptions() {
          return {
              namespace: '',
              createHTML: (s) => s,
              fontsDirectory: './fonts',
              soundsDirectory: './sounds',
              targetOrigin: window.origin,
              originValidator: 'same-origin',
              virtualKeyboards: 'all',
              virtualKeyboardLayout: 'auto',
              customVirtualKeyboardLayers: {},
              customVirtualKeyboards: {},
              virtualKeyboardTheme: /android|cros/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)
                  ? 'material'
                  : 'apple',
              keypressVibration: true,
              keypressSound: null,
              plonkSound: null,
              virtualKeyboardToolbar: 'default',
              virtualKeyboardToggleGlyph: `<span style="width: 21px; margin-top: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>`,
              virtualKeyboardMode: 'auto',
          };
      }
      handleEvent(event) {
          if (event.type === 'message' &&
              event.data &&
              event.data.type === POST_MESSAGE_TYPE) {
              if (!validateOrigin(event.origin, this.options.originValidator)) {
                  throw new Error(`Can not handle message from unknown origin (${event.origin}).`);
              }
              const { action } = event.data;
              if (action === 'executeCommand') {
                  const { command } = event.data;
                  this.sourceFrame = event.source;
                  this.executeCommand(command);
              }
          }
      }
      stateChanged() {
          var _a, _b;
          this.sendMessage('stateChanged', {
              state: {
                  visible: this.visible,
                  height: (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.offsetHeight) !== null && _b !== void 0 ? _b : 0,
              },
          });
      }
      executeCommand(command) {
          const commandTarget = getCommandTarget(command);
          // Virtual keyboard commands must be handled at local window
          if (commandTarget === 'virtual-keyboard') {
              return super.executeCommand(command);
          }
          this.sendMessage('executeCommand', { command });
          return false;
      }
      /**
       * @category Focus
       */
      focus() {
          this.sendMessage('focus');
      }
      /**
       * @category Focus
       */
      blur() {
          this.sendMessage('blur');
      }
      canUndo() {
          return this.canUndoState;
      }
      canRedo() {
          return this.canRedoState;
      }
      dispose() {
          window.removeEventListener('message', this);
      }
      sendMessage(action, payload = {}) {
          var _a;
          (_a = this.sourceFrame) === null || _a === void 0 ? void 0 : _a.postMessage({
              type: POST_MESSAGE_TYPE,
              action,
              ...payload,
          }, this.options.targetOrigin);
      }
  }

  class MathfieldPrivate {
      /**
       * To create a mathfield, you would typically use {@linkcode makeMathField | MathLive.makeMathField()}
       * instead of invoking directly this constructor.
       *
       *
       * @param element - The DOM element that this mathfield is attached to.
       * Note that `element.mathfield` is this object.
       */
      constructor(element, options) {
          var _a;
          this.eventHandlingInProgress = '';
          this.stylesheets = [];
          // Setup default config options
          this.options = update(getDefault(), {
              plonkSound: 'plonk.wav',
              keypressSound: {
                  spacebar: 'keypress-spacebar.wav',
                  return: 'keypress-return.wav',
                  delete: 'keypress-delete.wav',
                  default: 'keypress-standard.wav',
              },
              ...options,
          });
          // The virtual keyboard can be either attached to this mathfield
          // or a delegate that mirrors a global virtual keyboard attached
          // to the document. This is useful for example when using
          // mathfield in iframes so that all the mathfields share the keyboard
          // at the document level (rather than having one in each iframe)
          this.virtualKeyboard = options.useSharedVirtualKeyboard
              ? new VirtualKeyboardDelegate({
                  targetOrigin: this.options.sharedVirtualKeyboardTargetOrigin,
                  focus: () => this.focus(),
                  blur: () => this.blur(),
                  executeCommand: (command) => this.executeCommand(command),
                  originValidator: this.options.originValidator,
              })
              : new VirtualKeyboard(this.options, {
                  executeCommand: (command) => this.executeCommand(command),
              });
          this.plonkSound = this.options.plonkSound;
          if (typeof this.options.keypressSound !== 'string' &&
              !(this.options.keypressSound instanceof HTMLAudioElement)) {
              this.keypressSound = this.options.keypressSound
                  .default;
              this.spacebarKeypressSound = this.options.keypressSound
                  .spacebar;
              this.returnKeypressSound = this.options.keypressSound
                  .return;
              this.deleteKeypressSound = this.options.keypressSound
                  .delete;
          }
          this.element = element;
          element.mathfield = this;
          // Save existing content
          this.originalContent = element.innerHTML;
          let elementText = this.element.textContent;
          if (elementText) {
              elementText = elementText.trim();
          }
          // Load the fonts, inject the core and mathfield stylesheets
          void loadFonts(this.options.fontsDirectory, this.options.onError);
          this.stylesheets.push(inject(element, css_248z$1));
          this.stylesheets.push(inject(element, css_248z$2));
          // Additional elements used for UI.
          // They are retrieved in order a bit later, so they need to be kept in sync
          // 1.0/ The field, where the math equation will be displayed
          // 1.1/ The virtual keyboard toggle
          // 2/ The popover panel which displays info in command mode
          // 3/ The keystroke caption panel (option+shift+K)
          // 4/ The virtual keyboard
          // 5.0/ The area to stick MathML for screen reading larger exprs (not used right now)
          //      The for the area is that focus would bounce their and then back triggering the
          //         screen reader to read it
          // 5.1/ The aria-live region for announcements
          let markup = '';
          if (!this.options.substituteTextArea) {
              // On Android or iOS, don't use a textarea, which has the side effect of
              // bringing up the OS virtual keyboard
              markup += /android|ipad|ipod|iphone/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent)
                  ? `<span class='ML__textarea'>
                <span class='ML__textarea__textarea'
                    tabindex="-1" role="textbox"
                    style='display:inline-block;height:1px;width:1px' >
                </span>
            </span>`
                  : '<span class="ML__textarea">' +
                      '<textarea class="ML__textarea__textarea" autocapitalize="off" autocomplete="off" ' +
                      `autocorrect="off" spellcheck="false" aria-hidden="true" tabindex="${(_a = element.tabIndex) !== null && _a !== void 0 ? _a : 0}">` +
                      '</textarea>' +
                      '</span>';
          }
          else if (typeof this.options.substituteTextArea === 'string') {
              markup += this.options.substituteTextArea;
          }
          else {
              // We don't really need this one, but we keep it here so that the
              // indexes below remain the same whether a substituteTextArea is
              // provided or not.
              markup += '<span></span>';
          }
          markup +=
              '<span class="ML__fieldcontainer">' +
                  '<span class="ML__fieldcontainer__field"></span>';
          // Only display the virtual keyboard toggle if the virtual keyboard mode is
          // 'manual'
          if (this.options.virtualKeyboardMode === 'manual') {
              markup += `<div part='virtual-keyboard-toggle' class="ML__virtual-keyboard-toggle" role="button" data-ML__tooltip="${localize('tooltip.toggle virtual keyboard')}">`;
              // Data-ML__tooltip='Toggle Virtual Keyboard'
              markup += this.options.virtualKeyboardToggleGlyph
                  ? this.options.virtualKeyboardToggleGlyph
                  : `<span style="width: 21px; margin-top: 4px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg></span>`;
              markup += '</div>';
          }
          else {
              markup += '<span ></span>';
          }
          markup += '</span>';
          markup += `
        <div class="ML__sr-only">
            <span aria-live="assertive" aria-atomic="true"></span>
            <span></span>
        </div>
    `;
          this.element.innerHTML = this.options.createHTML(markup);
          if (!this.element.children) {
              console.error('%cMathlive: Something went wrong and the mathfield could not be created.%c\n' +
                  'If you are using Vue, this may be because you are using the ' +
                  'runtime-only build of Vue. Make sure to include ' +
                  "'runtimeCompiler: true' in your Vue configuration. There" +
                  'may a warning from Vue in the log above.', 'color:red;font-family:system-ui;font-size:1.2rem;font-weight:bold', 'color:inherith;font-family:system-ui;font-size:inherit;font-weight:inherit');
              return;
          }
          let iChild = 0; // Index of child -- used to make changes below easier
          const textarea = typeof this.options.substituteTextArea === 'function'
              ? this.options.substituteTextArea()
              : this.element.children[iChild++].firstElementChild;
          this.field = this.element.children[iChild].children[0];
          // Listen to 'wheel' events to scroll (horizontally) the field when it overflows
          this.field.addEventListener('wheel', (ev) => {
              ev.preventDefault();
              ev.stopPropagation();
              const wheelDelta = ev.deltaX === undefined ? ev.detail : -ev.deltaX;
              if (Number.isFinite(wheelDelta)) {
                  this.field.scroll({
                      top: 0,
                      left: this.field.scrollLeft - wheelDelta * 5,
                  });
              }
          }, { passive: false });
          // When fonts are done loading, re-render
          // (the selection state may be out of date)
          document.fonts.ready.then(() => {
              render(this);
          });
          this.virtualKeyboardToggle = this.element.children[iChild++]
              .children[1];
          attachButtonHandlers((command) => this.executeCommand(command), this.virtualKeyboardToggle, {
              default: 'toggleVirtualKeyboard',
              alt: 'toggleVirtualKeyboardAlt',
              shift: 'toggleVirtualKeyboardShift',
          });
          this.ariaLiveText = this.element.children[iChild]
              .children[0];
          this.accessibleNode = this.element.children[iChild++]
              .children[1];
          // Some panels are shared amongst instances of mathfield
          // (there's a single instance in the document)
          this.popover = getSharedElement('mathlive-popover-panel', 'ML__popover');
          this.stylesheets.push(inject(null, css_248z$1));
          this.stylesheets.push(inject(null, css_248z$3));
          this.keystrokeCaption = getSharedElement('mathlive-keystroke-caption-panel', 'ML__keystroke-caption');
          this.stylesheets.push(inject(null, css_248z$4));
          // The keystroke caption panel and the command bar are
          // initially hidden
          this.keystrokeCaptionVisible = false;
          this.keystrokeBuffer = '';
          this.keystrokeBufferStates = [];
          this.keystrokeBufferResetTimer = null;
          // This index indicates which of the suggestions available to
          // display in the popover panel
          this.suggestionIndex = 0;
          // The input mode (text, math, command)
          // While model.getMode() represent the mode of the current selection,
          // this.mode is the mode chosen by the user. It indicates the mode the
          // next character typed will be interpreted in.
          // It is often identical to getAnchorMode() since changing the selection
          // changes the mode, but sometimes it is not, for example when a user
          // enters a mode changing command.
          this.mode = this.options.defaultMode;
          this.smartModeSuppressed = false;
          // Current style (color, weight, italic, etc...):
          // reflects the style to be applied on next insertion.
          this.style = {};
          // Focus/blur state
          this.blurred = true;
          on(this.element, 'focus', this);
          on(this.element, 'blur', this);
          // Capture clipboard events
          // Delegate keyboard events
          this.keyboardDelegate = delegateKeyboardEvents(textarea, {
              typedText: (text) => onTypedText(this, text),
              cut: (_ev) => {
                  // Snapshot the undo state
                  this.snapshot();
                  // Clearing the selection will have the side effect of clearing the
                  // content of the textarea. However, the textarea value is what will
                  // be copied to the clipboard, so defer the clearing of the selection
                  // to later, after the cut operation has been handled.
                  setTimeout(() => {
                      deleteRange(this.model, range(this.model.selection));
                      requestUpdate(this);
                  }, 0);
              },
              copy: (ev) => ModeEditor.onCopy(this.model.at(this.model.position).mode, this, ev),
              paste: (ev) => ModeEditor.onPaste(this.model.at(this.model.position).mode, this, ev),
              keystroke: (keystroke, event) => onKeystroke(this, keystroke, event),
              focus: () => this.onFocus(),
              blur: () => this.onBlur(),
              compositionStart: (composition) => this.onCompositionStart(composition),
              compositionUpdate: (composition) => this.onCompositionUpdate(composition),
              compositionEnd: (composition) => this.onCompositionEnd(composition),
          });
          // Delegate mouse and touch events
          if (window.PointerEvent) {
              // Use modern pointer events if available
              on(this.field, 'pointerdown', this);
          }
          else {
              on(this.field, 'touchstart:active mousedown', this);
          }
          // Request notification for when the window is resized (
          // or the device switched from portrait to landscape) to adjust
          // the UI (popover, etc...)
          on(window, 'resize', this);
          // Setup the model
          this.model = new ModelPrivate({
              mode: this.options.defaultMode,
              macros: this.options.macros,
              removeExtraneousParentheses: this.options.removeExtraneousParentheses,
          }, {
              onContentDidChange: (_sender) => this.options.onContentDidChange(this),
              onSelectionDidChange: (_sender) => this._onSelectionDidChange(),
              onContentWillChange: () => this.options.onContentWillChange(this),
              onSelectionWillChange: () => this.options.onSelectionWillChange(this),
              onError: this.options.onError,
          }, {
              announce: (_sender, command, previousPosition, atoms) => { var _a, _b; return (_b = (_a = this.options).onAnnounce) === null || _b === void 0 ? void 0 : _b.call(_a, this, command, previousPosition, atoms); },
              moveOut: (_sender, direction) => this.options.onMoveOutOf(this, direction),
              tabOut: (_sender, direction) => this.options.onTabOutOf(this, direction),
          }, this);
          // Prepare to manage undo/redo
          this.undoManager = new UndoManager(this.model);
          // Use the content of the element for the initial value of the mathfield
          if (elementText) {
              ModeEditor.insert('math', this.model, elementText, {
                  insertionMode: 'replaceAll',
                  selectionMode: 'after',
                  format: 'latex',
                  suppressChangeNotifications: true,
                  macros: this.options.macros,
              });
          }
          // Now start recording potentially undoable actions
          this.undoManager.startRecording();
          this.undoManager.snapshot(this.options);
          this.model.setListeners({
              onContentDidChange: (_sender) => this.options.onContentDidChange(this),
              onSelectionDidChange: (_sender) => this._onSelectionDidChange(),
              onContentWillChange: () => this.options.onContentWillChange(this),
              onSelectionWillChange: () => this.options.onSelectionWillChange(this),
              onError: this.options.onError,
          });
          this.model.setHooks({
              announce: (_sender, command, previousPosition, atoms) => { var _a, _b; return (_b = (_a = this.options).onAnnounce) === null || _b === void 0 ? void 0 : _b.call(_a, this, command, previousPosition, atoms); },
              moveOut: (_sender, direction) => this.options.onMoveOutOf(this, direction),
              tabOut: (_sender, direction) => this.options.onTabOutOf(this, direction),
          });
          if (!this.options.locale.startsWith(getActiveKeyboardLayout().locale)) {
              setKeyboardLayoutLocale(this.options.locale);
          }
          this.keybindings = normalizeKeybindings(this.options.keybindings, (e) => {
              if (typeof this.options.onError === 'function') {
                  this.options.onError({
                      code: 'invalid-keybinding',
                      arg: e.join('\n'),
                  });
              }
              console.log(e.join('\n'));
          });
          requestUpdate(this);
      }
      /** @deprecated */
      $setConfig(config) {
          deprecated('$setConfig');
          this.setOptions(config);
      }
      setOptions(config) {
          this.options = update(this.options, config);
          this.model.setListeners({
              onContentDidChange: (_sender) => this.options.onContentDidChange(this),
              onSelectionDidChange: (_sender) => this._onSelectionDidChange(),
              onContentWillChange: () => this.options.onContentWillChange(this),
              onSelectionWillChange: () => this.options.onSelectionWillChange(this),
              onError: this.options.onError,
          });
          this.model.setHooks({
              announce: (_sender, command, previousPosition, atoms) => { var _a, _b; return (_b = (_a = this.options).onAnnounce) === null || _b === void 0 ? void 0 : _b.call(_a, this, command, previousPosition, atoms); },
              moveOut: (_sender, direction) => this.options.onMoveOutOf(this, direction),
              tabOut: (_sender, direction) => this.options.onTabOutOf(this, direction),
          });
          if (!this.options.locale.startsWith(getActiveKeyboardLayout().locale)) {
              setKeyboardLayoutLocale(this.options.locale);
          }
          this.keybindings = normalizeKeybindings(this.options.keybindings, (e) => {
              if (typeof this.options.onError === 'function') {
                  this.options.onError({
                      code: 'invalid-keybinding',
                      arg: e.join('\n'),
                  });
              }
              console.log(e.join('\n'));
          });
          this.plonkSound = this.options.plonkSound;
          if (typeof this.options.keypressSound !== 'string' &&
              !(this.options.keypressSound instanceof HTMLAudioElement)) {
              this.keypressSound = this.options.keypressSound
                  .default;
              this.spacebarKeypressSound = this.options.keypressSound
                  .spacebar;
              this.returnKeypressSound = this.options.keypressSound
                  .return;
              this.deleteKeypressSound = this.options.keypressSound
                  .delete;
          }
          if (this.options.readOnly) {
              this.onBlur();
          }
          // Changing some config options (i.e. `macros`) may
          // require the content to be reparsed and re-rendered
          const content = Atom.toLatex(this.model.root, { expandMacro: false });
          ModeEditor.insert('math', this.model, content, {
              insertionMode: 'replaceAll',
              selectionMode: 'after',
              format: 'latex',
              suppressChangeNotifications: true,
              macros: this.options.macros,
          });
          requestUpdate(this);
      }
      /** @deprecated */
      getConfig(keys) {
          deprecated('getConfig');
          return get(this.options, keys);
      }
      getOptions(keys) {
          return get(this.options, keys);
      }
      getOption(key) {
          return get(this.options, key);
      }
      /*
       * HandleEvent is a function invoked when an event is registered with an
       * object instead ( see `addEventListener()` in `on()`)
       * The name is defined by `addEventListener()` and cannot be changed.
       * This pattern is used to be able to release bound event handlers,
       * (event handlers that need access to `this`) as the bind() function
       * would create a new function that would have to be kept track off
       * to be able to properly remove the event handler later.
       */
      handleEvent(evt) {
          switch (evt.type) {
              case 'focus':
                  if (!this.eventHandlingInProgress) {
                      this.eventHandlingInProgress = 'focus';
                      this.onFocus();
                      this.eventHandlingInProgress = '';
                  }
                  break;
              case 'blur':
                  if (!this.eventHandlingInProgress) {
                      this.eventHandlingInProgress = 'blur';
                      this.onBlur();
                      this.eventHandlingInProgress = '';
                  }
                  break;
              case 'touchstart':
              case 'mousedown':
                  // IOS <=13 Safari and Firefox on Android
                  onPointerDown(this, evt);
                  break;
              case 'pointerdown':
                  onPointerDown(this, evt);
                  break;
              case 'resize': {
                  if (this.resizeTimer) {
                      window.cancelAnimationFrame(this.resizeTimer);
                  }
                  this.resizeTimer = window.requestAnimationFrame(() => isValidMathfield(this) && this.onResize());
                  break;
              }
              default:
                  console.warn('Unexpected event type', evt.type);
          }
      }
      /** @deprecated */
      $revertToOriginalContent() {
          deprecated('$revertToOriginalContent');
          this.dispose();
          this.element.innerHTML = this.options.createHTML(this.originalContent);
      }
      dispose() {
          this.element.innerHTML = '$$' + this.getValue() + '$$';
          delete this.element.mathfield;
          delete this.accessibleNode;
          delete this.ariaLiveText;
          delete this.field;
          delete this.fieldContent;
          delete this.keyboardDelegate;
          this.virtualKeyboardToggle.remove();
          delete this.virtualKeyboardToggle;
          releaseSharedElement(this.popover);
          delete this.popover;
          releaseSharedElement(this.keystrokeCaption);
          delete this.keystrokeCaption;
          if (this.virtualKeyboard) {
              this.virtualKeyboard.dispose();
              delete this.virtualKeyboard;
          }
          off(this.element, 'pointerdown', this);
          off(this.element, 'touchstart:active mousedown', this);
          off(this.element, 'focus', this);
          off(this.element, 'blur', this);
          off(window, 'resize', this);
          delete this.element;
          this.stylesheets.forEach((x) => x.release());
      }
      resetKeystrokeBuffer(options) {
          options = options !== null && options !== void 0 ? options : { defer: false };
          if (options.defer) {
              // If there is a timeout greater than 0, defer the reset
              // If the timeout is 0, never do the reset: regardless of the amount
              // of time between keystrokes, consider them as candidates for
              // a shortcut
              if (this.options.inlineShortcutTimeout > 0) {
                  // Set a timer to reset the shortcut buffer
                  this.keystrokeBufferResetTimer = setTimeout(() => {
                      this.resetKeystrokeBuffer();
                  }, this.options.inlineShortcutTimeout);
              }
              return;
          }
          this.keystrokeBuffer = '';
          this.keystrokeBufferStates = [];
          clearTimeout(this.keystrokeBufferResetTimer);
      }
      /** @deprecated */
      $perform(command) {
          deprecated('$perform');
          return this.executeCommand(command);
      }
      executeCommand(command) {
          var _a;
          if (getCommandTarget(command) === 'virtual-keyboard') {
              return (_a = this.virtualKeyboard) === null || _a === void 0 ? void 0 : _a.executeCommand(command);
          }
          return perform(this, command);
      }
      get lastOffset() {
          return this.model.lastOffset;
      }
      get selection() {
          return this.model.selection;
      }
      set selection(value) {
          this.model.selection = value;
      }
      /** @deprecated */
      $text(format) {
          return this.getValue(format);
      }
      getValue(arg1, arg2, arg3) {
          return this.model.getValue(arg1, arg2, arg3);
      }
      setValue(value, options) {
          options = options !== null && options !== void 0 ? options : { mode: 'math' };
          if (options.insertionMode === undefined) {
              options.insertionMode = 'replaceAll';
          }
          if (options.format === undefined || options.format === 'auto') {
              options.format = 'latex';
          }
          let mode = 'math';
          if (!options.mode || options.mode === 'auto') {
              mode = getMode(this.model, this.model.position);
          }
          if (ModeEditor.insert(mode, this.model, value, options)) {
              this.undoManager.snapshot(this.options);
              requestUpdate(this);
          }
      }
      find(value, options) {
          return find(this.model, value, options);
      }
      replace(searchValue, newValue, options) {
          replace(this.model, searchValue, newValue, options);
      }
      /** @deprecated */
      $selectedText(format) {
          deprecated('$selectedText');
          return this.getValue(this.model.selection, format);
      }
      /** @deprecated */
      $selectionIsCollapsed() {
          deprecated('$selectionIsCollapsed');
          return this.model.selectionIsCollapsed;
      }
      /** @deprecated */
      $selectionDepth() {
          deprecated('$selectionDepth');
          return this.model.at(this.model.position).treeDepth;
      }
      /**
       * Checks if the selection starts at the beginning of the selection group.
       *
       * @deprecated
       */
      $selectionAtStart() {
          deprecated('$selectionAtStart');
          return false;
      }
      /** @deprecated */
      $selectionAtEnd() {
          deprecated('$selectionAtEnd');
          return false;
      }
      /** @deprecated */
      $latex(text, options) {
          deprecated('$latex');
          if (typeof text === 'string') {
              const oldValue = Atom.toLatex(this.model.root, {
                  expandMacro: false,
              });
              if (text !== oldValue) {
                  options = options !== null && options !== void 0 ? options : { mode: 'math' };
                  ModeEditor.insert('math', this.model, text, {
                      insertionMode: 'replaceAll',
                      selectionMode: 'after',
                      format: 'latex',
                      mode: 'math',
                      suppressChangeNotifications: options.suppressChangeNotifications,
                      macros: this.options.macros,
                  });
                  this.undoManager.snapshot(this.options);
                  requestUpdate(this);
              }
              return text;
          }
          // Return the content as LaTeX
          return Atom.toLatex(this.model.root, { expandMacro: false });
      }
      /** @deprecated */
      $el() {
          deprecated('$el');
          return this.element;
      }
      scrollIntoView() {
          var _a;
          // If a render is pending, do it now to make sure we have correct layout
          // and caret position
          if (this.dirty) {
              render(this);
          }
          const fieldBounds = this.field.getBoundingClientRect();
          let caretPoint;
          if (this.model.selectionIsCollapsed) {
              caretPoint = (_a = getCaretPoint(this.field)) === null || _a === void 0 ? void 0 : _a.x;
          }
          else {
              const selectionBounds = getSelectionBounds(this);
              if (selectionBounds.length > 0) {
                  caretPoint =
                      selectionBounds[0].right + fieldBounds.left - this.field.scrollLeft;
              }
          }
          if (caretPoint !== undefined) {
              const x = caretPoint - window.scrollX;
              if (x < fieldBounds.left) {
                  this.field.scroll({
                      top: 0,
                      left: x - fieldBounds.left + this.field.scrollLeft - 20,
                      behavior: 'smooth',
                  });
              }
              else if (x > fieldBounds.right) {
                  this.field.scroll({
                      top: 0,
                      left: x - fieldBounds.right + this.field.scrollLeft + 20,
                      behavior: 'smooth',
                  });
              }
          }
      }
      /** @deprecated */
      $insert(s, options) {
          deprecated('$insert');
          return this.insert(s, options);
      }
      insert(s, options) {
          var _a;
          if (typeof s === 'string' && s.length > 0) {
              options = options !== null && options !== void 0 ? options : { mode: 'math' };
              if (options.focus) {
                  this.focus();
              }
              if (options.feedback) {
                  if (this.options.keypressVibration && (navigator === null || navigator === void 0 ? void 0 : navigator.vibrate)) {
                      navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
                  }
                  void ((_a = this.keypressSound) === null || _a === void 0 ? void 0 : _a.play());
              }
              if (s === '\\\\') {
                  // This string is interpreted as an "insert row after" command
                  addRowAfter(this.model);
              }
              else if (s === '&') {
                  addColumnAfter(this.model);
              }
              else {
                  const savedStyle = this.style;
                  ModeEditor.insert(this.mode, this.model, s, {
                      style: this.model.at(this.model.position).computedStyle,
                      ...options,
                  });
                  if (options.resetStyle) {
                      this.style = savedStyle;
                  }
              }
              this.undoManager.snapshot(this.options);
              requestUpdate(this);
              return true;
          }
          return false;
      }
      switchMode(mode, prefix = '', suffix = '') {
          if (this.mode === mode)
              return;
          const { model } = this;
          model.deferNotifications({ content: Boolean(suffix) || Boolean(prefix), selection: true }, () => {
              let contentChanged = false;
              this.resetKeystrokeBuffer();
              // Suppress (temporarily) smart mode if switching to/from text or math
              // This prevents switching to/from command mode from suppressing smart mode.
              this.smartModeSuppressed =
                  /text|math/.test(this.mode) && /text|math/.test(mode);
              if (prefix) {
                  const atoms = parseLatex(prefix, { math: 'text', text: 'math' }[mode], null, null);
                  model.collapseSelection('forward');
                  const cursor = model.at(model.position);
                  model.position = model.offsetOf(cursor.parent.addChildrenAfter(atoms, cursor));
                  contentChanged = true;
              }
              this.mode = mode;
              if (mode === 'latex') {
                  const wasCollapsed = model.selectionIsCollapsed;
                  // We can have only a single latex group at a time.
                  // If a latex group is open, close it first
                  complete(this, 'accept');
                  // Switch to the command mode keyboard layer
                  if (this.virtualKeyboard.visible) {
                      this.executeCommand(['switchKeyboardLayer', 'latex-lower']);
                  }
                  // Insert a latex group atom
                  let latex;
                  let cursor = model.at(model.position);
                  if (wasCollapsed) {
                      latex = '\\';
                  }
                  else {
                      const selRange = range(model.selection);
                      latex = Atom.toLatex(model
                          .extractAtoms(selRange)
                          .filter((x) => !(x instanceof PlaceholderAtom)), {
                          expandMacro: false,
                      });
                      cursor = model.at(selRange[0]);
                  }
                  const atom = new LatexGroupAtom(latex);
                  cursor.parent.addChildAfter(atom, cursor);
                  if (wasCollapsed) {
                      model.position = model.offsetOf(atom.lastChild);
                  }
                  else {
                      model.setSelection(model.offsetOf(atom.firstChild), model.offsetOf(atom.lastChild));
                  }
              }
              else {
                  // Remove any error indicator on the current command sequence (if there is one)
                  getLatexGroupBody(model).forEach((x) => {
                      x.isError = false;
                  });
              }
              if (suffix) {
                  const atoms = parseLatex(suffix, { math: 'text', text: 'math' }[mode], null, null);
                  model.collapseSelection('forward');
                  const cursor = model.at(model.position);
                  model.position = model.offsetOf(cursor.parent.addChildrenAfter(atoms, cursor));
                  contentChanged = true;
              }
              // Notify of mode change
              if (typeof this.options.onModeChange === 'function') {
                  this.options.onModeChange(this, this.mode);
              }
              requestUpdate(this);
              return contentChanged;
          });
      }
      /** @deprecated */
      $hasFocus() {
          deprecated('$hasFocus');
          return this.hasFocus();
      }
      hasFocus() {
          return document.hasFocus() && this.keyboardDelegate.hasFocus();
      }
      focus() {
          if (!this.hasFocus()) {
              this.keyboardDelegate.focus();
              this.model.announce('line');
          }
      }
      blur() {
          if (this.hasFocus()) {
              this.keyboardDelegate.blur();
          }
      }
      /** @deprecated */
      $focus() {
          deprecated('$focus');
          return this.focus();
      }
      /** @deprecated */
      $blur() {
          deprecated('$blur');
          return this.blur();
      }
      /** @deprecated */
      $select() {
          this.select();
      }
      select() {
          this.model.selection = { ranges: [[0, this.model.lastOffset]] };
      }
      /** @deprecated */
      $clearSelection() {
          deprecated('$clearSelection');
          deleteRange(this.model, range(this.model.selection));
      }
      applyStyle(style, inOptions = {}) {
          var _a, _b;
          const options = {
              operation: 'set',
              suppressChangeNotifications: false,
          };
          if (isRange(inOptions)) {
              options.range = inOptions;
          }
          else {
              options.range = inOptions.range;
              options.suppressChangeNotifications = (_a = inOptions.suppressChangeNotifications) !== null && _a !== void 0 ? _a : false;
          }
          const operation = (_b = options.operation) !== null && _b !== void 0 ? _b : 'set';
          this.model.deferNotifications({ content: !options.suppressChangeNotifications }, () => {
              if (options.range === undefined) {
                  this.model.selection.ranges.forEach((range) => applyStyle(this.model, range, style, { operation }));
              }
              else {
                  applyStyle(this.model, options.range, style, { operation });
              }
          });
          requestUpdate(this);
      }
      /** @deprecated */
      $applyStyle(style) {
          this.model.selection.ranges.forEach((range) => applyStyle(this.model, range, style, { operation: 'toggle' }));
      }
      /** @deprecated */
      $keystroke(keys, evt) {
          deprecated('$keystroke');
          return onKeystroke(this, keys, evt);
      }
      /** @deprecated */
      $typedText(text) {
          deprecated('$typedText');
          onTypedText(this, text);
      }
      getCaretPoint() {
          const caretOffset = getCaretPoint(this.field);
          return caretOffset ? { x: caretOffset.x, y: caretOffset.y } : null;
      }
      setCaretPoint(x, y) {
          const newPosition = offsetFromPoint(this, x, y, { bias: 0 });
          if (newPosition < 0)
              return false;
          const previousPosition = this.model.position;
          this.model.position = newPosition;
          this.model.announce('move', previousPosition);
          requestUpdate(this);
          return true;
      }
      canUndo() {
          return this.undoManager.canUndo();
      }
      canRedo() {
          return this.undoManager.canRedo();
      }
      popUndoStack() {
          this.undoManager.pop();
      }
      snapshot() {
          this.undoManager.snapshot({
              ...this.options,
              onUndoStateDidChange: (mf, reason) => {
                  this.virtualKeyboard.executeCommand([
                      'onUndoStateChanged',
                      this.canUndo(),
                      this.canRedo(),
                  ]);
                  this.options.onUndoStateDidChange(mf, reason);
              },
          });
      }
      snapshotAndCoalesce() {
          this.undoManager.snapshotAndCoalesce({
              ...this.options,
              onUndoStateDidChange: (mf, reason) => {
                  this.virtualKeyboard.executeCommand([
                      'onUndoStateChanged',
                      this.canUndo(),
                      this.canRedo(),
                  ]);
                  this.options.onUndoStateDidChange(mf, reason);
              },
          });
      }
      getUndoRecord() {
          return this.undoManager.save();
      }
      restoreToUndoRecord(s) {
          this.undoManager.restore(s, {
              ...this.options,
              suppressChangeNotifications: true,
          });
      }
      undo() {
          return this.undoManager.undo({
              ...this.options,
              onUndoStateDidChange: (mf, reason) => {
                  this.virtualKeyboard.executeCommand([
                      'onUndoStateChanged',
                      this.canUndo(),
                      this.canRedo(),
                  ]);
                  this.options.onUndoStateDidChange(mf, reason);
              },
          });
      }
      redo() {
          return this.undoManager.redo({
              ...this.options,
              onUndoStateDidChange: (mf, reason) => {
                  this.virtualKeyboard.executeCommand([
                      'onUndoStateChanged',
                      this.canUndo(),
                      this.canRedo(),
                  ]);
                  this.options.onUndoStateDidChange(mf, reason);
              },
          });
      }
      _onSelectionDidChange() {
          var _a;
          // Keep the content of the textarea in sync wiht the selection.
          // This will allow cut/copy to work.
          this.keyboardDelegate.setValue(this.getValue(this.model.selection, 'latex-expanded'));
          // Adjust mode
          {
              const cursor = this.model.at(this.model.position);
              const newMode = (_a = cursor.mode) !== null && _a !== void 0 ? _a : this.options.defaultMode;
              if (this.mode !== newMode) {
                  if (this.mode === 'latex') {
                      complete(this, 'accept', { mode: newMode });
                      this.model.position = this.model.offsetOf(cursor);
                  }
                  else {
                      this.switchMode(newMode);
                  }
              }
          }
          // Invoke client listeners, if provided.
          if (typeof this.options.onSelectionDidChange === 'function') {
              this.options.onSelectionDidChange(this);
          }
      }
      onFocus() {
          var _a, _b;
          if (this.options.readOnly)
              return;
          if (this.blurred) {
              this.blurred = false;
              this.keyboardDelegate.focus();
              this.virtualKeyboard.enable();
              if (this.options.virtualKeyboardMode === 'onfocus') {
                  this.executeCommand('showVirtualKeyboard');
              }
              updatePopoverPosition(this);
              (_b = (_a = this.options).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, this);
              // Save the current value.
              // It will be compared in `onBlur()` to see if the
              // `onCommit` listener needs to be invoked. This
              // mimic the `<input>` and `<textarea>` behavior
              this.valueOnFocus = this.getValue();
              requestUpdate(this);
          }
      }
      onBlur() {
          if (!this.blurred) {
              this.blurred = true;
              this.ariaLiveText.textContent = '';
              if (/onfocus|manual/.test(this.options.virtualKeyboardMode)) {
                  this.executeCommand('hideVirtualKeyboard');
              }
              complete(this, 'accept');
              requestUpdate(this);
              if (typeof this.options.onBlur === 'function') {
                  this.options.onBlur(this);
              }
              this.virtualKeyboard.disable();
              if (typeof this.options.onCommit === 'function' &&
                  this.getValue() !== this.valueOnFocus) {
                  this.options.onCommit(this);
              }
          }
      }
      onCompositionStart(_composition) {
          // Clear the selection if there is one
          this.model.position = this.model.deleteAtoms(range(this.model.selection));
          requestAnimationFrame(() => {
              render(this); // Recalculate the position of the caret
              // Synchronize the location and style of textarea
              // so that the IME candidate window can align with the composition
              const caretPoint = getCaretPoint(this.field);
              if (!caretPoint)
                  return;
              this.keyboardDelegate.moveTo(caretPoint.x, caretPoint.y);
          });
      }
      onCompositionUpdate(composition) {
          updateComposition(this.model, composition);
          requestUpdate(this);
      }
      onCompositionEnd(composition) {
          removeComposition(this.model);
          onTypedText(this, composition, {
              simulateKeystroke: true,
          });
      }
      onResize() {
          this.element.classList.remove('ML__isNarrowWidth', 'ML__isWideWidth', 'ML__isExtendedWidth');
          if (window.innerWidth >= 1024) {
              this.element.classList.add('ML__isExtendedWidth');
          }
          else if (window.innerWidth >= 768) {
              this.element.classList.add('ML__isWideWidth');
          }
          else {
              this.element.classList.add('ML__isNarrowWidth');
          }
          updatePopoverPosition(this);
      }
  }
  function deprecated(method) {
      console.warn(`Method "${method}" is deprecated`);
  }

  /* eslint no-console:0 */
  function findEndOfMath(delimiter, text, startIndex) {
      // Adapted from
      // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx
      let index = startIndex;
      let braceLevel = 0;
      const delimLength = delimiter.length;
      while (index < text.length) {
          const character = text[index];
          if (braceLevel <= 0 &&
              text.slice(index, index + delimLength) === delimiter) {
              return index;
          }
          if (character === '\\') {
              index++;
          }
          else if (character === '{') {
              braceLevel++;
          }
          else if (character === '}') {
              braceLevel--;
          }
          index++;
      }
      return -1;
  }
  function splitAtDelimiters(startData, leftDelim, rightDelim, mathstyle) {
      const finalData = [];
      for (const startDatum of startData) {
          if (startDatum.type === 'text') {
              const text = startDatum.data;
              let lookingForLeft = true;
              let currIndex = 0;
              let nextIndex;
              nextIndex = text.indexOf(leftDelim);
              if (nextIndex !== -1) {
                  currIndex = nextIndex;
                  if (currIndex > 0) {
                      finalData.push({
                          type: 'text',
                          data: text.slice(0, currIndex),
                      });
                  }
                  lookingForLeft = false;
              }
              let done = false;
              while (!done) {
                  if (lookingForLeft) {
                      nextIndex = text.indexOf(leftDelim, currIndex);
                      if (nextIndex === -1) {
                          done = true;
                          break;
                      }
                      if (currIndex !== nextIndex) {
                          finalData.push({
                              type: 'text',
                              data: text.slice(currIndex, nextIndex),
                          });
                      }
                      currIndex = nextIndex;
                  }
                  else {
                      nextIndex = findEndOfMath(rightDelim, text, currIndex + leftDelim.length);
                      if (nextIndex === -1) {
                          done = true;
                          break;
                      }
                      finalData.push({
                          type: 'math',
                          data: text.slice(currIndex + leftDelim.length, nextIndex),
                          rawData: text.slice(currIndex, nextIndex + rightDelim.length),
                          mathstyle,
                      });
                      currIndex = nextIndex + rightDelim.length;
                  }
                  lookingForLeft = !lookingForLeft;
              }
              if (currIndex < text.length) {
                  finalData.push({
                      type: 'text',
                      data: text.slice(currIndex),
                  });
              }
          }
          else {
              finalData.push(startDatum);
          }
      }
      return finalData;
  }
  function splitWithDelimiters(text, delimiters) {
      let data = [{ type: 'text', data: text }];
      if (delimiters.inline) {
          delimiters.inline.forEach(([openDelim, closeDelim]) => {
              data = splitAtDelimiters(data, openDelim, closeDelim, 'textstyle');
          });
      }
      if (delimiters.display) {
          delimiters.display.forEach(([openDelim, closeDelim]) => {
              data = splitAtDelimiters(data, openDelim, closeDelim, 'displaystyle');
          });
      }
      return data;
  }
  function createMathMLNode(latex, options) {
      // Create a node for AT (Assistive Technology, e.g. screen reader) to speak, etc.
      // This node has a style that makes it be invisible to display but is seen by AT
      const span = document.createElement('span');
      try {
          const html = "<math xmlns='http://www.w3.org/1998/Math/MathML'>" +
              options.renderToMathML(latex, options) +
              '</math>';
          span.innerHTML = options.createHTML ? options.createHTML(html) : html;
      }
      catch (error) {
          console.error("Could not convert '" + latex + "' to MathML with ", error);
          span.textContent = latex;
      }
      span.className = 'ML__sr-only';
      return span;
  }
  function createMarkupNode(text, options, mathstyle, createNodeOnFailure) {
      // Create a node for displaying math.
      //   This is slightly ugly because in the case of failure to create the markup,
      //   sometimes a text node is desired and sometimes not.
      //   'createTextNodeOnFailure' controls this and null is returned when no node is created.
      // This node is made invisible to AT (screen readers)
      let span = document.createElement('span');
      span.setAttribute('aria-hidden', 'true');
      if (options.preserveOriginalContent) {
          span.setAttribute('data-' + options.namespace + 'original-content', text);
          if (mathstyle) {
              span.setAttribute('data-' + options.namespace + 'original-mathstyle', mathstyle);
          }
      }
      try {
          void loadFonts(options.fontsDirectory);
          inject(null, css_248z$1);
          const html = options.renderToMarkup(text, {
              mathstyle: mathstyle !== null && mathstyle !== void 0 ? mathstyle : 'displaystyle',
              format: 'html',
              macros: options.macros,
              onCreateMathlist: options.onCreateMathlist,
          });
          span.innerHTML = options.createHTML ? options.createHTML(html) : html;
      }
      catch (error) {
          console.error("Could not parse'" + text + "' with ", error);
          if (createNodeOnFailure) {
              span = document.createTextNode(text);
          }
          else {
              return null;
          }
      }
      return span;
  }
  function createAccessibleMarkupPair(text, mathstyle, options, createNodeOnFailure) {
      // Create a math node (a span with an accessible component and a visual component)
      // If there is an error in parsing the latex, 'createNodeOnFailure' controls whether
      //   'null' is returned or an accessible node with the text used.
      const markupNode = createMarkupNode(text, options, mathstyle, createNodeOnFailure);
      if (markupNode &&
          /\b(mathml|speakable-text)\b/i.test(options.renderAccessibleContent)) {
          const fragment = document.createDocumentFragment();
          if (/\bmathml\b/i.test(options.renderAccessibleContent) &&
              options.renderToMathML) {
              fragment.append(createMathMLNode(text, options));
          }
          if (/\bspeakable-text\b/i.test(options.renderAccessibleContent) &&
              options.renderToSpeakableText) {
              const span = document.createElement('span');
              const html = options.renderToSpeakableText(text, options);
              span.innerHTML = options.createHTML ? options.createHTML(html) : html;
              span.className = 'ML__sr-only';
              fragment.append(span);
          }
          fragment.append(markupNode);
          return fragment;
      }
      return markupNode;
  }
  function scanText$1(text, options) {
      // If the text starts with '\begin'...
      // (this is a MathJAX behavior)
      let fragment = null;
      if (options.TeX.processEnvironments && /^\s*\\begin/.test(text)) {
          fragment = document.createDocumentFragment();
          fragment.appendChild(createAccessibleMarkupPair(text, undefined, options, true));
      }
      else {
          if (!text.trim())
              return null;
          const data = splitWithDelimiters(text, options.TeX.delimiters);
          if (data.length === 1 && data[0].type === 'text') {
              // This text contains no math. No need to continue processing
              return null;
          }
          fragment = document.createDocumentFragment();
          for (const datum of data) {
              if (datum.type === 'text') {
                  fragment.appendChild(document.createTextNode(datum.data));
              }
              else {
                  fragment.appendChild(createAccessibleMarkupPair(datum.data, datum.mathstyle, options, true));
              }
          }
      }
      return fragment;
  }
  function scanElement(element, options) {
      const originalContent = element.getAttribute('data-' + options.namespace + 'original-content');
      if (originalContent) {
          const mathstyle = element.getAttribute('data-' + options.namespace + 'mathstyle');
          const span = createAccessibleMarkupPair(originalContent, mathstyle, options, false);
          if (span !== null) {
              element.textContent = '';
              element.append(span);
          }
          return;
      }
      if (element.childNodes.length === 1 && element.childNodes[0].nodeType === 3) {
          // This is a node with textual content only. Perhaps an opportunity
          // to simplify and avoid creating extra nested elements...
          const text = element.childNodes[0].textContent;
          if (options.TeX.processEnvironments && /^\s*\\begin/.test(text)) {
              element.textContent = '';
              element.append(createAccessibleMarkupPair(text, undefined, options, true));
              return;
          }
          const data = splitWithDelimiters(text, options.TeX.delimiters);
          if (data.length === 1 && data[0].type === 'math') {
              // The entire content is a math expression: we can replace the content
              // with the latex markup without creating additional wrappers.
              element.textContent = '';
              element.append(createAccessibleMarkupPair(data[0].data, data[0].mathstyle, options, true));
              return;
          }
          if (data.length === 1 && data[0].type === 'text') {
              // This element only contained text with no math. No need to
              // do anything.
              return;
          }
      }
      for (let i = 0; i < element.childNodes.length; i++) {
          const childNode = element.childNodes[i];
          if (childNode.nodeType === 3) {
              // A text node
              // Look for math mode delimiters inside the text
              const frag = scanText$1(childNode.textContent, options);
              if (frag) {
                  i += frag.childNodes.length - 1;
                  childNode.replaceWith(frag);
              }
          }
          else if (childNode.nodeType === 1) {
              // An element node
              const tag = childNode.nodeName.toLowerCase();
              if (tag === 'script' &&
                  options.processScriptTypePattern.test(childNode.type)) {
                  let style = 'displaystyle';
                  for (const l of childNode.type.split(';')) {
                      const v = l.split('=');
                      if (v[0].toLowerCase() === 'mode') {
                          style =
                              v[1].toLoweCase() === 'display' ? 'displaystyle' : 'textstyle';
                      }
                  }
                  const span = createAccessibleMarkupPair(childNode.textContent, style, options, true);
                  childNode.parentNode.replaceChild(span, childNode);
              }
              else if (tag !== 'script') {
                  // Element node
                  // console.assert(childNode.className !== 'formula');
                  const shouldRender = options.processClassPattern.test(childNode.className) ||
                      !(options.skipTags.includes(tag) ||
                          options.ignoreClassPattern.test(childNode.className));
                  if (shouldRender) {
                      if (element.childNodes.length === 1 &&
                          element.childNodes[0].nodeType === 3) {
                          const formula = element.textContent;
                          element.textContent = '';
                          element.append(createAccessibleMarkupPair(formula, 'displaystyle', options, true));
                      }
                      else {
                          scanElement(childNode, options);
                      }
                  }
              }
          }
          // Otherwise, it's something else, and ignore it.
      }
  }
  const defaultOptions = {
      // Optional namespace for the `data-` attributes.
      namespace: '',
      // Name of tags whose content will not be scanned for math delimiters
      skipTags: [
          'noscript',
          'style',
          'textarea',
          'pre',
          'code',
          'annotation',
          'annotation-xml',
      ],
      // <script> tags of the following types will be processed. Others, ignored.
      processScriptType: 'math/tex',
      // Regex pattern of the class name of elements whose contents should not
      // be processed
      ignoreClass: 'tex2jax_ignore',
      // Regex pattern of the class name of elements whose contents should
      // be processed when they appear inside ones that are ignored.
      processClass: 'tex2jax_process',
      // Indicate whether to preserve or discard the original content of the
      // elements being rendered in a 'data-original-content' attribute.
      preserveOriginalContent: true,
      // Indicate the format to use to render accessible content
      renderAccessibleContent: 'mathml',
      TeX: {
          processEnvironments: true,
          delimiters: {
              inline: [['\\(', '\\)']],
              display: [
                  ['$$', '$$'],
                  ['\\[', '\\]'],
              ],
          },
      },
  };
  function renderMathInElement(element, options) {
      try {
          options = { ...defaultOptions, ...options };
          options.ignoreClassPattern = new RegExp(options.ignoreClass);
          options.processClassPattern = new RegExp(options.processClass);
          options.processScriptTypePattern = new RegExp(options.processScriptType);
          options.macros = MACROS;
          // Validate the namespace (used for `data-` attributes)
          if (options.namespace) {
              if (!/^[a-z]+-?$/.test(options.namespace)) {
                  throw new Error('options.namespace must be a string of lowercase characters only');
              }
              if (!options.namespace.endsWith('-')) {
                  options.namespace += '-';
              }
          }
          scanElement(element, options);
      }
      catch (error) {
          if (error instanceof Error) {
              console.error('renderMathInElement(): ' + error.message);
          }
          else {
              console.error('renderMathInElement(): Could not render math for element', element);
          }
      }
  }
  var AutoRender = {
      renderMathInElement,
  };

  /**
   * This module contains utilities to debug mathlive internal data structures.
   *
   * It is also used by the automated test suite.
   */
  function latexToAsciiMath(latex, mode = 'math') {
      const mathlist = parseLatex(latex, mode, null, null);
      return atomToAsciiMath(mathlist);
  }
  function asciiMathToLatex(ascii) {
      const [, result] = parseMathString(ascii, { format: 'ASCIIMath' });
      return result;
  }
  /**
   *
   * @param symbol specify which span to consider.
   * If a string, a span whose body match the string
   * If a number, the nth span in the list
   * If an array, each element in the array indicate the nth child to traverse
   */
  function getSymbol(spans, symbol) {
      if (!spans)
          return null;
      let childSymbol = null;
      if (Array.isArray(symbol)) {
          childSymbol = symbol.slice(); // Clone the array
          symbol = childSymbol.shift(); // Get the first element and remove it from the array
      }
      let result = null;
      if (typeof symbol === 'number' && symbol < spans.length) {
          if (childSymbol && childSymbol.length > 0) {
              return getSymbol(spans[symbol].children, childSymbol);
          }
          return spans[symbol];
      }
      if (typeof symbol === 'string') {
          for (const span of spans) {
              // Does this span match the symbol we're looking for?
              if (span.value === symbol) {
                  if (childSymbol && childSymbol.length > 0) {
                      return getSymbol(span.children, childSymbol);
                  }
                  return span;
              }
              // If not, try its children
              result = getSymbol(span.children, symbol);
              if (result)
                  return result;
          }
          return result;
      }
      return null;
  }
  function getProp(spans, symbol, prop) {
      const s = getSymbol(spans, symbol);
      if (s)
          return s[prop];
      return null;
  }
  /**
   * Return the type ('mbin', etc...) of a span
   */
  function getType(spans, symbol) {
      const s = getSymbol(spans, symbol);
      if (s)
          return s.type;
      return null;
  }
  function getStyle(spans, symbol, prop) {
      const s = getSymbol(spans, symbol);
      if (s === null || s === void 0 ? void 0 : s.style)
          return s.style[prop];
      return null;
  }
  function getClasses(spans, symbol) {
      var _a;
      const s = getSymbol(spans, symbol);
      if (s)
          return (_a = s.classes) !== null && _a !== void 0 ? _a : '';
      return null;
  }
  function hasClass(spans, symbol, cls) {
      const classes = getClasses(spans, symbol);
      if (!classes)
          return false;
      const clsList = classes.split(' ');
      for (const element of clsList) {
          if (element === cls)
              return true;
      }
      return false;
  }
  /// /////////////////////////////////////////////////////////////////////////////
  /// /////////////////////////////////////////////////////////////////////////////
  /// /////////////////////////////////////////////////////////////////////////////
  function spanToString(span, indent = '') {
      let result = '';
      if (Array.isArray(span)) {
          if (span.length === 0) {
              result += '[]\n';
          }
          else {
              result += '[\n';
              for (let i = 0; i < span.length; i++) {
                  result += spanToString(span[i], `\t ${indent}${i} ,`);
                  result += i < span.length - 1 ? ',\n' : '\n';
              }
              result += indent + ']\n';
          }
      }
      else {
          result = indent + '{\n';
          if (span.type) {
              result += indent + 'type:"' + span.type + '",\n';
          }
          if (span.value && span.value.length > 0) {
              result += indent + 'body:"' + span.value + '",\n';
          }
          if (span.classes && span.classes.length > 0) {
              result += indent + 'classes:"' + span.classes + '",\n';
          }
          if (span.style) {
              for (const s in span.style) {
                  if (Object.prototype.hasOwnProperty.call(span.style, s)) {
                      result += indent + s + ':"';
                      result += span.style[s] + '",\n';
                  }
              }
          }
          if (span.children && span.children.length > 0) {
              result +=
                  indent +
                      'children:' +
                      span.children.map((x) => spanToString(x, indent)).join('; ');
          }
          result += indent + '}';
      }
      return result;
  }
  /// /////////////////////////////////////////////////////////////////////////////
  /// /////////////////////////////////////////////////////////////////////////////
  /// /////////////////////////////////////////////////////////////////////////////
  function spanToMarkup(span, indent = '') {
      // If (indent.length === 0) {
      //     result += '<table>';
      // }
      let result = '';
      if (Array.isArray(span)) {
          for (const element of span) {
              result += spanToMarkup(element, indent);
          }
      }
      else if (span) {
          result = '<br>' + indent;
          if (span.classes.includes('fontsize-ensurer')) {
              result += 'FONTSIZE-ENSURER';
          }
          else {
              if (span.type) {
                  result += '<span class="type">' + span.type + '</span>';
              }
              if (span.value && span.value.length > 0) {
                  result += '<span class="value">' + span.value + '</span>';
              }
              if (span.classes && span.classes.length > 0) {
                  result += '&nbsp;<span class="classes">' + span.classes + '</span>';
              }
              if (span.isTight) {
                  result += '&nbsp;<span class="stylevalue"> tight </span>';
              }
              if (span.caret) {
                  result += '&nbsp;<span class="stylevalue"> caret </span>';
              }
              if (span.style) {
                  for (const s in span.style) {
                      if (Object.prototype.hasOwnProperty.call(span.style, s)) {
                          result += '&nbsp;<span class="styleprop">' + s + ':</span>';
                          result +=
                              '<span class="stylevalue"> ' + span.style[s] + '</span>;&nbsp;';
                      }
                  }
              }
              if (span.children) {
                  result += span.children
                      .map((x) => spanToMarkup(x, indent + '▷'))
                      .join('; ');
              }
          }
      }
      return result;
  }
  const MathliveDebug = {
      spanToMarkup,
      spanToString,
      hasClass,
      getClasses,
      getProp,
      getStyle,
      getType,
      latexToAsciiMath,
      asciiMathToLatex,
      FUNCTIONS,
      MATH_SYMBOLS,
      TEXT_SYMBOLS,
      ENVIRONMENTS,
      MACROS,
      INLINE_SHORTCUTS,
      DEFAULT_KEYBINDINGS,
      getKeybindingMarkup,
  };

  function removeHighlight(element) {
      element.classList.remove('ML__highlight');
      if (element.children) {
          for (const child of element.children) {
              removeHighlight(child);
          }
      }
  }
  /**
   * Highlights the span corresponding to the specified atomID.
   *
   * This is used for text-to-speech with synchronized highlighting (read aloud)
   *
   * @category Read Aloud
   * @param {string} atomID
   *
   */
  function highlightAtomID(element, atomID) {
      var _a;
      if (!atomID || ((_a = element.dataset) === null || _a === void 0 ? void 0 : _a.atomId) === atomID) {
          element.classList.add('ML__highlight');
          if (element.children && element.children.length > 0) {
              [...element.children].forEach((x) => {
                  if (x instanceof HTMLElement) {
                      highlightAtomID(x);
                  }
              });
          }
      }
      else {
          element.classList.remove('ML__highlight');
          if (element.children && element.children.length > 0) {
              [...element.children].forEach((x) => {
                  if (x instanceof HTMLElement) {
                      highlightAtomID(x, atomID);
                  }
              });
          }
      }
  }
  /**
   * "Read Aloud" is an asynchronous operation that reads the
   * reading with synchronized highlighting
   *
   * @param element - The DOM element to highlight
   * @param text - The text to speak
   */
  function defaultReadAloudHook(element, text, config) {
      var _a;
      if (!window) {
          return;
      }
      if (!config && window.mathlive) {
          config = window.mathlive.config;
      }
      if (config.speechEngine !== 'amazon') {
          console.warn('Use Amazon TTS Engine for synchronized highlighting');
          if (config.speakHook)
              config.speakHook(text, config);
          return;
      }
      if (!window.AWS) {
          console.warn('AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk');
          return;
      }
      const polly = new window.AWS.Polly({ apiVersion: '2016-06-10' });
      const parameters = {
          OutputFormat: 'json',
          VoiceId: config.speechEngineVoice || 'Joanna',
          Engine: 'standard',
          Text: text,
          TextType: 'ssml',
          SpeechMarkTypes: ['ssml'],
      };
      window.mathlive = (_a = window.mathlive) !== null && _a !== void 0 ? _a : {};
      window.mathlive.readAloudElement = element;
      const statusHook = config.onReadAloudStatus || window.mathlive.onReadAloudStatus;
      // Request the mark points
      polly.synthesizeSpeech(parameters, (err, data) => {
          if (err) {
              console.warn('polly.synthesizeSpeech() error:', err, err.stack);
              return;
          }
          if (!data || !data.AudioStream) {
              console.log('polly.synthesizeSpeech():', data);
              return;
          }
          const response = new TextDecoder('utf-8').decode(new Uint8Array(data.AudioStream));
          window.mathlive.readAloudMarks = response
              .split('\n')
              .map((x) => (x ? JSON.parse(x) : {}));
          window.mathlive.readAloudTokens = [];
          for (const mark of window.mathlive.readAloudMarks) {
              if (mark.value) {
                  window.mathlive.readAloudTokens.push(mark.value);
              }
          }
          window.mathlive.readAloudCurrentMark = '';
          // Request the audio
          parameters.OutputFormat = 'mp3';
          parameters.SpeechMarkTypes = [];
          polly.synthesizeSpeech(parameters, (err, data) => {
              if (err) {
                  console.warn('polly.synthesizeSpeech(', text, ') error:', err, err.stack);
                  return;
              }
              if (!data || !data.AudioStream) {
                  return;
              }
              const uInt8Array = new Uint8Array(data.AudioStream);
              const blob = new Blob([uInt8Array.buffer], {
                  type: 'audio/mpeg',
              });
              const url = URL.createObjectURL(blob);
              if (!window.mathlive.readAloudAudio) {
                  window.mathlive.readAloudAudio = new Audio();
                  window.mathlive.readAloudAudio.addEventListener('ended', () => {
                      const mathfield = window.mathlive.readAloudMathField;
                      if (statusHook) {
                          statusHook(mathfield, 'ended');
                      }
                      if (mathfield) {
                          render(mathfield);
                          window.mathlive.readAloudElement = null;
                          window.mathlive.readAloudMathField = null;
                          window.mathlive.readAloudTokens = [];
                          window.mathlive.readAloudMarks = [];
                          window.mathlive.readAloudCurrentMark = '';
                      }
                      else {
                          removeHighlight(window.mathlive.readAloudElement);
                      }
                  });
                  window.mathlive.readAloudAudio.addEventListener('timeupdate', () => {
                      let value = '';
                      // The target, the atom we're looking for, is the one matching the current audio
                      // plus 100 ms. By anticipating it a little bit, it feels more natural, otherwise it
                      // feels like the highlighting is trailing the audio.
                      const target = window.mathlive.readAloudAudio.currentTime * 1000 + 100;
                      // Find the smallest element which is bigger than the target time
                      for (const mark of window.mathlive.readAloudMarks) {
                          if (mark.time < target) {
                              value = mark.value;
                          }
                      }
                      if (window.mathlive.readAloudCurrentMark !== value) {
                          window.mathlive.readAloudCurrentToken = value;
                          if (value && value === window.mathlive.readAloudFinalToken) {
                              window.mathlive.readAloudAudio.pause();
                          }
                          else {
                              window.mathlive.readAloudCurrentMark = value;
                              highlightAtomID(window.mathlive.readAloudElement, window.mathlive.readAloudCurrentMark);
                          }
                      }
                  });
              }
              else {
                  window.mathlive.readAloudAudio.pause();
              }
              window.mathlive.readAloudAudio.src = url;
              if (statusHook) {
                  statusHook(window.mathlive.readAloudMathField, 'playing');
              }
              window.mathlive.readAloudAudio.play();
          });
      });
  }
  /**
   * Returns the status of a Read Aloud operation (reading with synchronized
   * highlighting).
   *
   * Possible values are:
   * - `"ready"`
   * - `"playing"`
   * - `"paused"`
   * - `"unavailable"`
   *
   * **See** {@linkcode speak}
   * @category Read Aloud
   */
  function readAloudStatus() {
      var _a;
      if (!window)
          return 'unavailable';
      window.mathlive = (_a = window.mathlive) !== null && _a !== void 0 ? _a : {};
      if (!window.mathlive.readAloudAudio)
          return 'ready';
      if (window.mathlive.readAloudAudio.paused)
          return 'paused';
      if (!window.mathlive.readAloudAudio.ended)
          return 'playing';
      return 'ready';
  }
  /**
   * Pauses a read aloud operation if one is in progress.
   *
   * **See** {@linkcode speak}
   */
  function pauseReadAloud() {
      var _a;
      if (!window)
          return;
      window.mathlive = (_a = window.mathlive) !== null && _a !== void 0 ? _a : {};
      if (window.mathlive.readAloudAudio) {
          if (window.mathlive.onReadAloudStatus) {
              window.mathlive.onReadAloudStatus(window.mathlive.readAloudMathField, 'paused');
          }
          window.mathlive.readAloudAudio.pause();
      }
  }
  /**
   * Resumes a read aloud operation if one was paused.
   *
   * **See** {@linkcode speak}
   */
  function resumeReadAloud() {
      var _a;
      if (!window)
          return;
      window.mathlive = (_a = window.mathlive) !== null && _a !== void 0 ? _a : {};
      if (window.mathlive.readAloudAudio) {
          if (window.mathlive.onReadAloudStatus) {
              window.mathlive.onReadAloudStatus(window.mathlive.readAloudMathField, 'playing');
          }
          window.mathlive.readAloudAudio.play();
      }
  }
  /**
   * If a Read Aloud operation is in progress, read from a specified token
   *
   * **See** {@linkcode speak}
   *
   * @param count The number of tokens to read.
   */
  function playReadAloud(token, count) {
      var _a;
      if (!window)
          return;
      window.mathlive = (_a = window.mathlive) !== null && _a !== void 0 ? _a : {};
      if (window.mathlive.readAloudAudio) {
          let timeIndex = 0;
          window.mathlive.readAloudFinalToken = null;
          if (token) {
              window.mathlive.readAloudMarks = window.mathlive.readAloudMarks || [];
              for (const mark of window.mathlive.readAloudMarks) {
                  if (mark.value === token) {
                      timeIndex = mark.time / 1000;
                  }
              }
              let tokenIndex = window.mathlive.readAloudTokens.indexOf(token);
              if (tokenIndex >= 0) {
                  tokenIndex += count;
                  if (tokenIndex < window.mathlive.readAloudTokens.length) {
                      window.mathlive.readAloudFinalToken = tokenIndex;
                  }
              }
          }
          window.mathlive.readAloudAudio.currentTime = timeIndex;
          if (window.mathlive.onReadAloudStatus) {
              window.mathlive.onReadAloudStatus(window.mathlive.readAloudMathField, 'playing');
          }
          window.mathlive.readAloudAudio.play();
      }
  }

  /// ^.*('\\.*').*
  // Frequency of a symbol.
  // String constants corresponding to frequency values,
  // which are the number of results returned by latexsearch.com
  // When the precise number is known, it is provided. Otherwise,
  // the following constants are used to denote an estimate.
  const CRYPTIC = 0;
  const ARCANE = 200;
  const RARE = 1200;
  const UNCOMMON = 2000;
  const COMMON = 3000;
  const SUPERCOMMON = 4000;
  /*
   * Set the metadata for the specified symbols
   *
   * metadata('Functions', ['\\sin', '\\cos'], COMMON, '$0{a}')
   *
   */
  function metadata(category, symbols, frequency = COMMON, template = '$0') {
      symbols.forEach((symbol) => {
          if (MATH_SYMBOLS[symbol]) {
              MATH_SYMBOLS[symbol].frequency = frequency;
              MATH_SYMBOLS[symbol].category = category;
              MATH_SYMBOLS[symbol].template = template.replace(/\$0/g, symbol);
          }
          if (FUNCTIONS[symbol]) {
              // Make a copy of the entry, since it could be shared by multiple
              // symbols
              FUNCTIONS[symbol] = {
                  ...FUNCTIONS[symbol],
                  frequency,
                  category,
                  template: template.replace(/\$0/g, symbol),
              };
          }
      });
  }
  metadata('Trigonometry', ['\\cos', '\\sin', '\\tan'], SUPERCOMMON);
  metadata('Trigonometry', [
      '\\arcsin',
      '\\arccos',
      '\\arctan',
      '\\arctg',
      '\\arcctg',
      '\\arcsec',
      '\\arccsc',
      '\\arsinh',
      '\\arcosh',
      '\\artanh',
      '\\arcsech',
      '\\arccsch',
      '\\arg',
      '\\ch',
      '\\cosec',
      '\\cosh',
      '\\cot',
      '\\cotg',
      '\\coth',
      '\\csc',
      '\\ctg',
      '\\cth',
      '\\lg',
      '\\lb',
      '\\sec',
      '\\sinh',
      '\\sh',
      '\\tanh',
      '\\tg',
      '\\th',
  ], UNCOMMON);
  metadata('Functions', ['\\ln', '\\log', '\\exp', '\\lim'], SUPERCOMMON);
  metadata('Functions', ['\\dim', '\\ker', '\\deg', '\\det', '\\mod', '\\min', '\\max'], COMMON);
  metadata('Functions', ['\\hom'], RARE);
  metadata('Decoration', ['\\rule'], ARCANE, '$0{2em}{1em}');
  metadata('Decoration', ['\\color', '\\textcolor'], ARCANE, '{$0{m0}A}{$0{m1}B}{$0{m2}C }{$0{m3}a}{$0{m4}b}{$0{m5}c}{$0{m6}8}');
  metadata('Decoration', ['\\overline', '\\underline'], COMMON, '$0{\\placeholder{}}');
  metadata('Decoration', ['\\enclose'], RARE, '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{x=0}');
  metadata('Decoration', ['\\fcolorbox'], RARE, '\\fcolorbox{#cd0030}{#ffd400}{\\unicode{"2B1A}}');
  metadata('Decoration', ['\\colorbox'], RARE, '\\colorbox{#fbc0bd}{\\unicode{"2B1A}}');
  metadata('Decoration', ['\\boxed', '\\cancel', '\\bcancel', '\\xcancel'], RARE, '$0{\\placeholder{}}');
  metadata('Decoration', ['\\bbox'], RARE, '\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{"2B1A}}');
  metadata('Styling', ['\\mathbb'], SUPERCOMMON, '$0{Don Knuth}');
  metadata('Styling', [
      '\\textbf',
      '\\textup',
      '\\textit',
      '\\textrm',
      '\\textsf',
      '\\texttt',
      '\\textnormal',
      '\\textmd',
      '\\textsl',
      '\\textsc',
      '\\mathsf',
      '\\mathtt',
      '\\mathrm',
      '\\mathfrak',
      '\\mathcal',
      '\\mathscr',
      '\\mathbf',
      '\\mathmd',
      '\\mathit',
      '\\text',
      '\\mbox',
      '\\Bbb',
      '\\bold',
      '\\bm',
      '\\boldsymbol',
  ], COMMON, '$0{Don Knuth}');
  metadata('Styling', [
      '\\frak',
      '\\tt',
      '\\bf',
      '\\it',
      '\\rmfamily',
      '\\sffamily',
      '\\ttfamily',
      '\\class',
      '\\cssId',
      '\\htmlData',
  ], RARE, '{$0 Don Knuth}');
  metadata('Styling', ['\\bfseries', '\\mdseries', '\\upshape', '\\slshape', '\\scshape'], RARE, '\\text{$0 Don Knuth}');
  metadata('Styling', ['\\class', '\\cssId'], RARE, '$0{testIdentifier}{Don Knuth}');
  // Note: In LaTeX, \fontseries, \fontfamily, \fontshape are applicable to
  // text mode only
  metadata('Styling', ['\\fontseries'], RARE, '\\text{$0{b}Don Knuth}');
  metadata('Styling', ['\\fontfamily'], RARE, '\\text{$0{cmtt}Don Knuth}');
  metadata('Styling', ['\\fontshape'], RARE, '\\text{$0{sc}Don Knuth}');
  metadata('Styling', ['\\selectfont'], RARE, '\\text{$0}'); // No-op, but only valid in text mode
  metadata('Styling', ['\\emph'], RARE, 'Don$0{Knuth}');
  metadata('Styling', ['\\em'], RARE, 'Don{$0 Knuth}');
  metadata('Layout', [
      '\\mathop',
      '\\mathbin',
      '\\mathrel',
      '\\mathopen',
      '\\mathclose',
      '\\mathpunct',
      '\\mathord',
      '\\mathinner',
      '\\operatorname',
      '\\operatorname*',
  ], RARE, 'x=$0{arg}=0');
  metadata('Layout', ['\\middle'], RARE, '\\left\\{x$0|x>0\\right\\}');
  metadata('Layout', ['\\overset', '\\underset', '\\stackrel', '\\stackbin'], RARE, '$0{arg}{x=0}');
  metadata('Layout', ['\\rlap', '\\mathrlap'], RARE, '$0{/}0');
  metadata('Layout', ['\\llap', '\\mathllap'], RARE, 'o$0{/}');
  metadata('Fractions', ['\\frac'], SUPERCOMMON, '$0{\\placeholder{}}{\\placeholder{}}');
  metadata('Fractions', [
      '\\binom',
      '\\dfrac',
      '\\tfrac',
      '\\dbinom',
      '\\tbinom',
      '\\pdiff',
      '\\cfrac',
  ], RARE, '$0{\\placeholder{}}{\\placeholder{}}');
  metadata('Fractions', ['\\over', '\\atop', '\\choose'], RARE, '\\unicode{"2B1A} $0 \\unicode{"2B1A}');
  metadata('Fractions', ['\\overwithdelims', '\\atopwithdelims'], RARE, '{\\unicode{"2B1A} $0{\\lbrace}{\\rbrace} \\unicode{"2B1A}}');
  metadata('Extensible Operators', ['\\sum', '\\prod', '\\bigcap', '\\bigcup', '\\int'], SUPERCOMMON);
  metadata('Extensible Operators', ['\\bigoplus', '\\smallint', '\\iint', '\\oint'], COMMON);
  metadata('Extensible Operators', [
      '\\bigwedge',
      '\\bigvee',
      '\\coprod',
      '\\bigsqcup',
      '\\bigotimes',
      '\\bigodot',
      '\\biguplus',
      '\\intop',
      '\\sqcup',
      '\\sqcap',
      '\\uplus',
      '\\wr',
      '\\Cap',
      '\\Cup',
      '\\doublecap',
      '\\doublecup',
      '\\amalg',
      '\\iiint',
      '\\oiint',
      '\\oiiint',
      '\\intclockwise',
      '\\varointclockwise',
      '\\ointctrclockwise',
      '\\intctrclockwise',
  ], RARE);
  metadata('Accents', ['\\vec'], SUPERCOMMON);
  metadata('Accents', ['\\bar', '\\ddot', '\\acute', '\\tilde', '\\check'], COMMON, '$0{\\placeholder{}}');
  metadata('Accents', ['\\^', '\\`', "\\'"], RARE, '$0{e}');
  metadata('Accents', ['\\c'], RARE, '$0{c}');
  metadata('Accents', ['\\~'], RARE, '$0{n}');
  metadata('Accents', ['\\mathring', '\\hat', '\\dot', '\\breve', '\\grave'], RARE, '$0{\\placeholder{}}');
  metadata('Extensible Symbols', [
      '\\overrightarrow',
      '\\overleftarrow',
      '\\Overrightarrow',
      '\\overleftharpoon',
      '\\overrightharpoon',
      '\\overleftrightarrow',
      '\\overbrace',
      '\\overlinesegment',
      '\\overgroup',
      '\\widehat',
      '\\widecheck',
      '\\widetilde',
  ], COMMON, '$0{ABC}');
  metadata('Extensible Symbols', [
      '\\underrightarrow',
      '\\underleftarrow',
      '\\underleftrightarrow',
      '\\underbrace',
      '\\underlinesegment',
      '\\undergroup',
      '\\utilde',
  ], COMMON, '$0{ABC}');
  metadata('Sizing', [
      '\\tiny',
      '\\scriptsize',
      '\\footnotesize',
      '\\small',
      '\\normalsize',
      '\\large',
      '\\Large',
      '\\LARGE',
      '\\huge',
      '\\Huge',
  ], RARE, '$0{x=0}');
  metadata('Sizing', ['\\big', '\\Big', '\\bigg', '\\Bigg'], RARE, '$0($0)');
  metadata('Sizing', ['\\bigl', '\\Bigl', '\\biggl', '\\Biggl'], RARE, '$0(');
  metadata('Sizing', ['\\bigr', '\\Bigr', '\\biggr', '\\Biggr'], RARE, '$0)');
  metadata('Sizing', ['\\bigm', '\\Bigm', '\\biggm', '\\Biggm'], RARE, '$0|');
  metadata('Letterlike Symbols', [
      '\\nabla',
      '\\partial',
      '\\N',
      '\\R',
      '\\Q',
      '\\C',
      '\\Z',
      '\\exponentialE',
      '\\forall',
      '\\exists',
      '\\nexists',
  ], SUPERCOMMON);
  metadata('Letterlike Symbols', [
      '\\doubleStruckCapitalP',
      '\\P',
      '\\ell',
      '\\hbar',
      '\\hslash',
      '\\imath',
      '\\jmath',
      '\\imaginaryI',
      '\\imaginaryJ',
      '\\differentialD',
      '\\rd',
      '\\capitalDifferentialD',
      '\\doubleStruckCapitalN',
      '\\doubleStruckCapitalR',
      '\\doubleStruckCapitalQ',
      '\\doubleStruckCapitalC',
      '\\doubleStruckCapitalZ',
      '\\rD',
      '\\differencedelta',
      '\\mid',
      '@',
      '\\Re',
      '\\Im',
      '\\$',
      '\\%',
      '\\And',
      '\\degree',
  ], COMMON);
  metadata('Letterlike Symbols', [
      '\\top',
      '\\bot',
      '\\scriptCapitalE',
      '\\scriptCapitalH',
      '\\scriptCapitalL',
      '\\gothicCapitalC',
      '\\gothicCapitalH',
      '\\gothicCapitalI',
      '\\gothicCapitalR',
      '\\Bbbk',
      '\\Finv',
      '\\Game',
      '\\wp',
      '\\eth',
      '\\mho',
      '\\pounds',
      '\\yen',
      '\\euro',
  ], RARE);
  metadata('Crosses', ['\\dagger', '\\dag'], SUPERCOMMON);
  metadata('Crosses', ['\\ddag', '\\ddagger', '\\maltese', '\\textdagger', '\\textdaggerdbl'], RARE);
  metadata('Various', [
      '\\checkmark',
      '\\diagup',
      '\\diagdown',
      '\\angle',
      '\\measuredangle',
      '\\sphericalangle',
      '\\prime',
      '\\doubleprime',
      '\\backprime',
      '\\backdoubleprime',
      '\\sharp',
      '\\flat',
      '\\natural',
      '\\&',
      '\\#',
      '\\clubsuit',
      '\\spadesuit',
      '\\diamondsuit',
      '\\heartsuit',
      '\\backslash',
      '\\infty',
      '/',
      '\\_',
      '\\/',
      '|',
      "'",
  ], RARE);
  metadata('Various', ['\\unicode'], RARE, '$0{"2B1A}');
  metadata('Arrows', ['\\longrightarrow', '\\rightarrow', '\\Longrightarrow', '\\Rightarrow'], SUPERCOMMON);
  metadata('Arrows', [
      '\\longmapsto',
      '\\mapsto',
      '\\Longleftrightarrow',
      '\\rightleftarrows',
      '\\leftarrow',
      '\\curvearrowleft',
      '\\uparrow',
      '\\downarrow',
      '\\hookrightarrow',
      '\\rightharpoonup',
      '\\rightleftharpoons',
  ], COMMON);
  metadata('Arrows', [
      '\\Leftarrow',
      '\\longleftrightarrow',
      '\\longleftarrow',
      '\\Longleftarrow',
      '\\searrow',
      '\\nearrow',
      '\\swarrow',
      '\\nwarrow',
      '\\Uparrow',
      '\\Downarrow',
      '\\updownarrow',
      '\\Updownarrow',
      '\\hookleftarrow',
      '\\leftharpoonup',
      '\\leftharpoondown',
      '\\rightharpoondown',
      '\\leftrightarrows',
      '\\dashrightarrow',
      '\\dashleftarrow',
      '\\leftleftarrows',
      '\\Lleftarrow',
      '\\twoheadleftarrow',
      '\\leftarrowtail',
      '\\looparrowleft',
      '\\leftrightharpoons',
      '\\circlearrowleft',
      '\\Lsh',
      '\\upuparrows',
      '\\downharpoonleft',
      '\\multimap',
      '\\leftrightsquigarrow',
      '\\twoheadrightarrow',
      '\\rightarrowtail',
      '\\looparrowright',
      '\\curvearrowright',
      '\\circlearrowright',
      '\\Rsh',
      '\\downdownarrows',
      '\\upharpoonright',
      '\\downharpoonright',
      '\\rightsquigarrow',
      '\\leadsto',
      '\\Rrightarrow',
      '\\restriction',
  ], RARE);
  metadata('Arrows', ['\\upharpoonleft', '\\rightrightarrows'], CRYPTIC);
  // AMS Negated Arrows
  metadata('Negated Arrows', [
      '\\nrightarrow',
      '\\nRightarrow',
      '\\nleftrightarrow',
      '\\nLeftrightarrow',
      '\\nleftarrow',
      '\\nLeftarrow',
  ], RARE);
  metadata('Extensible Symbols', [
      '\\xrightarrow',
      '\\xleftarrow',
      '\\xRightarrow',
      '\\xLeftarrow',
      '\\xleftharpoonup',
      '\\xleftharpoondown',
      '\\xrightharpoonup',
      '\\xrightharpoondown',
      '\\xlongequal',
      '\\xtwoheadleftarrow',
      '\\xtwoheadrightarrow',
      '\\xleftrightarrow',
      '\\xLeftrightarrow',
      '\\xrightleftharpoons',
      '\\xleftrightharpoons',
      '\\xhookleftarrow',
      '\\xhookrightarrow',
      '\\xmapsto',
      '\\xtofrom',
      '\\xrightleftarrows',
      '\\xrightequilibrium',
      '\\xleftequilibrium',
  ], RARE, '$0[below]{above}=0');
  // AMS Negated Binary Relations
  metadata('Negated Relations', [
      '\\nless',
      '\\nleqslant',
      '\\lneq',
      '\\lneqq',
      '\\nleqq',
      '\\unlhd',
      '\\unrhd',
      '\\lvertneqq',
      '\\lnsim',
      '\\lnapprox',
      '\\nprec',
      '\\npreceq',
      '\\precnsim',
      '\\precnapprox',
      '\\nsim',
      '\\nshortmid',
      '\\nmid',
      '\\nvdash',
      '\\nvDash',
      '\\ngtr',
      '\\ngeqslant',
      '\\ngeqq',
      '\\gneq',
      '\\gneqq',
      '\\gvertneqq',
      '\\gnsim',
      '\\nsucc',
      '\\succnsim',
      '\\ncong',
      '\\nshortparallel',
      '\\nparallel',
      '\\nVDash',
      '\\nVdash',
      '\\precneqq',
      '\\succneqq',
      '\\gnapprox',
      '\\succnapprox',
      '\\nsucceq',
  ], RARE);
  // AMS Hebrew
  metadata('Hebrew', ['\\aleph', '\\beth', '\\daleth', '\\gimel'], RARE);
  metadata('Fences', [
      '\\lbrace',
      '\\rbrace',
      '\\vert',
      '\\Vert',
      '\\{',
      '\\}',
      '(',
      ')',
      '[',
      ']',
  ], SUPERCOMMON);
  metadata('Fences', [
      '\\langle',
      '\\rangle',
      '\\lfloor',
      '\\rfloor',
      '\\lceil',
      '\\rceil',
      '\\mvert',
      '\\|',
      '\\mVert',
  ], COMMON);
  metadata('Fences', [
      '\\lvert',
      '\\rvert',
      '\\lVert',
      '\\rVert',
      '\\lbrack',
      '\\rbrack',
      '\\ulcorner',
      '\\urcorner',
      '\\llcorner',
      '\\lrcorner',
      '\\lgroup',
      '\\rgroup',
      '\\lmoustache',
      '\\rmoustache',
  ], RARE);
  metadata('Relations', ['=', '\\ne', '\\neq', '<', '>', '\\leqslant', '\\geqslant', '\\approx'], SUPERCOMMON);
  metadata('Relations', [
      '\\lt',
      '\\gt',
      '\\le',
      '\\ge',
      '\\leq',
      '\\geq',
      '\\gg',
      '\\cong',
      '\\equiv',
      '\\prec',
      '\\preceq',
      '\\succ',
      '\\perp',
      '\\parallel',
      '\\propto',
      '\\smile',
      '\\frown',
      '\\sim',
      '\\gtrsim',
  ], COMMON);
  metadata('Relations', [
      '\\coloneq',
      '\\succeq',
      '\\approxeq',
      '\\thickapprox',
      '\\lessapprox',
      '\\gtrapprox',
      '\\precapprox',
      '\\succapprox',
      '\\thicksim',
      '\\succsim',
      '\\precsim',
      '\\backsim',
      '\\eqsim',
      '\\backsimeq',
      '\\simeq',
      '\\lesssim',
      '\\nleq',
      '\\ngeq',
      '\\smallsmile',
      '\\smallfrown',
      '\\bowtie',
      '\\asymp',
      '\\leqq',
      '\\eqslantless',
      '\\ll',
      '\\lll',
      '\\lessgtr',
      '\\lesseqgtr',
      '\\lesseqqgtr',
      '\\risingdotseq',
      '\\fallingdotseq',
      '\\preccurlyeq',
      '\\curlyeqprec',
      '\\vDash',
      '\\Vvdash',
      '\\bumpeq',
      '\\Bumpeq',
      '\\geqq',
      '\\eqslantgtr',
      '\\ggg',
      '\\gtrless',
      '\\gtreqless',
      '\\gtreqqless',
      '\\succcurlyeq',
      '\\curlyeqsucc',
      '\\Vdash',
      '\\shortmid',
      '\\shortparallel',
      '\\between',
      '\\pitchfork',
      '\\varpropto',
      '\\backepsilon',
      '\\llless',
      '\\gggtr',
      '\\lhd',
      '\\rhd',
      '\\Join',
      '\\doteq',
      '\\doteqdot',
      '\\Doteq',
      '\\eqcirc',
      '\\circeq',
      '\\lessdot',
      '\\gtrdot',
      '\\measeq',
      '\\eqdef',
      '\\questeq',
  ], RARE);
  metadata('Logic', ['\\leftrightarrow', '\\Leftrightarrow', '\\to'], SUPERCOMMON);
  metadata('Logic', ['\\models', '\\vdash'], COMMON);
  metadata('Logic', [
      '\\therefore',
      '\\because',
      '\\implies',
      '\\gets',
      '\\dashv',
      '\\impliedby',
      '\\biconditional',
      '\\roundimplies',
  ], RARE);
  metadata('Operators', ['+', '-', '*', '\\cdot'], SUPERCOMMON);
  metadata('Operators', ['\\sqrt'], SUPERCOMMON, '$0{\\placeholder{}}');
  metadata('Operators', ['\\pm', '\\mp', '\\times', '\\div', '\\surd'], COMMON);
  metadata('Operators', [
      '\\ltimes',
      '\\rtimes',
      '\\leftthreetimes',
      '\\rightthreetimes',
      '\\intercal',
      '\\dotplus',
      '\\centerdot',
      '\\doublebarwedge',
      '\\divideontimes',
      '\\divides',
  ], RARE);
  metadata('Logic', ['\\wedge', '\\vee', '\\neg'], SUPERCOMMON);
  metadata('Logic', ['\\lnot'], COMMON);
  metadata('Logic', [
      '\\land',
      '\\lor',
      '\\barwedge',
      '\\veebar',
      '\\nor',
      '\\curlywedge',
      '\\curlyvee',
  ], RARE);
  metadata('Greek', [
      '\\alpha',
      '\\beta',
      '\\gamma',
      '\\delta',
      '\\epsilon',
      '\\varepsilon',
      '\\zeta',
      '\\eta',
      '\\theta',
      '\\vartheta',
      '\\iota',
      '\\kappa',
      '\\varkappa',
      '\\lambda',
      '\\mu',
      '\\nu',
      '\\xi',
      '\\pi',
      '\\varpi',
      '\\rho',
      '\\varrho',
      '\\sigma',
      '\\varsigma',
      '\\tau',
      '\\phi',
      '\\varphi',
      '\\upsilon',
      '\\chi',
      '\\psi',
      '\\omega',
      '\\Gamma',
      '\\Delta',
      '\\Theta',
      '\\Lambda',
      '\\Xi',
      '\\Pi',
      '\\Sigma',
      '\\Upsilon',
      '\\Phi',
      '\\Psi',
      '\\Omega',
      '\\digamma',
      '\\omicron',
  ], COMMON);
  metadata('Sets', [
      '\\emptyset',
      '\\varnothing',
      '\\cap',
      '\\cup',
      '\\in',
      '\\notin',
      '\\subset',
      '\\supset',
      '\\subseteq',
      '\\supseteq',
      '\\sqsubseteq',
  ], SUPERCOMMON);
  metadata('Sets', [
      '\\setminus',
      '\\not',
      '\\ni',
      '\\sqsupseteq',
      '\\nsupseteqq',
      '\\supsetneq',
      '\\varsupsetneq',
      '\\supsetneqq',
      '\\varsupsetneqq',
  ], COMMON);
  metadata('Sets', [
      '\\smallsetminus',
      '\\complement',
      '\\owns',
      '\\subsetneq',
      '\\varsubsetneq',
      '\\subsetneqq',
      '\\varsubsetneqq',
      '\\nsubset',
      '\\nsupset',
      '\\nsubseteq',
      '\\nsupseteq',
      '\\nsubseteqq',
      '\\subseteqq',
      '\\Subset',
      '\\sqsubset',
      '\\supseteqq',
      '\\Supset',
      '\\sqsupset',
  ], RARE);
  metadata('Spacing', ['\\space, \\quad', '\\qquad'], COMMON, '\\unicode{"203A}$0\\unicode{"2039}');
  metadata('Spacing', ['\\!', '\\,', '\\:', '\\;', '\\enskip', '\\enspace'], RARE, '\\unicode{"203A}$0\\unicode{"2039}');
  metadata('Spacing', ['\\hspace', '\\hspace*'], RARE, '\\unicode{"203A}$0{1em}\\unicode{"2039}');
  metadata('Punctuation', [
      '\\colon',
      '\\cdotp',
      '\\ldots',
      '\\cdots',
      '\\ddots',
      '\\vdots',
      '?',
      '!',
      ':',
      '"',
      ',',
      '.',
      ';',
  ], COMMON);
  metadata('Punctuation', ['\\mathellipsis', '\\ldotp', '\\Colon'], RARE);
  metadata('Boxes', ['\\square', '\\Box'], COMMON);
  metadata('Boxes', ['\\blacksquare', '\\boxminus', '\\boxplus', '\\boxtimes', '\\boxdot'], RARE);
  metadata('Circles', ['\\circ', '\\bullet', '\\circleddash', '\\oplus', '\\otimes'], COMMON);
  metadata('Circles', [
      '\\bigcirc',
      '\\circledast',
      '\\ominus',
      '\\circledcirc',
      '\\oslash',
      '\\circledS',
      '\\circledR',
      '\\odot',
  ], RARE);
  metadata('Triangles', ['\\triangle', '\\triangleq'], COMMON);
  metadata('Triangles', [
      '\\bigtriangleup',
      '\\vartriangle',
      '\\triangledown',
      '\\bigtriangledown',
      '\\triangleleft',
      '\\vartriangleleft',
      '\\trianglelefteq',
      '\\ntriangleleft',
      '\\ntrianglelefteq',
      '\\triangleright',
      '\\vartriangleright',
      '\\trianglerighteq',
      '\\ntriangleright',
      '\\ntrianglerighteq',
      '\\blacktriangle',
      '\\blacktriangledown',
      '\\blacktriangleleft',
      '\\blacktriangleright',
  ], RARE);
  metadata('Shapes', ['\\ast', '\\star'], COMMON);
  metadata('Shapes', ['\\diamond', '\\Diamond', '\\lozenge', '\\blacklozenge', '\\bigstar'], RARE);

  var _a$1, _b$1;
  const MATHFIELD_TEMPLATE = document.createElement('template');
  MATHFIELD_TEMPLATE.innerHTML = `<style>
:host {
    display: block;
}
:host([hidden]) {
    display: none;
}
:host([disabled]) {
    opacity:  .5;
}
:host(:focus), :host(:focus-within) {
    outline: Highlight auto 1px;    /* For Firefox */
    outline: -webkit-focus-ring-color auto 1px;
}
</style>
<div></div><slot style="display:none"></slot>`;
  //
  // Deferred State
  //
  // Methods such as `setOptions()` or `getOptions()` could be called before
  // the element has been connected (i.e. `mf = new MathfieldElement(); mf.setConfig()`...)
  // and therefore before the matfield instance has been created.
  // So we'll stash any deferred operations on options (and value) here, and
  // will apply them to the element when it gets connected to the DOM.
  //
  const gDeferredState = new WeakMap();
  /**
   * The `MathfieldElement` class provides special properties and
   * methods to control the display and behavior of `<math-field>`
   * elements.
   *
   * It inherits many useful properties and methods from [[`HTMLElement`]] such
   * as `style`, `tabIndex`, `addEventListener()`, `getAttribute()`,  etc...
   *
   * To create a new `MathfieldElement`:
   *
   * ```javascript
   * // 1. Create a new MathfieldElement
   * const mfe = new MathfieldElement();
   * // 2. Attach it to the DOM
   * document.body.appendChild(mfe);
   * ```
   *
   * The `MathfieldElement` constructor has an optional argument of
   * [[`MathfieldOptions`]] to configure the element. The options can also
   * be modified later:
   *
   * ```javascript
   * // Setting options during construction
   * const mfe = new MathfieldElement({smartFence: false});
   * // Modifying options after construction
   * mfe.setOptions({smartFence: true});
   * ```
   *
   * ### CSS Variables
   *
   * To customize the appearance of the mathfield, declare the following CSS
   * variables (custom properties) in a ruleset that applied to the mathfield.
   * ```css
   * math-field {
   *  --hue: 10       // Set the highlight color and caret to a reddish hue
   * }
   * ```
   *
   * | CSS Variable | Usage |
   * |:---|:---|
   * | `--hue` | Hue of the highlight color and the caret |
   * | `--highlight` | Color of the selection |
   * | `--highlight-inactive` | Color of the selection, when the mathfield is not focused |
   * | `--caret` | Color of the caret/insertion point |
   * | `--primary` | Primary accent color, used for example in the virtual keyboard |
   * | `--text-font-family` | The font stack used in text mode |
   * | `--keyboard-zindex` | The z-index attribute of the virtual keyboard panel |
   *
   * ### CSS Parts
   *
   * To style the virtual keyboard toggle, use the `virtual-keyboard-toggle` CSS
   * part. To use it, define a CSS rule with a `::part()` selector
   * for example:
   * ```css
   * math-field::part(virtual-keyboard-toggle) {
   *  color: red;
   * }
   * ```
   *
   *
   * ### Attributes
   *
   * An attribute is a key-value pair set as part of the tag:
   *
   * ```html
   * <math-field locale="fr"></math-field>
   * ```
   *
   * The supported attributes are listed in the table below with their correspnding
   * property.
   *
   * The property can be changed either directly on the
   * `MathfieldElement` object, or using `setOptions()` if it is prefixed with
   * `options.`, for example
   * ```javascript
   *  getElementById('mf').value = '\\sin x';
   *  getElementById('mf').setOptions({horizontalSpacingScale: 1.1});
   * ```
   *
   * The values of attributes and properties are reflected, which means you can change one or the
   * other, for example:
   * ```javascript
   * getElementById('mf').setAttribute('virtual-keyboard-mode',  'manual');
   * console.log(getElementById('mf').getOption('virtualKeyboardMode'));
   * // Result: "manual"
   * getElementById('mf').setOptions({virtualKeyboardMode: 'onfocus');
   * console.log(getElementById('mf').getAttribute('virtual-keyboard-mode');
   * // Result: 'onfocus'
   * ```
   *
   * An exception is the `value` property, which is not reflected on the `value`
   * attribute: the `value` attribute remains at its initial value.
   *
   *
   * | Attribute | Property |
   * |:---|:---|
   * | `disabled` | `disabled` |
   * | `default-mode` | `options.defaultMode` |
   * | `fonts-directory` | `options.fontsDirectory` |
   * | `sounds-directory` | `options.soundsDirectory` |
   * | `horizontal-spacing-scale` | `options.horizontalSpacingScale` |
   * | `ignore-spacebar-in-math-mode` | `options.ignoreSpacbarInMathMode` |
   * | `inline-shortcut-timeout` | `options.inlineShortcutTimeout` |
   * | `keypress-vibration` | `options.keypressVibration` |
   * | `letter-shape-style` | `options.letterShapeStyle` |
   * | `locale` | `options.locale` |
   * | `read-only` | `options.readOnly` |
   * | `remove-extraneous-parentheses` | `options.removeExtraneousParentheses` |
   * | `smart-fence` | `options.smartFence` |
   * | `smart-mode` | `options.smartMode` |
   * | `smart-superscript` | `options.superscript` |
   * | `speech-engine` | `options.speechEngine` |
   * | `speech-engine-rate` | `options.speechEngineRate` |
   * | `speech-engine-voice` | `options.speechEngineVoice` |
   * | `text-to-speech-markup` | `options.textToSpeechMarkup` |
   * | `text-to-speech-rules` | `options.textToSpeechRules` |
   * | `value` | value |
   * | `virtual-keyboard-layout` | `options.keyboardLayout` |
   * | `virtual-keyboard-mode` | `options.keyboardMode` |
   * | `virtual-keyboard-theme` | `options.keyboardTheme` |
   * | `virtual-keyboards` | `options.keyboards` |
   *
   * See [[`MathfieldOptions`]] for more details about these options.
   *
   * In addition, the following [global attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes)
   * can also be used:
   * - `class`
   * - `data-*`
   * - `hidden`
   * - `id`
   * - `item*`
   * - `style`
   * - `tabindex`
   *
   *
   * ### Events
   *
   * Listen to these events by using `addEventListener()`. For events with additional
   * arguments, the arguments are availble in `event.detail`.
   *
   * | Event Name  | Description |
   * |:---|:---|
   * | `input` | The value of the mathfield has been modified. This happens on almost every keystroke in the mathfield.  |
   * | `change` | The user has commited the value of the mathfield. This happens when the user presses **Return** or leaves the mathfield. |
   * | `selection-change` | The selection (or caret position) in the mathfield has changed |
   * | `mode-change` | The mode (`math`, `text`) of the mathfield has changed |
   * | `undo-state-change` |  The state of the undo stack has changed |
   * | `read-aloud-status-change` | The status of a read aloud operation has changed |
   * | `virtual-keyboard-toggle` | The visibility of the virtual keyboard panel has changed |
   * | `blur` | The mathfield is losing focus |
   * | `focus` | The mathfield is gaining focus |
   * | `focus-out` | The user is navigating out of the mathfield, typically using the keyboard<br> `detail: {direction: 'forward' | 'backward' | 'upward' | 'downward'}` **cancellable**|
   * | `math-error` | A parsing or configuration error happened <br> `detail: ErrorListener<ParserErrorCode | MathfieldErrorCode>` |
   * | `keystroke` | The user typed a keystroke with a physical keyboard <br> `detail: {keystroke: string, event: KeyboardEvent}` |
   * | `mount` | The element has been attached to the DOM |
   * | `unmount` | The element is about to be removed from the DOM |
   *
   */
  class MathfieldElement extends HTMLElement {
      /**
         * To create programmatically a new mahfield use:
         * ```javascript
        let mfe = new MathfieldElement();
        // Set initial value and options
        mfe.value = "\\frac{\\sin(x)}{\\cos(x)}";
        // Options can be set either as an attribute (for simple options)...
        mfe.setAttribute('virtual-keyboard-layout', 'dvorak');
        // ... or using `setOptions()`
        mfe.setOptions({
            virtualKeyboardMode: 'manual',
        });
        // Attach the element to the DOM
        document.body.appendChild(mfe);
        * ```
        */
      constructor(options) {
          var _a;
          super();
          this.attachShadow({ mode: 'open' });
          this.shadowRoot.append(MATHFIELD_TEMPLATE.content.cloneNode(true));
          const slot = this.shadowRoot.querySelector('slot:not([name])');
          // When the elements get focused (through tabbing for example)
          // focus the mathfield
          this.shadowRoot.host.addEventListener('focus', (_event) => { var _a; return (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.focus(); }, true);
          this.shadowRoot.host.addEventListener('blur', (_event) => { var _a; return (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.blur(); }, true);
          // Inline options (as a JSON structure in the markup)
          try {
              const json = slot
                  .assignedElements()
                  .filter((x) => x.tagName === 'SCRIPT' &&
                  x.type === 'application/json')
                  .map((x) => x.textContent)
                  .join('');
              if (json) {
                  this.setOptions(JSON.parse(json));
              }
          }
          catch (error) {
              console.log(error);
          }
          // Record the (optional) configuration options, as a deferred state
          if (options) {
              this.setOptions(options);
          }
          // Check if there is a `value` attribute and set the initial value
          // of the mathfield from it
          if (this.hasAttribute('value')) {
              this.value = this.getAttribute('value');
          }
          else {
              this.value = (_a = slot === null || slot === void 0 ? void 0 : slot.assignedNodes().map((x) => (x.nodeType === 3 ? x.textContent : '')).join('').trim()) !== null && _a !== void 0 ? _a : '';
          }
          slot.addEventListener('slotchange', (event) => {
              if (event.target !== slot)
                  return;
              const value = slot
                  .assignedNodes()
                  .map((x) => (x.nodeType === 3 ? x.textContent : ''))
                  .join('')
                  .trim();
              if (!this._mathfield) {
                  this.value = value;
              }
              else {
                  // Don't suppress notification changes. We need to know
                  // if the value has changed indirectly through slot manipulation
                  this._mathfield.setValue(value, {
                      insertionMode: 'replaceAll',
                  });
              }
          });
      }
      /**
       * Private lifecycle hooks
       * @internal
       */
      static get optionsAttributes() {
          return {
              'default-mode': 'string',
              'fonts-directory': 'string',
              'horizontal-spacing-scale': 'string',
              'ignore-spacebar-in-math-mode': 'boolean',
              'inline-shortcut-timeout': 'string',
              'keypress-vibration': 'boolean',
              'letter-shape-style': 'string',
              'locale': 'string',
              'read-only': 'boolean',
              'remove-extraneous-parentheses': 'boolean',
              'smart-fence': 'boolean',
              'smart-mode': 'boolean',
              'smart-superscript': 'boolean',
              'speech-engine': 'string',
              'speech-engine-rate': 'string',
              'speech-engine-voice': 'string',
              'text-to-speech-markup': 'string',
              'text-to-speech-rules': 'string',
              'virtual-keyboard-layout': 'string',
              'virtual-keyboard-mode': 'string',
              'virtual-keyboard-theme': 'string',
              'virtual-keyboards': 'string',
              'use-shared-virtual-keyboard': 'boolean',
              'shared-virtual-keyboard-target-origin': 'string',
          };
      }
      /**
       * Custom elements lifecycle hooks
       * @internal
       */
      static get observedAttributes() {
          return [...Object.keys(MathfieldElement.optionsAttributes), 'disabled'];
      }
      get mode() {
          var _a;
          return (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.mode;
      }
      set mode(value) {
          if (!this._mathfield)
              return;
          this._mathfield.mode = value;
      }
      getOptions(keys) {
          if (this._mathfield) {
              return get(this._mathfield.options, keys);
          }
          if (!gDeferredState.has(this))
              return null;
          return get(update(getDefault(), gDeferredState.get(this).options), keys);
      }
      /**
       *  @category Options
       */
      getOption(key) {
          return this.getOptions([key]);
      }
      /**
       *  @category Options
       */
      setOptions(options) {
          if (this._mathfield) {
              this._mathfield.setOptions(options);
          }
          else if (gDeferredState.has(this)) {
              gDeferredState.set(this, {
                  value: gDeferredState.get(this).value,
                  selection: { ranges: [[0, -1]] },
                  options: {
                      ...gDeferredState.get(this).options,
                      ...options,
                  },
              });
          }
          else {
              gDeferredState.set(this, {
                  value: '',
                  selection: { ranges: [[0, 0]] },
                  options,
              });
          }
          // Reflect options to attributes
          reflectAttributes(this);
      }
      /**
       * Execute a [[`Commands`|command]] defined by a selector.
       * ```javascript
       * mfe.executeCommand('add-column-after');
       * mfe.executeCommand(['switch-mode', 'math']);
       * ```
       *
       * @param command - A selector, or an array whose first element
       * is a selector, and whose subsequent elements are arguments to the selector.
       *
       * Selectors can be passed either in camelCase or kebab-case.
       *
       * ```javascript
       * // Both calls do the same thing
       * mfe.executeCommand('selectAll');
       * mfe.executeCommand('select-all');
       * ```
       */
      executeCommand(command) {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.executeCommand(command)) !== null && _b !== void 0 ? _b : false;
      }
      getValue(arg1, arg2, arg3) {
          if (this._mathfield) {
              return this._mathfield.getValue(arg1, arg2, arg3);
          }
          if (gDeferredState.has(this)) {
              let start;
              let end;
              let format;
              if (isSelection(arg1)) {
                  [start, end] = arg1.ranges[0];
                  format = arg2;
              }
              else if (isRange(arg1)) {
                  [start, end] = arg1;
                  format = arg2;
              }
              else if (isOffset(arg1) && isOffset(arg2)) {
                  start = arg1;
                  end = arg2;
                  format = arg3;
              }
              else {
                  start = 0;
                  end = -1;
                  format = arg1;
              }
              if (format === 'latex' && start === 0 && end === -1) {
                  return gDeferredState.get(this).value;
              }
          }
          return undefined;
      }
      /**
       *  @category Accessing and changing the content
       */
      setValue(value, options) {
          if (this._mathfield) {
              this._mathfield.setValue(value, options);
              return;
          }
          if (gDeferredState.has(this)) {
              gDeferredState.set(this, {
                  value,
                  selection: { ranges: [[0, -1]], direction: 'forward' },
                  options: gDeferredState.get(this).options,
              });
              return;
          }
          gDeferredState.set(this, {
              value,
              selection: { ranges: [[0, -1]], direction: 'forward' },
              options: getOptionsFromAttributes(this),
          });
      }
      /**
       * Return true if the mathfield is currently focused (responds to keyboard
       * input).
       *
       * @category Focus
       *
       */
      hasFocus() {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.hasFocus()) !== null && _b !== void 0 ? _b : false;
      }
      /**
       * Sets the focus to the mathfield (will respond to keyboard input).
       *
       * @category Focus
       *
       */
      focus() {
          super.focus();
          // If (this._mathfield) {
          //     // Don't call this._mathfield.focus(): it checks the focus state,
          //     // but super.focus() just changed it...
          //     this._mathfield.keyboardDelegate.focus();
          //     this._mathfield.model.announce('line');
          // }
      }
      /**
       * Remove the focus from the mathfield (will no longer respond to keyboard
       * input).
       *
       * @category Focus
       *
       */
      blur() {
          super.blur();
          // If (this._mathfield) {
          //     // Don't call this._mathfield.focs(): it checks the focus state,
          //     // but super.blur() just changed it...
          //     this._mathfield.keyboardDelegate.blur();
          // }
      }
      /**
       * Select the content of the mathfield.
       * @category Selection
       */
      select() {
          var _a;
          (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.select();
      }
      /**
       * Inserts a block of text at the current insertion point.
       *
       * This method can be called explicitly or invoked as a selector with
       * `executeCommand("insert")`.
       *
       * After the insertion, the selection will be set according to the
       * `options.selectionMode`.
       *
       *  @category Accessing and changing the content
       */
      insert(s, options) {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.insert(s, options)) !== null && _b !== void 0 ? _b : false;
      }
      /**
       * Updates the style (color, bold, italic, etc...) of the selection or sets
       * the style to be applied to future input.
       *
       * If there is no selection and no range is specified, the style will
       * apply to the next character typed.
       *
       * If a range is specified, the style is applied to the range, otherwise,
       * if there is a selection, the style is applied to the selection.
       *
       * If the operation is 'toggle' and the range already has this style,
       * remove it. If the range
       * has the style partially applied (i.e. only some sections), remove it from
       * those sections, and apply it to the entire range.
       *
       * If the operation is 'set', the style is applied to the range,
       * whether it already has the style or not.
       *
       * The default operation is 'set'.
       *
       * @category Accessing and changing the content
       */
      applyStyle(style, options) {
          var _a;
          return (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.applyStyle(style, options);
      }
      /**
       * The bottom location of the caret (insertion point) in viewport
       * coordinates.
       *
       * See also [[`setCaretPoint`]]
       * @category Selection
       */
      get caretPoint() {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.getCaretPoint()) !== null && _b !== void 0 ? _b : null;
      }
      set caretPoint(point) {
          var _a;
          (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.setCaretPoint(point.x, point.y);
      }
      /**
       * `x` and `y` are in viewport coordinates.
       *
       * Return true if the location of the point is a valid caret location.
       *
       * See also [[`caretPoint`]]
       * @category Selection
       */
      setCaretPoint(x, y) {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.setCaretPoint(x, y)) !== null && _b !== void 0 ? _b : false;
      }
      /**
       *  Return an array of ranges matching the argument.
       *
       * An array is always returned, but it has no element if there are no
       * matching items.
       */
      find(pattern, options) {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.find(pattern, options)) !== null && _b !== void 0 ? _b : [];
      }
      /**
       * Replace the pattern items matching the **pattern** with the
       * **replacement** value.
       *
       * If **replacement** is a function, the function is called
       * for each match and the function return value will be
       * used as the replacement.
       */
      replace(pattern, replacement, options) {
          var _a;
          (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.replace(pattern, replacement, options);
      }
      /**
       * Custom elements lifecycle hooks
       * @internal
       */
      connectedCallback() {
          if (!this.hasAttribute('role'))
              this.setAttribute('role', 'textbox');
          // This.setAttribute('aria-multiline', 'false');
          if (!this.hasAttribute('tabindex'))
              this.setAttribute('tabindex', '0');
          this._mathfield = new MathfieldPrivate(this.shadowRoot.querySelector(':host > div'), {
              onBlur: () => {
                  this.dispatchEvent(new Event('blur', {
                      cancelable: false,
                      bubbles: false,
                  }));
              },
              onContentDidChange: () => {
                  this.dispatchEvent(new Event('input', {
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              onError: (err) => {
                  this.dispatchEvent(new CustomEvent('math-error', {
                      detail: {
                          code: err.code,
                          arg: err.arg,
                          latex: err.latex,
                          before: err.before,
                          after: err.after,
                      },
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              onFocus: () => {
                  this.dispatchEvent(new Event('focus', {
                      cancelable: false,
                      bubbles: false,
                  }));
              },
              onKeystroke: (_sender, keystroke, ev) => {
                  return this.dispatchEvent(new CustomEvent('keystroke', {
                      detail: {
                          keystroke,
                          event: ev,
                      },
                      cancelable: true,
                      bubbles: true,
                  }));
              },
              onModeChange: (_sender, _mode) => {
                  this.dispatchEvent(new Event('mode-change', {
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              onCommit: (_sender) => {
                  // Match the DOM event sent by `<input>`, `<textarea>`, etc...
                  // Sent when the [Return] or [Enter] key is pressed, or on
                  // focus loss if the content has changed.
                  this.dispatchEvent(new Event('change', {
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              onMoveOutOf: (_sender, direction) => {
                  return this.dispatchEvent(new CustomEvent('focus-out', {
                      detail: { direction },
                      cancelable: true,
                      bubbles: true,
                  }));
              },
              onTabOutOf: (_sender, direction) => {
                  return this.dispatchEvent(new CustomEvent('focus-out', {
                      detail: { direction },
                      cancelable: true,
                      bubbles: true,
                  }));
              },
              onReadAloudStatus: () => {
                  this.dispatchEvent(new Event('read-aloud-status-change', {
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              onSelectionDidChange: () => {
                  this.dispatchEvent(new Event('selection-change', {
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              onUndoStateDidChange: () => {
                  this.dispatchEvent(new Event('undo-state-change', {
                      cancelable: false,
                      bubbles: true,
                  }));
              },
              ...getOptionsFromAttributes(this),
              ...(gDeferredState.has(this) ? gDeferredState.get(this).options : {}),
          });
          this.upgradeProperty('disabled');
          // The mathfield creation could have failed
          if (!this._mathfield || !this._mathfield.model) {
              this._mathfield = null;
              return;
          }
          // This._mathfield.field.parentElement.addEventListener(
          //     'focus',
          //     (_event) => this._mathfield.focus(),
          //     true
          // );
          // this._mathfield.field.parentElement.addEventListener(
          //     'blur',
          //     (_event) => this._mathfield.blur(),
          //     true
          // );
          if (gDeferredState.has(this)) {
              this._mathfield.model.deferNotifications({ content: false, selection: false }, () => {
                  this._mathfield.setValue(gDeferredState.get(this).value);
                  this._mathfield.selection = gDeferredState.get(this).selection;
                  gDeferredState.delete(this);
              });
          }
          // Notify listeners that we're mounted and ready
          this.dispatchEvent(new Event('mount', {
              cancelable: false,
              bubbles: true,
          }));
      }
      /**
       * Custom elements lifecycle hooks
       * @internal
       */
      disconnectedCallback() {
          // Notify listeners that we're about to be unmounted
          this.dispatchEvent(new Event('unmount', {
              cancelable: false,
              bubbles: true,
          }));
          if (!this._mathfield)
              return;
          // Save the state (in case the elements get reconnected later)
          const options = {};
          Object.keys(MathfieldElement.optionsAttributes).forEach((x) => {
              options[toCamelCase(x)] = this._mathfield.getOption(toCamelCase(x));
          });
          gDeferredState.set(this, {
              value: this._mathfield.getValue(),
              selection: this._mathfield.selection,
              options,
          });
          // Dispose of the mathfield
          this._mathfield.dispose();
          this._mathfield = null;
      }
      /**
       * Private lifecycle hooks
       * @internal
       */
      upgradeProperty(prop) {
          if (this.hasOwnProperty(prop)) {
              const value = this[prop];
              // A property may have already been set on the object, before
              // the element was connected: delete the property (after saving its value)
              // and use the setter to (re-)set its value.
              delete this[prop];
              this[prop] = value;
          }
      }
      /**
       * Custom elements lifecycle hooks
       * @internal
       */
      attributeChangedCallback(name, oldValue, newValue) {
          if (oldValue === newValue)
              return;
          const hasValue = newValue !== null;
          switch (name) {
              case 'disabled':
                  this.disabled = hasValue;
                  break;
          }
      }
      get disabled() {
          return this.hasAttribute('disabled');
      }
      set disabled(value) {
          const isDisabled = Boolean(value);
          if (isDisabled)
              this.setAttribute('disabled', '');
          else
              this.removeAttribute('disabled');
          this.setAttribute('aria-disabled', isDisabled ? 'true' : 'false');
          this.setOptions({ readOnly: isDisabled });
      }
      /**
       * The content of the mathfield as a Latex expression.
       * ```
       * document.querySelector('mf').value = '\\frac{1}{\\pi}'
       * ```
       *  @category Accessing and changing the content
       */
      get value() {
          return this.getValue();
      }
      /**
       *  @category Accessing and changing the content
       */
      set value(value) {
          this.setValue(value);
      }
      /**
       * An array of ranges representing the selection.
       *
       * It is guaranteed there will be at least one element. If a discontinuous
       * selection is present, the result will include more than one element.
       *
       * @category Selection
       *
       */
      get selection() {
          if (this._mathfield) {
              return this._mathfield.selection;
          }
          if (gDeferredState.has(this)) {
              return gDeferredState.get(this).selection;
          }
          return { ranges: [[0, 0]], direction: 'forward' };
      }
      /**
       *
       * @category Selection
       */
      set selection(value) {
          if (this._mathfield) {
              this._mathfield.selection = value;
          }
          if (gDeferredState.has(this)) {
              gDeferredState.set(this, {
                  value: gDeferredState.get(this).value,
                  selection: value,
                  options: gDeferredState.get(this).options,
              });
              return;
          }
          gDeferredState.set(this, {
              value: '',
              selection: value,
              options: getOptionsFromAttributes(this),
          });
      }
      /**
       * The position of the caret/insertion point, from 0 to `lastOffset`.
       *
       * @category Selection
       *
       */
      get position() {
          return this._mathfield.model.position;
      }
      /**
       * @category Selection
       */
      set position(offset) {
          this._mathfield.model.position = offset;
      }
      /**
       * The last valid offset.
       * @category Selection
       */
      get lastOffset() {
          var _a, _b;
          return (_b = (_a = this._mathfield) === null || _a === void 0 ? void 0 : _a.lastOffset) !== null && _b !== void 0 ? _b : -1;
      }
  }
  function toCamelCase(s) {
      return s.toLowerCase().replace(/[^a-zA-Z\d]+(.)/g, (m, c) => c.toUpperCase());
  }
  function reflectAttributes(element) {
      const defaultOptions = getDefault();
      const options = element.getOptions();
      Object.keys(MathfieldElement.optionsAttributes).forEach((x) => {
          const prop = toCamelCase(x);
          if (defaultOptions[prop] !== options[prop]) {
              if (MathfieldElement.optionsAttributes[x] === 'boolean') {
                  if (options[prop]) {
                      // Add attribute
                      element.setAttribute(x, '');
                  }
                  else {
                      // Remove attribute
                      element.removeAttribute(x);
                  }
              }
              else {
                  // Set attribute (as string)
                  element.setAttribute(x, options[prop].toString());
              }
          }
      });
  }
  // Function toKebabCase(s: string): string {
  //     return s
  //         .match(
  //             /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g
  //         )
  //         .map((x: string) => x.toLowerCase())
  //         .join('-');
  // }
  function getOptionsFromAttributes(mfe) {
      const result = {};
      const attribs = MathfieldElement.optionsAttributes;
      Object.keys(attribs).forEach((x) => {
          if (mfe.hasAttribute(x)) {
              const value = mfe.getAttribute(x);
              if (attribs[x] === 'boolean') {
                  result[toCamelCase(x)] = true;
              }
              else if (attribs[x] === 'number') {
                  result[toCamelCase(x)] = Number.parseFloat(value);
              }
              else {
                  result[toCamelCase(x)] = value;
              }
          }
          else if (attribs[x] === 'boolean') {
              result[toCamelCase(x)] = false;
          }
      });
      return result;
  }
  if (!((_a$1 = window.customElements) === null || _a$1 === void 0 ? void 0 : _a$1.get('math-field'))) {
      window.MathfieldElement = MathfieldElement;
      (_b$1 = window.customElements) === null || _b$1 === void 0 ? void 0 : _b$1.define('math-field', MathfieldElement);
  }

  function makeMathField(element, options = {}) {
      var _a, _b;
      options.speakHook = (_a = options.speakHook) !== null && _a !== void 0 ? _a : defaultSpeakHook;
      options.readAloudHook = (_b = options.readAloudHook) !== null && _b !== void 0 ? _b : defaultReadAloudHook;
      return new MathfieldPrivate(getElement(element), options);
  }
  function makeSharedVirtualKeyboard(options) {
      new RemoteVirtualKeyboard(options);
  }
  function convertLatexToMathlist(latex, options) {
      var _a, _b;
      options = options !== null && options !== void 0 ? options : {};
      options.macros = (_a = options.macros) !== null && _a !== void 0 ? _a : {};
      options.macros = { ...MACROS, ...((_b = options.macros) !== null && _b !== void 0 ? _b : {}) };
      const mathlist = parseLatex(latex, 'math', null, options.macros, false, options.onError);
      return mathlist;
  }
  /** @deprecated */
  function latexToMarkup$2(text, options) {
      return convertLatexToMarkup(text, options);
  }
  function convertLatexToMarkup(text, options) {
      var _a;
      options = options !== null && options !== void 0 ? options : {};
      options.mathstyle = options.mathstyle || 'displaystyle';
      options.letterShapeStyle = options.letterShapeStyle || 'auto';
      options.macros = { ...MACROS, ...((_a = options.macros) !== null && _a !== void 0 ? _a : {}) };
      //
      // 1. Parse the formula and return a tree of atoms, e.g. 'genfrac'.
      //
      const atoms = parseLatex(text, 'math', null, options.macros, false, options.onError);
      if (options.onCreateMathlist) {
          options.onCreateMathlist(atoms);
      }
      //
      // 2. Transform the math atoms into elementary spans
      //    for example from genfrac to vlist.
      //
      let spans = Atom.render({
          mathstyle: MATHSTYLES[options.mathstyle],
          letterShapeStyle: options.letterShapeStyle,
      }, atoms);
      //
      // 3. Simplify by coalescing adjacent nodes
      //    for example, from <span>1</span><span>2</span>
      //    to <span>12</span>
      //
      spans = coalesce(spans);
      //
      // 4. Wrap the expression with struts
      //
      const wrapper = makeStruts(new Span(spans, 'ML__base'), 'ML__mathlive');
      //
      // 5. Generate markup
      //
      return wrapper.toMarkup({ hscale: 1 });
  }
  function convertLatexToMathMl(latex, options = {}) {
      var _a;
      options.macros = { ...MACROS, ...((_a = options.macros) !== null && _a !== void 0 ? _a : {}) };
      return atomsToMathML(parseLatex(latex, 'math', [], options.macros, false, options.onError), options);
  }
  /** @deprecated */
  function latexToMathML(latex, options) {
      return convertLatexToMathMl(latex, options);
  }
  /** @deprecated Use MathJSON */
  function latexToAST(latex, options) {
      var _a;
      options = options !== null && options !== void 0 ? options : {};
      options.macros = { ...MACROS, ...((_a = options.macros) !== null && _a !== void 0 ? _a : {}) };
      // Return parseLatex(latex, options);
      return atomtoMathJson(parseLatex(latex, 'math', null, options.macros, false, options.onError), options);
  }
  /** @deprecated Use MathJSON */
  function astToLatex(expr, options) {
      return jsonToLatex(typeof expr === 'string' ? JSON.parse(expr) : expr, options);
      // Return emitLatex(expr, options);
  }
  function convertLatexToSpeakableText(latex, options = {}) {
      var _a;
      options.macros = (_a = options.macros) !== null && _a !== void 0 ? _a : {};
      Object.assign(options.macros, MACROS);
      const mathlist = parseLatex(latex, 'math', null, options.macros, false, options.onError);
      return atomToSpeakableText(mathlist, options);
  }
  /** @deprecated */
  function latexToSpeakableText(latex, options) {
      return convertLatexToSpeakableText(latex, options);
  }
  function renderMathInDocument(options) {
      renderMathInElement$1(document.body, options);
  }
  function getElement(element) {
      if (typeof element === 'string') {
          const result = document.getElementById(element);
          if (result === null) {
              throw new Error(`The element with ID "${element}" could not be found.`);
          }
          return result;
      }
      return element;
  }
  function renderMathInElement$1(element, options) {
      var _a, _b, _c, _d;
      options = options !== null && options !== void 0 ? options : {};
      options.renderToMarkup = (_a = options.renderToMarkup) !== null && _a !== void 0 ? _a : convertLatexToMarkup;
      options.renderToMathML = (_b = options.renderToMathML) !== null && _b !== void 0 ? _b : convertLatexToMathMl;
      options.renderToSpeakableText = (_c = options.renderToSpeakableText) !== null && _c !== void 0 ? _c : convertLatexToSpeakableText;
      options.macros = (_d = options.macros) !== null && _d !== void 0 ? _d : MACROS;
      AutoRender.renderMathInElement(getElement(element), options);
  }
  function validateNamespace(options) {
      if (typeof options.namespace === 'string') {
          if (!/^[a-z]+-?$/.test(options.namespace)) {
              throw new Error('options.namespace must be a string of lowercase characters only');
          }
          if (!options.namespace.endsWith('-')) {
              options.namespace += '-';
          }
      }
  }
  /** @deprecated */
  function revertToOriginalContent(element, options) {
      var _a;
      deprecatedDefaultImport('revertToOriginalContent');
      //  If (element instanceof MathfieldPrivate) {
      //      element.$revertToOriginalContent();
      //    } else {
      // element is a pair: accessible span, math -- set it to the math part
      element = getElement(element).children[1];
      options = options !== null && options !== void 0 ? options : {};
      validateNamespace(options);
      const html = element.getAttribute('data-' + ((_a = options.namespace) !== null && _a !== void 0 ? _a : '') + 'original-content');
      element.innerHTML =
          typeof options.createHTML === 'function' ? options.createHTML(html) : html;
      //  }
  }
  /** @deprecated */
  function getOriginalContent(element, options) {
      var _a;
      deprecatedDefaultImport('getOriginalContent');
      if (element instanceof MathfieldPrivate) {
          return element.originalContent;
      }
      // Element is a pair: accessible span, math -- set it to the math part
      element = getElement(element).children[1];
      options = options !== null && options !== void 0 ? options : {};
      validateNamespace(options);
      return element.getAttribute('data-' + ((_a = options.namespace) !== null && _a !== void 0 ? _a : '') + 'original-content');
  }
  // This SDK_VERSION variable will be replaced during the build process.
  const version = '0.59.0';
  function deprecated$1(method, remedy) {
      console.warn(`"${method}" is deprecated. 
${remedy !== null && remedy !== void 0 ? remedy : ''}`);
  }
  function deprecatedDefaultImport(method) {
      console.warn(`Using "${method}" as a default import is deprecated.
Instead of
    import Mathlive from 'mathlive';
    ${method}(...);
use
   import ${method} from 'mathlive;
   ${method}(...)  
`);
  }
  const debug = {
      getStyle: MathliveDebug.getStyle,
      getType: MathliveDebug.getType,
      spanToString: MathliveDebug.spanToString,
      hasClass: MathliveDebug.hasClass,
      latexToAsciiMath,
      asciiMathToLatex,
      FUNCTIONS: MathliveDebug.FUNCTIONS,
      MATH_SYMBOLS: MathliveDebug.MATH_SYMBOLS,
      TEXT_SYMBOLS: MathliveDebug.TEXT_SYMBOLS,
      ENVIRONMENTS: MathliveDebug.ENVIRONMENTS,
      MACROS: MathliveDebug.MACROS,
      DEFAULT_KEYBINDINGS: MathliveDebug.DEFAULT_KEYBINDINGS,
      getKeybindingMarkup: MathliveDebug.getKeybindingMarkup,
  };
  var mathlive = {
      version: () => {
          deprecatedDefaultImport('version');
          return version;
      },
      latexToMarkup: (text, options) => {
          deprecatedDefaultImport('latexToMarkup');
          return latexToMarkup$2(text, options);
      },
      latexToMathML: (latex, options) => {
          deprecatedDefaultImport('latexToMathML');
          return latexToMathML(latex, options);
      },
      latexToSpeakableText: (latex, options) => {
          deprecatedDefaultImport('latexToSpeakableText');
          return latexToSpeakableText(latex, options);
      },
      latexToAST: (latex, options) => {
          deprecated$1('latexToAST', 'Use MathJSON.');
          return latexToAST(latex, options);
      },
      astToLatex: (expr, options) => {
          deprecated$1('astToLatex', 'Use MathJSON.');
          return astToLatex(expr, options);
      },
      makeMathField: (element, options) => {
          deprecatedDefaultImport('makeMathField');
          return makeMathField(element, options);
      },
      renderMathInDocument: (options) => {
          deprecatedDefaultImport('renderMathInDocument');
          renderMathInDocument(options);
      },
      renderMathInElement: (element, options) => {
          deprecatedDefaultImport('renderMathInElement');
          renderMathInElement$1(element, options);
      },
      revertToOriginalContent: (element, options) => {
          deprecatedDefaultImport('revertToOriginalContent');
          revertToOriginalContent(element, options);
      },
      getOriginalContent: (element, options) => {
          deprecatedDefaultImport('getOriginalContent');
          getOriginalContent(element, options);
      },
      readAloud: (element, text, config) => {
          deprecatedDefaultImport('readAloud');
          return defaultReadAloudHook(element, text, config);
      },
      readAloudStatus: () => {
          deprecatedDefaultImport('readAloudStatus');
          return readAloudStatus();
      },
      pauseReadAloud: () => {
          deprecatedDefaultImport('pauseReadAloud');
          pauseReadAloud();
      },
      resumeReadAloud: () => {
          deprecatedDefaultImport('resumeReadAloud');
          resumeReadAloud();
      },
      playReadAloud: (token, count) => {
          deprecatedDefaultImport('playReadAloud');
          playReadAloud(token, count);
      },
  };

  exports.Atom = Atom;
  exports.MathfieldElement = MathfieldElement;
  exports.astToLatex = astToLatex;
  exports.convertLatexToMarkup = convertLatexToMarkup;
  exports.convertLatexToMathMl = convertLatexToMathMl;
  exports.convertLatexToMathlist = convertLatexToMathlist;
  exports.convertLatexToSpeakableText = convertLatexToSpeakableText;
  exports.debug = debug;
  exports.default = mathlive;
  exports.makeMathField = makeMathField;
  exports.makeRoot = makeRoot;
  exports.makeSharedVirtualKeyboard = makeSharedVirtualKeyboard;
  exports.renderMathInDocument = renderMathInDocument;
  exports.renderMathInElement = renderMathInElement$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
